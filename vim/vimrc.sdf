" Last Edit: 2013 Apr 14, 02:50:06 PM

" I sourced this from $HOME/share/vim, using same vimrc on other platforms,
" but now I've changed my mind, FTPing wrong file many times
" $V/myvimrc still exists but will get out of date
" source $V/myvimrc


" Vim
" An example for a vimrc file.
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"             for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"VIM must be set within vim, because :ec $VIM still returns ~/share/vim

"if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
"   set fileencodings=utf-8,latin1
"endif

"ucs-bom,utf-8,default,latin1" is default when encoding is utf-8
se fileencodings-=latin1
se fileencodings-=default
se fileencodings+=big5
se fileencodings+=default
se fileencodings+=latin1

"set verbose=9		"for testing autocommands
set nocompatible	" Use Vim defaults (much better!)
set comments=b:#,:%,fb:-,n:>,n:) "plus sr:/*,mb:*,el:*/,://,:XCOMM,
" set   cpoptions="aABceFs"   "default! to match vi-behavior
" set formatoptions=cqrt2	"for gq formatting
set formatoptions=toncqrw	"for gq formatting
"set iskeyword-=-
set iskeyword=@,48-57,_,192-255,.,@-@	"- motion separator (why not work?
"set iskeyword=@,48-57,_,192-255,-,.,@-@	"default
set title
"set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%) "Bram's
set titlestring=%t%(\ %M%)%(\ [%{expand(\"%:p:h\")}]%)%(\ %a%)

set bs=2		" allow backspacing over everything in insert mode
set nostartofline	" page-changing commands don't change column
set wrap		" display long lines on next
set linebreak		" wrap long lines at break
set showbreak=+		" show long line is continued with Mutt's +
set whichwrap=b,s,h,l,<,>,[,]	" keys move to next line
set tildeop		" ~ behaves like operator
set ai			" always set autoindenting on
set backup		" keep a backup file
set viminfo='20,\"50	" .viminfo file, 50 lines of registers
if version >= 507
	set viminfo='20,\"50,h,!	"no old hlsearch
	endif
se history=500		" Ex commands, search patterns

se wildchar=<Tab>	" for expansion of command line
"se wildignore=*~,	" files not seen in command line expansion
" set formatoptions=tcroq2	"for gq formatting

se timeoutlen=100	" how long to wait before default disambiguation
se showmatch 		" signals matching brackets
se showmode		" in LLH corner
se ttyfast		" smoothness of drawing, extra characters, copy help

set   laststatus=2	" always with a status line on last window, too 
set showcmd		" show command in progress
set nonumber		" number on left side, I think
se helpheight=0		" sets the minimum height of help when opened
set winminheight=0	"non-focused window reduced to status bar

"Colors
"set term=screen
"set t_Co=8
"set t_Sf=^[[3%dm
"set t_Sb=^[[4%dm

if has("unix")
        "let is_bash = 'bash'
        "let &shell = '/bin/bash'
        "let &term = $TERM      "default, & if not defined, =ansi
        "cab vrc ~/.vimrc
        nnoremap \v :confirm e ~/.vimrc<CR>
        nnoremap \u :source ~/.vimrc<CR>
        if hostname() != "ms" || hostname() != "ms1"
                "let &shell = '/usr/bin/bash' "cygwin .exe screws shellpipe
                "let &shellpipe = '2>&1| tee'
                endif
elseif has("win32")
	cd a:/
	"let is_bash = 'bash'
	"abbreviations for calling up files
	cab vrc A:/myvimrc
	nnoremap \v :confirm e A:/myvimrc<CR>
	nnoremap \u :source $V/_vimrc<CR>


	set dir=$V	" on hard drive, A: slows swp file writing down
	endif

" " Changing myvimrc " Sven Guckes way
" 
"   if has("unix")
"     let vimrc='~/myvimrc'
"   else
" " ie:  if has("dos16") || has("dos32") || has("win32")
"     let vimrc='$VIM\myvimrc'
"   endif
" "     \u = "update" by reading this file
" noremap  \u :source <C-R>=vimrc<CR><CR>
" "     \v = vimrc editing (edit this file)
" noremap  \v :edit   <C-R>=vimrc<CR><CR>
" "or use abbreviations for the command line
" cab rc <C-R>=vimrc<CR><CR>

set path=.,		" path for files accessed by gf, etc
"set runtimepath=~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim63,/usr/share/vim/vimfiles/after,~/.vim/after	"fedora 3 got it wrong

se report=0		"show changes in file
se ruler		" show column, line

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
"map Q gq

" 980527 I often reformat a paragraph to fit some textwidth -
" and I use the following mapping to adjust it to the
" current position of the cursor:
  map \tw :set textwidth=<C-R>=col(".")<C-M>

"abbreviations for typos
iab teh the

"problems with <shift-space> on DOS Chinese input
"imap <f4> <esc>BlcW
"imap OS <esc>BlcW

"Dates NEEDS WORK!!
"if !has("unix")
iab YDATE <C-R>=strftime("%a %b %d %T %Z %Y")<CR>
"iab YDATE <C-R>=date<CR>
"endif
" Example: Tue Dec 16 12:07:00 CET 1997

"Mappings

" Toggles no/paste and reports it
" map \P :set paste!<CR>: se paste?<CR>
" pastetoggle for inside insert mode
se pastetoggle=<LocalLeader>P
" <c-a> is used in screen
map <LocalLeader>A <C-A>

"Some other shortcuts to files I edit a lot

noremap \mm :confirm edit ~/.muttrc<CR>
noremap \mk :confirm edit ~/.mutt/keybind-1.2i<CR>
"noremap \m :!~/bin/mutt		"useful for starting mutt
noremap \b :confirm edit ~/.bashrc<CR>
noremap \s :confirm edit ~/.shrc<CR>
noremap \cs :confirm edit ~/.cshrc<CR>
noremap \p :confirm edit ~/.procmailrc<CR>

"Search stuff

" 980706  Sourcing syntax files from the distribution
" A nice and fast way to both source syntax files 
" and to take a look at "what's there"
  map \V  :so $V/vim55/syntax/

" My syntax file goes before syntax on
" this won't work for non-root user
" let mysyntaxfile = "/usr/home/lang/share/vim/mysyntax.vim"
" let myfiletypefile = "/usr/home/lang/share/vim/myfiletypes.vim"
let myfiletypefile = "$VIMRUNTIME/myfiletype.vim"

" from :h vimrc-filetype
filetype plugin indent on
" filetype on

" Luc Hermitte's bracketing macros for html are in ftplugin, macro & plugin.
" http://hermitte.free.fr/vim
" but his map  Â¡mark! to <M-Insert>, Â¡jump! to <M-Delete>and Â¡jumpB! to
" <M-S-Delete> are not working.

" imap <C-J> !jump!
" map <C-J> !jump!
" imap <C-K> !jumpB!
" map <C-K> !jumpB!
" imap <C-<> !mark!
" vmap <C-<> !mark!

" imap <End> <Plug>MarkersJumpF
" map <End> <Plug>MarkersJumpF
" imap <Home> <Plug>MarkersJumpB
" map <Home> <Plug>MarkersJumpB
" imap <C-<> <Plug>MarkersMark
" vmap <C-<> <Plug>MarkersMark

" imap \n <Plug>MarkersJumpF
" map \n <Plug>MarkersJumpF
" imap \p <Plug>MarkersJumpB
" map \p <Plug>MarkersJumpB
" imap \m <Plug>MarkersMark
" vmap \m <Plug>MarkersMark

imap { !{!
imap \> <Plug>MarkersJumpF
map \> <Plug>MarkersJumpF
imap \< <Plug>MarkersJumpB
map \< <Plug>MarkersJumpB
imap \m <Plug>MarkersMark
vmap \m <Plug>MarkersMark



"For better colors, specify background
"" set background=dark
set background=light

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
"if &t_Co > 2 || has("gui_running")	"necessary because of background? no
syntax on

set hlsearch	" can be turned off till next /  with :noh[lsearch]
" \h to turn off highliting completely when :noh not enuff
map \h :se hls!<CR> :se hls? <CR>
set incsearch	" highlites & moves to search string in creation
"endif

" set grepprg=ack

if &term=="xterm"
     set t_Co=8
     set t_Sb=^[4%dm
     set t_Sf=^[3%dm
endif


" Command and other mappings

" Make CTRL-^ rebound to the *column* in the previous file
  noremap <C-^> <C-^>`"
"
" Make "gf" rebound to last cursor position (line *and* column)
  noremap gf gf`"
"
" When I let Vim edit/write the current buffer I frequently mistype the
" command ":w" as ":W" - so I have to remap it to correct this typo:
  nmap :E :e
  nmap :W :w

" The command {number}CTRL-G show the current buffer number, too.
"  noremap <C-G> 2<C-G> 

" Although I love Vi, I am quite used to this kind of editing now.
" So here it is - command line editing commands in emacs style:
" Commented out because of conflicts, eg ctrl-a lists directory
" Will this create problems for Win95?
" cnoremap <C-A> <Home>
" cnoremap <C-F> <Right>
" cnoremap <C-B> <Left>
" cnoremap <C-E> <End>
" cnoremap <ESC>b <S-Left>
" cnoremap <ESC>f <S-Right>
" cnoremap <ESC><C-H> <C-W>
"
" Additional codes for that "English" keyboard at the Xterminal
"cnoremap <ESC>[D <Left>
"cnoremap <ESC>[C <Right>

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" User commands example
" returns no of lines in range, visual area, between marks
com! -range -nargs=0 Lines :echo <line2> - <line1> + 1


" Email editing

iab loc Where were you trying from? Off-campus or on-campus?Were you using the 203.64.184.141:3000 address or the e_learning.nuu.edu.tw:3000 one?The new address is http://e_learning.nuu.edu.twYou can start from http://web.nuu.edu.tw/~greg/DictationExercises

iab logonhelp Come to the Self-Access Learning Room if you want some help logging in.Where are you using the computer? Do you have the right password?Are you starting from http://web.nuu.edu.tw/~greg/DictationExercisesHave you tried turning off the computer (or closing Internet Explorer) and starting again.Are you using Internet Explorer?

iab humanum http://humanum.arts.cuhk.edu.hk/Lexis/Lindict

iab webgreg http://web.nuu.edu.tw/~greg/DictationExercises
iab webshop http://e_learning.nuu.edu.tw/cgi-bin/shop/script_files/shop_cgi.pl/

iab whatcanido Try listening to the MP3 file, if you have some time.It's difficult. Ask me a question if you don't understand.Or try to log in again later in the week. It should be fixed now.

iab newex I changed the exercises.If you want to do the old exercises, tell me and I will tell you how to do it.But you don't have to do the old exercises. I will not grade them.I will grade the new exercises. I want you to spend 30-40 minutes on them.There is a lot to  listen to. I don't expect you to finish all of them. Just listen for 30-40 minutes.

"shorten [cut]
ino [c [cut]
" removes > in front of blank lines in quoted mail
nmap \cq :%s/^[><C-I> ]\+$//e<CR>
vmap \cq  :s/^[><C-I> ]\+$//e<CR>

" toggle im for quick emails
" nmap \i :set insertmode!<CR> :set insertmode?<CR>

" quote visually-selected section
vmap \qp :s/^/> /<CR>
"map \qp :'q,.s/^/> /<CR>
"map \qp vip:s/^/> /<CR>

vmap \dp :s/^> //<CR>

" prevent das deleting quote mark
map \das dasi> <ESC>

" delete, change rest of email message, except my signature
map \dG :.,$-5d<CR>
" map \cG mXG5kmY`xd`YO<CR>
map \cG y0:.,$-5d<CR>"0Pa<CR><CR><CR><CR><Up><Up>
" map \cG :.,$-5d<CR>i<CR>

" Bram's signature-choosing mapping. Uses mark X
" map \S mX:sp ~/.fortunes<CR>ggd/^--/<CR>Gp:wq<CR>'XGA<CR><Esc>p`X
nn <Leader>D IDivide it into sections.---1.---2.---3.

"      \ri = "Read in" basic lines from the email header NEEDS WORK
"            Useful when replying to an email:
"nmap \ri :r!readmsg \|egrep '^From:\|^Subject:\|^Date:\|^To:\|^Cc:'
"            NOTE: "readmsg" ships with the mailer ELM.

cab HEMAIL ^\(From\\|Cc\\|To\\|Date\\|Subject\\|Message-ID\\|Message-Id\\|X-\)
nmap \we vip:v/HEMAIL/d
vmap \we    :v/HEMAIL/d

" for gqap formatting in INSERT
imap gqap <C-O>gqap

" join line in commented/quoted text and formats it. This is breaking something.
"nmap J Vjgq

"words=changes. u undoes. do \h first.
map \wc :%s/[^ <Tab>]\+/&/g<CR>``


"autocmds

augroup mutt
au!

" Brams signature changing mapping. Didn't work in autocmd with <F3>
" with BufNewFile or whatever
autocmd BufNewFile /tmp/mutt* normal \S
"autocmd BufReadPost /tmp/mutt* if search('charset="\?big5"\?', 'w') == 1 |
"			\ set fenc=big5 | endif

"I did this better before
autocmd BufRead /tmp/mutt* %s/^[><C-I> ]\+$//
"autocmd BufRead /tmp/mutt* normal \cq
autocmd BufRead /tmp/mutt* set tw=65 
" DOS terminal problem with <shift+space>
autocmd BufRead /tmp/mutt* imap <f4> <esc>BlcW
" \S,\M macros to make folder-hook index returners
" replaced now with perl script
autocmd BufRead ~/.muttrc map \S {O<CR>folder-hook . 'macro index h <lt>change-folder>?<lt>tab><lt>jump><lt>enter>0<lt>enter>'<CR><Esc>kma/^mailboxes '!'<CR>
autocmd BufRead ~/.muttrc map \M f lmb"yyiW'ayypWmaciWy/\d\A`b\M
"autocmd FileType mail source $V/bracketing.no-meta.vim
" Sec Zehl's mappings for mail templates
"autocmd FileType mail source $V/mail.mac
"autocmd BufRead /tmp/mutt* set dir=$HOME

" reply, quoting message
autocmd BufRead /tmp/mutt* if getline(1) =~ '^On.*wrote:$'
"autocmd BufRead /tmp/mutt* normal G?^> -- $<CR>d/^-- $/<CR>
autocmd BufRead /tmp/mutt* 	normal \cq1Go
" autocmd BufRead /tmp/mutt* set formatoptions=tcq2
" c in format options continues the comment to the next line
autocmd BufRead /tmp/mutt* set formatoptions=tq2
au BufRead /tmp/mutt* normal :g/^> -- $/,/^$/-1d/^$
"boiler plate for students [uses register r]
"autocmd BufRead /tmp/mutt*      normal ggOr
"put cursor below quoted message
"autocmd BufRead /tmp/mutt*	normal G5k

" new message, reply without quoting
"sometimes postponed message has blank first line problem
autocmd BufRead /tmp/mutt* elseif (getline(1) =~ '^$') 
"autocmd BufRead /tmp/mutt*      set insertmode
"autocmd BufRead /tmp/mutt*      startinsert 
"not until script ended problem

" postponed message [or reply to listserv, etc]
autocmd BufRead /tmp/mutt* else
autocmd BufRead /tmp/mutt*      1
autocmd BufRead /tmp/mutt* endif

autocmd BufRead *mutt*    map <F1> :!less /home/lang/bin/doc/mutt/manual.txt<CR>
autocmd BufRead *mutt*    map <F2> :!lynx file://localhost/home/lang/manual/index.html<CR>

" Deletes signature from replied to emails in mutt (but requires <CR>)
"au BufRead /tmp/mutt* normal :g/^> -- $/,/^$/-1d/^$

"nmap \m :g/^> -- $/,/^$/-1d
augroup END 

augroup text
au!

autocmd FileType text set tw=78	
" DOS terminal problem with <shift+space>
autocmd FileType text imap <f4> <esc>BlcW
autocmd FileType text ino _  _________
autocmd FileType text source ~lang/share/vim/bracks.vim
augroup END

" augroup html
" au!
" 
" autocmd FileType html source ~lang/share/vim/bracks.vim
" augroup end

augroup edup
	au!

" Edit time updater
" au BufWrite * call StampFileEditTime()
" 
" There is the StampFileEditTime and a support fn, SubstLine below.
" 
" alan kelly
" 
" Perform substitution on the existing line
" args :linenum s/pat/rep/flags
fu! SubstLine ( linenum, pat, rep, flags )
    let thislineStr = getline( a:linenum )
    let thislineStr = substitute( thislineStr, a:pat, a:rep, a:flags )
    call setline( a:linenum, thislineStr )
endf

" It requires a .vimrc entry like:
" au BufWrite * call StampFileEditTime()
function! StampFileEditTime()
    let pat = '^\(.*Last Edit:\).*'
    let rep = '\1 '.strftime('%Y %b %d, %X')
    " Try the first 5 lines
    let lineno = 0
    while lineno <= 5
	call SubstLine (lineno,pat,rep,"")
	let lineno = lineno + 1
    endwhile
    " Try the last line
    let lineno = line("$")
    call SubstLine (lineno,pat,rep,"")
endfunction
	autocmd BufWrite * call StampFileEditTime()
augroup END

" augroup cprog
"   " Remove all cprog autocommands
"   au!
" 
"   " When starting to edit a file:
"   "   For *.c and *.h files set formatting of comments and set C-indenting on.
"   "   For other files switch it off.
"   "   Don't change the order, it's important that the line with * comes first.
"   autocmd BufRead *       set formatoptions=tcql nocindent comments&
"   autocmd BufRead *.c,*.h set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
" augroup END

"WINDOWS MANAGEMENT
set hidden	" should be hiding, not hidden (need to be careful with this)

  " Uses autocmd to give more lines to the window moved into
" augroup widewin
"   " Remove all widewin autocommands (looks like comment can't be on same line)
"   au!	
" 
"   autocmd WinEnter *  resize  +6
" augroup END

"removes help files from buffer list
augroup help
au!
" au BufUnload,BufHidden * if &filetype == "help" | bdel | endif
" au BufUnload * if &filetype == "help" | bdel | endif
augroup END

"New way of unzipping files
augroup gzip
"  " Remove all gzip autocommands
au!
"
"  " Enable editing of gzipped files
"  "	  read:	set binary mode before reading the file
"  "		uncompress text in buffer after reading
"  "	 write:	compress file after writing
"  "	append:	uncompress file, append, compress file
"  autocmd BufReadPre,FileReadPre	*.gz set bin
"  autocmd BufReadPost,FileReadPost	*.gz let ch_save = &ch|set ch=2
"  autocmd BufReadPost,FileReadPost	*.gz '[,']!gunzip
"  autocmd BufReadPost,FileReadPost	*.gz set nobin
"  autocmd BufReadPost,FileReadPost	*.gz let &ch = ch_save|unlet ch_save
"  autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . expand("%:r")
"
"  autocmd BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
"  autocmd BufWritePost,FileWritePost	*.gz !gzip <afile>:r
"
"  autocmd FileAppendPre			*.gz !gunzip <afile>
"  autocmd FileAppendPre			*.gz !mv <afile>:r <afile>
"  autocmd FileAppendPost		*.gz !mv <afile> <afile>:r
"  autocmd FileAppendPost		*.gz !gzip <afile>:r
"augroup END

  " Enable editing of gzipped files
  " set binary mode before reading the file
  autocmd BufReadPre,FileReadPre	*.gz,*.bz2 set bin
  autocmd BufReadPost,FileReadPost	*.gz call GZIP_read("gunzip")
  autocmd BufReadPost,FileReadPost	*.bz2 call GZIP_read("bunzip2")
  autocmd BufWritePost,FileWritePost	*.gz call GZIP_write("gzip")
  autocmd BufWritePost,FileWritePost	*.bz2 call GZIP_write("bzip2")
  autocmd FileAppendPre			*.gz call GZIP_appre("gunzip")
  autocmd FileAppendPre			*.bz2 call GZIP_appre("bunzip2")
  autocmd FileAppendPost		*.gz call GZIP_write("gzip")
  autocmd FileAppendPost		*.bz2 call GZIP_write("bzip2")

  " After reading compressed file: Uncompress text in buffer with "cmd"
  fun! GZIP_read(cmd)
    let ch_save = &ch
    set ch=2
    execute "'[,']!" . a:cmd
    set nobin
    let &ch = ch_save
    execute ":doautocmd BufReadPost " . expand("%:r")
  endfun

  " After writing compressed file: Compress written file with "cmd"
  fun! GZIP_write(cmd)
    if rename(expand("<afile>"), expand("<afile>:r")) == 0
      execute "!" . a:cmd . " <afile>:r"
    endif
  endfun

  " Before appending to compressed file: Uncompress file with "cmd"
  fun! GZIP_appre(cmd)
    execute "!" . a:cmd . " <afile>"
    call rename(expand("<afile>:r"), expand("<afile>"))
  endfun

 augroup END

 " This is disabled, because it changes the jumplist.  Can't use CTRL-O to go
 " back to positions in previous files more than once.
"  if 0
  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
"  autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
" endif

" function to open man page of command under cursor

fun! Man(page)
   new
   set ft=man
   exe"r!man ".a:page." 2>/dev/null \|col -b\|uniq -u"
   set nomod
   normal 1G
endfun

" map \K :call Man(expand("<cword>"))<CR>

fun! Totaler()
perl << EOF
	use strict;
	my @buffers = VIM::Buffers( 'board' );
	my $Board = shift @buffers;
	my $lines = $Board->Count();
	my $title = $Board->Get( 1 );
	my $lastround;
	# ($title, $lastround) = ($title =~ /^(.*)\s(\d+)\s\sTotal$/);
	# $Board->Set( 1, "$title $lastround " . ++$lastround . '  Total' );
	foreach my $line ( 4 .. $lines )
	{
		my @fields = split ' ', $Board->Get( $line );
		my $name = shift @fields;
		die unless $name =~ m/\w+/;
		my $record = ' ' . $name . "\t";
		my $id = shift @fields;
		die unless $id =~ m/\d{7}/;
		$record .= $id . '  ';
		my $total = 0;
		while ( @fields > 1 )
		{
			my $round = shift @fields;
			$total += $round if $round =~ m/^\d*$/;
			$record .= $round . ' ';
		}
		$record .= " $total";
		$Board->Set( $line, $record );
	}
EOF
endfun
