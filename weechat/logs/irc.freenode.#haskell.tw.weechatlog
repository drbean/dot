2013-09-06 22:00:17	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-06 22:00:17	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-06 22:00:17	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-06 22:00:17	--	Nicks #haskell.tw: [a2n b4283 c9s cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean gko godfat hychen kanru kk1fff lambdabot letoh logbot__ lwhsu miaout17 miaout17__ mno2 MnO2__ monochrom petercommand superbil UncleHandsome UnderCru1 yulin]
2013-09-06 22:00:17	--	Channel #haskell.tw: 30 nicks (0 ops, 0 halfops, 0 voices, 30 normals)
2013-09-06 22:00:17	--	Notice(cameron.freenode.net): [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
2013-09-06 22:00:19	--	Mode #haskell.tw [+cnt]
2013-09-06 22:00:19	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-06 22:01:14	-->	suhorng (~suhorng@118-166-44-216.dynamic.hinet.net) has joined #haskell.tw
2013-09-06 22:03:54	MnO2__	http://www.iaeng.org/publication/IMECS2009/IMECS2009_pp1095-1099.pdf
2013-09-06 22:04:00	MnO2__	Ada's Vital Role in New US Air Traffic
2013-09-06 22:04:00	MnO2__	Control Systems
2013-09-06 22:21:56	-->	b4284 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-06 22:29:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-06 22:48:53	<--	yulin (~androirc@27.245.90.207) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-09-06 23:25:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-06 23:31:13	<--	suhorng (~suhorng@118-166-44-216.dynamic.hinet.net) has left #haskell.tw
2013-09-07 00:27:01	<--	b4283 (~b4283@36-238-134-217.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-09-07 01:20:16	-->	tiglog (~tiglog@123.116.80.107) has joined #haskell.tw
2013-09-07 01:29:59	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-07 01:43:13	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-07 03:39:36	<--	tiglog (~tiglog@123.116.80.107) has quit (Ping timeout: 245 seconds)
2013-09-07 04:40:54	-->	caasih (~caasiHuan@114-46-143-99.dynamic.hinet.net) has joined #haskell.tw
2013-09-07 04:56:21	<--	caasih (~caasiHuan@114-46-143-99.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-07 04:56:46	-->	caasih (~caasiHuan@114-46-143-99.dynamic.hinet.net) has joined #haskell.tw
2013-09-07 04:56:46	<--	caasih (~caasiHuan@114-46-143-99.dynamic.hinet.net) has quit (Client Quit)
2013-09-07 04:58:31	-->	caasih (~caasiHuan@114-46-143-99.dynamic.hinet.net) has joined #haskell.tw
2013-09-07 06:26:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-07 07:36:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-07 07:43:58	<--	b4284 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-07 08:06:43	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-07 08:07:27	<--	yulin (~androirc@27.245.112.24) has quit (Client Quit)
2013-09-07 08:13:53	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-07 08:13:53	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-07 08:13:53	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-07 08:13:53	--	Nicks #haskell.tw: [a2n c9s caasih cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru kk1fff lambdabot letoh logbot__ lwhsu miaout17 miaout17__ MnO2__ monochrom petercommand superbil UncleHandsome UnderCru1]
2013-09-07 08:13:53	--	Channel #haskell.tw: 29 nicks (0 ops, 0 halfops, 0 voices, 29 normals)
2013-09-07 08:14:12	--	Mode #haskell.tw [+cnt]
2013-09-07 08:14:12	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-07 08:21:53	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-07 08:21:53	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-07 08:21:53	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-07 08:21:53	--	Nicks #haskell.tw: [a2n c9s caasih cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru kk1fff lambdabot letoh logbot__ lwhsu miaout17 miaout17__ MnO2__ monochrom petercommand superbil UncleHandsome UnderCru1]
2013-09-07 08:21:53	--	Channel #haskell.tw: 29 nicks (0 ops, 0 halfops, 0 voices, 29 normals)
2013-09-07 08:22:13	--	Mode #haskell.tw [+cnt]
2013-09-07 08:22:13	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-07 08:28:24	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-07 08:28:24	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-07 08:28:24	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-07 08:28:24	--	Nicks #haskell.tw: [a2n c9s caasih cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru kk1fff lambdabot letoh logbot__ lwhsu miaout17 miaout17__ MnO2__ monochrom petercommand superbil UncleHandsome UnderCru1]
2013-09-07 08:28:24	--	Channel #haskell.tw: 29 nicks (0 ops, 0 halfops, 0 voices, 29 normals)
2013-09-07 08:28:43	--	Mode #haskell.tw [+cnt]
2013-09-07 08:28:43	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-07 08:48:57	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-07 08:48:57	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-07 08:48:57	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-07 08:48:57	--	Nicks #haskell.tw: [a2n c9s caasih cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru kk1fff lambdabot letoh logbot__ lwhsu miaout17 miaout17__ MnO2__ monochrom petercommand superbil UncleHandsome UnderCru1]
2013-09-07 08:48:57	--	Channel #haskell.tw: 29 nicks (0 ops, 0 halfops, 0 voices, 29 normals)
2013-09-07 08:49:16	--	Mode #haskell.tw [+cnt]
2013-09-07 08:49:16	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-07 08:57:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-07 09:21:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-07 10:30:05	<--	caasih (~caasiHuan@114-46-143-99.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-07 11:00:55	-->	liuzhoou (~liuzhoou@58.38.10.231) has joined #haskell.tw
2013-09-07 11:11:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-07 11:47:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-07 12:31:41	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-09-07 12:57:15	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-09-07 13:28:46	<--	liuzhoou (~liuzhoou@58.38.10.231) has quit (Read error: Connection reset by peer)
2013-09-07 14:24:13	-->	liuzhoou (~liuzhoou@58.38.10.231) has joined #haskell.tw
2013-09-07 14:42:14	MnO2__	scala 看起來有點複雜，godfat 從 PLT 版看來你投入了不少時間研究過 xD
2013-09-07 14:45:28	CindyLinz	godfat: Ruby 和 PLT 板都在 po 徵板主文了怎麼辦啦 XD
2013-09-07 14:49:42	MnO2__	CindyLinz: 如果太久沒有人認領是會廢板嗎
2013-09-07 14:49:51	MnO2__	CindyLinz: 那天說的是 https://plus.google.com/117380487359344039293/posts/LSEvXRcg51B
2013-09-07 14:50:08	MnO2__	不過我覺得好像不只 scala 可以對號入座..
2013-09-07 14:57:50	-->	b4283 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-07 15:01:21	CindyLinz	mmm
2013-09-07 15:01:41	CindyLinz	MnO2__: 廢板規則我不清楚了 :Q
2013-09-07 15:02:51	CindyLinz	當板主好像有點難...
2013-09-07 15:03:02	CindyLinz	如果都沒有文章的話就簡單了 XD
2013-09-07 15:06:44	CindyLinz	不過廢板前應該會先標一個「待廢」之類的? :p
2013-09-07 15:12:12	CindyLinz	看到以前有檢舉 godfat 這個帳號沒上線的文章... 他是截圖看 godfat 的上次上線日期, 還有現在狀態是不在線上
2013-09-07 15:13:26	CindyLinz	覺得這證據實在很薄弱啊, 我都一直連在線上不太重新登入的, 狀態都切隱形, 好像看起來也會一樣 XD
2013-09-07 15:23:03	MnO2__	看 PLT scala 的 convariant 那一串討論真是有點昏~
2013-09-07 15:46:27	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-07 15:47:36	yulin	該買藍莓派來玩還是買 types 那本，好猶豫…
2013-09-07 15:50:41	<--	yulin (~androirc@27.245.112.24) has quit (Client Quit)
2013-09-07 15:58:11	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-07 15:58:17	<--	yulin (~androirc@27.245.112.24) has quit (Client Quit)
2013-09-07 16:12:40	MnO2__	http://stackoverflow.com/a/1745245/1022246   Ada Compiler 好貴 xD
2013-09-07 16:15:46	MnO2__	http://www.seas.gwu.edu/~mfeldman/ada-project-summary.html
2013-09-07 16:18:40	MnO2__	F-22 裡面系統是 Ada 寫的
2013-09-07 16:18:44	MnO2__	http://zh.wikipedia.org/wiki/F-22%E7%8C%9B%E7%A6%BD%E6%88%B0%E9%AC%A5%E6%A9%9F
2013-09-07 16:31:34	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-07 16:32:50	CindyLinz	hmm... 那不用愁買家出不起? XD
2013-09-07 16:39:14	<--	yulin (~androirc@27.245.112.24) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-09-07 17:10:29	godfat	scala 我有一段時間沒看了，不過確實曾經很認真看過
2013-09-07 17:10:30	godfat	我真的覺得其實 scala 跟 c++ 很像 XD
2013-09-07 17:10:30	godfat	當然不是真的指語言很像，而是他們的設計都是啥鬼都全包.. @@
2013-09-07 17:10:30	godfat	怎麼說呢，可能這種語言對我來說一直有一定的吸引力吧.. XD
2013-09-07 17:10:30	godfat	只是還是覺得 scala 有點走火入魔了..
2013-09-07 17:10:30	godfat	那時寫最多的大概是踩地雷的 AI 吧，有個踩地雷 AI 大賽，
2013-09-07 17:10:30	godfat	用 java 的，所以我可以用 scala XD
2013-09-07 17:11:00	godfat	我登上 ptt 看看狀況好了 @@"
2013-09-07 17:11:01	godfat	自從被踢板主後，老實講就懶得看了.... XD
2013-09-07 17:14:54	MnO2__	從我看了幾個小時的印象來看，也是覺得像 C++
2013-09-07 17:20:39	godfat	說到 ada, 之前 fumin 分享的那個，原本是用 ada 寫的
2013-09-07 17:20:39	godfat	聽他的心得，我認真覺得 ada 實在也是個爛語言 XD
2013-09-07 17:20:40	godfat	裡面講求正確的東西，感覺全部都是靠 assertion...
2013-09-07 17:20:40	godfat	function contract 之類的
2013-09-07 17:48:43	MnO2__	那個 function contract 跟 racket 的 contract 是同一個東西嗎?
2013-09-07 17:55:42	godfat	看起來我的意思是那樣沒錯，不過細節上有差多少我就不知道了
2013-09-07 17:58:31	godfat	一時找不到範例，印象中大概是在 ada 中我可以宣告一個 vector 一定有多長，
2013-09-07 17:58:31	godfat	或是裡面的值一定處在某個範圍內
2013-09-07 17:58:32	godfat	但這是 runtime 的檢查，不是規範在 type 裡
2013-09-07 18:07:51	MnO2__	讓我想到 gorillascript  xD
2013-09-07 18:28:32	godfat	XD
2013-09-07 18:56:45	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-07 19:04:11	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-07 19:05:51	-->	hashcat (~chatzilla@27.243.142.215) has joined #haskell.tw
2013-09-07 19:06:32	<--	yulin (~androirc@27.245.112.24) has quit (Client Quit)
2013-09-07 19:09:19	<--	liuzhoou (~liuzhoou@58.38.10.231) has quit (Remote host closed the connection)
2013-09-07 20:31:43	<--	hashcat (~chatzilla@27.243.142.215) has quit (Ping timeout: 264 seconds)
2013-09-07 20:41:45	-->	liuzhoou (~liuzhoou@58.38.10.231) has joined #haskell.tw
2013-09-07 20:42:52	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-07 21:40:37	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-07 21:44:01	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-07 21:44:13	<--	mno2 (~mno2@1.34.43.236) has quit (Read error: Connection reset by peer)
2013-09-07 21:45:01	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-07 22:55:39	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-07 22:56:10	<--	yulin (~androirc@27.245.112.24) has quit (Client Quit)
2013-09-07 23:12:16	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-08 00:15:18	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-08 00:46:15	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-08 00:49:22	-->	MnO2_ (~MnO2@1.34.43.236) has joined #haskell.tw
2013-09-08 00:52:14	<--	MnO2__ (~MnO2@1.34.43.236) has quit (Ping timeout: 240 seconds)
2013-09-08 01:31:39	<--	b4283 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-08 01:34:59	<--	liuzhoou (~liuzhoou@58.38.10.231) has quit (Remote host closed the connection)
2013-09-08 02:03:22	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-08 02:08:16	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-08 02:10:06	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-09-08 02:15:54	<--	UnderCru1 (~tonyhusky@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-08 02:26:43	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-08 02:28:03	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-09-08 02:29:01	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-08 02:29:54	-->	caasih (~caasiHuan@114-46-157-236.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 03:47:38	-->	hashcat (~chatzilla@27.243.142.215) has joined #haskell.tw
2013-09-08 03:59:50	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-pgviskeyeeyiwktg) has quit (Quit: Connection closed for inactivity)
2013-09-08 04:06:29	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-08 04:08:46	<--	godfat (~Adium@114-45-187-35.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-08 04:25:44	<--	caasih (~caasiHuan@114-46-157-236.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-08 04:56:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-08 07:00:02	-->	caasih (~caasiHuan@114-46-157-236.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 08:59:05	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-08 08:59:37	<--	yulin (~androirc@27.245.112.24) has quit (Client Quit)
2013-09-08 09:09:07	<--	caasih (~caasiHuan@114-46-157-236.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-08 09:29:15	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-08 09:30:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-08 10:42:16	-->	b4283 (~b4283@218-164-200-158.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 10:50:09	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-08 12:14:11	<--	b4283 (~b4283@218-164-200-158.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-08 12:16:56	-->	b4283 (~b4283@1-174-249-151.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 12:52:57	-->	liuzhoou (~liuzhoou@58.38.10.231) has joined #haskell.tw
2013-09-08 16:32:20	<--	liuzhoou (~liuzhoou@58.38.10.231) has quit (Remote host closed the connection)
2013-09-08 16:34:07	<--	hashcat (~chatzilla@27.243.142.215) has quit (Ping timeout: 264 seconds)
2013-09-08 16:58:58	-->	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 21:41:43	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-08 21:41:43	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-08 21:41:43	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-08 21:41:44	--	Nicks #haskell.tw: [a2n b4283 c9s cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat1 hashcat hychen kanru kk1fff lambdabot letoh liuzhoou logbot__ lwhsu miaout17__ mno2 MnO2_ monochrom petercommand superbil UncleHandsome]
2013-09-08 21:41:44	--	Channel #haskell.tw: 30 nicks (0 ops, 0 halfops, 0 voices, 30 normals)
2013-09-08 21:41:58	--	Mode #haskell.tw [+cnt]
2013-09-08 21:41:58	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-08 22:08:26	-->	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 22:08:32	suhorng	https://plus.google.com/117380487359344039293/posts/PR96UYs4hMy S-expression...
2013-09-08 22:12:58	miaout17__	上週四接到電話臨時有急事離開了，很遺憾沒有聽完穆老師和 suhorng 的演說 QQ
2013-09-08 22:27:24	<--	b4283 (~b4283@1-174-249-151.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-08 22:40:47	-->	b4283 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-08 22:45:48	<--	liuzhoou (~liuzhoou@58.38.10.231) has quit (Remote host closed the connection)
2013-09-08 23:02:11	-->	UnderCrux (~tonyhusky@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-08 23:03:54	<--	UnderCrux (~tonyhusky@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-09-08 23:04:11	-->	UnderCrux (~tonyhusky@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-08 23:04:58	<--	UnderCrux (~tonyhusky@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-09-08 23:12:11	-->	caasih (~caasiHuan@114-46-117-11.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 23:20:19	hashcat	為啥每隔一陣就會跑出王垠的東西
2013-09-08 23:20:36	hashcat	他寫啥我從沒看懂過
2013-09-08 23:35:23	favonia	hashcat: 你是訂閱哪裡？
2013-09-08 23:35:48	hashcat	訂閱?
2013-09-08 23:36:17	hashcat	是說這頻道
2013-09-08 23:37:21	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-08 23:40:10	monochrom	王垠的東西好啊 :)
2013-09-08 23:42:00	CindyLinz	王垠的東西好啊 :D
2013-09-08 23:42:36	CindyLinz	人又帥.. (搞錯重點)
2013-09-08 23:43:28	hashcat	貌似只能怪在下境界沒到那裡
2013-09-08 23:44:42	CindyLinz	hashcat: 覺得能像他這樣常常分享東西出來的人很難得啊~ 雖然不是所有的論點都完全認同, 但的確是挺有內容的...
2013-09-08 23:44:56	hashcat	我再仔細看下是好在哪裡
2013-09-08 23:45:33	hashcat	連哪裡有論點都沒看出來過
2013-09-08 23:47:37	CindyLinz	hashcat: 看一些長一點的文章好了? http://www.yinwang.org/blog-cn/2013/04/18/language-design-mistake2/
2013-09-08 23:48:34	<--	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has left #haskell.tw
2013-09-08 23:48:40	CindyLinz	是說我看他的 google+, 因為是全英文的... 個人感覺很奇怪 XD
2013-09-08 23:49:07	-->	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has joined #haskell.tw
2013-09-08 23:49:22	suhorng	我貼這段只是覺得 json 那邊很像 S-expression很好笑XD
2013-09-08 23:50:18	hashcat	還是完全沒方向感
2013-09-08 23:53:40	hashcat	還是直接寫個程序說明問題好懂
2013-09-08 23:55:03	hashcat	python可以寫出無頭人戴帽子是啥問題唉
2013-09-08 23:56:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-08 23:56:55	CindyLinz	hashcat: 因為你寫了一個函數, 給所有的「人」戴帽子
2013-09-08 23:57:07	CindyLinz	你心中以為所有的「人」都會有「頭」
2013-09-08 23:57:29	CindyLinz	但是在 python 的環境裡面從來就無法給你這樣的保證
2013-09-08 23:57:47	CindyLinz	意外就會發生....
2013-09-08 23:58:46	hashcat	用Ada好了
2013-09-09 00:02:11	hashcat	這也能說成莫名其妙的故事
2013-09-09 00:02:40	hashcat	最近才發現gcc可以產生跨語言的物件導向界面
2013-09-09 00:03:37	hashcat	ada,fortran,c++之間跨語言的界面產生器
2013-09-09 00:03:38	CindyLinz	他撰文的方式常常是很嗆的, 不過我們作為讀者, 就繞過讓自己不太愉快的發表方式, 把有意義的內容聽走就可以啦 ^^
2013-09-09 00:04:01	hashcat	問題是我根本沒辦法看懂
2013-09-09 00:05:09	CindyLinz	那.... ^^|
2013-09-09 00:05:22	CindyLinz	你跳過這些 link 吧...
2013-09-09 00:07:21	hashcat	如果需要各種保證的話Ada不錯用
2013-09-09 00:07:48	hashcat	搭配gcc的界面產生器可以沿用各種函式庫
2013-09-09 00:08:28	hashcat	python其實比較像蚯蚓
2013-09-09 00:09:22	hashcat	斷頭斷尾還是能動
2013-09-09 00:09:31	CindyLinz	Ada 提供怎樣的保證?
2013-09-09 00:09:36	CindyLinz	沒碰過 ^^|
2013-09-09 00:10:59	suhorng	蚯蚓 XDDDDD
2013-09-09 00:11:16	hashcat	波音777不會因為編程錯誤掉下來的保證
2013-09-09 00:12:44	hashcat	你要問的應該不是指這個
2013-09-09 00:12:53	CindyLinz	hmm... 它怎麼保證波音777不會掉下來? @@"
2013-09-09 00:13:00	CindyLinz	不會因為程式錯誤而掉下來?
2013-09-09 00:13:47	hashcat	他的不同很難用C++, python去類比
2013-09-09 00:14:21	hashcat	不知從何說起
2013-09-09 00:14:21	CindyLinz	可以用 Agda 來類比?
2013-09-09 00:15:05	CindyLinz	語法上看起來有點像 Pascal
2013-09-09 00:15:05	hashcat	嗯差一個字母
2013-09-09 00:15:28	hashcat	C++跟Ada的差距可能Haskell跟C++的差距一樣大吧
2013-09-09 00:15:55	hashcat	而且特性比C++還多
2013-09-09 00:16:15	CindyLinz	你得正面表列一些東西出來啦 ^^|
2013-09-09 00:18:11	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-09 00:18:50	hashcat	跟其他語言比拼下就是, 比特性完勝C++, 比型別安全勝Haskell, Agda, 比面向嵌入式開發堪比C
2013-09-09 00:19:35	hashcat	C++有的特性都可以直接挪過來了, 但又已經拔掉C++各種陷阱
2013-09-09 00:19:55	CindyLinz	我想知道他是用什麼樣的方式來作保證呀
2013-09-09 00:21:23	CindyLinz	因為我所知道的方法, 一種是窮舉所有狀態, 一種是正面推論.. 都會有無法確保我們去描述出我們要保證的事情, 和實際上我們真的想保證的事情一致
2013-09-09 00:21:27	CindyLinz	的問題
2013-09-09 00:21:50	CindyLinz	而作個過份的假設, 假設沒有這一層問題的話...
2013-09-09 00:22:10	hashcat	應該說型別很嚴格, 語法很囉唆吧
2013-09-09 00:22:24	CindyLinz	Agda Coq 或自動機派的, 應該都有做到他們所要的保證
2013-09-09 00:23:53	CindyLinz	只有嚴格也不夠, 還需要描述性夠強.. untyped 組語也很嚴格, 因為無論你怎麼寫都是那一堆 bytes, 它有保證你不會寫出 bytes 以外的東西...
2013-09-09 00:24:09	hashcat	那種學術語言都會留後門, 未經大量測試
2013-09-09 00:24:12	CindyLinz	所以沒什麼用, 因為它的 type 幾乎什麼都說不出來
2013-09-09 00:24:23	hashcat	最重要一點是速度太慢
2013-09-09 00:24:47	hashcat	Ada跟C差不多快的
2013-09-09 00:25:15	hashcat	飛機慢一秒就撞山
2013-09-09 00:25:37	CindyLinz	我想問你 Ada 是用怎樣的方式作保證啊 @@"
2013-09-09 00:25:37	yulin	有聽說 Ada 實作難
2013-09-09 00:25:57	hashcat	一大堆特性做保證, 還是自己看吧
2013-09-09 00:26:25	hashcat	不然洗版了
2013-09-09 00:26:51	CindyLinz	特性多... 聽起來方向是反的呀 :Q
2013-09-09 00:27:23	CindyLinz	Coq 就是依靠它的核心非常小, 可以明顯看出它是正確的, 所以才能作為證明的工具
2013-09-09 00:27:31	hashcat	特性多跟安全性相反, 是C++的刻板印象吧
2013-09-09 00:27:34	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-vlslsmtdozsqimvz) has joined #haskell.tw
2013-09-09 00:27:35	hashcat	對拉有個點值得講一下
2013-09-09 00:29:09	hashcat	Ada寫出來的程序可讀性很高, 都是正經的英文, 沒啥奇怪的符號
2013-09-09 00:29:25	hashcat	給複審的人很大方便
2013-09-09 00:29:35	hashcat	但對寫得人來說就比較痛苦
2013-09-09 00:29:50	hashcat	不只是得多打些單字而已
2013-09-09 00:30:30	hashcat	其他程序語言的老手, 不見得能很順手寫出Ada能通過編譯的程序
2013-09-09 00:30:53	hashcat	會遭遇各種阻攔
2013-09-09 00:31:18	<--	yulin (~androirc@27.245.112.24) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-09-09 00:31:33	CindyLinz	所以 Ada 程式的正確性主要依靠複審, 只是由 Ada 產生的限制, 使得複審的時候很省心力?
2013-09-09 00:31:47	hashcat	促使實踐邏輯的人得深思熟慮, 複審卻各種方便
2013-09-09 00:32:11	hashcat	已說明這是其中一點
2013-09-09 00:33:53	hashcat	其他像是他怎保證物件導向時, 使用指標時, 使用多執行緒時, 又是各種囉唆
2013-09-09 00:34:13	CindyLinz	的確也是種折衷的辦法. 不過你可以說它比 Coq 實用, 倒不能說它比 Coq 安全.. :Q
2013-09-09 00:35:13	hashcat	能等到Coq有反應早就撞山了
2013-09-09 00:35:56	CindyLinz	那是你用錯了 XD
2013-09-09 00:36:11	CindyLinz	Coq 用來證明你的程式是正確的, 倒不是在執行時期拿去跑
2013-09-09 00:36:43	hashcat	一來他們說得安全不是你那種
2013-09-09 00:36:58	hashcat	二來你說的那種安全也是有保證的
2013-09-09 00:37:24	hashcat	Ada有個工具叫Spark
2013-09-09 00:38:06	hashcat	各種型別和數值間應有的關係都可以嵌在Ada的註釋裡面
2013-09-09 00:38:31	hashcat	對Ada來說那只是註釋, 不過對Spark來說就是各種命題
2013-09-09 00:39:45	hashcat	有些地方可以看出Ada注重的點
2013-09-09 00:40:19	CindyLinz	你有建議的書嗎?
2013-09-09 00:40:23	hashcat	比起啥嚜傳值傳參考參考, Ada用得是in out來決定要不改值
2013-09-09 00:40:36	hashcat	adaic.org
2013-09-09 00:41:20	CindyLinz	你覺得從哪一本開始比較好?
2013-09-09 00:41:22	hashcat	比起用啥尖括號, 他用的是begin end之類的
2013-09-09 00:41:39	CindyLinz	我看這邊有一大堆 http://www.adaic.org/learn/materials/
2013-09-09 00:41:43	hashcat	不知道欸
2013-09-09 00:41:50	hashcat	我也忘記是從何看起的
2013-09-09 00:42:06	CindyLinz	._.
2013-09-09 00:42:17	hashcat	感覺就是很保護眼睛又迴避各種人腦盲點
2013-09-09 00:43:16	hashcat	杜絕眼殘腦袋昏睡等各種情形
2013-09-09 00:44:14	hashcat	http://www.adaic.org/learn/materials/intro/
2013-09-09 00:44:17	hashcat	這個好了
2013-09-09 00:44:24	<--	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has left #haskell.tw
2013-09-09 00:44:32	CindyLinz	mmm
2013-09-09 00:44:42	hashcat	頁面中最上面的連接一直點就是這個
2013-09-09 00:47:47	CindyLinz	mm 好 ^^
2013-09-09 00:48:44	hashcat	我在猜沒變成主流的原因
2013-09-09 00:49:27	hashcat	是因為正經八百, 沒有任何把戲
2013-09-09 00:50:00	hashcat	不知道能不說是硬派
2013-09-09 00:50:24	CindyLinz	不用找沒有變成主流的原因啦, 不需要有原因, 也幾乎都不會是主流的
2013-09-09 00:52:25	hashcat	劃分領域的話倒是能說是主流
2013-09-09 00:52:32	hashcat	在高規格的系統工程領域是不折不扣的主流
2013-09-09 00:53:18	hashcat	IT就沒影了
2013-09-09 00:56:58	CindyLinz	用 begin..end 來取代 {..} 是為了怕看不清楚?
2013-09-09 00:57:54	hashcat	可能考慮主管會有老花眼吧~
2013-09-09 00:58:53	hashcat	讓讀得人不用太多訓練也能看得懂
2013-09-09 00:59:09	hashcat	不只是要給懂編程的人看的
2013-09-09 00:59:25	hashcat	同時防呆
2013-09-09 01:01:40	hashcat	比起一堆這種東西})]||)}}])]{({][}))(, begin begin end begin end看來也不太容易讓腦袋亂掉
2013-09-09 01:02:24	miaout17__	http://goto.ucsd.edu/quark/
2013-09-09 01:02:29	hashcat	數一下有幾個下尖括號, 和數一下有幾個end的差別
2013-09-09 01:02:31	CindyLinz	為什麼要給不懂編程的人看懂呢?
2013-09-09 01:02:34	miaout17__	a browser whose kernel has been implemented and verified in the Coq proof assistant.
2013-09-09 01:03:30	hashcat	因為各部門的人不一定都是做這個的
2013-09-09 01:03:48	hashcat	卻都要大概知道這東西是在做啥
2013-09-09 01:04:18	CindyLinz	這方面對正確性應該就沒什麼幫助了?
2013-09-09 01:04:42	CindyLinz	因為別領域的人都會注意到主線流程, 看不到支線的例外流程
2013-09-09 01:04:44	hashcat	當然也不至於完全不懂那種
2013-09-09 01:04:53	CindyLinz	而錯都是錯在支線
2013-09-09 01:05:00	hashcat	是說不用專門計算機的人
2013-09-09 01:05:10	hashcat	假設機械部門預期這程序在某狀況, 應該是那輸出來設計機械
2013-09-09 01:05:30	hashcat	要是完全沒看懂的機會, 編程出錯也沒辦法抓出來
2013-09-09 01:07:26	hashcat	主管也得同時兼顧好幾個部門, 要是不容易看懂, 當然就比較不傾向去複查吧
2013-09-09 01:08:04	CindyLinz	嗯
2013-09-09 01:08:21	hashcat	包了火箭原本要到火星就射到別人家去, 十億美金消失
2013-09-09 01:10:02	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-09 01:11:52	hashcat	貌似很多管理科學的概念
2013-09-09 01:34:06	hashcat	函式庫也滿多的噗噗
2013-09-09 01:35:28	hashcat	順便說下說飛機的程序反應太慢會撞山那個是實時性要求
2013-09-09 01:36:02	hashcat	不只要快, 還要保證一定週期可以執行完成
2013-09-09 01:36:16	CindyLinz	這我同意 :p
2013-09-09 01:37:28	hashcat	那種學術的語言通常最多就只做到效率能接受這樣
2013-09-09 01:38:12	monochrom	照我知少少加推想, "飛機不會因程式問題失事" 只指: 程式不會終止運行. 而程式不會終止運行, 只需要沒有 type error, null pointer error, unhandled exception.
2013-09-09 01:38:17	hashcat	有限資源下限定幾個時脈保證完成
2013-09-09 01:41:02	hashcat	Ada是另一個世界
2013-09-09 01:41:21	monochrom	所以, 只要程式語言用精細的 static typing, 以及這 typing 把 unhandled exception 暴露出來, 還有限制 null pointer 便成
2013-09-09 01:41:39	hashcat	而且跑太快也不行
2013-09-09 01:42:24	hashcat	某些極端物理環境, 電子元件會不堪負荷
2013-09-09 01:42:48	CindyLinz	monochrom: 直接用 first order logic 來描述時間相關的東西, 會非常累 :(
2013-09-09 01:43:01	CindyLinz	老師是這樣說的 XD
2013-09-09 01:43:30	hashcat	跟Haskell說的那種安全不一樣, 此安全非彼安全
2013-09-09 01:43:44	CindyLinz	不過.. 應該包成 lib (tactic) 以後應該也不會那麼累才對...
2013-09-09 01:45:47	<--	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-09 01:46:00	-->	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has joined #haskell.tw
2013-09-09 01:48:13	hashcat	其實對通常編程來說不太需要學習Ada吧
2013-09-09 01:48:55	hashcat	只是對各種語言的抱怨Ada通常都已經有解了
2013-09-09 01:52:41	hashcat	要不在說一個
2013-09-09 01:53:09	hashcat	Ada的數值型別系統至少我沒在別處看過類似
2013-09-09 01:54:31	hashcat	可以適應各種有限位數, 也足夠靈活能表達類似同餘數之類的型別
2013-09-09 01:55:00	hashcat	同時兼顧小不拉機的計算資源
2013-09-09 01:55:15	hashcat	其他自己看吧
2013-09-09 01:55:18	hashcat	快洗版了
2013-09-09 01:58:24	CindyLinz	本來就是在聊天, 這種洗法沒問題的~ XD
2013-09-09 01:59:33	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-09 02:05:08	hashcat	能不妄想ada.tw
2013-09-09 02:05:31	hashcat	貌似我只要看到語言就會想要加.tw
2013-09-09 02:05:43	<--	caasih (~caasiHuan@114-46-117-11.dynamic.hinet.net) has quit (Write error: Broken pipe)
2013-09-09 02:09:43	CindyLinz	XD
2013-09-09 02:09:50	monochrom	php.tw \∩/
2013-09-09 02:10:08	CindyLinz	Ada 這種東西, 應該算是「幹壞事是進步的原動力」的具體例證了..... www
2013-09-09 02:16:40	hashcat	為啥是壞事阿
2013-09-09 02:17:27	hashcat	看來你家被戰斧飛彈打中過
2013-09-09 02:17:31	CindyLinz	為了殺人啊.. 美軍耶, 當代做最多壞事的組織了吧 XD
2013-09-09 02:18:44	monochrom	啊, 那種壞事
2013-09-09 02:19:03	hashcat	scala.tw
2013-09-09 02:19:14	monochrom	我還以為"壞事"指賺大錢哩!
2013-09-09 02:19:32	hashcat	那scala才是
2013-09-09 02:19:39	CindyLinz	hmm... 用錢算的話, 應該也是賺不少吧... (思)
2013-09-09 02:20:14	hashcat	瑞銀集團用得噗噗
2013-09-09 02:20:27	hashcat	應該髒錢是洗過不少
2013-09-09 02:20:49	monochrom	恐怕因為"殺人放火金腰帶", 兩者毋須分開吧... XD
2013-09-09 02:21:00	hashcat	Ada貌似都是燒錢用專案
2013-09-09 02:21:29	hashcat	我說十億美金這數字是其來有自
2013-09-09 02:21:40	CindyLinz	做專案說要用 Ada 就可以要比較多預算這樣? XD
2013-09-09 02:22:06	hashcat	據傳某顆衛星掉下來調查報告指就是Ada的缺陷
2013-09-09 02:22:13	hashcat	損失十億美金
2013-09-09 02:23:19	hashcat	我還沒認識賠得起的人
2013-09-09 02:24:30	monochrom	缺陷好啊! 電影 一代宗師 主角話: 大成若缺 XD
2013-09-09 02:28:23	hashcat	讓他來賠好了
2013-09-09 02:28:30	monochrom	哈哈
2013-09-09 02:29:06	monochrom	王家衞再拍多幾部電影, 或許就真的夠錢賠
2013-09-09 02:29:12	hashcat	沒錢關塔那摩伺候
2013-09-09 02:30:08	hashcat	額搞錯了
2013-09-09 02:30:20	hashcat	那是歐洲的火箭跟美國無關
2013-09-09 02:30:34	monochrom	明天問題: 關塔那摩 能關得住葉問嗎?
2013-09-09 02:32:05	hashcat	外面太無聊躲起來渡假這樣
2013-09-09 03:29:54	<--	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-09 04:14:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-09-09 06:07:07	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-09 06:07:08	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2013-09-09 06:07:09	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (*.net *.split)
2013-09-09 06:07:10	<--	cataska (~cataska@210.64.6.233) has quit (*.net *.split)
2013-09-09 06:12:43	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-09 06:18:34	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-09-09 06:19:34	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-09-09 06:19:34	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-09-09 07:06:33	-->	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has joined #haskell.tw
2013-09-09 07:21:39	<--	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-09 08:16:10	<--	b4283 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-09 08:35:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-09 09:33:52	-->	mno2 (~mno2@wlan45.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-09 09:43:24	-->	yulin (~androirc@27.245.112.24) has joined #haskell.tw
2013-09-09 09:53:29	<--	yulin (~androirc@27.245.112.24) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-09-09 10:01:31	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-09 10:02:42	mno2	http://www.reddit.com/r/haskell/comments/1lymxc/ann_threepennygui03_gui_framework_that_uses_the/
2013-09-09 10:02:56	mno2	第一個 comment: Time flies like a monad .   wwwww
2013-09-09 10:23:02	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-09 10:30:14	<--	mno2 (~mno2@wlan45.cc.ntu.edu.tw) has quit (Ping timeout: 264 seconds)
2013-09-09 10:34:15	-->	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-09 10:40:37	<--	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has quit (Ping timeout: 248 seconds)
2013-09-09 10:44:19	-->	mno2 (~mno2@wlan46.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-09 10:50:24	CindyLinz	這什麼比喻啦 XDDD
2013-09-09 11:03:45	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 245 seconds)
2013-09-09 11:10:18	monochrom	time flies like an arrow. s/arrow/monad/
2013-09-09 11:22:59	<--	c9s (~c9s@106.186.115.174) has quit (Remote host closed the connection)
2013-09-09 11:27:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-09-09 12:12:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-09 12:23:11	favonia	instance Monad Time where
2013-09-09 12:25:15	<--	mno2 (~mno2@wlan46.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-09 12:27:03	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-09-09 13:33:24	CindyLinz	好想要 MonadPlus 的 Time... (泣)
2013-09-09 14:12:14	CindyLinz	我朋友(在台灣)在徵 lisp 工程師... http://blog.storysensecomputing.com/recruit-lisp-algorithm-developer
2013-09-09 14:12:39	CindyLinz	應該是跟機器學習或什麼 AI 相關的..
2013-09-09 14:13:18	CindyLinz	覺得他們公司蠻歡樂的, 常常看他們出去玩的照片, 老闆帶頭玩 XD
2013-09-09 14:40:36	-->	mno2 (~mno2@wlan41.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-09 14:49:41	mno2	http://www.zhihu.com/question/19643954  第一個回答，這就是霸氣 xD
2013-09-09 15:12:11	mno2	http://www.zhihu.com/question/21486706  最後一句有提到 suhorng 那天提到的 partial evaluation
2013-09-09 15:48:01	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-09 15:48:16	<--	kanru` (~kanru@193.214.41.96) has quit (Remote host closed the connection)
2013-09-09 15:51:28	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-09 16:27:22	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-09 16:27:22	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-09 16:27:22	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-09 16:27:22	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat1 hychen kanru kanru` kk1fff lambdabot letoh liuzhoou logbot__ lwhsu miaout17 miaout17__ mno2 MnO2_ monochrom superbil UncleHandsome]
2013-09-09 16:27:22	--	Channel #haskell.tw: 29 nicks (0 ops, 0 halfops, 0 voices, 29 normals)
2013-09-09 16:27:37	--	Mode #haskell.tw [+cnt]
2013-09-09 16:27:37	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-09 16:32:16	cataska_	好酷喔臺灣竟然有 lisp 職缺
2013-09-09 16:33:12	CindyLinz	嗯, 雖然是商業廣告(?).. 不過我覺得在這麼小眾的社群裡貼應該還是好事 ^^|
2013-09-09 16:47:24	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-09 16:47:24	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-09 16:47:24	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-09 16:47:24	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat1 hychen kanru kanru` kk1fff lambdabot letoh liuzhoou logbot__ lwhsu miaout17 miaout17__ mno2 MnO2_ monochrom superbil UncleHandsome]
2013-09-09 16:47:24	--	Channel #haskell.tw: 29 nicks (0 ops, 0 halfops, 0 voices, 29 normals)
2013-09-09 16:47:37	--	Mode #haskell.tw [+cnt]
2013-09-09 16:47:37	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-09 17:08:05	mno2	真有趣，真想寄信去聊聊天 xD
2013-09-09 17:09:09	CindyLinz	go~~ ^^
2013-09-09 17:11:13	mno2	其實我有跟老闆講過話，不過他大概不記得了
2013-09-09 17:11:56	CindyLinz	hmm.. 我不知道他記人的能力好不好 ^^|
2013-09-09 17:20:49	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-09 17:20:54	-->	MnO2__ (~MnO2@1.34.43.236) has joined #haskell.tw
2013-09-09 17:21:01	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-09 17:21:10	<--	kanru` (~kanru@193.214.41.96) has quit (Read error: Operation timed out)
2013-09-09 17:24:36	<--	MnO2_ (~MnO2@1.34.43.236) has quit (Ping timeout: 256 seconds)
2013-09-09 17:30:47	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-09 17:35:30	godfat	幾年前他問我一個問題，說他只知道用 lisp 可以用 macro 寫
2013-09-09 17:35:30	godfat	後來我用 haskell 寫給他，他沒回應，不知道有沒有看到 XD
2013-09-09 17:37:16	mno2	他原本不是也在 Pic Collage ?
2013-09-09 17:37:37	godfat	曾經在我們公司待過，不過那時沒有 pic-collage
2013-09-09 17:38:36	mno2	喔喔
2013-09-09 17:40:04	godfat	我找到當時的程式了 XD
2013-09-09 17:40:05	godfat	https://gist.github.com/godfat/481148
2013-09-09 17:41:33	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-09-09 17:41:50	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-09 17:42:04	b4283	好像 zip
2013-09-09 17:43:09	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Client Quit)
2013-09-09 17:43:22	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-09 17:48:01	mno2	這 applicative 一行就搞定了
2013-09-09 17:48:14	mno2	> (,,) <$> [0..2] <*> [3..4] <*> [5..7]
2013-09-09 17:48:16	lambdabot	  [(0,3,5),(0,3,6),(0,3,7),(0,4,5),(0,4,6),(0,4,7),(1,3,5),(1,3,6),(1,3,7),(1...
2013-09-09 17:48:19	CindyLinz	改人家環境應該很痛吧... XD
2013-09-09 17:49:02	godfat	tuple 長度不定，所以要用 list
2013-09-09 17:49:30	godfat	> foldr (liftM2 (:)) [[]] [[0..2], [3..4], [5..7]]
2013-09-09 17:49:31	lambdabot	  [[0,3,5],[0,3,6],[0,3,7],[0,4,5],[0,4,6],[0,4,7],[1,3,5],[1,3,6],[1,3,7],[1...
2013-09-09 17:50:05	mno2	OK, 長度不定就比較討厭
2013-09-09 17:55:33	godfat	不過我以為他們後來都換成 python 了，他說 lisp 的人太難找
2013-09-09 17:57:05	CindyLinz	這是小說情節吧...... wwwww # 14:49 < mno2> http://www.zhihu.com/question/19643954  第一個回答，這就是霸氣 xD
2013-09-09 17:57:13	mno2	如果只在台灣找應該真的就超難找吧
2013-09-09 17:57:31	mno2	不過歐美的人也請不起就是
2013-09-09 17:58:02	godfat	可能用創業來誘惑 XD
2013-09-09 17:59:30	mno2	CindyLinz: 在 John 老大面前，Peter 也只能是小弟
2013-09-09 18:00:23	mno2	上古神授
2013-09-09 18:03:39	godfat	不過我現在愈來愈不喜歡把程式當資料了..
2013-09-09 18:06:03	CindyLinz	godfat: storysense 我猜是留下核心一些些 lisp 吧?
2013-09-09 18:06:18	CindyLinz	不是說 lisp 很適合作 AI 的東西?
2013-09-09 18:06:41	godfat	可能吧，核心演算法之類的
2013-09-09 18:08:37	CindyLinz	mno2: 我有想到王垠介紹 Dan Friedman 老師的時候, 說那個老師最愛問, 讓人哭笑不得的問題: Does it run backwards?
2013-09-09 18:09:22	CindyLinz	不過「lisp 之父」這頭銜的霸氣應該更強大.... www
2013-09-09 18:09:40	mno2	白鬍子
2013-09-09 18:10:53	CindyLinz	XDDD # CoffeeScript (不要写下面这种令数学家欣喜若狂，但即使加100行注释都解释不了的代码)
2013-09-09 18:11:21	CindyLinz	(例子裡是用 coffeescript 寫了個 Y combinator)
2013-09-09 18:11:49	CindyLinz	mno2: 哇 這一串裡面王垠也有回應耶
2013-09-09 18:12:41	CindyLinz	godfat: 你曾經把程式當資料, 而且發生悲劇了??
2013-09-09 18:13:16	CindyLinz	godfat: 嗯, 我不太懂他說 ruby 的把程式當資料是什麼意思.. 我想像得到的是說, 程式執行過去, class 就定義出來了這樣?
2013-09-09 18:13:42	<--	mno2 (~mno2@wlan41.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-09 18:14:15	CindyLinz	然後在 class 裡面內嵌別的檔案進來.. 忘記是 import 還是 require 還是 include 了
2013-09-09 18:19:49	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-09 18:26:13	godfat	CindyLinz, 誰有說 ruby 把程式當資料嗎？
2013-09-09 18:26:14	godfat	我自己的狀況是這樣
2013-09-09 18:26:14	godfat	一開始我滿喜歡玩 metaprogramming 的，是 c++ template 的後遺症
2013-09-09 18:26:14	godfat	後來我注意到一件事，同樣的事情，用一般的方式去完成，
2013-09-09 18:26:14	godfat	通常比較容易擴充，比較直接，其實也比較容易理解...
2013-09-09 18:26:14	godfat	metaprogramming 可能寫起來很直接，但我現在覺得那是在迴避
2013-09-09 18:26:14	godfat	使用原本語言裡的方式去描述
2013-09-09 18:26:50	godfat	ruby 的 require 就想成 eval File.read 就好了 XD
2013-09-09 18:26:50	godfat	只是加上路徑檢查，一樣的路徑不會重複 eval
2013-09-09 18:35:29	-->	hashcat (~chatzilla@27.242.4.115) has joined #haskell.tw
2013-09-09 18:43:25	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-09 18:46:40	-->	petercommand (~chatzilla@unaffiliated/petercommand) has joined #haskell.tw
2013-09-09 19:56:58	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 240 seconds)
2013-09-09 19:57:13	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-09 20:12:10	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-09 20:14:23	CindyLinz	godfat: 就那個「很霸氣」的回覆裡面: 代码可以生成代码，编译时和运行时并没有绝对的区分，这才是Lisp的杀手锏。......Ruby甚好，所说也是基于C系的语法，但是已经深得Lisp要领了。
2013-09-09 20:14:23	CindyLinz	Ruby的metaprogramming能力之强大，直接催生了RoR的诞生，风靡全球。
2013-09-09 20:14:52	CindyLinz	godfat: 因為我以前接觸的時候沒有什麼這樣的印象, 可是他這樣講了... 所以我就在想這個 module 的擴充的是不是被他算作為把資料當程式 @@"
2013-09-09 20:16:44	-->	b4283 (~b4283@218-164-127-149.dynamic.hinet.net) has joined #haskell.tw
2013-09-09 20:21:30	godfat	orz 我看半天，居然沒看到霸氣那篇前面有那一段，只想說這故事我看過，一直在看下面的回覆 囧>
2013-09-09 20:21:41	CindyLinz	XDD
2013-09-09 20:22:27	CindyLinz	等我學過什麼 lisp 或 S-expression 再回頭來看這個話題好了 @@"
2013-09-09 20:22:50	CindyLinz	我現在對程式碼當資料, 或資料當程式碼.. 連理解有沒有正確都不知道 ^^|
2013-09-09 20:24:32	godfat	可能就想像可以透過 reflection 來改寫程式吧？
2013-09-09 20:24:32	godfat	不過 lisp 我也是沒用過 macro
2013-09-09 20:27:15	godfat	也許一個極端的例子... 這在 ruby 裡要靠 extension 才做得到
2013-09-09 20:27:16	godfat	就是抓出一個 function, 然後調整這個 function 裡面的東西，
2013-09-09 20:27:16	godfat	做成另外一個 function
2013-09-09 20:28:31	CindyLinz	關鍵字是「裡面」嗎? @@"
2013-09-09 20:29:30	CindyLinz	如果沒有「裡面」的話, 叫那個函數自己吐出一部分出來, 那其實就是 closure?
2013-09-09 20:29:30	CindyLinz	不對 關鍵字抓錯了 XD
2013-09-09 20:29:54	CindyLinz	應該說.... 不用經過那個函數允許, 可以擅自把手伸到他的體內掏來掏去, 作任意的解剖採樣?
2013-09-09 20:31:05	godfat	這是我能想像到最把程式當資料的狀況了 XD
2013-09-09 20:31:05	godfat	比方說我可以取得 function 的 AST 等等，
2013-09-09 20:31:06	godfat	按照我的意思改寫程式，像是在自己語言裡做最佳化...
2013-09-09 20:31:35	CindyLinz	還在用 dos 真實模式的時候寫組語, 可以在執行階段跑去把某個函數裡面的某個 jmp address 改來改去, 使得這個函數的行為改變.. 這樣應該也算是一種用法?
2013-09-09 20:31:54	godfat	可能是類似這樣的感覺，我想
2013-09-09 20:32:26	godfat	ruby 有個 ruby2ruby 的 library, 讓每個東西都可以 to_ruby 轉回 source
2013-09-09 20:33:22	CindyLinz	是用每個 object 自己的 inspect()?
2013-09-09 20:34:20	CindyLinz	AST 都出來了.. 像是 reflection 做到徹底的狀態 @@"
2013-09-09 20:35:00	godfat	我記得他的作法是從 ruby interpreter 裡面抓出 AST,
2013-09-09 20:35:00	godfat	然後用 AST 重建 source... 所以有一些資訊會丟失，
2013-09-09 20:35:00	godfat	不是全部都抓得到
2013-09-09 20:35:00	godfat	後來 ruby VM 好像沒保留那麼多資訊，這個就更不完整了
2013-09-09 20:36:04	CindyLinz	mmm
2013-09-09 20:36:06	godfat	不過 a == eval a.to_ruby 是還滿帥的 XD
2013-09-09 20:36:07	godfat	當然實際上 function 不能這樣比較就是了
2013-09-09 20:36:48	CindyLinz	AST 可以比, 「函數」沒法比 ^^|
2013-09-09 20:37:42	godfat	不知道有沒有可能做成，我知道這個函數是從同樣的 AST 建來的，因此他們應該是一樣的
2013-09-09 20:37:43	godfat	等於是編譯過程要留下原始資料之類的我猜
2013-09-09 20:38:15	CindyLinz	實務上... AST 一樣的話為什麼不直接用同一個函數, 然後大家去 call 就好呢? @@"
2013-09-09 20:40:21	godfat	我也是這樣想 XD 所以只是舉例而已，或是說實際上其實不真的是這樣做
2013-09-09 20:40:22	godfat	我知道有一個作法是，去看 function 的 parameter 是什麼，
2013-09-09 20:40:22	godfat	依此做不同的事情
2013-09-09 20:40:22	godfat	例如把 http routes 定義成 function
2013-09-09 20:40:22	godfat	def users(name)
2013-09-09 20:40:22	godfat	    ...
2013-09-09 20:40:22	godfat	end
2013-09-09 20:40:23	godfat	就是在說有一個 /users 的 route, 如果 /users/name=abc 時，則 name 會吃到 abc,
2013-09-09 20:40:24	godfat	反之吃不到東西
2013-09-09 20:40:48	godfat	打錯，應是： /users?name=abc
2013-09-09 20:41:02	CindyLinz	godfat: 我想說, 如果通常是程式寫爆了才需要的功能, 還那麼大 overhead, 我看就算了吧 XDDD
2013-09-09 20:41:24	godfat	我現在也是不太喜歡這些做法
2013-09-09 20:42:17	CindyLinz	你舉這例子有 AST 的確方便惡搞.. 不過沒看到函數相等的比較 ^^|
2013-09-09 20:42:42	godfat	函數相等只是我亂說的，實際上沒聽過有在做這種事的 XD
2013-09-09 20:42:50	-->	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has joined #haskell.tw
2013-09-09 20:43:07	suhorng	AST一樣怎麼感覺怪怪的? 不是應該要有環境嗎@@
2013-09-09 20:43:08	CindyLinz	喔 XD
2013-09-09 20:43:31	CindyLinz	我剛心中想的都是 context 在 global 的情況 XD
2013-09-09 20:43:45	suhorng	我只記得之前看同學寫過一個lisp code, 給他一個函數 f, 他會噴回來那個函數 memoize 的版本...
2013-09-09 20:43:47	suhorng	嗯
2013-09-09 20:44:30	godfat	我一個可能的想像是，有一個東西，要擴充他的話，
2013-09-09 20:44:30	godfat	插入的程式必須堅守某個規範，例如不能用標準方式定義變數
2013-09-09 20:44:30	godfat	a = 123
2013-09-09 20:44:30	godfat	這樣不行，應該寫 a = TMVar.new(123) 之類的
2013-09-09 20:44:30	godfat	不過這樣要求使用者，又會顯得囉唆，於是就可以用這種方式，
2013-09-09 20:44:30	godfat	將使用者的 function 轉成內部需要的方式
2013-09-09 20:45:31	godfat	suhorng, 嗯嗯，可能類似那樣沒錯，雖然 memoize 應該靠外部的方式就能做了
2013-09-09 20:47:00	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-09 21:00:50	<--	kanru` (~kanru@193.214.41.96) has quit (Ping timeout: 264 seconds)
2013-09-09 21:14:17	<--	b4283 (~b4283@218-164-127-149.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-09 21:14:32	-->	b4283 (~b4283@218-164-127-149.dynamic.hinet.net) has joined #haskell.tw
2013-09-09 21:33:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-09 21:47:07	-->	kanru` (~kanru@193.160.199.1) has joined #haskell.tw
2013-09-09 21:54:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-09 22:23:26	<--	kanru` (~kanru@193.160.199.1) has quit (Ping timeout: 240 seconds)
2013-09-09 22:27:49	<--	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has left #haskell.tw
2013-09-09 22:32:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-09 22:34:00	-->	favonia (~favonia@128.237.205.196) has joined #haskell.tw
2013-09-09 22:34:00	<--	favonia (~favonia@128.237.205.196) has quit (Changing host)
2013-09-09 22:34:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-09 22:35:39	-->	kanru` (~kanru@201.42.214.193.static.cust.telenor.com) has joined #haskell.tw
2013-09-09 22:54:31	<--	b4283 (~b4283@218-164-127-149.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-09 22:59:12	-->	b4283 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-09 23:03:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-09 23:05:18	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-09 23:20:02	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Remote host closed the connection)
2013-09-09 23:23:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-09 23:28:10	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-09 23:54:36	<--	kanru` (~kanru@201.42.214.193.static.cust.telenor.com) has quit (Ping timeout: 245 seconds)
2013-09-09 23:59:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-10 00:48:28	<--	b4283 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-10 00:48:28	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-10 02:56:00	-->	caasih (~caasiHuan@114-46-117-11.dynamic.hinet.net) has joined #haskell.tw
2013-09-10 03:29:12	<--	hashcat (~chatzilla@27.242.4.115) has quit (Remote host closed the connection)
2013-09-10 04:50:03	<--	caasih (~caasiHuan@114-46-117-11.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-10 07:09:48	-->	petercommand_ (~chatzilla@unaffiliated/petercommand) has joined #haskell.tw
2013-09-10 07:10:00	<--	petercommand (~chatzilla@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-09-10 07:10:14	--	petercommand_ is now known as petercommand
2013-09-10 09:38:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-10 09:49:28	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-10 09:51:07	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-10 10:33:35	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-10 10:34:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-09-10 10:34:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-10 11:00:30	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-10 11:13:52	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-10 11:21:06	-->	mno2 (~mno2@wlan25.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-10 12:01:19	b4283	_13h: 昨天的討論蠻有趣的
2013-09-10 12:01:54	_13h	哪裡的討論?
2013-09-10 12:02:22	_13h	我積了好幾天的 log 還沒空看，明天又要消失了
2013-09-10 12:02:29	b4283	這個頻道有 logbot XD
2013-09-10 12:04:07	_13h	我出門以後基本上就沒辦法上網了XD
2013-09-10 12:05:37	favonia	b4283: ？
2013-09-10 12:08:20	b4283	昨天第一次聽到把 stack 當 continuation 的說法
2013-09-10 12:09:00	b4283	在王垠解說 complier vs interpreter 那一篇
2013-09-10 12:09:28	_13h	來個連結? 不過本來就是這樣不是嗎? XD
2013-09-10 12:14:58	favonia	我也有這種感覺。看過很多種 continuation 都可以寫成類似 stack 的樣子
2013-09-10 12:15:03	b4283	http://www.zhihu.com/question/21486706
2013-09-10 12:15:10	b4283	http://www.zhihu.com/question/19643954
2013-09-10 12:15:20	b4283	www.zhihu.com/question/21483774/
2013-09-10 12:15:26	favonia	應該說可以寫出一個有 stack 的虛擬機器，把整個 stack 串起來就是 continuation
2013-09-10 12:16:37	b4283	舒跑寫的 lambda vm briefing 好像也有寫到這個耶
2013-09-10 12:18:08	b4283	等一下，會不會我搞錯了
2013-09-10 12:37:14	_13h	第一個連結有點無聊，第二個連結在回文裡有看到 vczh 回應
2013-09-10 12:42:32	_13h	b4283: 沒看到 continuation 的討論啊@_@
2013-09-10 12:43:40	b4283	對..我記錯了，抱歉 @@
2013-09-10 12:45:55	_13h	喔沒關係啦  所以這幾天有在討論這個話題喔？等有空再回頭看一下XD
2013-09-10 12:48:53	_13h	那天的投影片我只看了前面一點點而已，但我對 continuation 理解其實是把動作串在一起而已，簡單的做法就是把 ret 變成 jmp
2013-09-10 12:50:15	_13h	然後就會變成 forth (小誤XD
2013-09-10 12:50:38	_13h	就類似 threaded code interpreter 那樣的運作方式
2013-09-10 12:55:24	<--	mno2 (~mno2@wlan25.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-10 13:17:48	miaout17__	https://plus.google.com/u/0/117380487359344039293/posts/SR5nvQ2J1Xi
2013-09-10 13:18:01	miaout17__	Comment: Scala is very weird (?)
2013-09-10 13:18:55	-->	Yu-Lin (24ec1330@gateway/web/freenode/ip.36.236.19.48) has joined #haskell.tw
2013-09-10 13:25:50	CindyLinz	"Yin programming language" !
2013-09-10 13:47:33	-->	mno2 (~mno2@wlan70.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-10 13:52:44	-->	kanru` (~kanru@148.122.12.62) has joined #haskell.tw
2013-09-10 13:59:30	<--	mno2 (~mno2@wlan70.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-10 14:06:15	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-vlslsmtdozsqimvz) has quit (Ping timeout: 245 seconds)
2013-09-10 14:09:35	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-vnxjvfpbpsxfadll) has quit (Ping timeout: 245 seconds)
2013-09-10 14:22:44	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Read error: Connection timed out)
2013-09-10 14:23:27	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-10 14:32:07	<--	kanru` (~kanru@148.122.12.62) has quit (Ping timeout: 260 seconds)
2013-09-10 15:22:15	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-10 15:42:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-09-10 16:02:44	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-hngnjkxjyjdbonsx) has joined #haskell.tw
2013-09-10 16:05:39	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-ncdslrwfkanemors) has joined #haskell.tw
2013-09-10 16:20:49	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-10 16:34:50	-->	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-10 16:41:51	mno2	我也不太喜歡 scala ，不過好像越來越多人用，為了吃飯還是學一下。
2013-09-10 17:08:10	drbean	:-)
2013-09-10 17:11:15	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 260 seconds)
2013-09-10 17:18:28	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-09-10 17:18:28	<--	darkx (~x4r@140.113.27.40) has quit (*.net *.split)
2013-09-10 17:18:28	<--	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has quit (*.net *.split)
2013-09-10 17:18:28	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-ncdslrwfkanemors) has quit (*.net *.split)
2013-09-10 17:18:28	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (*.net *.split)
2013-09-10 17:18:28	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2013-09-10 17:18:29	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-09-10 17:18:29	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (*.net *.split)
2013-09-10 17:18:30	<--	Yu-Lin (24ec1330@gateway/web/freenode/ip.36.236.19.48) has quit (*.net *.split)
2013-09-10 17:18:30	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (*.net *.split)
2013-09-10 17:18:30	<--	miaout17__ (~miaout17@miaout17.net) has quit (*.net *.split)
2013-09-10 17:18:30	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-10 17:18:31	<--	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2013-09-10 17:18:31	<--	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has quit (*.net *.split)
2013-09-10 17:18:31	<--	MnO2__ (~MnO2@1.34.43.236) has quit (*.net *.split)
2013-09-10 17:18:31	<--	logbot__ (~cinch@109.169.58.220) has quit (*.net *.split)
2013-09-10 17:18:31	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-10 17:18:31	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-10 17:18:32	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-09-10 17:18:32	<--	hychen (uid12518@gateway/web/irccloud.com/x-vefebancabsfhgbo) has quit (*.net *.split)
2013-09-10 17:18:32	<--	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has quit (*.net *.split)
2013-09-10 17:18:32	<--	superbil (~uid12362@gateway/web/irccloud.com/x-fgljmndginoruotw) has quit (*.net *.split)
2013-09-10 17:18:33	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2013-09-10 17:21:07	-->	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-10 17:21:07	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-10 17:21:07	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-ncdslrwfkanemors) has joined #haskell.tw
2013-09-10 17:21:07	-->	Yu-Lin (24ec1330@gateway/web/freenode/ip.36.236.19.48) has joined #haskell.tw
2013-09-10 17:21:07	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-10 17:21:07	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-10 17:21:07	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-10 17:21:07	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-10 17:21:07	-->	MnO2__ (~MnO2@1.34.43.236) has joined #haskell.tw
2013-09-10 17:21:07	-->	darkx (~x4r@140.113.27.40) has joined #haskell.tw
2013-09-10 17:21:07	-->	superbil (~uid12362@gateway/web/irccloud.com/x-fgljmndginoruotw) has joined #haskell.tw
2013-09-10 17:21:07	-->	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-10 17:21:07	-->	miaout17__ (~miaout17@miaout17.net) has joined #haskell.tw
2013-09-10 17:21:07	-->	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has joined #haskell.tw
2013-09-10 17:21:07	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-10 17:21:07	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-09-10 17:21:07	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-09-10 17:21:07	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-09-10 17:21:07	-->	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-10 17:21:07	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-10 17:21:07	-->	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-09-10 17:21:07	-->	hychen (uid12518@gateway/web/irccloud.com/x-vefebancabsfhgbo) has joined #haskell.tw
2013-09-10 17:21:07	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-09-10 17:21:18	-->	hashcat (~chatzilla@27.242.4.115) has joined #haskell.tw
2013-09-10 17:22:30	hashcat	scala哪不好了
2013-09-10 18:09:00	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-10 18:10:00	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-09-10 18:28:18	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-10 18:44:32	<--	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-10 19:34:25	MnO2__	先說這只是我看一個下午的感覺。我覺得就純粹語言的層面，Scala 有點複雜。所謂複雜就是你看的語法不太能想像他究竟是怎麼實作或組出來的。很可能你看了一段時間之後，發覺你的直覺跟他的實作機制不同。這點類比的感覺就是 C++
2013-09-10 19:35:05	godfat	同感
2013-09-10 19:35:07	MnO2__	另外有一些特性，像是 implicit，多少會讓人想到 C++ 會自己做 implicit conversion。
2013-09-10 19:35:20	MnO2__	如果沒有加 explicit 的話啦。
2013-09-10 19:35:30	godfat	implicit 超恐怖... 比 c++ 更恐怖 XD
2013-09-10 19:36:24	MnO2__	其實這一項很難想像是一個好處列出來比壞處多的。感覺就是很常會被誤踩的地方 (雖然我沒有實際數據佐證)
2013-09-10 19:36:59	MnO2__	我個人直覺可能類似是 hack，為了要讓某些表象的語法看起來很漂亮而加的
2013-09-10 19:37:04	godfat	我可以想像的狀況是，例如只有 stdlib 裡面這樣用，其他人不要用之類的
2013-09-10 19:37:38	godfat	其中一個狀況是讓 Integer 自動轉成 RichInt
2013-09-10 19:37:55	MnO2__	恩，但這一項也會讓人想到 C++,  我很難想像 C++ 沒寫過一段時間的人可以去碰 STL 裡面的程式
2013-09-10 19:38:29	godfat	要很熟 template 和設計理念 XD
2013-09-10 19:38:36	MnO2__	是的
2013-09-10 19:42:02	MnO2__	不過牽扯到實際面，要在 JVM 上挑一個語言，可能還是會挑 Scala
2013-09-10 19:42:19	godfat	exactly my points...
2013-09-10 19:42:46	MnO2__	在這個年代找工作要迴避掉 JVM 實在太困難了 xD
2013-09-10 19:43:55	godfat	所以我很期待 https://github.com/Frege/frege XDDD
2013-09-10 19:43:55	godfat	雖然都沒實際試過...
2013-09-10 19:48:40	MnO2__	這個嘛.. 聽說 Clojure 有碰到一些 JVM 實作的困難，所以某些寫法 performance 一直上不去。所以我停留在目前 JVM 上 functional lang 感覺是不太有搞頭的印象 xD
2013-09-10 19:50:34	godfat	我記得聽說 clojure 有不少東西是在 clojure 層面自己做，
2013-09-10 19:50:34	godfat	所以確實效率有點上不去。不過 clojure 滿動態的，
2013-09-10 19:50:34	godfat	我會覺得應該跟 scripting language 比啦... XD
2013-09-10 19:53:02	MnO2__	恩，所以我覺得大概就是某些沒那麼要求的 case 用吧
2013-09-10 19:53:17	MnO2__	我自己是學一套就希望他盡量可以弄到夠快
2013-09-10 19:53:44	godfat	我在 ruby 裡打滾久了，不介意 XDD
2013-09-10 20:05:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-10 20:43:48	Yu-Lin	沒人要去申請 PLT 版主嗎？
2013-09-10 20:45:08	favonia	老實說，沒有版主到底會怎樣啊？
2013-09-10 20:45:53	godfat	暫時不會怎麼樣，久了可能會被取消（不一定）
2013-09-10 20:54:34	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-09-10 21:11:53	MnO2__	待廢看板在三個月內無人申請板主，予以砍除看板。
2013-09-10 21:15:08	MnO2__	但沒查到沒人認領究竟會不會進入待廢
2013-09-10 21:16:45	MnO2__	http://www.ptt.cc/man/TransPSY/D1B1/M.1229631737.A.D24.html  舊規定有無版主一個月會進入待廢
2013-09-10 21:16:50	MnO2__	但新的好像沒看到
2013-09-10 21:18:51	hashcat	implicit 是用來傳參數的吧
2013-09-10 21:19:55	hashcat	怎看都沒隱轉換那麼恐怖
2013-09-10 21:20:05	MnO2__	"abc".map(_.toInt)
2013-09-10 21:20:30	MnO2__	"abc" 會從 String 變成 StringOps
2013-09-10 21:21:01	hashcat	先去收東西
2013-09-10 21:22:45	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-10 21:57:07	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-10 21:57:23	-->	b4283 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-10 22:41:05	hashcat	StringOps 是什麼
2013-09-10 22:45:50	<--	hashcat (~chatzilla@27.242.4.115) has quit (Ping timeout: 256 seconds)
2013-09-10 22:46:24	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Remote host closed the connection)
2013-09-10 22:56:34	<--	Yu-Lin (24ec1330@gateway/web/freenode/ip.36.236.19.48) has quit (Quit: Page closed)
2013-09-10 22:56:40	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 245 seconds)
2013-09-10 22:59:51	miaout17__	Scala的String是Java的java.lang.String，但Scala想要對其定義新的操作 (ex. toInt)
2013-09-10 23:01:10	miaout17__	所以就定義了一個class StringOps，定義implicit conversion String->StringOps
2013-09-10 23:01:44	miaout17__	呼叫"123".toInt時，"123"就先自動被轉型為StringOps，再call member function
2013-09-10 23:01:54	-->	cyt93cs (~cyt93cs@140.123.101.4) has joined #haskell.tw
2013-09-10 23:04:52	miaout17__	不過Scala的implicit可能來自很多地方，規則非常混亂 Orz 之前Scala Taiwan聚會walter前輩有一場相關的talk
2013-09-10 23:04:55	miaout17__	http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits
2013-09-10 23:05:19	miaout17__	不同版本行為還可能不一樣 (雖然是edge case, 2.8vs2.9)
2013-09-10 23:07:41	-->	hashcat (~chatzilla@39.12.220.170) has joined #haskell.tw
2013-09-10 23:21:09	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-10 23:38:24	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Read error: Connection reset by peer)
2013-09-10 23:39:25	-->	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has joined #haskell.tw
2013-09-10 23:39:25	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-10 23:51:04	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-11 00:29:56	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Remote host closed the connection)
2013-09-11 00:34:27	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-11 00:35:26	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Remote host closed the connection)
2013-09-11 00:39:57	<--	suhorng (~suhorng@118-166-52-221.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-11 00:43:55	<--	kanru` (~kanru@193.214.41.96) has quit (Ping timeout: 260 seconds)
2013-09-11 00:45:25	<--	b4283 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-11 00:55:34	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-11 01:36:20	<--	superbil (~uid12362@gateway/web/irccloud.com/x-fgljmndginoruotw) has quit (Ping timeout: 260 seconds)
2013-09-11 02:31:16	-->	superbil (uid12362@gateway/web/irccloud.com/x-gzljltcoawlchqkj) has joined #haskell.tw
2013-09-11 02:38:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-11 03:54:47	<--	hashcat (~chatzilla@39.12.220.170) has quit (Ping timeout: 260 seconds)
2013-09-11 04:02:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-11 04:43:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-11 05:19:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-11 05:59:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-11 07:46:34	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-11 09:01:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-09-11 09:47:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-11 09:48:49	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-11 10:25:33	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-11 10:36:17	-->	mno2 (~mno2@wlan30.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-11 12:09:46	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-11 12:36:59	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 260 seconds)
2013-09-11 12:52:28	<--	logbot__ (~cinch@109.169.58.220) has quit (Remote host closed the connection)
2013-09-11 12:52:38	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-11 13:01:23	<--	mno2 (~mno2@wlan30.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-11 13:05:01	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-11 13:06:16	-->	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-11 13:07:55	<--	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has quit (Client Quit)
2013-09-11 13:26:33	<--	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 240 seconds)
2013-09-11 13:27:38	-->	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-09-11 14:03:57	-->	godfat1 (~Adium@36-224-194-37.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-11 14:33:47	-->	mno2 (~mno2@wlan82.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-11 15:28:13	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-11 15:31:57	<--	godfat1 (~Adium@36-224-194-37.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-09-11 15:55:56	-->	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-11 16:02:55	<--	kanru` (~kanru@193.214.41.96) has quit (Ping timeout: 264 seconds)
2013-09-11 16:27:55	<--	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-09-11 16:31:37	-->	hashcat (~chatzilla@1-172-250-47.dynamic.hinet.net) has joined #haskell.tw
2013-09-11 16:35:02	hashcat	發現這裡的人數有灌水
2013-09-11 16:39:52	hashcat	scala的那種型別隱轉換行為有沒有什麼比較大影響?
2013-09-11 16:40:44	hashcat	我想法是只要對使用這語言的人不會造成擾亂就好了
2013-09-11 16:46:30	mno2	這可能要問寫過比較大的 project 的人才知道
2013-09-11 16:47:55	mno2	可以寄信請教一下 walter chang: https://plus.google.com/103943309878727777440/about
2013-09-11 16:50:39	hashcat	看看
2013-09-11 16:51:41	-->	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-11 16:53:18	-->	godfat1 (~Adium@36-224-194-37.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-11 16:56:19	<--	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-11 17:06:56	-->	kanru` (~kanru@193.160.199.1) has joined #haskell.tw
2013-09-11 17:23:38	<--	kanru` (~kanru@193.160.199.1) has quit (Ping timeout: 264 seconds)
2013-09-11 17:32:52	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-11 17:59:25	<--	hashcat (~chatzilla@1-172-250-47.dynamic.hinet.net) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-11 18:58:07	<--	kanru` (~kanru@193.214.41.96) has quit (Ping timeout: 246 seconds)
2013-09-11 19:05:32	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-11 19:06:37	<--	mno2 (~mno2@wlan82.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-11 19:54:32	-->	Yu-Lin (24ec1822@gateway/web/freenode/ip.36.236.24.34) has joined #haskell.tw
2013-09-11 20:08:25	-->	b4283 (~b4283@1-172-87-27.dynamic.hinet.net) has joined #haskell.tw
2013-09-11 20:35:11	-->	suhorng (~suhorng@118-166-51-54.dynamic.hinet.net) has joined #haskell.tw
2013-09-11 20:49:21	<--	godfat1 (~Adium@36-224-194-37.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-09-11 21:01:27	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-11 21:04:16	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-11 21:10:34	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-11 21:18:47	<--	Yu-Lin (24ec1822@gateway/web/freenode/ip.36.236.24.34) has quit (Quit: Page closed)
2013-09-11 21:29:03	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-11 21:35:09	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-11 21:40:26	-->	godfat (~Adium@114-45-191-124.dynamic.hinet.net) has joined #haskell.tw
2013-09-11 22:01:37	-->	b4284 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-11 22:05:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-11 22:43:18	<--	b4284 (~b4283@118.150.139.66) has quit (Ping timeout: 264 seconds)
2013-09-11 22:44:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-11 22:48:21	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Remote host closed the connection)
2013-09-11 22:54:53	-->	b4284 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-11 23:18:51	-->	liuzhoou (~liuzhoou@101.80.73.110) has joined #haskell.tw
2013-09-11 23:22:24	<--	suhorng (~suhorng@118-166-51-54.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-11 23:39:14	<--	logbot__ (~cinch@109.169.58.220) has quit (Ping timeout: 264 seconds)
2013-09-11 23:57:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-12 00:03:31	<--	kanru` (~kanru@193.214.41.96) has quit (Ping timeout: 264 seconds)
2013-09-12 00:05:11	<--	liuzhoou (~liuzhoou@101.80.73.110) has quit (Remote host closed the connection)
2013-09-12 00:15:48	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-12 00:38:09	<--	b4283 (~b4283@1-172-87-27.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-12 00:39:33	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 01:18:14	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-12 02:01:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-12 02:31:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 02:42:02	-->	logbot____ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-12 02:42:28	<--	logbot__ (~cinch@109.169.58.220) has quit (Ping timeout: 264 seconds)
2013-09-12 03:01:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-12 03:04:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 04:23:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-12 05:07:57	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 05:17:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-12 05:18:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 06:18:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-12 06:43:44	<--	darkx (~x4r@140.113.27.40) has quit (Remote host closed the connection)
2013-09-12 06:50:34	<--	b4284 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-12 08:30:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 11:09:32	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-12 11:39:03	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-12 11:39:20	<--	mno2 (~mno2@1.34.43.236) has quit (Read error: Connection reset by peer)
2013-09-12 11:40:09	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-12 12:22:11	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-12 12:36:50	<--	mno2 (~mno2@1.34.43.236) has quit (Ping timeout: 264 seconds)
2013-09-12 12:40:12	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-12 12:40:28	<--	mno2 (~mno2@1.34.43.236) has quit (Read error: Connection reset by peer)
2013-09-12 12:41:15	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-12 12:55:32	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-12 14:36:22	CindyLinz	mno2: jaiyalas 向你徵稿.. XD
2013-09-12 14:36:29	CindyLinz	mno2: 10.1 喔~
2013-09-12 14:37:19	mno2	喔喔，好 xD
2013-09-12 14:37:56	mno2	有 deadline 好像比較願意動工，要不然為了找工作都停擺了 wwww
2013-09-12 14:39:03	mno2	有人有認識在 wikimedia 當過 engineer 的嗎？
2013-09-12 14:39:12	CindyLinz	mno2: 沒錯.... :D
2013-09-12 14:39:26	CindyLinz	像我給的題目... 我根本還沒做出來.... XD
2013-09-12 14:40:13	mno2	哈哈，自己的 project 真的很容易停擺
2013-09-12 14:45:59	CindyLinz	嗯嗯, 覺得這樣有一點半自願半強迫好像也不錯.... 現在的自己把未來的自己賣掉, 到時候再來怨恨過去的自己這樣.... XD
2013-09-12 15:08:56	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-12 15:10:56	CindyLinz	好像也不錯的觀點 # http://www.yinwang.org/blog-cn/2013/03/08/on-syntax/ (談語法)
2013-09-12 15:11:14	CindyLinz	# Haskell，ML，Coq，Agda，这些“超高级”的语言设计，其实都中了这个圈套。在 Coq 和 Agda 里面，你不但可以使用中缀表达式，还可以定义所谓的 "mixfix" 表达式。这样其实是把简单的问题复杂化。想让自己看起来像“数学”，很神秘的样子，其实是学会了数学的糟粕，自讨苦吃。
2013-09-12 15:11:46	CindyLinz	我只有想過 Agda 那樣 if_then_else_ 的設計很不錯
2013-09-12 15:12:04	CindyLinz	沒有想過從另一個角度來看, 它反而是非常醜 :p
2013-09-12 15:17:59	<--	godfat (~Adium@114-45-191-124.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-12 15:22:42	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-12 15:46:00	-->	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-12 15:46:34	-->	godfat1 (~Adium@36-224-214-9.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-12 15:50:50	<--	godfat (~Adium@36-224-209-71.dynamic-ip.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-12 16:17:21	godfat1	mno2 在找工作喔？在 wikimedia 會碰到 wikipedia 嗎？
2013-09-12 16:17:24	godfat1	我也有一堆想做的東西後來沒做完，沒有直接需求的話動力不是很夠..
2013-09-12 16:17:24	godfat1	不過值得慶幸的是其實也有不少是已經做完的了，沒做的部分大概是
2013-09-12 16:17:24	godfat1	宣傳美化之類的... XD
2013-09-12 16:17:26	--	godfat1 is now known as godfat
2013-09-12 16:18:25	mno2	godfat1: 對啊
2013-09-12 16:19:31	mno2	wikimedia 的話，底下全部的 project 都會碰到吧。看他系統架構是蠻有趣的，全部都公開在網路上
2013-09-12 16:19:31	godfat	是喔，晚點找來看看
2013-09-12 16:19:38	godfat	希望你能找到一個有趣的地方 XD
2013-09-12 16:19:51	mno2	我希望找到寫 Haskell 的工作 xD
2013-09-12 16:19:59	godfat	語法方面... 我覺得我還是有 lisp 閱讀障礙 :/
2013-09-12 16:20:09	godfat	galois! XD
2013-09-12 16:20:49	mno2	那太困難了，大概要學術血統純正才比較有機會
2013-09-12 16:31:38	<--	kanru` (~kanru@193.214.41.96) has quit (Ping timeout: 256 seconds)
2013-09-12 16:38:15	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Read error: Connection reset by peer)
2013-09-12 16:38:31	godfat	是喔 XD...
2013-09-12 16:41:07	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-12 16:56:35	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 260 seconds)
2013-09-12 17:42:00	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-12 18:09:13	godfat	好棒啊 http://www.jsfuck.com/
2013-09-12 18:32:30	-->	Yu-Lin (24ec1605@gateway/web/freenode/ip.36.236.22.5) has joined #haskell.tw
2013-09-12 18:43:20	Yu-Lin	其實我蠻喜歡 scheme
2013-09-12 18:43:54	Yu-Lin	只是實作品之間的差異，讓我有點哭哭
2013-09-12 18:44:30	godfat	有推薦哪一個版本嗎？
2013-09-12 18:48:35	Yu-Lin	之前我只用過 chicken scheme 跟另外一個忘記名子的實作
2013-09-12 18:48:44	godfat	XD
2013-09-12 18:48:46	Yu-Lin	兩邊都宣稱符合 R5RS
2013-09-12 18:49:46	Yu-Lin	不過用的 keyword 不太一樣，所以相同的程式碼，要丟給另一個實作品跑，還是要改一些東西
2013-09-12 18:59:19	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-12 19:04:30	<--	logbot____ (~cinch@109.169.58.220) has quit (Ping timeout: 248 seconds)
2013-09-12 19:09:49	-->	logbot____ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-12 19:43:01	<--	godfat (~Adium@36-224-214-9.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-09-12 19:57:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-12 20:57:29	-->	godfat (~Adium@49.218.44.171) has joined #haskell.tw
2013-09-12 21:40:46	<--	logbot____ (~cinch@109.169.58.220) has quit (Remote host closed the connection)
2013-09-12 21:40:54	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-12 21:44:27	mno2	matz ruby 真的太肥了… logbot 一天到晚掛..
2013-09-12 21:44:33	godfat	換 jruby 或 rubinius?
2013-09-12 21:45:12	mno2	不知道耶，可以這樣直接搬嗎?
2013-09-12 21:45:28	godfat	要瞧瞧 logbot 怎麼寫的 XD
2013-09-12 21:45:59	godfat	是哪一個啊？查 logbot 東西一堆 @@
2013-09-12 21:46:26	mno2	https://github.com/g0v/Logbot
2013-09-12 21:47:10	mno2	其實架構蠻簡單的，只是太多 process 了
2013-09-12 21:48:17	mno2	隨便 top 看一下就八隻 ruby，每隻將近 40 M
2013-09-12 21:50:25	mno2	god, sinatra, logbot, foreman，這樣應該就四隻了吧，不知道剩下是 sinatra 多 fork 的還是怎樣
2013-09-12 21:50:39	-->	b4283 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-12 21:51:35	mno2	看起來都透過 shotgun 出來的
2013-09-12 21:55:31	b4283	god, sinatra, logbot 和 foreman 四個人在一起打牌... (誤)
2013-09-12 22:00:46	<--	godfat (~Adium@49.218.44.171) has quit (Quit: Leaving.)
2013-09-12 22:11:48	<--	mno2 (~mno2@1.34.43.236) has left #haskell.tw
2013-09-12 22:11:59	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-12 22:54:22	-->	godfat (~Adium@114-45-191-124.dynamic.hinet.net) has joined #haskell.tw
2013-09-12 22:57:39	godfat	用到 eventmachine 呀.. 這個 java 支援好像有點問題
2013-09-12 22:57:40	godfat	不過如果問題是八隻 process 太多的話，也許換別的幫助不大..
2013-09-12 23:00:50	godfat	好好瘦身一下應該是沒問題...
2013-09-12 23:01:40	godfat	shotgun 和 foreman 應該都能拿掉，server 換個比較有效率的
2013-09-12 23:01:40	godfat	god 不確定有沒有需要
2013-09-12 23:07:48	CindyLinz	godfat: god 是你寫的嗎? o.o
2013-09-12 23:08:52	godfat	XDDD 不是...
2013-09-12 23:09:20	godfat	聽說 god memory leak 嚴重，所以需要 god 監視 god (?)
2013-09-12 23:11:55	CindyLinz	聽起來很奇怪... (蓋章)
2013-09-12 23:12:13	CindyLinz	god 是 resource monitor?
2013-09-12 23:12:22	godfat	process monitor
2013-09-12 23:12:32	CindyLinz	嗯嗯嗯
2013-09-12 23:23:17	-->	kanru` (~kanru@201.42.214.193.static.cust.telenor.com) has joined #haskell.tw
2013-09-12 23:26:32	mno2	godfat: server 有哪隻比較好？
2013-09-12 23:27:29	godfat	如果前面可以掛 nginx 的話，大概用 unicorn 吧
2013-09-12 23:28:54	mno2	我前面已經掛了 nginx 了
2013-09-12 23:29:12	mno2	所以e93
2013-09-12 23:29:24	mno2	所以改 include unicorn 就可以了？
2013-09-12 23:29:47	mno2	中間接口有一樣嗎？
2013-09-12 23:29:56	godfat	Gemfile 裡面要加 unicorn, 然後啟動 script 要改成 unicorn -p PORT ...
2013-09-12 23:30:18	godfat	其他應該是都一樣了
2013-09-12 23:30:19	godfat	不過不知道他 eventmachine 用在哪裡.....
2013-09-12 23:31:46	godfat	你現在是怎麼跑的？要我完整改一份嗎？
2013-09-12 23:32:11	mno2	就照他說明寫的: screen -> forman start
2013-09-12 23:33:20	godfat	forman start 基本上就是跑 Procfile 裡 web: 那一行，所以是
2013-09-12 23:33:21	godfat	shotgun -o 0.0.0.0 -p 15000 config.ru
2013-09-12 23:33:49	godfat	shotgun 我看不出來有什麼意義，除非 server 重開很慢又一邊在編輯修改...
2013-09-12 23:34:05	godfat	所以直接改成 unicorn -p 15000 應該就行了
2013-09-12 23:34:20	mno2	shotgun 主要的作用是？
2013-09-12 23:34:58	godfat	根據我剛剛瞥過去的理解，就是我改 code 不用重開 server 也能看到更新後的樣子
2013-09-12 23:35:08	godfat	所以應該只有在開發時才用吧..
2013-09-12 23:36:13	godfat	啊啊，forman start 應該還會跑 ruby logbot.rb
2013-09-12 23:36:13	godfat	所以這個也要一起跑
2013-09-12 23:37:49	mno2	恩
2013-09-12 23:55:25	<--	Yu-Lin (24ec1605@gateway/web/freenode/ip.36.236.22.5) has quit (Quit: Page closed)
2013-09-13 00:03:27	mno2	http://www.quora.com/Jokes/What-are-some-good-math-jokes
2013-09-13 00:03:38	mno2	第一個回答很北七，但我笑了 xD
2013-09-13 00:05:05	godfat	XDDDDDDDDD
2013-09-13 00:06:17	mno2	http://www.quora.com/Lilly-Kuleshova/Posts/How-Japanese-school-children-learn-to-multiply  這個太強了 wwww
2013-09-13 00:08:53	godfat	我有聽過這個作法耶
2013-09-13 00:09:11	b4283	光是對準最後一個階段的加法就很累了 =_=
2013-09-13 00:09:39	mno2	我有看過，但沒看過乘那麼多位的
2013-09-13 00:09:57	godfat	XDDD
2013-09-13 00:15:23	-->	tiglog (~tiglog@114.243.56.143) has joined #haskell.tw
2013-09-13 00:15:27	godfat	http://www.wncinfosec.com/dropbox-opening-my-docs/
2013-09-13 00:15:27	godfat	有人特製一些軟體打開後會 callback 回去的文件，
2013-09-13 00:15:27	godfat	注意到 dropbox 會看你的文件內容
2013-09-13 00:15:28	<--	kanru` (~kanru@201.42.214.193.static.cust.telenor.com) has quit (Ping timeout: 264 seconds)
2013-09-13 00:26:31	mno2	http://www.quora.com/Jokes/What-are-some-jokes-about-Windows-8
2013-09-13 00:30:29	mno2	http://www.quora.com/What-is-it-like-to-have-a-name-that-is-regularly-rejected-as-fake-by-forms-on-web-sites
2013-09-13 00:33:23	godfat	我認真覺得名字不該有限制...
2013-09-13 00:35:08	CindyLinz	那我的名字可以叫作 "cindy' or 1 --" 嗎?
2013-09-13 00:35:39	godfat	可以，因為不行的話就是程式寫不好 XD
2013-09-13 00:35:43	CindyLinz	XDDD
2013-09-13 00:40:06	<--	tiglog (~tiglog@114.243.56.143) has quit (Quit: Leaving)
2013-09-13 00:40:17	<--	b4283 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-13 00:58:25	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-13 01:38:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-13 03:21:56	<--	MnO2__ (~MnO2@1.34.43.236) has quit (Quit: Leaving)
2013-09-13 03:23:33	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-13 07:17:55	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-13 09:29:51	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-13 09:54:28	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-13 10:06:44	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-13 11:14:42	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell.tw
2013-09-13 11:43:41	-->	Yu-Lin (24ec1572@gateway/web/freenode/ip.36.236.21.114) has joined #haskell.tw
2013-09-13 11:52:46	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-13 12:19:46	<--	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has quit (Ping timeout: 260 seconds)
2013-09-13 13:05:34	-->	hashcat (~chatzilla@39.12.220.170) has joined #haskell.tw
2013-09-13 13:33:50	<--	petercommand (~chatzilla@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-09-13 13:42:35	<--	logbot__ (~cinch@109.169.58.220) has quit (Remote host closed the connection)
2013-09-13 14:02:43	MnO2	godfat: unicorn 可以直接跑 rack 嗎?
2013-09-13 14:17:09	-->	kk1fff (uid13630@gateway/web/irccloud.com/x-amfxnmomlafkfpcy) has joined #haskell.tw
2013-09-13 14:26:27	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-13 14:27:29	<--	logbot__ (~cinch@109.169.58.220) has quit (Remote host closed the connection)
2013-09-13 14:28:08	MnO2	godfat: unicorn 我不知道哪裡弄不好，接 rack 都會狂拚甚麼 reload 裡面找不到 run Rack::URLMap 的東西
2013-09-13 14:28:14	MnO2	換用 thin 就好了
2013-09-13 14:28:32	MnO2	(我有用 rvm, 不知道跟這有沒有關係)
2013-09-13 14:33:43	MnO2	換變成其他問題 xD
2013-09-13 14:33:56	MnO2	太慘惹
2013-09-13 14:44:11	godfat	unicorn 可以跑 rack
2013-09-13 14:44:11	godfat	URLMap 在 rack 裡，不應該沒有 @@
2013-09-13 14:44:11	godfat	Gemfile 有改嗎？ thin 的錯誤是啥？
2013-09-13 14:47:57	MnO2	!! Unexpected error while processing request: undefined method `each' for #<EventMachine::PeriodicTimer:0xa6f5900>
2013-09-13 14:47:57	MnO2	 狂噴
2013-09-13 14:48:07	MnO2	噴一下後就掛了 <-- 這是用 thin 的錯誤
2013-09-13 14:48:43	godfat	.....@@" 看來這要 debug 了... XD
2013-09-13 14:49:36	MnO2	http://pastebin.com/j4qH3LRm   gemfile 都加了
2013-09-13 14:50:34	MnO2	不知道跟 openvz 有沒有關係
2013-09-13 14:50:56	godfat	奇怪，我看起來他好像寫不對... 原本會動嗎 @_@
2013-09-13 14:52:18	godfat	解釋一下好了... 看起來他是把 EventMachine::PeriodicTimer 當成 response body 丟回去了
2013-09-13 14:52:18	godfat	然後 https://github.com/g0v/Logbot/blob/master/app.rb#L72-L88
2013-09-13 14:52:18	godfat	這樣寫就很怪，怎麼會在 request cycle 裡面執行 event loop?
2013-09-13 14:52:18	godfat	結果就把這個 timer 傳回去了（推測）
2013-09-13 14:52:30	MnO2	用 shotgun 就會動 xD
2013-09-13 14:52:36	godfat	........
2013-09-13 14:52:48	MnO2	把 shotgun 拿掉就甚麼都動不了 xDD
2013-09-13 14:53:01	godfat	絕對寫壞了
2013-09-13 14:53:15	godfat	shotgun:
2013-09-13 14:53:15	godfat	The shotgun command starts one of Rack's supported servers (e.g., mongrel, thin,
2013-09-13 14:53:16	godfat	webrick) and listens for requests but *does not load any part of the actual
2013-09-13 14:53:16	godfat	application*.
2013-09-13 14:53:43	MnO2	原本就直接接 webrick 吧
2013-09-13 14:54:03	MnO2	應該是預設的 ?
2013-09-13 14:54:56	godfat	webrick 是 stdlib 裡的 server, 純 ruby 寫成，很慢，而且常常有問題
2013-09-13 14:55:43	b4283	stdlib 反而比較有問題 @@
2013-09-13 14:56:29	-->	suhorng (8c7004c3@gateway/web/freenode/ip.140.112.4.195) has joined #haskell.tw
2013-09-13 14:56:36	godfat	我猜是少人用吧，而且太慢沒辦法在 production 上跑
2013-09-13 14:56:54	godfat	碰到問題大部分的人解法也可能是就換一套，懶得修 XD
2013-09-13 14:57:24	godfat	（包括我...畢竟有時候很難說到底是不是真問題，要花時間看）
2013-09-13 14:58:24	godfat	web server 這種東西真是乍看之下都沒問題，承載量一大就見真章，
2013-09-13 14:58:25	godfat	然後又很難說為什麼有差 @@"...
2013-09-13 14:59:20	b4283	其實 log 放 webrick 就可以了啦 XD
2013-09-13 14:59:29	b4283	每天的 request 不曉得有沒有 10 個 XD
2013-09-13 15:00:48	b4283	喔喔，現有的是放在 nginx 上..
2013-09-13 15:00:58	MnO2	b4283: 那一台 memory 不大，最近開始會把 memory 吃爆。所以想說要瘦身
2013-09-13 15:02:17	godfat	orz 原本的寫法.... 他熟 ruby 嗎？ @@"
2013-09-13 15:02:18	godfat	https://github.com/g0v/Logbot/commit/1b140d3d9cdb1c3045038bc67a0740d71cb98cd4
2013-09-13 15:02:23	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-13 15:03:17	godfat	我抓下來看看怎麼拿掉 shotgun 好了
2013-09-13 15:03:58	MnO2	太慘惹
2013-09-13 15:05:16	MnO2	我現在先弄回原來的設定，不過現在大概都是撐不到一天就會掛
2013-09-13 15:05:57	MnO2	理論上 god 應該要能夠重啟才對.. 不知道為什麼沒用
2013-09-13 15:08:55	godfat	暫離，回來再看
2013-09-13 15:25:26	-->	kanru` (~kanru@193.214.41.96) has joined #haskell.tw
2013-09-13 16:32:42	godfat	寫得好詭異，看不太懂...
2013-09-13 16:40:25	godfat	我可能看懂了.... 我想想怎麼做比較對..
2013-09-13 16:41:18	<--	suhorng (8c7004c3@gateway/web/freenode/ip.140.112.4.195) has quit
2013-09-13 16:59:42	-->	UnderCrux (~tonyhusky@140.113.121.170) has joined #haskell.tw
2013-09-13 17:21:20	<--	hashcat (~chatzilla@39.12.220.170) has quit (Ping timeout: 246 seconds)
2013-09-13 17:23:08	-->	hashcat (~chatzilla@39.12.220.170) has joined #haskell.tw
2013-09-13 17:44:20	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-13 17:51:24	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-13 17:52:31	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-13 17:54:13	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-13 18:46:47	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-13 19:25:49	MnO2	godfat: 我似乎知道問題在哪了
2013-09-13 19:25:49	MnO2	http://libraggi.rubyforge.org/async_sinatra/Sinatra/Async.html#method-i-aget
2013-09-13 19:25:49	MnO2	用 aget 之後就好了
2013-09-13 19:26:14	MnO2	(只是 trial and error 試出來的，其實我還沒看完)
2013-09-13 19:26:25	godfat	XD ok...
2013-09-13 19:26:26	godfat	我正在大改寫 -_-
2013-09-13 19:26:26	godfat	async_sinatra 整個就是個 hack...
2013-09-13 19:27:14	godfat	大抵上是改好了，把整個 sinatra 和 eventmachine 拔掉了...
2013-09-13 19:27:15	godfat	不過 poll 的部份 http log 不見了，正在看要怎麼弄出來
2013-09-13 19:27:39	MnO2	xD
2013-09-13 19:28:00	MnO2	你說 async sinatra 是 hack 是怎麼一回事
2013-09-13 19:28:14	MnO2	等你改完可以大概解釋一下嗎? xD
2013-09-13 19:28:33	godfat	我覺得那整個就是在一個歪掉的架構下用更歪的方式把東西弄出來
2013-09-13 19:28:34	godfat	ok XD
2013-09-13 19:28:34	godfat	不過滿複雜的，可能要從很前面說起 XD
2013-09-13 19:28:38	MnO2	啊，另外有一個 hack 我想說有沒有好的 gem 可以簡單弄掉
2013-09-13 19:28:42	MnO2	https://github.com/g0v/Logbot/blob/master/views/widget.erb#L20
2013-09-13 19:29:13	MnO2	這邊是在說，如果有人說一句話裡面有連結的話
2013-09-13 19:29:14	godfat	url escape?
2013-09-13 19:29:38	MnO2	web 介面顯示的時候希望換成 <a href="xxxx">xxxx</a>
2013-09-13 19:29:57	MnO2	然後 au 用了一個噁心的方式解掉 xD
2013-09-13 19:30:03	MnO2	原本他沒有 escape
2013-09-13 19:30:03	godfat	這個好多年前我有做過 XDD
2013-09-13 19:30:23	godfat	https://github.com/godfat/friendly_format
2013-09-13 19:30:46	godfat	最後一次更新是兩年前，不知道還會不會動 XDD
2013-09-13 19:32:23	MnO2	看起來不錯
2013-09-13 19:32:45	godfat	https://github.com/godfat/friendly_format/blob/master/lib/friendly_format.rb#L104-L123
2013-09-13 19:32:45	godfat	也是滿噁心的 XD
2013-09-13 19:32:45	godfat	不過 irc 裡面沒有 html 吧？這樣不用做這麼複雜
2013-09-13 19:33:11	MnO2	照他的邏輯是不用，只要 link 就好
2013-09-13 19:33:22	MnO2	其他就只是 escape 調
2013-09-13 19:34:05	MnO2	那個 rexpr 真是噁心..
2013-09-13 19:34:06	godfat	ok, 我晚點看看，應該可以用很簡單的方式處理
2013-09-13 19:34:06	godfat	friendly_format 會很複雜是因為要處理 html
2013-09-13 19:37:36	godfat	確認了 hijack 了之後 Rack::CommonLogger 不能動 @_@...
2013-09-13 19:37:36	godfat	我想想看怎麼處理...
2013-09-13 19:37:36	godfat	我用 hijack 處理 poll 應該會乾淨許多
2013-09-13 19:40:11	MnO2	為了修 Logbot 讓我對 ruby 生態系多了解不少 xD
2013-09-13 19:44:49	godfat	恭喜 XDD
2013-09-13 19:47:13	godfat	你知道 ajax 的 connection 會 keepalive 嗎？ @_@
2013-09-13 19:50:34	godfat	所以 hijack 後果然要自己處理 log orz...
2013-09-13 19:50:34	godfat	https://github.com/rack/rack/pull/587
2013-09-13 19:59:11	MnO2	keep alive 跟 hijack 有甚麼關係?
2013-09-13 19:59:59	godfat	因為我 hijack 寫得很單純，東西寫完就直接把 socket 關掉了
2013-09-13 19:59:59	MnO2	hijack 可以理解成中間層對 request 動手腳嗎?
2013-09-13 19:59:59	godfat	如果說原本有 keep-alive, 不想因此把他弄壞 XD
2013-09-13 20:00:18	godfat	應該說對 response 動手腳，直接跟 web server 拿 socket
2013-09-13 20:01:50	MnO2	還可以跟 web server 拿 socket @@
2013-09-13 20:01:57	MnO2	總覺得怪怪的
2013-09-13 20:02:25	godfat	我不知道，但至少我覺得 streaming 這樣做比較正常 XD
2013-09-13 20:05:57	<--	kanru` (~kanru@193.214.41.96) has quit (Read error: Operation timed out)
2013-09-13 20:08:10	MnO2	是因為沒有辦法讓 web server 保持住 socket 嗎? 透過 web server 寫回去就會關掉?
2013-09-13 20:09:34	-->	petercommand (~chatzilla@unaffiliated/petercommand) has joined #haskell.tw
2013-09-13 20:09:55	godfat	不是，因為原本 rack 的介面就很難做 streaming
2013-09-13 20:09:55	godfat	原本的想法是 response body 會是 enumerable,
2013-09-13 20:09:55	godfat	但實際上要建立這個 enumerable 很麻煩
2013-09-13 20:11:56	MnO2	喔喔，所以是 rack 他本身在抽象的時候就沒考慮進去
2013-09-13 20:12:20	godfat	我覺得算是考慮不健全 XD 然後後來就一堆奇怪的 hack...
2013-09-13 20:15:39	MnO2	那這樣的話，換 web server 就要重寫?
2013-09-13 20:16:25	godfat	有些奇怪的 hack, 其他 server 也支援..
2013-09-13 20:16:26	godfat	rainbows 裡就支援了一些 eventmachine 上很詭異的 hack
2013-09-13 20:17:19	godfat	我問 unicorn/rainbows 作者為什麼要用這些奇怪的作法，不用其他比較正常的方式
2013-09-13 20:17:20	godfat	作者說... 因為其他 server 支援，做起來也不難，所以就做到支援這樣
2013-09-13 20:19:39	MnO2	恩..  聽起來跟 unix 用 . 開頭當隱藏檔是類似的情節 xD
2013-09-13 20:21:41	godfat	也許吧.. XD 不過 unix 的隱藏檔不會造成更多的錯誤，
2013-09-13 20:21:42	godfat	rack 裡的 async.callback 等等東西，根本愈搞愈歪，
2013-09-13 20:21:42	godfat	最扯的是 rack-fiber_pool O_o
2013-09-13 20:22:12	godfat	講錯...
2013-09-13 20:22:53	godfat	是 async-rack
2013-09-13 20:22:53	godfat	https://github.com/rkh/async-rack/tree/master/lib/async_rack
2013-09-13 20:22:53	godfat	全部的東西都重作一次 O_o
2013-09-13 20:24:40	godfat	用 async_sinatra 等於是打爛所有 rack 的 post processing,
2013-09-13 20:24:41	godfat	然後 async_rack 重作 rack 裡的東西，讓用 async_sinatra 時
2013-09-13 20:24:41	godfat	rack 的 post processing 回復正常運作
2013-09-13 20:24:59	godfat	明明應該做在 server 上的東西，做到 application 上，整個就亂七八糟
2013-09-13 20:25:31	MnO2	xD
2013-09-13 20:26:37	MnO2	大亂鬥
2013-09-13 20:28:58	godfat	我當時在看這些，為了搞懂這些花了很多心力
2013-09-13 20:28:58	godfat	覺得超複雜的... 要弄到好超難的
2013-09-13 20:28:58	godfat	但整個理解後，就覺得很詭異，明明在 server 做就好了
2013-09-13 20:28:58	godfat	在 application 上搞這些幹嘛 @_@
2013-09-13 20:28:58	godfat	變成 application 要詐騙 server, 然後東西再自己處理...
2013-09-13 20:29:47	godfat	嘛，仔細想想，我這裡也不用 hijack,
2013-09-13 20:29:47	godfat	改用 rainbows 的話直接卡在那裡就好了，
2013-09-13 20:29:47	godfat	poll 也不是真的要做 streaming
2013-09-13 20:34:30	MnO2	這樣就是只能用 rainbows 嗎?
2013-09-13 20:35:06	godfat	也不是，如果不介意 server 被卡住的話，用啥都可以 XD
2013-09-13 20:36:03	MnO2	喔喔，其他 request 就讓他掉
2013-09-13 20:36:15	godfat	對
2013-09-13 20:36:17	MnO2	其實量也不大，應該是沒差
2013-09-13 20:36:39	godfat	eventmachine 那段就改成這樣：
2013-09-13 20:36:40	godfat	      # we simply block here because we're in a threaded server anyway
2013-09-13 20:36:41	godfat	      n = 0
2013-09-13 20:36:41	godfat	      loop do
2013-09-13 20:36:41	godfat	        sleep 0.5
2013-09-13 20:36:41	godfat	        msgs = fetch_messages(channel, date)
2013-09-13 20:36:41	godfat	        if n <= 120 && json = extract_if(msgs, time)
2013-09-13 20:36:41	godfat	          break json
2013-09-13 20:36:42	godfat	        elsif n <= 120
2013-09-13 20:36:42	godfat	          n += 1
2013-09-13 20:36:43	godfat	        else
2013-09-13 20:36:43	godfat	          break extract(msgs, time)
2013-09-13 20:36:44	godfat	        end
2013-09-13 20:36:44	godfat	      end
2013-09-13 20:39:11	MnO2	break extrfact 是 ?
2013-09-13 20:40:17	godfat	break value 就是跳出 loop 且 loop 的 value 是 value
2013-09-13 20:40:17	godfat	extract(msgs, time) 會給 json
2013-09-13 20:40:59	godfat	所以這裡是找到資料就給 json,
2013-09-13 20:40:59	godfat	反之最多等 60 秒，每 0.5 秒看一次，
2013-09-13 20:41:00	godfat	還是沒東西，仍然吐個 json 回去
2013-09-13 20:42:26	godfat	ok, 有興趣的話試試看 XD
2013-09-13 20:42:27	godfat	https://github.com/godfat/Logbot
2013-09-13 20:42:27	godfat	我沒測過 foreman 和 god, 只照字面上調整而已
2013-09-13 20:42:56	MnO2	OK
2013-09-13 20:47:29	MnO2	Gemfile 裡面沒有 rainbows
2013-09-13 20:47:44	godfat	orz 沒改到 XD
2013-09-13 20:48:06	godfat	pushed
2013-09-13 20:52:04	MnO2	https://gist.github.com/MnO2/6550273
2013-09-13 20:52:07	MnO2	jellyfish crash
2013-09-13 20:52:33	godfat	__dir__ 好像是 ruby 2.0 才有.. @_@
2013-09-13 20:52:50	godfat	能升級嗎？ XD
2013-09-13 20:53:06	MnO2	可
2013-09-13 20:53:30	godfat	太好了 XD 不過我還是加個相容介面
2013-09-13 20:56:27	MnO2	現在主流已經是 2.0 了嗎
2013-09-13 20:56:39	godfat	我想應該是？
2013-09-13 20:57:57	MnO2	亂碼 @@
2013-09-13 20:57:59	MnO2	http://blog-mno2.csie.org/channel/codefortomorrow/2013-09-11
2013-09-13 20:58:50	godfat	我看起來正常，我加個 header 好了
2013-09-13 20:59:21	MnO2	我前面有擋 nginx 做 virtual host
2013-09-13 20:59:28	MnO2	可能是 header 沒有 forward
2013-09-13 21:01:15	godfat	pushed
2013-09-13 21:01:16	godfat	-use Rack::ContentType
2013-09-13 21:01:16	godfat	+use Rack::ContentType, 'text/html; charset=utf-8'
2013-09-13 21:04:32	MnO2	好像可以正常工作了，喔耶!
2013-09-13 21:04:51	godfat	耶~~ 希望有比較瘦 XD
2013-09-13 21:04:51	MnO2	感謝 godfat
2013-09-13 21:04:56	godfat	不會 XD
2013-09-13 21:05:36	MnO2	看起來瘦了很多 www
2013-09-13 21:05:55	godfat	是喔 @_@ 還沒跑多久就看得出來？
2013-09-13 21:06:24	MnO2	process 數就不同啊
2013-09-13 21:07:52	godfat	XDD shotgun 一定有問題.. foreman 可以用 shell script 取代（我沒寫，想說才兩行 XD）
2013-09-13 21:07:52	godfat	god 的話我覺得應該是不用才對... unicorn/rainbows 可能都比 god 穩 @_@
2013-09-13 21:09:04	MnO2	太慘了.. monitor 人家的比被 monitor 的還不穩..
2013-09-13 21:09:39	godfat	我也不知道為什麼 @_@ 不過還是滿多人愛用的，可能因為很有彈性吧
2013-09-13 21:13:21	-->	godfat-logbot (~cinch@home.mno2.org) has joined #haskell.tw
2013-09-13 21:13:46	MnO2	新版跑一陣子看看，為了感謝 godfat，取名叫 godfat-logbot
2013-09-13 21:14:50	godfat	XDD
2013-09-13 21:15:04	godfat	logfat
2013-09-13 21:15:43	MnO2	也可以 wwww
2013-09-13 21:22:15	CindyLinz	wwww
2013-09-13 21:23:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-09-13 21:29:45	<--	godfat-logbot (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2013-09-13 21:29:54	-->	logfat (~cinch@home.mno2.org) has joined #haskell.tw
2013-09-13 21:55:11	-->	suhorng (~suhorng@118-166-51-54.dynamic.hinet.net) has joined #haskell.tw
2013-09-13 22:05:56	godfat	話說回來，為什麼是： @msgs[i]["msg"].gsub(/&(?!nbsp;)/, '&amp;') 呀？
2013-09-13 22:05:57	godfat	裡面要處理 html 嗎？
2013-09-13 22:08:46	CindyLinz	為什麼對 &nbsp; 特別處理啊? @@"
2013-09-13 22:09:12	godfat	整句是這樣：
2013-09-13 22:09:13	godfat	<% linked_msg = @msgs[i]["msg"].gsub(/&(?!nbsp;)/, '&amp;').gsub(/<(?!\/?span)/, '&lt;').gsub(/http[s]*:\/\/[^\s]+/, '<a href="\0">\0</a>') %>
2013-09-13 22:09:25	godfat	我想不透 XD
2013-09-13 22:09:34	CindyLinz	原來還有 &lt; XD
2013-09-13 22:10:04	CindyLinz	咦不對 :p
2013-09-13 22:16:21	-->	b4283 (~b4283@36-238-223-205.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-13 22:26:23	<--	petercommand (~chatzilla@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-09-13 22:26:58	-->	petercommand (~chatzilla@unaffiliated/petercommand) has joined #haskell.tw
2013-09-13 22:28:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-13 22:34:39	<--	Yu-Lin (24ec1572@gateway/web/freenode/ip.36.236.21.114) has quit (Quit: Page closed)
2013-09-13 22:41:45	godfat	改成這樣看看
2013-09-13 22:41:46	godfat	https://github.com/godfat/Logbot/commit/9ccfefe085c1d4c39540225d8dc83e10bdfdcf55
2013-09-13 22:41:46	godfat	      def user_text text
2013-09-13 22:41:46	godfat	        autolink(CGI.escape_html(text))
2013-09-13 22:41:46	godfat	      end
2013-09-13 22:41:46	godfat	      def autolink text
2013-09-13 22:41:47	godfat	        text.gsub(%r{https?://\S+\b}, '<a href="\0">\0</a>')
2013-09-13 22:41:48	godfat	      end
2013-09-13 22:42:02	MnO2	不用  html, 只是要跳掉 tag, 所以就直接把 < 變成 &lt;
2013-09-13 22:42:17	MnO2	這樣瀏覽器就不會認成 tag 了
2013-09-13 22:42:33	godfat	ok, 那我這樣做應該沒問題
2013-09-13 22:45:31	<--	suhorng (~suhorng@118-166-51-54.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-13 22:45:47	<--	hashcat (~chatzilla@39.12.220.170) has quit (Ping timeout: 246 seconds)
2013-09-13 22:46:06	MnO2	我以前都沒想過 escape  <  這種招數
2013-09-13 22:46:37	godfat	我還滿常這樣做的，寫起來比較快 XD
2013-09-13 22:47:08	godfat	不過不見得所有地方都有用就是了
2013-09-13 22:51:18	MnO2	https://gist.github.com/MnO2/6551736
2013-09-13 22:51:22	MnO2	現在會噴這個訊息
2013-09-13 22:53:08	godfat	這個 TypeError: no implicit conversion of String into Integer
2013-09-13 22:53:09	godfat	通常表示錯把 array 當成 hash, 因為用字串去當 arrary index..
2013-09-13 22:55:22	godfat	看到問題了，原來我打錯 XD
2013-09-13 22:56:40	godfat	pushed
2013-09-13 22:56:40	godfat	https://github.com/godfat/Logbot/commit/a645ad4f818f8f9911b2a53330ca9d15c902d728
2013-09-13 22:56:40	godfat	原本的 msgs 跟 msg 太像了，看錯..
2013-09-13 22:56:45	MnO2	似乎少一層 index ?
2013-09-13 22:56:56	godfat	對
2013-09-13 22:56:57	MnO2	OK
2013-09-13 22:58:50	<--	logfat (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2013-09-13 22:58:59	-->	logfat (~cinch@home.mno2.org) has joined #haskell.tw
2013-09-13 23:00:31	-->	hashcat (~chatzilla@27.243.74.65) has joined #haskell.tw
2013-09-13 23:28:02	godfat	啊啊啊，我知道為什麼是 &nbsp; 跟 /span 了...
2013-09-13 23:28:03	godfat	居然有這行
2013-09-13 23:28:03	godfat	msg["msg"].gsub!(/^\u0001ACTION (.*)\u0001$/, "<span class=\"nick\">#{msg["nick"]}</span>&nbsp;\\1")
2013-09-13 23:29:32	godfat	修改原始資料不大對... 不過我改下去的話就跟原本格式不合了
2013-09-13 23:34:21	MnO2	那樣就還要再寫一隻做 migration xD
2013-09-13 23:35:21	godfat	:/ 不跑 migration 的話大概就是有些人講話會出現 <span class... 這樣了 XD
2013-09-13 23:35:58	godfat	不過我現在因為一律 escape, 大概已經會開始看到了...
2013-09-13 23:57:20	-->	suhorng (~suhorng@118-166-51-54.dynamic.hinet.net) has joined #haskell.tw
2013-09-14 00:02:50	<--	b4283 (~b4283@36-238-223-205.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-09-14 00:22:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-14 00:31:18	<--	suhorng (~suhorng@118-166-51-54.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-14 01:20:06	<--	kk1fff (uid13630@gateway/web/irccloud.com/x-amfxnmomlafkfpcy) has quit (Quit: Connection closed for inactivity)
2013-09-14 02:01:44	<--	hashcat (~chatzilla@27.243.74.65) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-14 02:11:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-14 03:27:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-14 04:27:21	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-14 04:28:26	<--	godfat (~Adium@114-45-191-124.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-14 09:58:38	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-14 10:08:03	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-14 10:13:30	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-14 10:45:15	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-14 10:57:21	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-14 11:38:31	-->	mno2_ (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-14 11:50:16	mno2_	https://github.com/the-teacher/cocktails_for_programmers/blob/master/cocktails_for_programers.md
2013-09-14 11:50:35	mno2_	我想要 Y-combinator
2013-09-14 12:25:21	--	godfat1 is now known as godfat
2013-09-14 14:05:51	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-14 15:37:49	<--	UnderCrux (~tonyhusky@140.113.121.170) has quit (Remote host closed the connection)
2013-09-14 16:41:35	<--	mno2_ (~mno2@1.34.43.236) has quit (Quit: mno2_)
2013-09-14 16:58:08	-->	MnO2_ (~MnO2@1.34.43.236) has joined #haskell.tw
2013-09-14 17:01:57	<--	MnO2 (~MnO2@1.34.43.236) has quit (Ping timeout: 240 seconds)
2013-09-14 18:57:21	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-14 20:21:22	-->	b4283 (~b4283@36-238-223-109.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-14 20:52:19	<--	b4283 (~b4283@36-238-223-109.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-09-14 21:14:05	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-14 22:54:02	-->	hashcat (~chatzilla@27.243.74.65) has joined #haskell.tw
2013-09-14 23:44:07	hashcat	https://github.com/fogus/baysick
2013-09-15 00:25:12	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-15 01:19:59	<--	hashcat (~chatzilla@27.243.74.65) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-15 10:42:49	-->	b4283 (~b4283@218-164-205-12.dynamic.hinet.net) has joined #haskell.tw
2013-09-15 10:43:52	<--	b4283 (~b4283@218-164-205-12.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-15 11:43:31	-->	b4283 (~b4283@118.150.139.66) has joined #haskell.tw
2013-09-15 12:07:08	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 12:22:36	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-15 12:23:20	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 14:39:21	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-15 14:43:49	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 15:35:58	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-15 15:52:10	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-15 15:53:50	--	irc: disconnected from server
2013-09-15 19:47:29	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-15 19:47:29	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-15 19:47:29	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-15 19:47:29	--	Nicks #haskell.tw: [a2n b4283 cataska_ chihhsin cibs CindyLinz cyt93cs drbean gko godfat hashcat hychen kanru lambdabot letoh logbot__ logfat lwhsu miaout17 miaout17__ mno2 MnO2_ monochrom petercommand superbil UncleHandsome]
2013-09-15 19:47:29	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-09-15 19:47:44	--	Mode #haskell.tw [+cnt]
2013-09-15 19:47:44	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-15 20:54:11	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-15 21:15:12	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 21:37:48	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-15 21:38:06	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 21:38:49	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-09-15 21:40:43	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 21:46:13	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-15 21:46:25	-->	chihhsin (~starbops@140.113.121.170) has joined #haskell.tw
2013-09-15 21:48:10	<--	chihhsin (~starbops@140.113.121.170) has quit (Client Quit)
2013-09-15 21:48:47	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 21:51:22	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-09-15 21:51:50	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-15 22:04:39	-->	suhorng (~suhorng@118-166-56-72.dynamic.hinet.net) has joined #haskell.tw
2013-09-15 22:31:37	<--	hashcat (~chatzilla@27.242.255.2) has quit (Remote host closed the connection)
2013-09-15 23:40:55	<--	suhorng (~suhorng@118-166-56-72.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-16 00:18:56	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-16 01:20:38	<--	b4283 (~b4283@118.150.139.66) has quit (Remote host closed the connection)
2013-09-16 02:59:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 03:58:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-09-16 04:12:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 04:18:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-09-16 06:42:39	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-16 08:03:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 08:20:43	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-16 08:27:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-16 08:29:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 09:00:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-16 09:06:06	-->	mno2 (~mno2@wlan66.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-16 09:45:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 10:11:10	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-16 10:23:03	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-16 11:10:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-16 11:14:51	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 11:41:37	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-09-16 11:55:03	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-09-16 12:13:55	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-09-16 12:16:39	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-16 12:18:23	<--	mno2 (~mno2@wlan66.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-16 12:31:02	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-09-16 13:01:56	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-16 13:13:25	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-16 13:14:04	-->	mno2 (~mno2@wlan40.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-16 13:21:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-16 13:37:19	<--	mno2 (~mno2@wlan40.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-16 14:10:16	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-16 14:44:28	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-16 15:03:00	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-16 16:38:00	-->	liuzhou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-16 16:39:22	<--	liuzhou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-16 16:42:29	-->	hashcat (~chatzilla@27.243.43.132) has joined #haskell.tw
2013-09-16 17:32:19	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-16 18:16:30	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-16 18:25:00	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-16 18:53:48	-->	mno2 (~mno2@1.34.43.236) has joined #haskell.tw
2013-09-16 18:58:27	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-16 20:14:41	-->	b4283 (~b4283@218-164-218-159.dynamic.hinet.net) has joined #haskell.tw
2013-09-16 20:41:00	-->	suhorng (~suhorng@118-166-56-72.dynamic.hinet.net) has joined #haskell.tw
2013-09-16 20:51:50	CindyLinz	mno2: 欸欸, 你還沒跟 jaiyalas 聯絡喔? XD
2013-09-16 20:52:32	mno2	疑？我以為你會跟他說
2013-09-16 20:54:36	CindyLinz	mno2: 不知道題目怎麼說啦 ^^|
2013-09-16 20:55:00	CindyLinz	我只有跟他說你會講, 但是沒有題目 ^^|
2013-09-16 20:55:00	mno2	至少是答應這件事 xD
2013-09-16 20:55:10	CindyLinz	他要放活動網頁啦 XD
2013-09-16 20:55:10	mno2	喔喔，所以現在就要題目喔 xD
2013-09-16 20:55:14	mno2	了解
2013-09-16 20:55:15	CindyLinz	可以改... XD
2013-09-16 20:55:22	CindyLinz	只是現在放 TBA 太瞎.... wwww
2013-09-16 20:58:00	mno2	我送一個 tweet 給他了
2013-09-16 21:15:00	CindyLinz	嗯嗯 ^^
2013-09-16 21:35:52	<--	suhorng (~suhorng@118-166-56-72.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-16 21:46:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 21:53:21	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-16 22:20:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-16 22:57:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 23:13:27	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2013-09-16 23:28:47	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 241 seconds)
2013-09-16 23:35:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-16 23:37:01	<--	hashcat (~chatzilla@27.243.43.132) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-17 00:00:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-09-17 00:44:38	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-09-17 00:49:15	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-17 00:54:52	<--	b4283 (~b4283@218-164-218-159.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-17 01:16:25	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-17 01:26:33	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-17 02:50:26	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-17 02:50:26	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-17 02:50:26	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-17 02:50:26	--	Nicks #haskell.tw: [_13h a2n cataska cataska_ chihhsin cibs CindyLinz cyt93cs drbean gko godfat hychen kanru lambdabot letoh logbot__ logfat lwhsu miaout17 miaout17__ MnO2_ monochrom petercommand superbil UncleHandsome]
2013-09-17 02:50:26	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-09-17 02:50:41	--	Mode #haskell.tw [+cnt]
2013-09-17 02:50:41	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-17 03:14:52	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-17 05:20:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-17 06:48:44	-->	hashcat (~chatzilla@218-166-238-28.dynamic.hinet.net) has joined #haskell.tw
2013-09-17 07:00:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-17 07:24:48	-->	hashcat_ (~chatzilla@27.245.177.214) has joined #haskell.tw
2013-09-17 07:27:42	<--	hashcat (~chatzilla@218-166-238-28.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-17 07:27:43	--	hashcat_ is now known as hashcat
2013-09-17 08:18:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-17 08:45:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-17 10:01:22	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-17 10:14:10	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-17 11:09:42	-->	mno2 (~mno2@wlan74.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-17 11:24:03	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-09-17 12:03:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-17 12:06:51	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-17 12:33:35	<--	MnO2_ (~MnO2@1.34.43.236) has quit (Ping timeout: 246 seconds)
2013-09-17 13:12:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-17 13:46:36	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-17 13:50:56	<--	mno2 (~mno2@wlan74.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-17 13:57:34	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-17 14:02:44	-->	miaout171_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-09-17 14:09:06	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (*.net *.split)
2013-09-17 14:10:05	<--	miaout17__ (~miaout17@miaout17.net) has quit (*.net *.split)
2013-09-17 14:10:49	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-17 14:13:51	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2013-09-17 14:18:33	<--	logfat (~cinch@home.mno2.org) has quit (Ping timeout: 264 seconds)
2013-09-17 14:19:26	<--	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has quit (Ping timeout: 264 seconds)
2013-09-17 14:24:34	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-hngnjkxjyjdbonsx) has quit (Ping timeout: 245 seconds)
2013-09-17 14:25:27	-->	miaout17_ (uid13197@gateway/web/irccloud.com/session) has joined #haskell.tw
2013-09-17 14:25:27	--	miaout17_ is now known as miaout17
2013-09-17 14:35:57	-->	mno2 (~mno2@wlan51.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-17 14:53:12	-->	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-17 14:54:10	<--	miaout17 (uid13197@gateway/web/irccloud.com/session) has quit (Changing host)
2013-09-17 14:54:10	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-vuwknfpisnqtlzck) has joined #haskell.tw
2013-09-17 15:08:03	<--	mno2 (~mno2@wlan51.cc.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2013-09-17 15:08:24	-->	mno2 (~mno2@wlan69.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-17 15:45:06	<--	mno2 (~mno2@wlan69.cc.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2013-09-17 15:45:30	-->	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-17 15:49:19	-->	Yu_lin (24ec16de@gateway/web/freenode/ip.36.236.22.222) has joined #haskell.tw
2013-09-17 16:13:02	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-17 16:13:16	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-17 16:50:51	<--	Yu_lin (24ec16de@gateway/web/freenode/ip.36.236.22.222) has quit (Quit: Page closed)
2013-09-17 17:59:30	<--	petercommand (~chatzilla@unaffiliated/petercommand) has quit (Remote host closed the connection)
2013-09-17 18:22:33	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-17 18:42:08	<--	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-17 18:51:46	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-17 19:58:43	-->	b4283 (~b4283@218-164-215-168.dynamic.hinet.net) has joined #haskell.tw
2013-09-17 21:06:13	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-17 21:10:03	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Client Quit)
2013-09-17 21:25:56	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-17 22:55:23	-->	buck_ (~buck@114-45-174-39.dynamic.hinet.net) has joined #haskell.tw
2013-09-17 23:19:39	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-17 23:47:53	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-09-17 23:52:57	<--	buck_ (~buck@114-45-174-39.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-18 00:17:30	<--	b4283 (~b4283@218-164-215-168.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-18 00:51:52	hashcat	誰能幫我決定下要用scala還是clojure
2013-09-18 00:55:13	kanru	clojure
2013-09-18 00:55:32	hashcat	為啥
2013-09-18 00:55:55	kanru	用就對了 XD
2013-09-18 00:56:02	 *	kanru likes lisp
2013-09-18 00:57:09	hashcat	clojure我找不到類似Akka的東西
2013-09-18 00:58:00	hashcat	這語言感覺就是會突然一時興起冒出一堆專案然後報廢
2013-09-18 01:01:16	hashcat	賭下去好了
2013-09-18 01:04:33	letoh	clojure
2013-09-18 01:07:21	hashcat	兩票阿
2013-09-18 01:07:44	hashcat	scala的東西比較穩定成熟不是?
2013-09-18 01:07:52	letoh	誰叫你挑了 scala 當對手 (誤
2013-09-18 01:08:06	letoh	話說  為什麼選項中沒有 haskell 呀?
2013-09-18 01:08:18	hashcat	問哪都一面倒clojure
2013-09-18 01:08:34	hashcat	haskell不堪用
2013-09-18 01:09:21	hashcat	想用分佈計算
2013-09-18 01:09:39	hashcat	排除土法煉鋼
2013-09-18 01:11:11	hashcat	scala=haskell
2013-09-18 01:11:44	hashcat	選haskell等同直接變成選scala
2013-09-18 01:14:39	cataska_	clojure 一票
2013-09-18 01:17:30	hashcat	好吧來盲從多數
2013-09-18 01:17:45	hashcat	clojure我來了
2013-09-18 01:17:57	hashcat	先睡覺噗噗
2013-09-18 01:18:10	<--	hashcat (~chatzilla@27.245.177.214) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-18 01:26:35	cataska_	有沒有回答 clojure 都是 emacs user 的八卦 XD
2013-09-18 01:27:46	letoh	XDXD
2013-09-18 01:31:24	hychen	因為lisp???
2013-09-18 02:41:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-18 03:16:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-18 03:21:37	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-09-18 03:34:10	<--	logfat_ (~cinch@home.mno2.org) has quit (Ping timeout: 245 seconds)
2013-09-18 03:37:23	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2013-09-18 04:27:55	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-18 05:43:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-18 06:20:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-18 08:28:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-18 08:45:24	-->	b4283 (~b4283@36-238-131-206.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-18 08:45:47	<--	b4283 (~b4283@36-238-131-206.dynamic-ip.hinet.net) has quit (Client Quit)
2013-09-18 10:08:17	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-18 10:40:39	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-18 11:14:51	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2013-09-18 11:20:41	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-18 11:21:04	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-18 11:24:53	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-18 11:25:34	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-18 11:25:46	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-18 11:33:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-18 12:18:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-18 13:35:43	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-18 13:48:23	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-18 13:48:59	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-18 14:20:48	-->	godfat (~Adium@114-45-182-153.dynamic.hinet.net) has joined #haskell.tw
2013-09-18 14:30:35	-->	mno2 (~mno2@wlan94.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-18 14:32:44	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-18 14:48:24	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-18 14:52:12	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-09-18 14:52:25	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-18 16:20:55	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-18 16:26:25	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-18 16:30:25	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-18 16:46:36	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-18 16:51:34	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-18 17:01:01	<--	mno2 (~mno2@wlan94.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-18 17:10:45	-->	mno2 (~mno2@wlan54.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-18 17:11:33	<--	mno2 (~mno2@wlan54.cc.ntu.edu.tw) has quit (Client Quit)
2013-09-18 17:24:03	-->	mno2 (~mno2@wlan78.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-18 17:49:16	-->	hashcat (~chatzilla@27.242.77.116) has joined #haskell.tw
2013-09-18 18:18:30	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-18 18:18:35	<--	mno2 (~mno2@wlan78.cc.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2013-09-18 18:18:58	-->	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has joined #haskell.tw
2013-09-18 18:45:01	<--	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-18 20:09:07	<--	hashcat (~chatzilla@27.242.77.116) has quit (Ping timeout: 264 seconds)
2013-09-18 20:25:20	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-18 20:30:36	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-18 20:56:47	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-18 21:04:39	-->	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has joined #haskell.tw
2013-09-18 21:10:40	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-18 21:26:15	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-18 21:56:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-18 22:07:17	-->	hashcat (~chatzilla@27.242.77.116) has joined #haskell.tw
2013-09-18 22:40:52	<--	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-18 22:44:21	-->	b4283 (~b4283@1-172-87-13.dynamic.hinet.net) has joined #haskell.tw
2013-09-18 22:50:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-18 23:45:27	-->	liuzhoou (~liuzhoou@101.80.77.50) has joined #haskell.tw
2013-09-18 23:51:20	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2013-09-19 00:07:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-19 00:28:17	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-19 00:46:29	<--	b4283 (~b4283@1-172-87-13.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-19 01:58:57	<--	hashcat (~chatzilla@27.242.77.116) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-19 02:00:08	<--	liuzhoou (~liuzhoou@101.80.77.50) has quit (Remote host closed the connection)
2013-09-19 02:22:33	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-19 02:50:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-19 03:20:46	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-19 05:56:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-19 07:05:07	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-19 07:37:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-19 09:37:42	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-19 10:36:46	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-19 11:21:19	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-19 11:21:42	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Client Quit)
2013-09-19 11:37:40	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-19 11:51:30	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-19 12:32:09	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-19 13:09:26	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-19 14:54:39	-->	YuLin (24ec182f@gateway/web/freenode/ip.36.236.24.47) has joined #haskell.tw
2013-09-19 14:59:52	YuLin	我自己看 clojure，有種喜歡 Common Lisp 的人比較容易接受它的 fu
2013-09-19 15:52:20	-->	hashcat (~chatzilla@218-173-237-49.dynamic.hinet.net) has joined #haskell.tw
2013-09-19 16:42:27	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-19 16:49:10	-->	b4284 (~b4283@218-164-204-118.dynamic.hinet.net) has joined #haskell.tw
2013-09-19 17:57:25	<--	hashcat (~chatzilla@218-173-237-49.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-19 18:07:40	<--	b4284 (~b4283@218-164-204-118.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-19 18:26:05	-->	b4284 (~b4283@36-238-254-155.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-19 18:46:07	-->	hashcat (~chatzilla@36-238-33-33.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-19 20:32:10	<--	YuLin (24ec182f@gateway/web/freenode/ip.36.236.24.47) has quit (Quit: Page closed)
2013-09-19 22:35:55	<--	hashcat (~chatzilla@36-238-33-33.dynamic-ip.hinet.net) has quit (Remote host closed the connection)
2013-09-19 22:38:15	-->	caasih (~caasiHuan@114-41-130-27.dynamic.hinet.net) has joined #haskell.tw
2013-09-19 23:25:27	-->	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has joined #haskell.tw
2013-09-19 23:27:17	-->	hashcat (~chatzilla@27.242.77.116) has joined #haskell.tw
2013-09-19 23:30:20	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Quit: requested)
2013-09-19 23:34:33	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-20 00:02:24	<--	b4284 (~b4283@36-238-254-155.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-09-20 00:58:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-20 01:05:44	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-09-20 01:10:32	suhorng	:t \k -> k (Right (\a -> k (Left a)))
2013-09-20 01:10:33	lambdabot	(Either a (a -> t) -> t) -> t
2013-09-20 01:13:23	suhorng	http://ncatlab.org/nlab/show/equality 之前頻道上有討論到"相等", 這裡簡介了很多不同的"相等"
2013-09-20 01:25:02	<--	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-20 02:40:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-20 04:16:32	<--	caasih (~caasiHuan@114-41-130-27.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-20 04:22:23	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 04:22:23	<--	godfat (~Adium@114-45-182-153.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-20 05:07:04	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-20 07:31:24	b4283	nice
2013-09-20 08:42:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-20 09:08:50	<--	superbil (uid12362@gateway/web/irccloud.com/x-gzljltcoawlchqkj) has quit (Ping timeout: 256 seconds)
2013-09-20 09:10:26	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-vuwknfpisnqtlzck) has quit (Ping timeout: 245 seconds)
2013-09-20 09:10:26	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-ncdslrwfkanemors) has quit (Ping timeout: 245 seconds)
2013-09-20 10:12:06	<--	b4283 (~b4283@118.150.134.111) has quit (Ping timeout: 264 seconds)
2013-09-20 10:18:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-20 11:04:51	-->	superbil (uid12362@gateway/web/irccloud.com/x-jxvtmecaquvpzmjs) has joined #haskell.tw
2013-09-20 11:09:08	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-cdgxgmdrgoxhyvxu) has joined #haskell.tw
2013-09-20 11:10:10	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-bblhivscmbagvkzg) has joined #haskell.tw
2013-09-20 11:25:50	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-cdgxgmdrgoxhyvxu) has quit (Ping timeout: 245 seconds)
2013-09-20 11:26:19	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-bblhivscmbagvkzg) has quit (Ping timeout: 260 seconds)
2013-09-20 11:26:30	<--	superbil (uid12362@gateway/web/irccloud.com/x-jxvtmecaquvpzmjs) has quit (Ping timeout: 264 seconds)
2013-09-20 11:59:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-20 12:03:39	-->	b4283 (~b4283@36-238-224-162.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-20 12:04:54	<--	hashcat (~chatzilla@27.242.77.116) has quit (Ping timeout: 264 seconds)
2013-09-20 12:15:21	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 13:22:17	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-nxfzlglojqkgcdkw) has joined #haskell.tw
2013-09-20 13:22:25	-->	superbil (uid12362@gateway/web/irccloud.com/x-vwzhpsggerpojwff) has joined #haskell.tw
2013-09-20 13:22:27	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-hdlwqwvajwhpnrou) has joined #haskell.tw
2013-09-20 13:28:24	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-20 13:29:32	-->	b4284 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-20 13:33:50	-->	hashcat (~chatzilla@36-238-33-227.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-20 14:12:50	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 14:29:08	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 15:11:16	<--	hashcat (~chatzilla@36-238-33-227.dynamic-ip.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-20 16:19:26	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-20 16:35:46	-->	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has joined #haskell.tw
2013-09-20 17:43:02	-->	tiglog (~tiglog@123.116.78.80) has joined #haskell.tw
2013-09-20 18:42:06	<--	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-20 18:55:29	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-20 20:14:16	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 20:16:53	<--	b4283 (~b4283@36-238-224-162.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-20 21:22:41	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-20 21:23:10	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 21:23:17	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-20 21:24:13	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-20 21:57:09	-->	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has joined #haskell.tw
2013-09-20 22:20:33	<--	tiglog (~tiglog@123.116.78.80) has quit (Quit: Leaving)
2013-09-20 23:20:44	-->	Yu_Lin (24ec175f@gateway/web/freenode/ip.36.236.23.95) has joined #haskell.tw
2013-09-20 23:31:28	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-20 23:33:17	suhorng	http://registrano.com/events/5e35ff 時間還沒有很確定的樣子。題目都超有趣！
2013-09-20 23:58:10	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2013-09-21 00:08:47	<--	Yu_Lin (24ec175f@gateway/web/freenode/ip.36.236.23.95) has quit (Quit: Page closed)
2013-09-21 00:11:34	<--	suhorng (~suhorng@118-166-50-147.dynamic.hinet.net) has left #haskell.tw
2013-09-21 00:13:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-21 00:26:20	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 00:26:27	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-21 01:14:53	CindyLinz	啊啊, 趕快來準備 orz
2013-09-21 01:53:13	monochrom	MonadFix 很好玩 :)
2013-09-21 02:16:21	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 02:19:40	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-21 02:24:31	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-21 02:52:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-09-21 09:48:21	-->	b4283 (~b4283@218-164-201-163.dynamic.hinet.net) has joined #haskell.tw
2013-09-21 10:15:48	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 10:22:31	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-21 10:37:25	<--	b4283 (~b4283@218-164-201-163.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-21 10:50:18	-->	b4283 (~b4283@36-238-227-104.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-21 10:59:53	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-21 11:56:12	-->	darkx (~x4r@140.113.27.40) has joined #haskell.tw
2013-09-21 11:59:04	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 12:03:59	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-21 12:05:01	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 12:11:25	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-21 12:46:24	<--	b4283 (~b4283@36-238-227-104.dynamic-ip.hinet.net) has quit (Ping timeout: 252 seconds)
2013-09-21 13:07:58	-->	b4283 (~b4283@218-164-218-7.dynamic.hinet.net) has joined #haskell.tw
2013-09-21 14:19:16	-->	caasih (~caasiHuan@114-46-148-195.dynamic.hinet.net) has joined #haskell.tw
2013-09-21 14:20:11	-->	cyt93cs_ (~cyt93cs@140.123.101.4) has joined #haskell.tw
2013-09-21 14:20:35	<--	cyt93cs (~cyt93cs@140.123.101.4) has quit (Ping timeout: 240 seconds)
2013-09-21 14:27:39	<--	cyt93cs_ (~cyt93cs@140.123.101.4) has quit (Ping timeout: 248 seconds)
2013-09-21 14:28:24	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-09-21 14:34:21	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 16:33:12	<--	caasih (~caasiHuan@114-46-148-195.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-21 18:20:09	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-21 19:07:56	<--	b4283 (~b4283@218-164-218-7.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-21 20:21:53	-->	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has joined #haskell.tw
2013-09-21 20:41:22	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-21 21:32:59	<--	darkx (~x4r@140.113.27.40) has quit (Ping timeout: 256 seconds)
2013-09-21 21:33:15	-->	darkx (~x4r@140.113.27.40) has joined #haskell.tw
2013-09-21 21:49:09	-->	hashcat (~chatzilla@27.245.5.206) has joined #haskell.tw
2013-09-21 22:48:46	<--	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-21 22:50:44	hashcat	idris真強大
2013-09-21 22:56:30	-->	yulin (24ec1449@gateway/web/freenode/ip.36.236.20.73) has joined #haskell.tw
2013-09-21 22:58:03	yulin	怎麼會談到 idris 很強大？我錯過了什麼嗎？
2013-09-21 22:59:20	hashcat	我看著亂入的
2013-09-21 22:59:24	letoh	應該超展開XD
2013-09-21 23:00:53	hashcat	macro不是lisp的專利了
2013-09-21 23:01:05	letoh	本來就不是啊
2013-09-21 23:01:21	hashcat	有前例?
2013-09-21 23:01:40	letoh	不過 lisp 的強大有一部份來自 macro，我想這點應該沒異議
2013-09-21 23:02:42	hashcat	idris的syntax extension貌似還強大過lisp的macro
2013-09-21 23:03:29	letoh	lisp macro 還不夠強嗎?
2013-09-21 23:04:22	hashcat	idris沒套滿括號了
2013-09-21 23:04:39	hashcat	看起來就是可以設計另一個語言
2013-09-21 23:04:52	hashcat	順便沿用型別系統的各功能
2013-09-21 23:06:09	hashcat	main = do for x in [1..10]:
2013-09-21 23:06:11	hashcat	                    putStrLn ("Number " ++ show x)
2013-09-21 23:06:12	hashcat	                    putStrLn "Done!"
2013-09-21 23:06:21	hashcat	排版爛了
2013-09-21 23:06:45	hashcat	一個長得跟python一樣的for
2013-09-21 23:07:43	<--	yulin (24ec1449@gateway/web/freenode/ip.36.236.20.73) has quit (Quit: Page closed)
2013-09-21 23:11:28	hashcat	還能自訂型別要不隱轉換
2013-09-21 23:13:01	letoh	idris 看起來真像 haskell
2013-09-21 23:22:49	hashcat	另一個dependent type
2013-09-21 23:23:05	hashcat	沿用haskell語法的程度比Agda多
2013-09-21 23:42:50	-->	YuLin (24ec15d0@gateway/web/freenode/ip.36.236.21.208) has joined #haskell.tw
2013-09-21 23:43:21	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-21 23:44:44	YuLin	看到 for 還真有點不舒服
2013-09-21 23:54:40	<--	YuLin (24ec15d0@gateway/web/freenode/ip.36.236.21.208) has quit (Quit: Page closed)
2013-09-22 00:58:39	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-22 01:52:14	<--	b4284 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-22 02:08:20	<--	superbil (uid12362@gateway/web/irccloud.com/x-vwzhpsggerpojwff) has quit (Ping timeout: 245 seconds)
2013-09-22 02:09:31	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-nxfzlglojqkgcdkw) has quit (Ping timeout: 248 seconds)
2013-09-22 02:09:51	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-hdlwqwvajwhpnrou) has quit (Ping timeout: 260 seconds)
2013-09-22 02:28:40	-->	liuzhoou (~liuzhoou@101.80.77.50) has joined #haskell.tw
2013-09-22 03:18:11	<--	liuzhoou (~liuzhoou@101.80.77.50) has quit (Remote host closed the connection)
2013-09-22 04:05:08	-->	superbil (uid12362@gateway/web/irccloud.com/x-kbkxogyxjhbifvop) has joined #haskell.tw
2013-09-22 04:06:10	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-jiknnkpzjrximsxd) has joined #haskell.tw
2013-09-22 04:06:41	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-wtncfudevtekboml) has joined #haskell.tw
2013-09-22 08:37:25	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-22 10:31:02	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-22 11:26:33	<--	hashcat (~chatzilla@27.245.5.206) has quit (Ping timeout: 252 seconds)
2013-09-22 12:07:59	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-22 13:15:06	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-22 13:27:33	-->	Yu-Lin (24ec1810@gateway/web/freenode/ip.36.236.24.16) has joined #haskell.tw
2013-09-22 13:28:12	Yu-Lin	上來討論 type system 的問題
2013-09-22 13:28:25	Yu-Lin	untyped system 到底是什麼？
2013-09-22 13:51:13	<--	Yu-Lin (24ec1810@gateway/web/freenode/ip.36.236.24.16) has quit (Quit: Page closed)
2013-09-22 14:03:20	-->	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has joined #haskell.tw
2013-09-22 14:07:33	<--	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-22 15:28:21	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-22 15:43:12	-->	hashcat (~chatzilla@36-238-34-99.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-22 18:06:38	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-22 18:58:25	<--	hashcat (~chatzilla@36-238-34-99.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-22 20:29:54	-->	YuLin (24ec19db@gateway/web/freenode/ip.36.236.25.219) has joined #haskell.tw
2013-09-22 20:36:21	-->	hashcat (~chatzilla@218-164-104-201.dynamic.hinet.net) has joined #haskell.tw
2013-09-22 21:04:44	<--	YuLin (24ec19db@gateway/web/freenode/ip.36.236.25.219) has quit (Quit: Page closed)
2013-09-22 22:44:09	<--	hashcat (~chatzilla@218-164-104-201.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-22 22:49:53	-->	hashcat (~chatzilla@218-164-104-201.dynamic.hinet.net) has joined #haskell.tw
2013-09-22 22:51:00	-->	liuzhoou (~liuzhoou@101.80.77.50) has joined #haskell.tw
2013-09-22 22:53:45	<--	hashcat (~chatzilla@218-164-104-201.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-22 22:54:48	-->	hashcat (~chatzilla@27.240.21.75) has joined #haskell.tw
2013-09-22 23:02:20	<--	liuzhoou (~liuzhoou@101.80.77.50) has quit (Remote host closed the connection)
2013-09-22 23:28:19	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-22 23:30:10	-->	liuzhoou (~liuzhoou@101.80.77.50) has joined #haskell.tw
2013-09-22 23:30:19	<--	liuzhoou (~liuzhoou@101.80.77.50) has quit (Remote host closed the connection)
2013-09-22 23:52:00	-->	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has joined #haskell.tw
2013-09-23 00:21:02	<--	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-23 00:33:08	CindyLinz	QQ..
2013-09-23 00:58:09	hashcat	??
2013-09-23 00:58:31	hashcat	分享下coursera的computer architecture
2013-09-23 00:59:47	hashcat	無聊的不分享, 分享的不無聊
2013-09-23 01:13:58	hashcat	untype就是編譯或組譯直接過, 怎跑怎操作都不會意外中止直到人為停止
2013-09-23 01:17:10	hashcat	執行時會丟型別錯誤叫dynamic, 執行時會丟型別錯誤叫static, 兩者可並存
2013-09-23 01:26:45	CindyLinz	在弄 Happy + MonadFix, 剛剛卡了一下 :p
2013-09-23 01:28:08	monochrom	我想, 你的 MonadFix 將會很好玩 :)
2013-09-23 01:36:18	CindyLinz	謝謝 ^^|
2013-09-23 01:36:46	CindyLinz	嘗試 & 撞牆的花絮會穿插其中 XD
2013-09-23 01:45:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-23 01:47:15	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-23 03:25:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-09-23 09:02:42	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-23 09:02:42	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-23 09:02:42	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-23 09:02:42	--	Nicks #haskell.tw: [a2n cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean gko godfat1 hashcat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil UncleHandsome]
2013-09-23 09:02:42	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-09-23 09:03:03	--	Mode #haskell.tw [+cnt]
2013-09-23 09:03:03	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-23 09:30:58	hashcat	http://www.pathwayslms.com/swipltuts/html/index.html
2013-09-23 09:31:05	hashcat	swi-prolog做web app
2013-09-23 09:57:40	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-23 10:01:36	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Client Quit)
2013-09-23 10:29:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-23 11:06:50	MnO2_	https://twitter.com/search?q=%23CUFP&src=hash  CUFP 開始了，看起來有很多有趣的題目
2013-09-23 11:07:02	MnO2_	http://cufp.org/conference/schedule/2013
2013-09-23 11:38:16	MnO2_	FB 的 php static analyzer (in OCaml) 好像很厲害的樣子
2013-09-23 11:43:31	CindyLinz	是 hiphop 裡面的元件嗎?
2013-09-23 11:45:15	MnO2_	是同一個 team 生出來的東西。但要不要算同一包就不知道了
2013-09-23 11:45:33	CindyLinz	那就當是同一個人做的吧!
2013-09-23 11:45:42	CindyLinz	XD
2013-09-23 11:49:52	MnO2_	話說 ruby creator 跟 ruby vm creator 結婚是可以拍成 ruby 情人夢了嗎?
2013-09-23 11:57:51	CindyLinz	XDDDD
2013-09-23 12:07:43	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-23 12:12:08	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-23 14:10:23	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-23 14:19:00	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-23 14:21:58	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-23 14:34:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-23 15:15:33	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-23 16:43:17	<--	hashcat (~chatzilla@27.240.21.75) has quit (Ping timeout: 248 seconds)
2013-09-23 17:00:51	-->	hashcat (~chatzilla@106.64.212.10) has joined #haskell.tw
2013-09-23 17:06:36	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-23 17:25:29	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-09-23 17:50:37	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-23 17:52:31	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-09-23 18:41:26	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-23 19:14:13	<--	hashcat (~chatzilla@106.64.212.10) has quit (Ping timeout: 248 seconds)
2013-09-23 19:27:41	-->	hashcat (~chatzilla@1-172-249-245.dynamic.hinet.net) has joined #haskell.tw
2013-09-23 19:53:41	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-23 20:08:36	MnO2_	http://goo.gl/3OHJfi  CUFP 有的有投影片出來了
2013-09-23 20:33:11	-->	b4284 (~b4283@218-164-220-225.dynamic.hinet.net) has joined #haskell.tw
2013-09-23 20:40:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-23 21:12:21	hashcat	這是做啥的
2013-09-23 21:18:35	-->	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has joined #haskell.tw
2013-09-23 21:22:35	suhorng	沒想到申請 PLT 板板主有點麻煩 orz
2013-09-23 21:22:48	suhorng	http://www.ptt.cc/bbs/Sub_CS/M.1379940251.A.EBF.html
2013-09-23 21:22:50	godfat1	加油 @_@...
2013-09-23 21:22:54	--	godfat1 is now known as godfat
2013-09-23 21:23:27	suhorng	要認識一些板的歷史 囧
2013-09-23 21:29:48	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Ping timeout: 260 seconds)
2013-09-23 21:32:35	suhorng	看不懂 PSMonkey 說的是什麼意思, 有什麼建議嗎...?
2013-09-23 21:32:44	godfat	剛剛看過去的感覺是... 他的意思是要好好整理精華區 XD
2013-09-23 21:32:44	godfat	我的理解是這樣啦 ~.~
2013-09-23 21:33:04	suhorng	原來如此!
2013-09-23 21:33:39	godfat	這點我就真的是慚愧了，只有剛開始有在認真整理 orz
2013-09-23 21:33:40	godfat	後來就只有刪文和 m 文了...
2013-09-23 21:33:54	suhorng	這樣連接下一篇好像說得通了...
2013-09-23 21:34:10	godfat	XDDDD
2013-09-23 21:34:33	suhorng	其實 Prob_Solve 板的精華區也是..XD
2013-09-23 21:34:45	suhorng	我剛剛是真的看不懂Q_Q
2013-09-23 21:35:32	godfat	我一開始總是會想熱血整理精華區，後來可能是覺得 ptt 精華區管理不是很方便
2013-09-23 21:35:32	godfat	（以前玩 gamebase 的網頁介面是比較方便）
2013-09-23 21:35:32	godfat	覺得有點麻煩。後來就愈來愈懶... orz
2013-09-23 21:36:03	godfat	後來我就覺得，也許這種靠單人人力編輯的精華區，本來就不是很好的機制吧
2013-09-23 21:36:03	godfat	要有力氣弄的門檻不小
2013-09-23 21:36:31	godfat	我想他是希望精華區能保留原本的精神，在裡面留下許多歷史之類的
2013-09-23 21:37:30	suhorng	嗯哼
2013-09-23 21:37:30	godfat	也許可能就是多講一些關於精華區的編輯吧 @_@
2013-09-23 21:37:30	godfat	比方說怎麼樣的歷史資料應該放在哪裡之類的
2013-09-23 21:37:43	suhorng	嗯嗯
2013-09-23 21:38:12	suhorng	精華區真的不太方便 (其實很希望能有 tag... 不過 ptt BBS 沒這功能...)
2013-09-23 21:39:44	letoh	標題 tag XD
2013-09-23 21:39:45	godfat	我之前還曾經把一串討論全部串成一篇，想說這樣比較好閱讀
2013-09-23 21:39:46	godfat	後來又覺得可是這樣讀起來好長，也有點累，想割回去
2013-09-23 21:39:46	godfat	問小天使，小天使說沒這功能 @_@
2013-09-23 21:39:46	godfat	可是我也懶得回頭一篇一篇對照，到底是要收哪幾篇 orz
2013-09-23 21:39:46	godfat	不過這好像是 Ruby 板的事就是了... XD
2013-09-23 21:40:20	letoh	以前都是習慣串成一篇啊
2013-09-23 21:40:30	letoh	弄一堆要收藏不方便XD
2013-09-23 21:41:55	godfat	我忘記那時的理由是啥了 XD
2013-09-23 21:41:56	godfat	喔，可能是要告訴別人看哪篇時比較不方便？
2013-09-23 21:42:30	suhorng	XDDD
2013-09-23 21:42:30	suhorng	串成一篇要找到哪裡有點麻煩
2013-09-23 21:42:46	godfat	而且一堆篇要串成一篇還可以，但不能反向操作 O_Q
2013-09-23 21:43:23	petercommand	可以編號嗎?
2013-09-23 21:43:53	godfat	串成一篇的話，就是一篇文章了（這樣有回答到嗎..?）
2013-09-23 21:44:25	petercommand	這樣就可以告訴別人看哪裡了@@
2013-09-23 21:44:46	godfat	那應該不行，只能說第幾行之類的
2013-09-23 21:44:50	suhorng	是可以說跳到哪一行
2013-09-23 21:45:17	petercommand	喔喔
2013-09-23 22:33:44	<--	suhorng (~suhorng@118-166-46-89.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-23 23:14:24	hashcat	亂入prolog
2013-09-23 23:14:46	hashcat	http://sewiki.iai.uni-bonn.de/research/pdt/docs/v2.1/start
2013-09-23 23:15:35	hashcat	有沒其他地方貼這類東西
2013-09-23 23:16:43	letoh	咦
2013-09-23 23:17:30	letoh	要到綜合話題頻道貼嗎? XD
2013-09-23 23:18:54	hashcat	我都覺得像洗版
2013-09-23 23:19:12	hashcat	clojure地盤貼prolog
2013-09-23 23:19:13	letoh	到 cschat.tw 看看吧XD
2013-09-23 23:19:24	letoh	應該可以隨便你洗XD
2013-09-23 23:19:55	hashcat	cschat.tw直接被過濾掉
2013-09-23 23:20:07	letoh	喔喔喔  為什麼? XD
2013-09-23 23:20:26	hashcat	哦我以為是網址
2013-09-23 23:20:31	letoh	XD
2013-09-23 23:21:04	hashcat	人超少
2013-09-23 23:21:39	letoh	唔  是不多，好像只有剛開的時候廣告一下而已
2013-09-23 23:23:09	-->	hashcat_ (~chatzilla@106.64.212.10) has joined #haskell.tw
2013-09-23 23:23:11	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-09-23 23:23:49	<--	hashcat (~chatzilla@1-172-249-245.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-23 23:24:09	--	hashcat_ is now known as hashcat
2013-09-23 23:24:12	mno2	沒差吧，後來我跟 favonia 都認為這版叫 haskell.tw 只是表面的名稱，反正就是討論 PL 的地方，只是名字也改不了了。
2013-09-23 23:24:46	mno2	https://github.com/facebook/pfff/wiki/Main <-- 這應該就是稍早提到的 fb 的 static analyzer
2013-09-23 23:24:54	mno2	據說速度超快
2013-09-23 23:25:23	letoh	是沒錯啊  所以我大概只有內容差太多的才貼到那邊
2013-09-23 23:25:49	hashcat	怎樣算差太多
2013-09-23 23:26:07	hashcat	python.tw那邊差滿多的
2013-09-23 23:26:34	letoh	是說我以前在 python.tw 離題離太遠了  現在不太敢在那邊出聲XD
2013-09-23 23:26:58	godfat	離到哪裡？ XD 我個人滿喜歡離題的（離題）
2013-09-23 23:27:23	hashcat	prolog
2013-09-23 23:27:28	hashcat	邏輯編程其實可以算函數編程的推廣吧
2013-09-23 23:27:39	hashcat	因為函數是謂詞的特例
2013-09-23 23:27:40	godfat	是喔 XDDD
2013-09-23 23:28:23	mno2	我是覺得反正現在這頻道人也不多，覺得有趣的就可以亂聊吧。等出聲的人多到一定程度再說 xD
2013-09-23 23:28:29	hashcat	集合論公設說的
2013-09-23 23:28:32	mno2	小地方的好處就是當自己家
2013-09-23 23:28:55	hashcat	但覺得函數編程的人不一定這麼認為
2013-09-23 23:29:40	letoh	hashcat: 聽說 the reasoned schemer 就是講邏輯編程
2013-09-23 23:30:45	hashcat	clojure也塞進了個邏輯編程
2013-09-23 23:30:57	mno2	疑? clojure 有喔？
2013-09-23 23:31:13	hashcat	叫做core.logic
2013-09-23 23:31:33	hashcat	還有個nominal logic擴展, 不知道做啥的
2013-09-23 23:31:38	letoh	一般開頻道就是讓一堆有相同興趣的人聚在一起，話題我覺得是不必受限比較好  只是其他頻道的話題好像範圍比較小，聚集的人未必會一起聊其他東西，自己一個人離題很無聊啊XD
2013-09-23 23:31:54	mno2	github page 第二段就提到 the reasoned schemer
2013-09-23 23:32:15	letoh	但這邊的人好像什麼都碰，就很好聊的感覺XD
2013-09-23 23:32:56	hashcat	使用介紹在wiki頁面
2013-09-23 23:32:56	mno2	雜食頻道
2013-09-23 23:33:51	godfat	雜食頻道++
2013-09-23 23:33:55	hashcat	語法不如prolog
2013-09-23 23:34:07	hashcat	haskell已經山窮水盡了噗噗
2013-09-23 23:34:25	hashcat	聊不出東西
2013-09-23 23:35:19	letoh	我反而覺得這幾年聽到 haskell 的機會多出很多
2013-09-23 23:35:52	petercommand	letoh: 我覺得#hime離最遠吧XD
2013-09-23 23:36:08	hashcat	這是迴光返照
2013-09-23 23:36:19	petercommand	閒聊頻道
2013-09-23 23:36:21	CindyLinz	letoh: 什麼都碰的人才碰得到 Haskell.. (泣)
2013-09-23 23:36:23	letoh	我想講輸入法的東西啊  但應該沒人陪我XD
2013-09-23 23:36:39	petercommand	XD
2013-09-23 23:36:54	hashcat	用講得輸入法
2013-09-23 23:37:19	letoh	不過我主要是想弄 win  的部份  那邊太反 win 了
2013-09-23 23:37:19	CindyLinz	hashcat: 現實生活中沒有拿 Haskell 當飯吃的話, 平常都是自己讀讀書, 不太容易發現有問題的 :Q
2013-09-23 23:37:21	mno2	CindyLinz: 要有強者推坑 xD
2013-09-23 23:37:42	CindyLinz	我覺得我是準備 talk 的時候會有進步... XD
2013-09-23 23:37:43	hashcat	CIndyLinz:有有
2013-09-23 23:37:59	hashcat	萬惡資本家很愛用
2013-09-23 23:38:07	mno2	其實我覺得 #hime 講得東西也挺有趣的啊 xD
2013-09-23 23:38:12	CindyLinz	而且一邊準備的時候, 一邊就會自己暗嘆, 覺得好幾個地方聽眾一定無法體會... @@"
2013-09-23 23:38:48	CindyLinz	因為聽眾沒有一樣在這邊撞壁好幾個小時, 然後還有日期壓力, 讓自己感到絕望 XD
2013-09-23 23:39:07	CindyLinz	一邊在那邊掙扎一邊就在想要不要轍退改講題 XD
2013-09-23 23:39:17	hashcat	意外的用戶, 不少玩鈔票的人都搞haskell
2013-09-23 23:39:42	CindyLinz	hashcat: 我沒什麼認識玩鈔票的人...
2013-09-23 23:39:48	CindyLinz	階級不同... orz
2013-09-23 23:39:56	mno2	因為玩鈔票的人不喜歡因為 bug ?讓鈔票不見啊 :p
2013-09-23 23:40:19	hashcat	我覺得從幾個特例出發, 然後爆出這就是Functor , 這就是Monad這樣
2013-09-23 23:40:21	CindyLinz	他們明明就在製造 bug 讓鈔票多出來啊 XD
2013-09-23 23:40:41	mno2	CindyLinz: 不衝突啊 xD
2013-09-23 23:40:55	hashcat	先從幾個特例引導出共同規律, 然後說數學有為這東西取名了這樣
2013-09-23 23:40:57	mno2	我也想要寫 bug 讓我多一點鈔票
2013-09-23 23:41:05	CindyLinz	mno2: 好吧, 他們希望是能控制得了的 bug.. XD
2013-09-23 23:42:35	CindyLinz	結果 functional meetup 日期延後了, 害我頓時壓力又輕了 XD
2013-09-23 23:42:36	mno2	疑？沒注意到
2013-09-23 23:42:36	CindyLinz	然後進度就會空一週... 延後完全沒有幫助 XDrz
2013-09-23 23:42:57	mno2	我也覺得壓力減輕一點 xD
2013-09-23 23:42:58	petercommand	letoh:
2013-09-23 23:42:59	hashcat	改成lpmeetup好了
2013-09-23 23:42:59	CindyLinz	mno2: jaiyalas 今天下午跟我確認 10.9 有沒有空
2013-09-23 23:43:05	hashcat	邏輯編程meet up
2013-09-23 23:43:15	hashcat	給他亂改
2013-09-23 23:43:17	CindyLinz	mno2: 然後我下班前他就公佈了日期是 10.8...
2013-09-23 23:43:37	mno2	為什麼問 10.9 卻是公布 10.8 ...
2013-09-23 23:43:59	CindyLinz	mno2: 他一定是用心良苦, 確認我前一天有時間準備...||
2013-09-23 23:44:09	CindyLinz	欸不對 反了 XD
2013-09-23 23:44:32	CindyLinz	他一定是用心良苦, 確認我後一天有時間反省.....|||
2013-09-23 23:44:36	hashcat	其實也可以介紹Idris了
2013-09-23 23:44:45	hashcat	Haskell有的他都有
2013-09-23 23:46:00	mno2	好奇問一下，real world logic programming 有哪些啊？不熟
2013-09-23 23:46:02	hashcat	製造bug賺錢貌似是win
2013-09-23 23:46:25	petercommand	letoh: 你是想要再弄一個win的部份嗎?
2013-09-23 23:47:21	CindyLinz	hashcat: Idris 要等你來介紹吧...  沒聽說有人提過啊... @_@"
2013-09-23 23:47:21	petercommand	原本win的部份全部被拿光了
2013-09-23 23:47:34	CindyLinz	hashcat: 上次 Functional Meetup 講 dependent type
2013-09-23 23:47:44	letoh	我一直有留舊的部份啊  那時我是主張不要拿掉的  所以拿掉後的我就沒再碰了XD
2013-09-23 23:47:56	petercommand	XD
2013-09-23 23:48:14	hashcat	prolog比較難找但還是有
2013-09-23 23:48:22	hashcat	http://www.pathwayslms.com/swipltuts/html/
2013-09-23 23:48:45	hashcat	往下卷會看到大規模股票交易系統
2013-09-23 23:48:52	hashcat	又是玩鈔票的
2013-09-23 23:50:26	hashcat	stackoverflow也有說用prolog建模型芸芸
2013-09-23 23:51:52	mno2	喔？ stackoverflow 也有？
2013-09-23 23:52:41	hashcat	每個人聽到冷門又很吹的語言都會跑去問吧
2013-09-23 23:52:55	hashcat	Is there any real world ......
2013-09-23 23:54:47	hashcat	http://stackoverflow.com/questions/130097/real-world-prolog-usage
2013-09-23 23:57:40	letoh	我對 prolog 的印象就是需要 backtacking 的情況可能比較好用  除此之外不一定XD
2013-09-23 23:58:02	CindyLinz	Idris 看起來好貪心啊 :p
2013-09-23 23:58:29	CindyLinz	啊, 可是沒有 default lazy evaluation 了
2013-09-23 23:58:50	hashcat	他偏重效率
2013-09-23 23:59:01	hashcat	也是可以用lazy
2013-09-23 23:59:17	CindyLinz	我看他官網寫說是 eager evaluation 啊
2013-09-23 23:59:32	hashcat	letoh 邏輯是人類歷史上最古老的形式思維模型
2013-09-23 23:59:51	hashcat	有可以轉成lazy的符號
2013-09-24 00:00:15	hashcat	就像haskell也有轉成eager的東西
2013-09-24 00:00:34	hashcat	但prolog從沒快過就是
2013-09-24 00:01:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-24 00:03:08	hashcat	我覺得應該可以寫翻譯器自動把Haskell翻譯成Idris
2013-09-24 00:03:21	hashcat	應該跟本幾乎不用翻譯
2013-09-24 00:05:09	CindyLinz	hashcat: 那應該只是「能做」, 但是它的設計思想, 還有擁抱它的社群人們的心裡, 不會把另一半當重點啊 @@"
2013-09-24 00:05:44	hashcat	看不懂你在說啥
2013-09-24 00:05:51	hashcat	啥另一半
2013-09-24 00:05:57	CindyLinz	eager <-> lazy
2013-09-24 00:07:30	CindyLinz	我看 Idris 首頁的 feature, 覺得它有想要把 Haskell 和 Agda 揉一揉, 然後把比較新的一些觀念都做進去
2013-09-24 00:07:30	CindyLinz	(真的還蠻貪心的 XDD{
2013-09-24 00:07:30	CindyLinz	(真的還蠻貪心的 XDD)
2013-09-24 00:07:50	CindyLinz	它標出它有 monad, do-notation, 但是就完全沒有提到 recursive do 了
2013-09-24 00:07:58	hashcat	我覺得他想挑戰C語言在嵌入系統的地位
2013-09-24 00:08:32	letoh	有一點很重要  要讓人很直覺知道寫出來的程式在記憶體中長什麼樣子
2013-09-24 00:08:35	CindyLinz	因為 recursive do 是只有 lazy 的世界才能出現的東西... 早期的 Haskell 98 裡面也還沒有想到要有這種東西
2013-09-24 00:09:11	letoh	會用到多少記憶體  做不到的語言應該連 c 的車尾燈都看不到XD
2013-09-24 00:09:19	CindyLinz	我想, Idris 已經從後來的研究裡面收集一堆好東西, 卻把這個漏掉, 是因為它的思維裡面, 算是沒有 lazy 這回事
2013-09-24 00:10:00	petercommand	letoh: 出現亂碼了www 第1句
2013-09-24 00:10:14	letoh	唔  我這看是正常的耶? XD
2013-09-24 00:10:24	letoh	"有一點很重要  要讓人很直覺知道寫出來的程式在記憶體中長什麼樣子"
2013-09-24 00:10:27	CindyLinz	我看也是.. 不過我 irssi 偶爾也會出現亂碼 :Q
2013-09-24 00:10:31	letoh	還是亂碼嗎?
2013-09-24 00:10:42	hashcat	我覺得要特性就再加就好
2013-09-24 00:10:45	CindyLinz	00:08 < letoh> 有一點很重要  要讓人很直覺知道寫出來的程式在記憶體中長什麼樣子
2013-09-24 00:11:27	letoh	不過現在所謂的嵌入式系統，幾乎都在講 linux, android 之類的平台... 很無聊
2013-09-24 00:11:50	letoh	除了比較有機會碰到 dma 外，跟一般 pc 其實沒兩樣
2013-09-24 00:11:52	petercommand	letoh: 是說下一句的第1部份啦
2013-09-24 00:12:31	CindyLinz	hashcat: 你看 Haskell 的 library, 從 standard 或 hackage 上面的, 幾乎都是 lazy 為主, strict 為輔.. 這是一個很重要的特徵, (嗯, 看場合, 不一定是好還是壞)
2013-09-24 00:12:34	petercommand	letoh: (會用到...)這句
2013-09-24 00:12:40	hashcat	他要挑戰C語言就不能啥都lazy拉
2013-09-24 00:12:40	CindyLinz	hashcat: 如果你所在的環境的 lib 幾乎都是 eager eval 的, 那麼偶爾出現的 lazy feature 威力會很小...
2013-09-24 00:12:49	CindyLinz	因為到處都被打斷
2013-09-24 00:12:50	letoh	petercommand: "會用到多少記憶體  做不到的語言..."
2013-09-24 00:13:29	petercommand	letoh: 正常了
2013-09-24 00:13:34	CindyLinz	hashcat: 從首頁這些 feature 看, 我是沒感覺他想跟 C 怎樣, 倒是覺得它一直圍著 Haskell 和 Agda 打轉 ^^|
2013-09-24 00:14:02	CindyLinz	什麼 dependent type, totality check, monad, type class, let-binding... ^^|
2013-09-24 00:14:51	CindyLinz	然後 tactic (influenced by Coq) 可以擴大解讀為 Agda 的 emacs environment :p
2013-09-24 00:15:11	CindyLinz	我是說這頁.. http://www.idris-lang.org/
2013-09-24 00:16:18	hashcat	這語言怎看都有注重嵌入系統的傾向
2013-09-24 00:16:43	letoh	之前看了一下完全沒感覺耶XD
2013-09-24 00:16:55	letoh	不覺得我用得到XD
2013-09-24 00:17:30	CindyLinz	letoh: 你有接觸過這個嗎? http://www.juluos.org/
2013-09-24 00:17:30	letoh	沒接觸過  但有留意過他們的活動
2013-09-24 00:17:30	CindyLinz	letoh: 自己做 OS, 有沒有比較接近你想玩的東西?
2013-09-24 00:17:46	letoh	簡單的 boot loader / kernel 我是有寫過
2013-09-24 00:18:02	letoh	不過我主要還是想弄個全 forth 的環境XD
2013-09-24 00:18:18	letoh	被 c 綁著實在太不自由了
2013-09-24 00:18:41	CindyLinz	letoh: 覺得還是沒有踩到地板的感覺?
2013-09-24 00:19:23	hashcat	全prolog
2013-09-24 00:19:44	letoh	其實也不是說特別想做某個方面  只是對語言的設計和某些應用之間的關係比較有興趣
2013-09-24 00:20:21	letoh	就像 idris 如果真的有考慮到 embedded system dev 的話，應該蠻有趣的吧，只是我一時沒看出有這個傾向XD
2013-09-24 00:20:45	letoh	寫 kernel 比較像是驗證的過程
2013-09-24 00:20:57	CindyLinz	私以為.. 如果 Idris 把 embedded system 當重點的話, 應該要在首頁多著墨一點.... ._.
2013-09-24 00:21:30	letoh	hashcat: 你為什麼會有這種感覺阿? 是因為某一個 feature 嗎?
2013-09-24 00:21:48	hashcat	後端C又是eager
2013-09-24 00:21:57	CindyLinz	好像不是多著墨一點的問題, 是... 至少應該先提一點點吧...
2013-09-24 00:22:36	hashcat	忘記哪看到還有記憶體控制
2013-09-24 00:22:36	letoh	後端 c，又是 eager... 好像很多 scheme 都長這樣XD
2013-09-24 00:23:20	hashcat	補充靜態型別
2013-09-24 00:24:00	letoh	但這些對於 embedded system 的幫助好像不是那麼明顯
2013-09-24 00:24:05	CindyLinz	mno2: jaiyalas 說.. 因為 10.9 找不到地點... ._.
2013-09-24 00:25:02	letoh	backend 是 c 的話，其實還是得熟悉最後產生的 c 會是什麼樣子吧，就像 c 寫久了，最後會產生出什麼樣的 asm 大概會有個底
2013-09-24 00:25:49	CindyLinz	embedded system 是不是有一派的作法, 整個程式是一個 busy loop?
2013-09-24 00:26:16	letoh	看什麼樣的系統/平台囉  沒有 timer 的話就只能用 busy loop
2013-09-24 00:26:24	CindyLinz	嗯, 只是突然覺得, 我超討厭有人用這種作法來寫手機 app 的!
2013-09-24 00:26:43	CindyLinz	然後 unity3D backend 疑似就是這樣搞.... = =
2013-09-24 00:27:33	letoh	習慣在有 os 的地方開發，應該會覺得這種方式不好
2013-09-24 00:27:33	CindyLinz	用到這種 app, 覺得明明就沒什麼在動的時候, 手機也超燙, 電池一下就沒力了.. 而且, 高溫還會永久性破壞電池存量 = =
2013-09-24 00:27:33	letoh	當然你也可以硬幹出一個小 os 啦，不過通常是沒必要，太浪費時間
2013-09-24 00:27:51	CindyLinz	手機 app 的環境有 OS 啊....
2013-09-24 00:28:07	letoh	CindyLinz: 省電型平台的話，一般會有 interrupt 叫醒 cpu
2013-09-24 00:28:36	letoh	平常 cpu 會在睡覺狀態  甚至也有某一段記憶體不通電的設計
2013-09-24 00:28:40	CindyLinz	letoh: 功能簡單的平台我可以接受這種作法啦..
2013-09-24 00:29:21	letoh	功能簡不簡單是另一回事啦  我只是講平台的機制而已  一般都會有
2013-09-24 00:29:51	-->	liuzhoou (~liuzhoou@101.80.72.38) has joined #haskell.tw
2013-09-24 00:29:59	letoh	而且話說回來，「明明就沒什麼在動的時候」這種感覺太模糊了  通常背景還是會有一堆苦工吧
2013-09-24 00:30:31	letoh	例如有跑 service 之類的...
2013-09-24 00:30:35	CindyLinz	letoh: 我說的是遊戲呀, 背景是靜態圖, 然後前景有圖片滑動
2013-09-24 00:30:54	CindyLinz	letoh: 如果遊戲背後給我跑什麼 service 我就真的要開始大大介意了 XD
2013-09-24 00:31:10	letoh	喔喔  遊戲的話，game loop 應該是很傳統的設計手法了?
2013-09-24 00:31:28	CindyLinz	dos 我是有這樣寫過..
2013-09-24 00:31:38	letoh	我不太確定現在的 game engine 都怎麼做耶@_@  有什麼好架構嗎?
2013-09-24 00:31:50	letoh	就算是 event-driven 也是會有 loop 啊
2013-09-24 00:32:37	CindyLinz	letoh: 如果瀏覽器開著的時候可以不發燙, 就表示做得到啊
2013-09-24 00:32:37	letoh	我覺得用硬體中斷才會真的沒有軟體的 loop XD
2013-09-24 00:32:37	CindyLinz	letoh: 網頁上還有動態 gif 在跳呢
2013-09-24 00:33:05	letoh	這不是表示散熱設計太糟嗎? XD  多加幾片 fin 吧XD
2013-09-24 00:33:44	CindyLinz	letoh: 不是啦.. 開著網頁的時候不發燙, 開著遊戲的靜止畫面就變成電暖器.. 這很明顯就是要 blame 一邊啊 XD
2013-09-24 00:34:30	letoh	這的確是有問題XD  那靜止畫面會是怎麼回是? real time rendering + 同一個場景嗎?
2013-09-24 00:35:12	CindyLinz	順便抱怨我們自己家的遊戲.. 可能是 cocos2D 寫的(?)   我手機用 USB 插著電腦, 擺在遊戲登入畫面, 然後我沒理它, 讓螢幕自己黑掉
2013-09-24 00:35:28	CindyLinz	過一陣子手機拿起來, 發現原本電量 22%, 已經變成 15%....
2013-09-24 00:35:52	CindyLinz	我真是難得遇到插著電腦 USB 還會電力透支的.... = =!
2013-09-24 00:36:15	letoh	我也沒遇過 usb 輸出撐不住XD
2013-09-24 00:36:31	CindyLinz	而且還是沒有任何動作的登入畫面....
2013-09-24 00:36:42	letoh	不過 usb 的電流本來就不大  就算進充電模式也是一樣
2013-09-24 00:36:52	CindyLinz	然後螢幕已經關閉了
2013-09-24 00:37:03	letoh	大概只能接著 adapter XD
2013-09-24 00:37:36	letoh	很明顯是程式的問題XD
2013-09-24 00:38:23	CindyLinz	不知道它是用怎樣高的頻率去重繪這個明明就完全一樣的畫面, 還是超高頻率去 polling 我的 input 帳號密碼欄位 orz
2013-09-24 00:38:56	letoh	也許做一次 profiling 就能抓出來了XD
2013-09-24 00:39:12	CindyLinz	牢騷發完就算了 XD
2013-09-24 00:39:27	letoh	XD
2013-09-24 00:39:33	CindyLinz	啊 下次遇到講一下好了 XD
2013-09-24 00:39:53	letoh	所以這是出現在有上市的產品中嗎?
2013-09-24 00:39:56	CindyLinz	對啊
2013-09-24 00:40:16	CindyLinz	那次好像線上有一點問題, 所以我就開 app 去線上測測看
2013-09-24 00:40:27	letoh	真可怕... 我以為搞行動運算的人會特別注意耗電問題
2013-09-24 00:40:41	CindyLinz	測完了就一路退出到登入畫面, 只差一步還沒有關掉 app
2013-09-24 00:41:11	letoh	寫純軟都沒有 energy star 的規範XD
2013-09-24 00:41:34	CindyLinz	發燙遊戲又多又紅, 一般玩家就會把它視為正常現象了...
2013-09-24 00:41:51	CindyLinz	不知道會不會把它視為品質優良的象徵... (謎)
2013-09-24 00:42:33	CindyLinz	植物打殭屍也蠻燙的...
2013-09-24 00:42:33	letoh	冬天玩起來應該不錯? XD
2013-09-24 00:42:43	letoh	以前冬天還把手放在 pentium ii 的 cpu 上，蠻溫暖的XD
2013-09-24 00:42:53	CindyLinz	.....
2013-09-24 00:42:54	letoh	slot 1 那種
2013-09-24 00:43:05	CindyLinz	想暖手有更便宜便舒服的選擇.......
2013-09-24 00:44:08	letoh	因為在系電有好幾台電腦都開著，就順便XD
2013-09-24 00:44:33	CindyLinz	一定有塑化劑蒸氣...||
2013-09-24 00:44:41	letoh	XDXD
2013-09-24 00:45:11	letoh	不曉得是天氣太冷還是怎樣  只覺得手碰起來溫度剛好XD
2013-09-24 00:52:06	<--	b4284 (~b4283@218-164-220-225.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-24 01:02:11	monochrom	在 PC 上的遊戲都是這樣. 把遊戲 pause 了, CPU 使用率仍然高企. 我猜, 所有的 3D rendering engine (包括 OpenGL, Direct3D, SDL) 內部流程都是: 每秒必須重畫 n 次, 不論有沒有變, 不論甚麼機.
2013-09-24 01:02:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-24 01:03:01	monochrom	P.S. 我愛塑化劑蒸氣, 常給我新機的愉悅 XD
2013-09-24 01:03:48	letoh	一般情況可能因為背景有 npc 在跑，所以使用者不動的話還是得繼續算一些東西吧，但 pause 好像應該要全部停下來才對?
2013-09-24 01:11:41	CindyLinz	我之前寫 Html5 遊戲的時候用到一個叫作 requestAnimationFrame 的東西, 它在系統沒 lag 的時候會以 30Hz 或 60Hz 的頻率呼叫
2013-09-24 01:11:55	CindyLinz	(如果 lag 的話, 頻率會顯注下降 XDD)
2013-09-24 01:12:17	CindyLinz	但是如果我被呼叫的時候, 快快就 return 回去的話
2013-09-24 01:12:21	CindyLinz	CPU 使用率就還是可以保持很低
2013-09-24 01:13:14	CindyLinz	如果我沒去管畫面上哪些該重繪哪些不需要, 全都重頭來的話... 就會覺得溫暖.. orz
2013-09-24 01:16:32	hashcat	現在不都用GPU繪圖?
2013-09-24 01:16:33	letoh	requestAnimationFrame 感覺像是以前寫 gui 的 OnInvalidated handler
2013-09-24 01:16:56	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-24 01:17:22	<--	liuzhoou (~liuzhoou@101.80.72.38) has quit (Remote host closed the connection)
2013-09-24 01:18:06	CindyLinz	嗯, 用它作動畫會比較順
2013-09-24 01:18:16	CindyLinz	比起..... window.setTimeout 或 setInterval XD
2013-09-24 01:18:58	-->	liuzhoou (~liuzhoou@101.80.72.38) has joined #haskell.tw
2013-09-24 01:32:51	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-24 02:49:49	<--	hashcat (~chatzilla@106.64.212.10) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-24 03:54:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-24 03:55:23	<--	liuzhoou (~liuzhoou@101.80.72.38) has quit (Remote host closed the connection)
2013-09-24 03:56:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-24 07:00:16	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-24 07:54:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-24 10:02:32	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 12:41:45	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-09-24 12:51:56	--	You are now known as drbean_
2013-09-24 12:52:09	-->	drbean_ (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-24 12:52:09	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-24 12:52:09	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-24 12:52:09	--	Nicks #haskell.tw: [_13h a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean drbean_ gko godfat hychen lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil UncleHandsome]
2013-09-24 12:52:09	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-09-24 12:52:28	--	Mode #haskell.tw [+cnt]
2013-09-24 12:52:28	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-24 12:53:43	--	You are now known as drbean-
2013-09-24 12:54:10	-->	drbean- (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-24 12:54:10	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-24 12:54:10	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-24 12:54:10	--	Nicks #haskell.tw: [_13h a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean drbean- drbean_ gko godfat hychen lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil UncleHandsome]
2013-09-24 12:54:10	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-09-24 12:54:28	--	Mode #haskell.tw [+cnt]
2013-09-24 12:54:28	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-24 12:54:55	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 12:55:06	<--	drbean (~drbean@113.196.171.151) has quit (Ping timeout: 256 seconds)
2013-09-24 12:56:33	<--	drbean_ (~drbean@113.196.171.151) has quit (Ping timeout: 252 seconds)
2013-09-24 13:06:25	--	You are now known as drbean
2013-09-24 13:07:19	--	You are now known as drbean_
2013-09-24 13:07:43	-->	drbean_ (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-24 13:07:43	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-24 13:07:43	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-24 13:07:43	--	Nicks #haskell.tw: [_13h a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean- drbean_ gko godfat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil UncleHandsome]
2013-09-24 13:07:43	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-09-24 13:07:59	--	Mode #haskell.tw [+cnt]
2013-09-24 13:07:59	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-24 13:10:18	<--	drbean- (~drbean@113.196.171.151) has quit (Ping timeout: 264 seconds)
2013-09-24 13:11:20	--	You are now known as drbean
2013-09-24 14:05:24	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-24 14:20:31	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 14:26:48	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-24 14:27:32	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 15:06:06	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-24 15:18:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-24 15:31:06	-->	godfat (~Adium@36-224-212-217.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-24 15:52:22	<--	godfat (~Adium@36-224-212-217.dynamic-ip.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-24 16:07:31	-->	godfat (~Adium@36-224-212-217.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-24 16:10:07	-->	godfat1 (~Adium@36-224-217-44.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-24 16:13:02	<--	godfat (~Adium@36-224-212-217.dynamic-ip.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-24 16:14:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-24 18:05:57	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-24 18:12:48	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-24 18:26:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-24 18:31:32	-->	hashcat (~chatzilla@27.242.194.1) has joined #haskell.tw
2013-09-24 18:43:41	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 18:47:57	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-24 20:02:33	-->	b4283 (~b4283@218-164-214-237.dynamic.hinet.net) has joined #haskell.tw
2013-09-24 20:16:38	<--	godfat1 (~Adium@36-224-217-44.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-09-24 20:44:06	-->	suhorng (~suhorng@118-166-45-246.dynamic.hinet.net) has joined #haskell.tw
2013-09-24 20:46:11	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-24 20:47:30	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 20:47:58	suhorng	>> #prolog 邏輯式好有趣XD 最近剛入手 The Reasoned Schemer, 正在學
2013-09-24 20:48:49	letoh	我知道 prolog 也是可以寫一堆遞迴程式後有點嚇到
2013-09-24 20:49:04	letoh	cut 也蠻有趣的
2013-09-24 20:50:08	suhorng	還沒有看到那邊XD miniKanren 的遞迴順序讓我頭好昏
2013-09-24 20:50:44	suhorng	http://minikanren.org/ HaskellKanren (HK) lol
2013-09-24 20:51:45	letoh	這本我也蠻想看的  需要先把前兩本看完嗎?
2013-09-24 20:51:46	suhorng	Oleg就在Haskell裡面實作了一個monad (transformer) LogicT, 拿來弄backtracking, 好像跟 miniKanren 在 Scheme 裡面用的是同樣的
2013-09-24 20:52:09	suhorng	不用, 能讀一點 Scheme 程式就夠了
2013-09-24 20:52:33	letoh	喔喔，那就放心了
2013-09-24 20:53:01	letoh	外國人的專案名字好愛用日文
2013-09-24 20:54:09	-->	godfat (~Adium@114-45-185-35.dynamic.hinet.net) has joined #haskell.tw
2013-09-24 20:54:37	letoh	像 armin 的  jinja (神社)  不曉得這跟 template engine 有啥關係XD
2013-09-24 20:55:13	suhorng	嘛, 至少 Kanren 有關w
2013-09-24 20:55:24	letoh	對啊
2013-09-24 21:04:34	suhorng	https://gist.github.com/suhorng/6669945 昨天把玩了一下XD 試了加法跟乘法
2013-09-24 21:05:00	suhorng	//名字結尾的那個 o 是順著書中命名習慣, 不過打印出來應該要上標的
2013-09-24 21:06:01	letoh	你不覺得多加那個 o... 感覺變可愛了嗎XD
2013-09-24 21:06:51	suhorng	我比較喜歡上標呀w 看起來像關係似的
2013-09-24 21:07:48	suhorng	建 cons 是用 (conso car-in cdr-in pair-out), 解構也可以用 (conso car-out cdrd-out pair-in), 或是隨便怎樣的關係真的很有趣
2013-09-24 21:09:24	suhorng	https://github.com/JaimieMurdock/HK/blob/master/src/Language/HK.hs 別人已經幫寫好了 backtracking monad 實作起來就超方便www 而且 lazy 在這裡很好用 XD
2013-09-24 21:10:16	suhorng	 Kanren 官網首頁上拿他來寫的 HM type system 好像除了給 term 推出 type 也可以給 type 反推!
2013-09-24 21:10:38	letoh	反推XD
2013-09-24 21:10:51	suhorng	"Does it run backwards?" XDD
2013-09-24 21:10:59	letoh	我也想到這個XD
2013-09-24 21:20:55	suhorng	不過感覺怎麼安排適當的 "==" 順序, 還有 backtrack 順序真的很難=_=|||
2013-09-24 21:32:41	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 21:58:18	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-24 22:08:32	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 241 seconds)
2013-09-24 22:22:22	CindyLinz	考慮再下一次 talk 的標題叫作: Alan Turing 教會我的10件事.. # http://www.techbang.com/posts/14929
2013-09-24 22:22:24	 *	CindyLinz 逃
2013-09-24 22:22:56	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 22:27:50	suhorng	是說我一直很好奇, 為什麼有時候說話帳號前面會有 *** 號?
2013-09-24 22:28:09	letoh	ctcp action 吧
2013-09-24 22:28:38	 *	letoh 像這樣嗎?
2013-09-24 22:28:41	CindyLinz	用 /me 講話
2013-09-24 22:30:37	letoh	為什麼一定是 10 件事...為了湊標題  萬一寫太爽多寫了一件還得忍痛刪掉XD
2013-09-24 22:32:09	CindyLinz	letoh: 10的倍數比較響亮... 教學文裡面說的 XDD
2013-09-24 22:32:27	petercommand	techbang都用10件事...
2013-09-24 22:32:49	letoh	我一看到「你放心，有事情，我負全責。」就笑了
2013-09-24 22:33:05	letoh	不曉得為什麼整篇掃過去直接看到這句話XD
2013-09-24 22:35:08	petercommand	二樓的留言XD
2013-09-24 22:35:33	letoh	很明顯是湊出來的XD
2013-09-24 22:36:56	suhorng	!
2013-09-24 22:37:33	suhorng	馬上來嘗試
2013-09-24 22:37:57	suhorng	There are 10 kinds of people in the world
2013-09-24 22:38:10	suhorng	* Those who understand ternary
2013-09-24 22:38:15	suhorng	* Those who don't
2013-09-24 22:38:23	CindyLinz	這樣不就兩種分完了... ._.
2013-09-24 22:38:49	suhorng	* Those who are convinced this joke is old news until they reread it.
2013-09-24 22:39:16	petercommand	* Those who partially understand
2013-09-24 22:39:18	suhorng	( http://qr.ae/Nt655 )
2013-09-24 22:40:34	petercommand	suhorng: ternary是甚麼呀
2013-09-24 22:41:18	suhorng	三進制XD
2013-09-24 22:41:58	petercommand	@@
2013-09-24 22:42:23	petercommand	XD
2013-09-24 22:42:27	suhorng	原本那個笑話是 binary
2013-09-24 22:44:48	petercommand	我終於知道笑點在哪了XD
2013-09-24 22:48:20	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Ping timeout: 260 seconds)
2013-09-24 22:54:42	hychen	有沒有人用過 http://hledger.org/?
2013-09-24 23:00:04	<--	b4283 (~b4283@218-164-214-237.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-09-24 23:17:40	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-24 23:20:22	<--	suhorng (~suhorng@118-166-45-246.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-24 23:23:15	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-24 23:27:46	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-25 00:08:32	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-25 00:13:33	cataska_	之所以用十件事，不就是因為半澤直樹嗎
2013-09-25 00:13:50	letoh	為什麼?
2013-09-25 00:14:20	letoh	「~的 10 件事」是很常見的哏啊
2013-09-25 00:14:30	cataska_	他的口頭禪是十倍奉還
2013-09-25 00:14:46	letoh	其實是加倍奉還
2013-09-25 00:14:58	letoh	十倍好像就出現一兩次而已XD
2013-09-25 00:15:10	MnO2_	最後出現百倍 xD
2013-09-25 00:15:22	CindyLinz	百倍好像覺得反而弱掉了? XD
2013-09-25 00:15:34	CindyLinz	數字太大, 變成虛數了 XD
2013-09-25 00:15:34	MnO2_	指數成長的話會不會成長到 Google xD
2013-09-25 00:15:38	cataska_	其實是界王拳吧
2013-09-25 00:15:43	letoh	XDXD
2013-09-25 00:16:24	cataska_	0.5 澤直樹
2013-09-25 00:16:31	letoh	沒看到半澤bot 貼的那一則 tweet 嗎XD
2013-09-25 00:16:39	MnO2_	其實是 Zn ，結果又轉一圈回來
2013-09-25 00:48:24	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-09-25 01:07:33	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-25 02:15:50	<--	hashcat (~chatzilla@27.242.194.1) has quit (Ping timeout: 240 seconds)
2013-09-25 04:35:44	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 246 seconds)
2013-09-25 04:36:03	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-25 07:22:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 07:47:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-09-25 07:47:29	<--	logfat_ (~cinch@home.mno2.org) has quit (*.net *.split)
2013-09-25 07:47:30	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-25 07:47:30	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-25 07:47:31	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-09-25 07:47:31	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (*.net *.split)
2013-09-25 07:47:31	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-wtncfudevtekboml) has quit (*.net *.split)
2013-09-25 07:47:32	<--	godfat (~Adium@114-45-185-35.dynamic.hinet.net) has quit (*.net *.split)
2013-09-25 07:47:32	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-jiknnkpzjrximsxd) has quit (*.net *.split)
2013-09-25 07:47:32	<--	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has quit (*.net *.split)
2013-09-25 07:47:32	<--	superbil (uid12362@gateway/web/irccloud.com/x-kbkxogyxjhbifvop) has quit (*.net *.split)
2013-09-25 07:47:32	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2013-09-25 07:47:33	<--	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2013-09-25 07:47:33	<--	darkx (~x4r@140.113.27.40) has quit (*.net *.split)
2013-09-25 07:47:33	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (*.net *.split)
2013-09-25 07:47:33	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2013-09-25 07:47:33	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (*.net *.split)
2013-09-25 07:47:33	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-25 07:47:33	<--	logbot__ (~cinch@109.169.58.220) has quit (*.net *.split)
2013-09-25 07:47:33	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-09-25 07:47:33	<--	hychen (uid12518@gateway/web/irccloud.com/x-vefebancabsfhgbo) has quit (*.net *.split)
2013-09-25 07:47:33	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-09-25 07:47:33	<--	miaout171_ (~miaout17@miaout17.net) has quit (*.net *.split)
2013-09-25 07:47:33	<--	cataska (~cataska@210.64.6.233) has quit (*.net *.split)
2013-09-25 07:51:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 07:51:28	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-wtncfudevtekboml) has joined #haskell.tw
2013-09-25 07:51:28	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-25 07:51:28	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-09-25 07:51:28	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2013-09-25 07:51:28	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-25 07:51:28	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-09-25 07:54:14	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-09-25 07:54:14	-->	godfat (~Adium@114-45-185-35.dynamic.hinet.net) has joined #haskell.tw
2013-09-25 07:54:14	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-25 07:54:14	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-25 07:54:14	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-jiknnkpzjrximsxd) has joined #haskell.tw
2013-09-25 07:54:14	-->	superbil (uid12362@gateway/web/irccloud.com/x-kbkxogyxjhbifvop) has joined #haskell.tw
2013-09-25 07:54:14	-->	darkx (~x4r@140.113.27.40) has joined #haskell.tw
2013-09-25 07:54:14	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-09-25 07:54:14	-->	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-25 07:54:14	-->	miaout171_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-09-25 07:54:14	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-09-25 07:54:14	-->	logbot__ (~cinch@109.169.58.220) has joined #haskell.tw
2013-09-25 07:54:14	-->	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-09-25 07:54:14	-->	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-25 07:54:14	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-09-25 07:54:14	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-09-25 07:54:14	-->	hychen (uid12518@gateway/web/irccloud.com/x-vefebancabsfhgbo) has joined #haskell.tw
2013-09-25 10:05:05	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-25 11:32:27	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-25 14:25:06	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-25 14:47:38	-->	suhorng (8c701083@gateway/web/freenode/ip.140.112.16.131) has joined #haskell.tw
2013-09-25 14:54:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-25 14:55:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 15:03:16	-->	jarod_chen (~jarod_che@115.193.187.193) has joined #haskell.tw
2013-09-25 15:28:37	<--	suhorng (8c701083@gateway/web/freenode/ip.140.112.16.131) has quit (Ping timeout: 250 seconds)
2013-09-25 15:38:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-25 15:44:12	<--	godfat (~Adium@114-45-185-35.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2013-09-25 16:18:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 16:26:07	-->	godfat (~Adium@36-224-212-217.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-25 16:26:37	-->	godfat1 (~Adium@36-224-217-44.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-25 16:30:20	<--	godfat (~Adium@36-224-212-217.dynamic-ip.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-25 17:00:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-25 17:01:03	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 17:13:47	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-25 17:16:31	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-09-25 17:35:44	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 17:41:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-25 17:41:34	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 18:15:11	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-25 18:46:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-09-25 19:49:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-25 19:58:24	-->	godfat (~Adium@36-224-220-31.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-25 20:01:31	<--	godfat1 (~Adium@36-224-217-44.dynamic-ip.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-25 20:32:45	-->	hashcat (~chatzilla@36-238-39-128.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-25 20:45:33	hashcat	藍色巨人最新力作
2013-09-25 20:45:38	hashcat	http://www.research.ibm.com/cognitive-computing/neurosynaptic-chips.shtml?lnk=ushpls1
2013-09-25 20:45:51	hashcat	人腦指令集架構
2013-09-25 20:55:08	<--	godfat (~Adium@36-224-220-31.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-09-25 21:33:02	-->	godfat (~Adium@114-45-185-35.dynamic.hinet.net) has joined #haskell.tw
2013-09-25 22:05:52	<--	jarod_chen (~jarod_che@115.193.187.193) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-25 22:38:52	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-25 22:42:39	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-25 22:50:50	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 245 seconds)
2013-09-25 22:53:29	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-09-25 23:06:23	<--	hashcat (~chatzilla@36-238-39-128.dynamic-ip.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-25 23:09:17	<--	monochrom (monokrom@216.138.220.146) has quit (Ping timeout: 241 seconds)
2013-09-25 23:28:50	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-25 23:30:01	-->	suhorng (~suhorng@118-166-45-246.dynamic.hinet.net) has joined #haskell.tw
2013-09-25 23:32:50	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-26 00:03:25	<--	suhorng (~suhorng@118-166-45-246.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-26 00:18:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-26 00:46:54	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-26 00:49:20	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-09-26 00:52:25	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-26 01:26:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-26 01:36:27	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-26 04:53:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-26 04:54:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-26 05:56:14	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-26 05:56:15	<--	godfat (~Adium@114-45-185-35.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-26 07:54:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-09-26 07:58:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-26 09:52:35	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-26 22:14:38	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-09-26 22:14:38	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-09-26 22:14:38	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-09-26 22:14:38	--	Nicks #haskell.tw: [a2n b4283 b4284 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ mno2 monochrom petercommand superbil UncleHandsome]
2013-09-26 22:14:38	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-09-26 22:14:38	***	Buffer Playback...
2013-09-26 22:14:38	Yu_Lin	[11:12:35] 久違的出現在 haskell.tw
2013-09-26 22:14:38	CindyLinz	[11:12:54] Hi XD
2013-09-26 22:14:38	Yu_Lin	[11:17:49] hi
2013-09-26 22:14:38	Yu_Lin	[11:18:04] 我往前翻了一些討論看到這句
2013-09-26 22:14:38	Yu_Lin	[11:18:23] 01:17:10 <hashcat> "執行時會丟型別錯誤"叫dynamic, "執行時會丟型別錯誤"叫static, 兩者可並存
2013-09-26 22:14:38	CindyLinz	[11:19:19] 應該後半有筆誤啦 :p
2013-09-26 22:14:38	Yu_Lin	[11:19:20] 後面那個句是不是把編譯打成執行了？
2013-09-26 22:14:38	CindyLinz	[11:21:30] 不過這樣的論述現在只能是個原則上的描述, 沒辦法精準了.. 因為現在有的語言的 compile pass 比較模糊
2013-09-26 22:14:38	Yu_Lin	[11:31:44] 其實是因為我看了 type 那本，然後看到網路上有在討論 javascript 是 untype language 這件事
2013-09-26 22:14:38	CindyLinz	[11:32:25] 嗯, 是有把 dyn type 視為 untype 的說法
2013-09-26 22:14:38	CindyLinz	[11:33:23] 如果是看它的變數, 什麼 type 都能裝, 所以這個角度看是 untyped
2013-09-26 22:14:38	Yu_Lin	[11:33:57] 就像 scheme 那樣？
2013-09-26 22:14:38	CindyLinz	[11:34:22] 可是從 a+b 有時候是字串相接, 有時候是數字相加... 這個角度來看, 有 type 的味道就比較強了 orz
2013-09-26 22:14:38	CindyLinz	[11:35:02] Yu_Lin: 嗯嗯
2013-09-26 22:14:38	Yu_Lin	[11:37:54] 恩，了解了，感謝XD
2013-09-26 22:14:38	Yu_Lin	[13:20:12] 突然發現，#hime 跟 #haskell.tw 的人.....重複還蠻高的XD
2013-09-26 22:14:38	CindyLinz	[13:44:57] 來加一下 #hime, 增加重複度.. (咦)
2013-09-26 22:14:38	CindyLinz	[13:45:36] topic 怪怪的 orz
2013-09-26 22:14:38	b4283	[15:52:50] XD
2013-09-26 22:14:38	***	Playback Complete.
2013-09-26 22:14:56	--	Mode #haskell.tw [+cnt]
2013-09-26 22:14:56	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-09-26 22:27:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-09-26 23:05:34	<--	b4283 (~b4283@218-164-215-133.dynamic.hinet.net) has quit (Ping timeout: 241 seconds)
2013-09-26 23:15:33	-->	godfat (~Adium@114-24-8-52.dynamic.hinet.net) has joined #haskell.tw
2013-09-26 23:24:27	-->	suhorng (~suhorng@118-166-45-246.dynamic.hinet.net) has joined #haskell.tw
2013-09-26 23:43:59	mno2	http://www.skybluetrades.net/blog/posts/2013/09/25/multilingual-blinkenlights/index.html  Haskell on 狗板
2013-09-26 23:44:22	mno2	又是 ajhc  xD
2013-09-26 23:46:40	letoh	看起來是拿來當 compiler 用而已
2013-09-26 23:47:33	-->	b4283 (~b4283@218-164-215-133.dynamic.hinet.net) has joined #haskell.tw
2013-09-26 23:50:24	godfat	不能接受這個字型...
2013-09-26 23:57:33	suhorng	Haskell耶好猛XD
2013-09-26 23:58:07	letoh	喔對 原來上次有看過  這個是有 haskell runtime 的
2013-09-27 00:11:46	<--	suhorng (~suhorng@118-166-45-246.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-27 00:23:43	<--	b4283 (~b4283@218-164-215-133.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-27 00:47:16	CindyLinz	:D
2013-09-27 01:01:39	monochrom	我的師父(論文導師)乾脆教我: 真的要分開"執行時"與"編譯時"嗎?
2013-09-27 01:03:02	godfat	我想看語言吧 XD
2013-09-27 01:05:34	CindyLinz	還是有傾向的啊 ^^|  像是程式證明用的就是編譯時的檢查, 編譯時就保守估計執行時的所有可能...
2013-09-27 01:09:58	<--	b4284 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-27 01:20:41	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-27 01:25:31	hychen	CindyLinz: "compile pass 比較模糊" # 可以解釋一下這個嗎? 我不太懂
2013-09-27 01:27:33	CindyLinz	hychen: 像是 javascript v8 的 just-in-time compile.. 它是 compile, 但是是 runtime 的時候做的
2013-09-27 01:27:33	letoh	因為 jit 嗎?
2013-09-27 01:27:34	letoh	喔喔喔
2013-09-27 01:28:09	CindyLinz	然後.... 這種 jit 至少還能說出 compile phase 是在什麼時候, 雖然已經是藏在 runtime 裡了...
2013-09-27 01:28:28	CindyLinz	如果(想像中)是用某 lazy evaluation 做的 vm..
2013-09-27 01:28:50	CindyLinz	它這個 jit compile 會給你 compile 到一半, 就叫你先去跑已經生出來的 op code..
2013-09-27 01:29:01	CindyLinz	剩下的嘛... 等你要用的時候我再生...
2013-09-27 01:29:43	hychen	這樣type checking沒問題? @@
2013-09-27 01:29:56	godfat	讓我想到 partial evaluation XD
2013-09-27 01:30:16	CindyLinz	有問題啊.. javascript 不就偶爾會有拿 undefined 當函數 call 的 exception? :p
2013-09-27 01:32:34	CindyLinz	唔.. partial evaluation 指的是已經在跑的程式, 偶爾還會重新 compile 自己, 重新生出更有效率的程式出來跑?
2013-09-27 01:34:02	CindyLinz	hychen: 我前一陣子看王垠的文章講這個, 他另外提到.. op code -> 執行, 也可以算是一種 compile
2013-09-27 01:34:34	CindyLinz	compile 成 in-memory 的一段 interpreter 的程式碼, 馬上吃掉作出動作
2013-09-27 01:36:00	letoh	一般的 jit 不就是這樣嗎?
2013-09-27 01:36:21	CindyLinz	他說的比較極端啊.. 像是 java 已經都生成 .class 檔了
2013-09-27 01:36:43	CindyLinz	他覺得執行 .class 的這一部分還是有 compile 的成份
2013-09-27 01:37:33	letoh	但 bytecode 畢竟還是得 vm 來解譯執行  所以在這邊做 jit 才合理呀
2013-09-27 01:38:33	CindyLinz	letoh: 他的文章是要說 compile 和 interpret 的界限很模糊, 他這邊是要說, 一般我們會覺得這一段很明顯是 interpret 了, 仍然可以視為 compile
2013-09-27 01:39:59	letoh	嗯嗯  就是因為有 jit 的關係呀... 執行 bytecode 是很沒效率的XD
2013-09-27 01:40:02	godfat	好像不是？不過我還是不要解釋好了，現在腦袋有點模糊 XD
2013-09-27 01:40:02	godfat	總之我覺得 partial evaluation 也是模糊了 compile time 跟 runtime
2013-09-27 01:40:02	godfat	其實只是看把那條線放在哪裡而已，左邊是 compile time, 右邊是 runtime
2013-09-27 01:40:02	godfat	都是相對的
2013-09-27 01:42:37	CindyLinz	對對, 我也覺得這樣.. 沒有明確的界限, 可是是用來描述兩類不同的性質, 思考問題或規劃語言都是蠻有用的
2013-09-27 01:53:52	godfat	對啊，所以就算在 ruby 裡我也常常會說 compile time XD
2013-09-27 01:53:53	godfat	不過有時候會講成 parse time 以免誤會...
2013-09-27 01:57:23	monochrom	到最後, 我認為, 理論上不必分開, 實際上分開為了方便工作. 因此怎樣分法只看方便, 沒有固定分法.
2013-09-27 01:58:40	godfat	同意
2013-09-27 02:03:36	monochrom	就正如, "編譯時"本身還再細分"詞法"(lexicon, 用regular grammar), "語法"(context-free grammar), "型別檢查", "出機械碼". 把它們分開了, 每一個都容易做. 但誰說一定要分開呢? 把四個迴圈用 fusion law 合成一個絕到可能, 只不過你會成為瘋狂科學家而已. XD
2013-09-27 02:08:16	monochrom	唔! 有一天要試做一下!
2013-09-27 02:14:41	CindyLinz	perl 的 yapp 和 haskell 的 happy 就沒有特別一個 regular 處理的 lexer 了. 它們都是直接接受 token list, 而這 token list 的產生
2013-09-27 02:15:20	CindyLinz	perl 的 regex 是 context free grammar; 然後 haskell 就隨意寫函數來生, 算是.... turing complete 等級? XD
2013-09-27 02:16:05	monochrom	通常用 lex (C) 或 alex (Haskell)
2013-09-27 02:16:39	CindyLinz	我看 Happy 自己的 tutorial 就直接寫一排函數做了 ^^|
2013-09-27 02:17:54	monochrom	哈哈
2013-09-27 02:23:35	CindyLinz	來看看... 好奇 alex 有什麼特出之處 :Q   因為 Haskell 裡面 regex 的 lib 也好多個, 不知道 alex 有什麼獨立存在的意義
2013-09-27 02:26:12	monochrom	形而上 (meta) 問題: 怎麼逢星期四晚, 星期五凌晨, 各位台灣的朋友不願睡呢? XD
2013-09-27 02:27:33	monochrom	"今夜不睡覺, 明天開派對"? XD
2013-09-27 02:29:11	monochrom	"奉獻青春給公司, 不如奉獻春宵給 Haskell, 回到公司再睡過"? XD
2013-09-27 02:30:59	monochrom	P.S. 昨晚因咖啡而不眠, 結果拿起書學 category theory 裏的 adjunction!
2013-09-27 02:33:52	monochrom	如果你自己用 regex lib, 你仍要自己加一些配套來出 token. 如果用 alex, 它替你加配套.
2013-09-27 02:35:12	monochrom	正如在 C 界有 lex 一樣
2013-09-27 05:50:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-27 08:37:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-27 08:58:21	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-27 09:06:47	MnO2	https://plus.google.com/115504368969270249241/posts/EpQodRSVQ3r   要開 strict 的 pragma 了 xD
2013-09-27 09:38:02	MnO2	http://www.cs.cmu.edu/~rwh/talks/mlw13.pdf  Harper @mlw13
2013-09-27 09:41:38	MnO2	http://splashcon.org/2013/ <-- OOP 的 top conference
2013-09-27 09:45:35	MnO2	https://mail.mozilla.org/pipermail/rust-dev/2013-September/005804.html  <-- rust 0.8 !
2013-09-27 10:24:42	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-27 11:14:17	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-27 11:15:01	CindyLinz	#hime 其實是政治版對吧 ._.
2013-09-27 11:17:24	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-27 11:17:33	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-27 11:27:42	_13h	CindyLinz: 的確是有些人比較喜歡政治話題啦，不過還有遊戲 linux 或音樂相關話題
2013-09-27 11:31:04	CindyLinz	我以為 #hime 是一個輸入法啊.. XD
2013-09-27 11:32:36	b4283	從 #gcin 時代以來一直都是這個風格 XD
2013-09-27 11:54:54	kanru	so I /part #hime :P
2013-09-27 12:00:19	_13h	還有沒有可以聊輸入法的 irc channel ? XD
2013-09-27 13:41:31	CindyLinz	cschat 可以吧?
2013-09-27 13:41:44	CindyLinz	欸, 還是說 hime 的 maintainer 都在 #hime, 所以... ^^|
2013-09-27 13:42:21	_13h	當然都在那邊啊
2013-09-27 13:44:25	_13h	我是有訂 chewing 的 mail list... 不過我不太喜歡 mail list 的型式XD
2013-09-27 14:16:20	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-27 14:32:01	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-27 14:37:19	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-27 15:17:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-27 15:24:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-27 16:14:25	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-27 16:22:34	-->	hashcat (~chatzilla@36-238-37-110.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-27 16:52:31	-->	suhorng (8c701091@gateway/web/freenode/ip.140.112.16.145) has joined #haskell.tw
2013-09-27 16:56:55	<--	suhorng (8c701091@gateway/web/freenode/ip.140.112.16.145) has quit (Client Quit)
2013-09-27 17:17:57	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-09-27 17:33:11	b4283	形式
2013-09-27 17:41:01	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-27 17:48:05	letoh	嗯  形式
2013-09-27 18:17:15	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-27 18:52:35	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-27 18:58:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-27 18:59:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-27 19:44:08	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-27 21:06:34	-->	Yu_Lin (24ec1766@gateway/web/freenode/ip.36.236.23.102) has joined #haskell.tw
2013-09-27 21:35:54	<--	hashcat (~chatzilla@36-238-37-110.dynamic-ip.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-27 21:40:48	-->	hashcat (~chatzilla@118-171-195-169.dynamic.hinet.net) has joined #haskell.tw
2013-09-27 21:53:41	-->	suhorng (~suhorng@118-166-46-119.dynamic.hinet.net) has joined #haskell.tw
2013-09-27 21:56:51	suhorng	hashcat: 你知道resolution在弄什麼嗎?
2013-09-27 21:59:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-27 22:00:02	suhorng	查Prolog發現有提到resolution, 可是不知道為什麼會有關@@
2013-09-27 22:02:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-27 22:06:39	hashcat	什麼跟啥嚜有關
2013-09-27 22:09:04	suhorng	不知道為什麼 Prolog 會提到 resolution? miniKanren 的實作重頭到尾只有提到 unification, 書的介紹完全沒提到 resolution, 我也不知道那是什麼囧
2013-09-27 22:10:35	hashcat	resolution就是把左邊的unification結果, 帶入右邊的變數後繼續作這樣
2013-09-27 22:11:58	suhorng	 ":-" 的左邊跟右邊嗎?
2013-09-27 22:12:37	hashcat	嗯嗯
2013-09-27 22:12:37	suhorng	原來如此
2013-09-27 22:47:32	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-09-27 22:55:31	hashcat	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.68.2227
2013-09-27 22:56:07	hashcat	比較新的prolog vm
2013-09-27 22:56:43	letoh	warren 的是 1977 那篇嗎?
2013-09-27 22:57:52	hashcat	我只記得是70年代
2013-09-27 23:00:49	suhorng	主要是我最近看 The Reasoned Schemer 學 miniKanren, 他跟 Prolog 有點像又不一樣...
2013-09-27 23:01:12	hashcat	老中青三代
2013-09-27 23:01:36	hashcat	也沒看過長一樣的
2013-09-27 23:02:25	suhorng	他寫的時候是可以弄 fresh variable, 然後寫很多 goals (== v w) 之類(也可以是data)
2013-09-27 23:02:46	letoh	https://github.com/clojure/core.logic/wiki/Differences-from-The-Reasoned-Schemer
2013-09-27 23:02:47	suhorng	再加上 cond 控制 structure (backtracking在這部份)
2013-09-27 23:02:57	suhorng	_13h: (woot)
2013-09-27 23:03:47	suhorng	咦? 這是code跟書上講的的差別? 我載下來的 code 跟他這個描述完全不同耶
2013-09-27 23:04:01	letoh	應該是說 clojure 的實作?
2013-09-27 23:04:10	suhorng	喔!原來是這樣
2013-09-27 23:04:17	letoh	core.logic
2013-09-27 23:05:25	suhorng	他書的寫法讓我好想跟 Agda 程式一樣大量用符號, 可是很多 Scheme implementation 在 Windows 上 unicode 支援又不太好 XD
2013-09-27 23:20:24	CindyLinz	用顏文字啦~~~
2013-09-27 23:31:07	<--	hashcat (~chatzilla@118-171-195-169.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-27 23:31:43	Yu_Lin	type Bool = T_T | ^_^ 這樣嗎？XD
2013-09-27 23:33:21	CindyLinz	Yu_Lin: 我想的主要是原本想用數學符號, 改成 |-  _|_ 之類的去接啦 XD
2013-09-27 23:34:44	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-27 23:49:35	suhorng	CindyLinz: constructor用冒號開頭也可以用符號XD
2013-09-28 00:28:34	monochrom	我喜歡 type Bool = T_T | ^_^
2013-09-28 00:37:35	<--	Yu_Lin (24ec1766@gateway/web/freenode/ip.36.236.23.102) has quit (Quit: Page closed)
2013-09-28 00:41:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-28 00:41:47	<--	suhorng (~suhorng@118-166-46-119.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-28 01:19:26	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-28 01:57:54	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-28 02:42:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-28 03:11:07	favonia	O_o | o_o
2013-09-28 03:11:41	letoh	fO_o | o_o?
2013-09-28 06:48:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-28 09:18:22	-->	b4283 (~b4283@36-238-226-171.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-28 10:58:12	MnO2	http://registrano.com/events/5e35ff  用這背景是有人要結婚了嗎? wwwww
2013-09-28 10:59:01	-->	Yu_Lin (24ec1644@gateway/web/freenode/ip.36.236.22.68) has joined #haskell.tw
2013-09-28 11:02:25	monochrom	甚麼是 "滾來滾去"?
2013-09-28 11:02:54	Yu_Lin	這背景......XDDD
2013-09-28 11:03:49	monochrom	無用的tautology: 每日都有人結婚 XD
2013-09-28 11:06:18	Yu_Lin	這次的簡報會釋出嗎？
2013-09-28 11:08:18	monochrom	我最想在完了後看Cindy的slide或程式, 因為我太菜鳥, 不會專誠由多倫多飛來台北看 XD
2013-09-28 11:11:37	Yu_Lin	其實我也是想看 Cindy 的 compiler 怎麼做......
2013-09-28 11:31:09	<--	Yu_Lin (24ec1644@gateway/web/freenode/ip.36.236.22.68) has quit (Quit: Page closed)
2013-09-28 11:45:22	CindyLinz	唔.. 可是簡報上面是打算寫結語, 主要是對著程式碼講欸 @@"
2013-09-28 11:45:55	<--	superbil (uid12362@gateway/web/irccloud.com/x-kbkxogyxjhbifvop) has quit (Ping timeout: 256 seconds)
2013-09-28 11:46:35	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-wtncfudevtekboml) has quit (Ping timeout: 268 seconds)
2013-09-28 11:46:53	CindyLinz	目前準備了 12 個 .y 檔.. 大部分是標序號, 像是 h1, h2, h3, h3-1, h3-2
2013-09-28 11:47:06	CindyLinz	可以相臨編號的作 diff 來看
2013-09-28 11:47:30	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-jiknnkpzjrximsxd) has quit (Ping timeout: 264 seconds)
2013-09-28 11:47:48	monochrom	其實程式碼加些提示, 可能就夠了. 真的看不明再算.
2013-09-28 11:48:08	CindyLinz	不然我來把各檔要講的點加到註解好了
2013-09-28 11:48:39	CindyLinz	然後.. 在裡面寫「下一個檔請看 oooo.y 檔」XD
2013-09-28 12:01:28	CindyLinz	MnO2: jaiyalas 說只是新學期新氣象.....  wwww
2013-09-28 12:11:14	MnO2	https://twitter.com/ccshan/status/383625029017432064   回應讓我大笑 xD
2013-09-28 12:12:58	MnO2	https://twitter.com/ezyang/status/382939785750650880  這個也蠻好笑的
2013-09-28 12:15:26	MnO2	http://xkcd.com/1270/
2013-09-28 12:18:45	MnO2	https://twitter.com/runarorama/status/383680373571342336/photo/1  這太靠杯了
2013-09-28 12:20:45	CindyLinz	XDDD
2013-09-28 12:21:44	MnO2	https://twitter.com/plragde/status/383657145499021313  Oleg 狂中槍 xD
2013-09-28 12:22:01	CindyLinz	那如果這投影片要譯成台灣版的話, 把 Oleg 換成柯向上好了.. 認識的人比較多 (逃)
2013-09-28 12:23:47	CindyLinz	看了這個.. # 09:06 < MnO2> https://plus.google.com/115504368969270249241/posts/EpQodRSVQ3r   要開 strict 的 pragma 了 xD
2013-09-28 12:24:22	MnO2	恩?
2013-09-28 12:24:27	CindyLinz	在想, 好像 GHC 的這種 pragma 常是以 module 為單位.. 但其實以 function 為單位好像也很好, 可能更好啊? @@"
2013-09-28 12:24:39	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-28 12:25:01	CindyLinz	啊, 大概是 Haskell 的 layout format 的問題, 不方便確定這個 pragma 屬於哪一個函數 orz
2013-09-28 12:25:31	CindyLinz	如果要求 {-# .... -} 也要縮到對應位置行不行? (思)
2013-09-28 12:26:16	CindyLinz	因為我從 perl 來的經驗.. perl 的這種 pragma 的東西, 都是在 package 為單位, 或是任何一個 block 為單位
2013-09-28 12:26:35	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 12:26:46	CindyLinz	想來 Haskell 以 layout format 的時候, block 的界限比較不明顯
2013-09-28 12:28:05	MnO2	不知道耶，可能要看 compiler 設計怎樣比較好改吧 xD
2013-09-28 12:28:06	CindyLinz	perl 的 pragma 包含: source 是不是 utf8 格式 (一串 utf8 bytes 要視為一個字元, 還是n個字元), warning 的項目開關, 甚至是不同 perl 版本..
2013-09-28 12:28:13	MnO2	https://twitter.com/runarorama/status/383648832174583808/photo/1/large   終於看到長甚麼樣子
2013-09-28 12:29:23	MnO2	https://vimeo.com/75490786  BPFG 看起來有不少 video 可以看
2013-09-28 12:48:47	monochrom	我在 Wii 上玩過 Mario 賽車, 所以同意 "the bullet is enormous there is no escaping" XD
2013-09-28 12:58:30	monochrom	monad/comonad annihilation 實在太強了! XD
2013-09-28 13:46:07	MnO2	https://gist.github.com/leroux/6395804
2013-09-28 14:16:04	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-vfyodmrdabyomcka) has joined #haskell.tw
2013-09-28 14:18:25	-->	superbil (uid12362@gateway/web/irccloud.com/x-vduvzivwnaptqnub) has joined #haskell.tw
2013-09-28 14:20:32	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-doepnocmuuiwknte) has joined #haskell.tw
2013-09-28 14:43:14	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 15:19:31	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 260 seconds)
2013-09-28 15:23:38	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 15:24:02	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-28 15:30:50	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 15:31:15	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-28 15:32:19	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 15:52:35	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection timed out)
2013-09-28 15:55:58	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-28 15:56:00	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 16:01:59	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 16:02:51	-->	Yu_lin (24ec183f@gateway/web/freenode/ip.36.236.24.63) has joined #haskell.tw
2013-09-28 17:19:32	Yu_lin	Orz|||
2013-09-28 17:20:20	Yu_lin	為了上 Courses 的 PL 課，我必須安裝 sml/nj，然後這東西搞掉我兩天的時間Orz|||
2013-09-28 17:20:58	CindyLinz	免錢的最貴.. (誤)
2013-09-28 17:22:48	Yu_lin	同樣是 sml 的實作品，mlton 可以讓我很無腦的用 src2pkg 一個指令搞定，sml/nj 則讓我花了很多時間在嘗試奇怪的事情上Orz|||
2013-09-28 17:24:32	CindyLinz	我也討厭這種事 @@"
2013-09-28 17:26:04	Yu_lin	其實我覺得最可怕的是 sml/nj 的實作是用 sml 寫的，所以需要有一個 sml 實作品才能編譯
2013-09-28 17:28:16	CindyLinz	它自己沒有內附標準的 bootstrap 流程喔? @@"
2013-09-28 17:28:56	Yu_lin	有，不過 sml/nj 沒有提供 64 bit 的版本
2013-09-28 17:29:45	CindyLinz	hmm.... 不過你都做完了 XD
2013-09-28 17:29:56	CindyLinz	想說你當初沒有考慮開一個 32bit 的 vm?
2013-09-28 17:30:11	Yu_lin	如果是其他發行版，把 glibc-devel 之類的裝一裝，問題就解決了，但我用的是 slackware，所以要自己看 mutillib 怎麼弄
2013-09-28 17:30:18	CindyLinz	反正是學習, 應該能用就好
2013-09-28 17:31:22	Yu_lin	對阿，學了很多，我本來還想用 mlton 去編 sml/nj.....Orz|||
2013-09-28 17:31:34	CindyLinz	「學了很多」.... XDDDD
2013-09-28 17:43:04	-->	b4284 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-28 18:09:05	hychen	sml/nj 有ppa
2013-09-28 18:09:16	hychen	in Ubuntu
2013-09-28 18:16:41	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-09-28 18:19:43	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 18:46:18	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 18:57:28	letoh	sml/nj 不是很好裝嗎?
2013-09-28 18:57:45	letoh	除非有特殊需求  不然照預設 config 編譯就好了
2013-09-28 18:58:12	letoh	Yu_lin: 我也是 slackware  不過你應該是因為 64bit 比較麻煩
2013-09-28 19:01:01	Yu_lin	對阿，問題就出在 64bit
2013-09-28 19:17:38	-->	hashcat (~chatzilla@218-164-111-158.dynamic.hinet.net) has joined #haskell.tw
2013-09-28 19:20:21	letoh	我的 64bit 是跑在 vm 裡  平常其實也用不太到
2013-09-28 19:20:53	letoh	32bit 環境已經用很多年沒重裝過了  都是一路一直升級上來的
2013-09-28 19:55:48	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 260 seconds)
2013-09-28 20:08:12	godfat	問個 vim 的問題？ orz
2013-09-28 20:08:12	godfat	我想編輯一個 zip 檔，但不想把檔名改成 .zip
2013-09-28 20:08:12	godfat	有啥方法嗎？ set filetype=zip 看來沒有用..
2013-09-28 20:09:53	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 20:10:04	b4283	symlink ? XD
2013-09-28 20:10:31	godfat	~.~ 試試... 不過沒有指令可以切換模式嗎？ 囧
2013-09-28 20:11:05	petercommand	godfat: hard link...
2013-09-28 20:12:35	godfat	= =... symlink 看來是可以，我想 hard link 應該也行
2013-09-28 20:12:35	godfat	但還是得建額外檔案 = =
2013-09-28 20:14:44	godfat	現在在做的是修改 sublime text 的 package
2013-09-28 20:14:45	godfat	sublime text 3 的 package 是 zip 檔，雖然檔名不是
2013-09-28 20:14:45	godfat	裡面的 ruby syntax highlighting 是爛的，想修好
2013-09-28 20:18:49	godfat	修好了，vim 開 zip 這件事先放著好了 orz
2013-09-28 20:19:08	Yu_lin	:!mv % 想要的檔名
2013-09-28 20:19:11	Yu_lin	:q!
2013-09-28 20:19:22	godfat	mv.... = =
2013-09-28 20:19:53	godfat	我以為可以有 :bufmode zip 這樣就行了
2013-09-28 20:21:01	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-28 20:21:03	CindyLinz	那你附檔名是什麼?
2013-09-28 20:21:13	CindyLinz	幫這個附檔名設 au.. XD
2013-09-28 20:22:16	godfat	sublime-package...
2013-09-28 20:22:16	godfat	剛剛查到的都是這個方式，可是我不想污染我的設定 XD
2013-09-28 20:22:16	godfat	只改這一次而已 @_@
2013-09-28 20:22:16	godfat	而且我可以想像會有很多東西是 zip 包起來的，也沒副檔名
2013-09-28 20:30:04	petercommand	au?
2013-09-28 20:31:49	godfat	au 可以不設副檔名嗎？
2013-09-28 20:32:43	petercommand	甚麼是au阿
2013-09-28 20:33:10	godfat	vim 裡面設檔案關聯的指令（的樣子，我不熟）
2013-09-28 20:34:44	petercommand	我對vim不熟= =
2013-09-28 20:37:28	Yu_lin	autocmd?
2013-09-28 20:39:38	godfat	原來 au 就是 autocmd
2013-09-28 20:39:38	godfat	我一直想試 BufRead zip 之類的但都失敗
2013-09-28 20:40:10	Yu_lin	*zip 或 .*zip 的樣子？
2013-09-28 20:40:35	godfat	我要編輯的檔案裡沒有 zip 字樣，所以我猜不行？
2013-09-28 20:43:48	Yu_lin	BufRead 是根據檔名來判斷，如果檔名沒有 zip，就沒辦法用 BufRead 了
2013-09-28 20:44:08	godfat	果然，好吧 :(
2013-09-28 20:44:44	<--	Yu_lin (24ec183f@gateway/web/freenode/ip.36.236.24.63) has quit (Quit: Page closed)
2013-09-28 20:46:33	CindyLinz	有可以看檔案內容的 rule 的樣子... 可是我不會 (小聲)
2013-09-28 20:47:37	CindyLinz	zip 檔案開頭應該是 PK
2013-09-28 20:47:42	petercommand	像file那樣嗎?
2013-09-28 20:47:57	godfat	所以要弄自動判斷嗎？ @_@
2013-09-28 20:47:57	godfat	那也許已經有人做了，用 file 判斷之類的
2013-09-28 20:48:09	godfat	不過我以為手動切換比較簡單 -_-
2013-09-28 20:48:27	CindyLinz	手動切換你幹嘛還抗拒手動改一下附檔名 XD
2013-09-28 20:48:33	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 20:48:49	godfat	那要 mv 兩次 = =... ln 一下確實還比較快 XD
2013-09-28 20:49:26	-->	Yu-Lin (24ec10d9@gateway/web/freenode/ip.36.236.16.217) has joined #haskell.tw
2013-09-28 20:50:34	-->	suhorng (~suhorng@118-166-46-119.dynamic.hinet.net) has joined #haskell.tw
2013-09-28 20:51:29	godfat	說到這個，我想在自己的 automation task 中，不給任何選項時列出所有指令
2013-09-28 20:51:29	godfat	像是 make 時列出 make install, make all, 等等
2013-09-28 20:51:29	godfat	實際上是 rake, 我希望在打 rake 不給選項時，等同於 rake --tasks 列出所有指令
2013-09-28 20:51:29	godfat	不過發現最穩的方法是重跑一次 process... 不知道有沒有更好的作法 :(
2013-09-28 20:51:29	godfat	重跑一次 process 有點慢...
2013-09-28 21:03:50	suhorng	mno2: Standard ML 那一條是什麼意思阿?
2013-09-28 21:13:43	Yu-Lin	哪一條？
2013-09-28 21:19:30	suhorng	> 12:11:14 <MnO2> https://twitter.com/ccshan/status/383625029017432064   回應讓我大笑 xD
2013-09-28 21:19:31	lambdabot	  Not in scope: data constructor `MnO2'Not in scope: `https'Precedence parsin...
2013-09-28 21:50:06	<--	b4283 (~b4283@36-238-226-171.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-09-28 21:53:46	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-28 22:00:39	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-28 22:02:09	Yu-Lin	不過如果想自動切換 vim 的檔名，還是可以用 au 搭配 vimscript 去做XD（剛剛試了一下
2013-09-28 22:02:42	Yu-Lin	除了 BufRead 還有其他的，例如 VimLeave 之類的
2013-09-28 22:05:37	godfat	教一下？ XD 感謝 @_@
2013-09-28 22:12:28	mno2_	suhorng: 我不確定耶，應該是在調侃 standard ML 某些 strict 的性質吧。但其實我不會 SML
2013-09-28 22:12:48	godfat	我以為是在調侃美國人？ XD
2013-09-28 22:13:48	suhorng	那回應是為什麼@_@
2013-09-28 22:14:22	godfat	Bob Harper 很愛 SML XD
2013-09-28 22:14:48	godfat	@_@
2013-09-28 22:14:48	godfat	Robert Harper... 看來不是 Bob XD
2013-09-28 22:14:59	godfat	看來我搞錯人了 orz
2013-09-28 22:15:59	b4284	bob 好像就是 robert
2013-09-28 22:16:25	suhorng	(!) make sense!
2013-09-28 22:16:29	suhorng	http://en.wikipedia.org/wiki/Robert_Harper_(computer_scientist)
2013-09-28 22:17:00	suhorng	他是 Standard ML 定義的作者之一?
2013-09-28 22:17:00	godfat	...=_= 難怪我有這樣的連結...
2013-09-28 22:17:06	godfat	我記得是
2013-09-28 22:17:27	b4284	應該說 bob 是 robert 常用的匿稱
2013-09-28 22:18:18	b4284	就好像常叫的 bill gates 其實名字是 william
2013-09-28 22:18:48	godfat	是喔 @@ Bill 是假名？
2013-09-28 22:19:01	suhorng	原來不是名字 @_@
2013-09-28 22:19:06	b4284	William Henry "Bill" Gates
2013-09-28 22:19:41	b4284	三代 (誤)
2013-09-28 22:26:50	Yu-Lin	我剛剛翻文件，vim 就算不給副檔名，它也會自動根據檔案內容判斷格式，我猜應該有個可以用來顯示格式的指令才對，但還沒找到
2013-09-28 22:28:03	Yu-Lin	然後你可以設定一個 function 用來 rename 或是用 file 來給檔案一個新的名稱，再寫另一個用來復原檔案名稱
2013-09-28 22:29:06	Yu-Lin	前面那個 function 用在 autocmd BufRead 或其他可以用來判斷檔案格式的地方，後面那個用在 autocmd BufWrite 或 VimLeave 之類的
2013-09-28 22:30:27	Yu-Lin	你可以參考這篇
2013-09-28 22:30:27	godfat	了解... 看來不是很好弄 @_@
2013-09-28 22:30:28	godfat	感謝 orz..
2013-09-28 22:30:28	Yu-Lin	http://vim.wikia.com/wiki/Write_your_own_Vim_function
2013-09-28 22:30:46	Yu-Lin	或是 :help function 來翻文件
2013-09-28 22:31:14	godfat	決定還是先用 ln -s... XD
2013-09-28 22:31:28	Yu-Lin	XD
2013-09-28 22:32:47	Yu-Lin	我之前好像有把 F5 設成 autocmd BufRead *html :map <F5> :!chrome %<CR> 這樣過
2013-09-28 22:36:20	Yu-Lin	http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/ 有人玩過 MLRISC 這個東西嗎？
2013-09-28 22:36:29	Yu-Lin	剛剛看 sml/nj 看到的
2013-09-28 22:47:35	godfat	那是按 f5 時會重新讀取檔案的意思嗎？
2013-09-28 22:49:45	Yu-Lin	我那是用在 html 上的，如果副檔名是 html，按 F5 就會調用外部的 chrome 去跑這整份程式碼
2013-09-28 22:51:06	godfat	喔喔。我晚點研究看看，謝啦
2013-09-28 22:51:39	letoh	godfat: 你都用什麼 editor 呢? 平常不是用 vim ?
2013-09-28 22:52:39	godfat	目前平常是用 sublime text XD vim 是懶得離開 terminal 時用的 @@
2013-09-28 22:53:00	letoh	原來如此
2013-09-28 22:53:15	godfat	是有想轉移到 vim 上，不過試了很多次都有點失敗 orz
2013-09-28 22:53:16	godfat	不少我需要的功能，在 vim 上很難做或是做不到之類的
2013-09-28 22:54:55	letoh	那是什麼神奇的功能啊?
2013-09-28 22:55:23	hashcat	用emacs好了
2013-09-28 22:56:08	hashcat	雖說會lag, 快速鍵還會重疊到
2013-09-28 22:57:26	godfat	我有點忘記了，好像跟 ctrlp 和 nerdtree 有點關係
2013-09-28 22:57:27	godfat	例如我希望 nerdtree 能把任意檔案當成 project 內容，
2013-09-28 22:57:27	godfat	而不是真的根據硬碟目錄
2013-09-28 22:57:27	godfat	諸如此類的
2013-09-28 22:57:27	godfat	後來想說乾脆自己改，但發現 vim script 用起來太痛苦了，
2013-09-28 22:57:27	godfat	就算了....
2013-09-28 22:57:46	godfat	emacs 看看吧 ~.~ 暫時還沒空重摸工作工具 orz...
2013-09-28 22:58:22	hashcat	emacs有兩種, 一種是xwindows的, 一種terminal
2013-09-28 22:58:29	letoh	vim 不一定要用 vim script，可以吃 python..
2013-09-28 22:58:46	letoh	emacs 有很多種XD  但本家只有一種
2013-09-28 22:58:51	hashcat	xwindows不太需要記憶東西
2013-09-28 22:59:13	CindyLinz	想寫 script 的話應該 emacs 比 vim 適合?
2013-09-28 22:59:19	letoh	如果你說的是 xemacs，那的確是不是本家的東西
2013-09-28 22:59:23	hashcat	terminals那種也就 alt + `
2013-09-28 22:59:39	CindyLinz	不過換一種不同的檔案類型, 就像換了整套環境的樣子
2013-09-28 22:59:42	b4284	該是 gtk 版
2013-09-28 22:59:55	CindyLinz	vim 會比較相似
2013-09-28 23:00:01	hashcat	我說得就是emacs
2013-09-28 23:00:02	letoh	其實 vim 也可以  只是比較弱一點  可能得用 ft 來切換
2013-09-28 23:00:05	hashcat	前面沒x
2013-09-28 23:00:33	letoh	嗯  emacs-x11 跟 emacs-no-x11 都算本家的
2013-09-28 23:01:29	hashcat	單手沒辦法用可能是缺點
2013-09-28 23:01:47	godfat	我之前用 aquaemacs 的印象是都不太好... XD
2013-09-28 23:02:01	CindyLinz	單手... 可以練單手 dvorak layout 作補嘗.. (誤)
2013-09-28 23:02:03	hashcat	也不是完全沒辦法, 就是要繞比較大圈
2013-09-28 23:02:30	letoh	我還在用 vim 時其實也會寫一些 script，其實 vim 提供的 api 還不少，能做的事也很多... 問題就是跟 terminal 的整合太弱
2013-09-28 23:02:57	letoh	不過就算現在有改善，也回不去了XD
2013-09-28 23:06:34	letoh	aquaemacs 好像是 mac 上的首選，但從來沒用過，不曉得有什麼不同@_@
2013-09-28 23:08:49	godfat	我覺得應該是我不太適應 emacs orz...
2013-09-28 23:09:01	godfat	之前想改個字型也讓我覺得好麻煩 @@
2013-09-28 23:09:42	letoh	只是改字型的話好像跟 vim 差不多
2013-09-28 23:10:25	godfat	我可能需要從 console 介面開始
2013-09-28 23:10:27	letoh	不過我其實都在 terminal，所以很少遇到字型設定問題XD
2013-09-28 23:11:10	letoh	不管是 console 或 gui 界面的使用都一樣啊  但我個人建議剛開始先從 gui 開始
2013-09-28 23:11:39	petercommand	letoh: gui有menu可以按呀
2013-09-28 23:11:44	letoh	emacs 有些函式設計不良，強迫要傳入 mouse event，在 console 會沒辦法呼叫
2013-09-28 23:12:27	godfat	gui 我是按 menu 按到不能接受 XD
2013-09-28 23:12:34	petercommand	XD
2013-09-28 23:12:40	letoh	按 menu ?
2013-09-28 23:12:53	godfat	就是覺得那 menu 設計實在太恐怖了
2013-09-28 23:13:03	letoh	唔  沒有 menu 也能用，我基本上都是拿掉 menubar 的
2013-09-28 23:13:12	petercommand	XD
2013-09-28 23:13:15	godfat	所以想說從 console 著手應該比較適合我
2013-09-28 23:14:13	letoh	其實都一樣啦  但 gui 能用的功能比較完整  例如 speedbar，還不習慣 emacs 的人用 console 版的 speedbar 會瘋掉...
2013-09-28 23:14:33	hashcat	我玩eclipse玩到被eclipse玩
2013-09-28 23:14:42	letoh	練到可以在心中切換 frame 後就沒問題了XD
2013-09-28 23:15:04	hashcat	裝了那個clojure plugin後, 補全def只會出現defn
2013-09-28 23:15:09	letoh	eclipse 沒辦法在 terminal 用，這對我來說是沒辦法用的XD
2013-09-28 23:15:10	hashcat	求救
2013-09-28 23:15:35	letoh	我應該有 90% 的環境需求都是需要 terminal
2013-09-28 23:15:36	hashcat	明明就有defprotocol之類的
2013-09-28 23:16:08	hashcat	那除了emacs別無選擇
2013-09-28 23:16:55	godfat	暫離..
2013-09-28 23:16:57	letoh	剩下的大概就是在 x11 畫圖或在 windows 寫 mfc 程式XD
2013-09-28 23:17:37	hashcat	eclipse裝消維
2013-09-28 23:19:00	hashcat	光x11也能畫圖
2013-09-28 23:19:30	hashcat	裝個kde不是很好嘛
2013-09-28 23:20:00	hashcat	無聊還可以把桌面轉來轉去
2013-09-28 23:20:23	letoh	我只要能跑 gimp 的環境就可以
2013-09-28 23:20:45	hashcat	xmonad跟mate混合不錯
2013-09-28 23:20:48	letoh	其他多餘的東西不太喜歡裝XD
2013-09-28 23:20:51	CindyLinz	mate?
2013-09-28 23:21:20	hashcat	有人不喜歡gnome 3就把2分離出來
2013-09-28 23:21:25	hashcat	叫mate
2013-09-28 23:21:31	CindyLinz	喔喔
2013-09-28 23:21:48	hashcat	xmonad能讓工作列整個消失不見
2013-09-28 23:21:52	CindyLinz	那 letoh 現在是用純的 xmonad?
2013-09-28 23:22:23	hashcat	也可以變回有mate工作列
2013-09-28 23:22:43	hashcat	變不見的狀況跟只開x11樣子很像
2013-09-28 23:24:03	b4284	mate 很好用
2013-09-28 23:24:56	letoh	我沒有 ghc 呀，應該沒辦法跑 xmonad XD
2013-09-28 23:25:18	letoh	還是只有 hugs 也能跑?
2013-09-28 23:25:24	CindyLinz	對哄!
2013-09-28 23:26:49	letoh	可能哪天受不了就會把 ghc 裝起來了XD  到時候再試試 xmonad
2013-09-28 23:27:29	hashcat	發行版都有提供binary版吧
2013-09-28 23:28:12	letoh	不過我真的不需要特殊的 wm... 以前用一陣子 twm 和 evilwm，提供的功能已經多到用不完
2013-09-28 23:29:49	CindyLinz	hashcat: xmonad 如果沒有配合 ghc 的話, config 不能改欸 ^^|
2013-09-28 23:30:53	hashcat	沒注意過
2013-09-28 23:32:49	letoh	我比較需要一個很穩定的 terminal 和一個很好改的 text editor XD
2013-09-28 23:34:18	hashcat	怎麼聽都是emacs
2013-09-28 23:34:46	hashcat	順便講eclipse上面一票plugin都不錯用
2013-09-28 23:35:21	letoh	我知道啊  因為弄 android 時只能先配合用 eclipse XD
2013-09-28 23:35:56	hashcat	XL跟unified parallel C都有plugin
2013-09-28 23:37:59	hashcat	http://upc.lbl.gov/
2013-09-28 23:38:26	letoh	xl 是指 ibm 那個?
2013-09-28 23:38:30	hashcat	看起來就很好玩, 雖說用不上
2013-09-28 23:38:32	hashcat	嗯嗯
2013-09-28 23:38:51	letoh	唔  你在哪個環境用 xl 呢?
2013-09-28 23:39:04	hashcat	沒用過
2013-09-28 23:39:13	letoh	喔喔喔
2013-09-28 23:39:31	hashcat	只是eclipse看到有全套parallel套裝就順便裝了
2013-09-28 23:39:59	letoh	我以為你在 aix 之類的環境上工作
2013-09-28 23:40:01	hashcat	想存錢作集群
2013-09-28 23:40:38	hashcat	只是妄想集群所以先學一下
2013-09-28 23:41:53	mno2_	suhorng, godfat: Bob 的確是 Robert Harper 啊。
2013-09-28 23:41:59	mno2_	Bob = Robert
2013-09-28 23:42:30	mno2_	Bill = William
2013-09-28 23:44:42	petercommand	群集和集群是一樣的吧?
2013-09-28 23:45:10	hashcat	熊貓跟貓熊應該也是一樣
2013-09-28 23:45:22	suhorng	mno2: 喔喔從名字來的!!
2013-09-28 23:46:28	b4284	叢集表示：
2013-09-28 23:46:38	petercommand	XD
2013-09-28 23:52:44	CindyLinz	cons 跟 snoc 也一樣喔~ (誤)
2013-09-29 00:00:19	-->	arbuz (~tony@123-193-74-170.dynamic.kbronet.com.tw) has joined #haskell.tw
2013-09-29 00:00:47	<--	arbuz (~tony@123-193-74-170.dynamic.kbronet.com.tw) has quit (Client Quit)
2013-09-29 00:02:31	Yu-Lin	我愈來愈搞不懂 sml 啦XD
2013-09-29 00:03:55	Yu-Lin	除了 sml/nj 用 MLRISC，Mlton 也用
2013-09-29 00:04:12	Yu-Lin	看 MLRISC 還看到了用 G machine 實作的 haskell
2013-09-29 00:06:43	mno2_	http://english.stackexchange.com/questions/8767/changes-in-english-names-of-people  請見等價大全 xD
2013-09-29 00:09:45	mno2_	其實去公司隨便抓個 Engineer 大概都不知道 MS 跟 Apple 兩大 founders 的本名吧 xD
2013-09-29 00:10:09	mno2_	他們都還有 middle name
2013-09-29 00:10:38	suhorng	Yu-Lin: 跟 LLVM pk!
2013-09-29 00:13:32	<--	Yu-Lin (24ec10d9@gateway/web/freenode/ip.36.236.16.217) has quit (Quit: Page closed)
2013-09-29 00:18:21	<--	suhorng (~suhorng@118-166-46-119.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-09-29 00:21:12	hashcat	有人在topcoder嘛
2013-09-29 00:24:12	monochrom	嘻嘻, 我就知道 C. A. R. Hoare, Donald E. Knuth, 及 Edsger W. Dijkstra 的全寫!
2013-09-29 00:25:40	monochrom	C. A. R. = Charles Anthony Richard, E = Ervin, W = Wybe
2013-09-29 00:27:29	monochrom	Hoare會叫你稱他 Tony, 這是對應 Anthony
2013-09-29 00:29:14	MnO2	hashcat: 請找 miaout17
2013-09-29 00:31:30	hashcat	想問賺外快難不難:D
2013-09-29 00:31:36	hashcat	:D
2013-09-29 01:03:39	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-29 01:28:51	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-29 04:22:36	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 04:25:08	<--	godfat (~Adium@114-24-8-52.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-29 04:59:10	-->	caasih (~caasiHuan@114-46-140-98.dynamic.hinet.net) has joined #haskell.tw
2013-09-29 04:59:34	<--	hashcat (~chatzilla@218-164-111-158.dynamic.hinet.net) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-09-29 05:08:35	<--	caasih (~caasiHuan@114-46-140-98.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-29 08:07:40	-->	Yu_lin (24ec14d6@gateway/web/freenode/ip.36.236.20.214) has joined #haskell.tw
2013-09-29 08:24:06	<--	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has quit (Ping timeout: 264 seconds)
2013-09-29 08:24:57	-->	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-29 08:59:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-29 09:18:46	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (Ping timeout: 245 seconds)
2013-09-29 10:47:12	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 11:00:38	-->	b4283 (~b4283@1-175-236-41.dynamic.hinet.net) has joined #haskell.tw
2013-09-29 11:29:13	<--	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has quit (Ping timeout: 245 seconds)
2013-09-29 11:29:28	-->	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-29 12:19:42	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-29 13:49:06	<--	b4283 (~b4283@1-175-236-41.dynamic.hinet.net) has quit (Quit: Leaving)
2013-09-29 15:44:13	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 16:30:08	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 245 seconds)
2013-09-29 16:32:28	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-09-29 17:12:06	-->	hashcat (~chatzilla@27.242.169.32) has joined #haskell.tw
2013-09-29 17:40:12	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-29 17:44:28	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 17:46:04	<--	hashcat (~chatzilla@27.242.169.32) has quit (Read error: Connection reset by peer)
2013-09-29 17:48:18	-->	hashcat (~chatzilla@27.242.169.32) has joined #haskell.tw
2013-09-29 17:55:13	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-09-29 18:51:13	<--	Yu_lin (24ec14d6@gateway/web/freenode/ip.36.236.20.214) has quit (Quit: Page closed)
2013-09-29 19:08:58	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 19:25:00	mno2_	PHPConf 的矛盾大對決是怎麼回事 xDD
2013-09-29 19:27:24	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-vfyodmrdabyomcka) has quit (Ping timeout: 256 seconds)
2013-09-29 19:56:52	letoh	那是什麼?
2013-09-29 20:55:23	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-29 21:02:54	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-29 21:23:08	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-pncywyitujyutuam) has joined #haskell.tw
2013-09-29 21:27:47	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 21:55:32	<--	b4284 (~b4283@118.150.134.111) has quit (Read error: Connection reset by peer)
2013-09-29 21:57:27	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-29 22:50:02	-->	Yu_lin (24ec1582@gateway/web/freenode/ip.36.236.21.130) has joined #haskell.tw
2013-09-29 22:50:50	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-09-29 22:53:20	Yu_lin	sml
2013-09-29 22:54:16	Yu_lin	sml 的 lib 跟函數那邊有比較好查找的
2013-09-29 23:03:59	hashcat	http://en.wikipedia.org/wiki/Horn_clauses
2013-09-29 23:04:15	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection timed out)
2013-09-29 23:04:16	--	mno2_ is now known as mno2
2013-09-29 23:05:05	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 23:11:07	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 23:17:59	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-29 23:18:37	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-29 23:37:09	<--	Yu_lin (24ec1582@gateway/web/freenode/ip.36.236.21.130) has quit (Quit: Page closed)
2013-09-29 23:48:57	hashcat	F*是dependent type
2013-09-30 00:00:21	hashcat	集群用得dependent type
2013-09-30 00:14:22	gko	有人在中華嗎？現在下載超慢... wget http://optimate.dl.sourceforge.net/project/pidgin/Pidgin/2.10.7/pidgin-2.10.7.exe => 20 KB/s...
2013-09-30 00:15:09	gko	Youtube也斷斷續續...
2013-09-30 00:20:46	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-09-30 01:20:19	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-09-30 01:49:08	<--	hashcat (~chatzilla@27.242.169.32) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-09-30 02:19:01	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-09-30 06:22:06	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 245 seconds)
2013-09-30 06:22:16	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-09-30 07:00:13	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-09-30 09:20:21	-->	Yu_lin (24ec16a6@gateway/web/freenode/ip.36.236.22.166) has joined #haskell.tw
2013-09-30 10:01:00	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-09-30 10:01:08	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-30 10:40:15	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-30 12:42:10	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-30 12:44:11	-->	lwhsu_ (lwhsu@tinderbox.cs.nctu.edu.tw) has joined #haskell.tw
2013-09-30 12:49:36	<--	lwhsu (lwhsu@tinderbox.cs.nctu.edu.tw) has quit (*.net *.split)
2013-09-30 12:49:36	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (*.net *.split)
2013-09-30 12:56:23	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-30 13:00:27	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-09-30 14:16:43	--	lwhsu_ is now known as lwhsu
2013-09-30 17:54:51	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-09-30 18:52:47	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-09-30 18:53:53	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-09-30 19:22:52	-->	hashcat (~chatzilla@27.242.169.32) has joined #haskell.tw
2013-09-30 20:05:50	-->	b4283 (~b4283@218-164-216-172.dynamic.hinet.net) has joined #haskell.tw
2013-09-30 20:08:10	<--	Yu_lin (24ec16a6@gateway/web/freenode/ip.36.236.22.166) has quit (Quit: Page closed)
2013-09-30 21:06:32	<--	hashcat (~chatzilla@27.242.169.32) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-09-30 21:21:53	-->	hashcat (~chatzilla@36-238-38-164.dynamic-ip.hinet.net) has joined #haskell.tw
2013-09-30 21:44:08	-->	YuLin (24ec179a@gateway/web/freenode/ip.36.236.23.154) has joined #haskell.tw
2013-09-30 22:22:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-30 22:55:36	-->	suhorng (~suhorng@118-166-48-13.dynamic.hinet.net) has joined #haskell.tw
2013-09-30 22:58:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-09-30 23:24:00	YuLin	在 #sml 也看到了常見的帳號
2013-09-30 23:28:33	<--	hashcat (~chatzilla@36-238-38-164.dynamic-ip.hinet.net) has quit (Ping timeout: 240 seconds)
2013-09-30 23:29:24	-->	hashcat (~chatzilla@27.242.169.32) has joined #haskell.tw
2013-09-30 23:45:51	YuLin	http://www.catonmat.net/blog/on-functors/
2013-09-30 23:46:08	YuLin	正在看 SML、Haskell、c++ 的 functor
2013-09-30 23:46:27	YuLin	c++ 我直接跳過沒看，直接看 SML 的部份
2013-09-30 23:47:22	YuLin	SML 的 funtor 看起來很像 dispatcher
2013-09-30 23:49:35	<--	suhorng (~suhorng@118-166-48-13.dynamic.hinet.net) has left #haskell.tw
2013-09-30 23:50:05	-->	suhorng (~suhorng@118-166-48-13.dynamic.hinet.net) has joined #haskell.tw
2013-09-30 23:50:18	suhorng	不是三個完全同的東西嗎...?
2013-09-30 23:50:45	suhorng	*完全不同
2013-09-30 23:52:07	YuLin	恩，在看一篇解釋四者的 functor
2013-09-30 23:52:18	YuLin	prolog
2013-09-30 23:52:22	YuLin	沒打到
2013-09-30 23:55:50	letoh	YuLin: https://www.fpcomplete.com/blog/2012/07/the-functor-pattern-in-c  這個呢?
2013-09-30 23:56:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-30 23:59:40	YuLin	這個沒看過，不過在我有生之年，能不要接觸 C++ 就不想接觸XD
2013-10-01 00:00:09	letoh	C++ 還可以啦  雖然能不碰也是...(ry
2013-10-01 00:01:43	suhorng	那不是一開始沒有 lambda 才做出來的模仿品嗎XD
2013-10-01 00:06:29	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-01 00:08:27	<--	YuLin (24ec179a@gateway/web/freenode/ip.36.236.23.154) has quit (Ping timeout: 250 seconds)
2013-10-01 00:17:10	<--	b4283 (~b4283@218-164-216-172.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-01 00:17:41	CindyLinz	C++ 的 functor... 就只是有 overloading () operator 的物件?
2013-10-01 00:19:03	monochrom	是
2013-10-01 00:19:48	CindyLinz	不有趣!
2013-10-01 00:20:37	hashcat	偽functor
2013-10-01 00:20:47	CindyLinz	YuLin: 欸欸, C++ 的 functor 講完了, 你可以不用花時間再細看了 XD
2013-10-01 00:21:44	hashcat	可以多關注idris
2013-10-01 00:21:59	hashcat	對偏門的新語言來說活動率不算太低
2013-10-01 00:22:12	suhorng	他年代好像滿近的?
2013-10-01 00:22:30	suhorng	而且程式可以實際跑@@!!
2013-10-01 00:24:35	CindyLinz	我晚一點.. 最近想專心看 lazy 的東西...
2013-10-01 00:25:38	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-01 00:32:32	letoh	我貼的那一篇對 c++ 來說才是偽 functor XD
2013-10-01 00:32:52	letoh	那篇是用 c++ 實作 fmap 這些東西
2013-10-01 00:33:16	letoh	看到那個 domain 至少捧個場嘛XD
2013-10-01 00:34:47	CindyLinz	letoh: 網址那麼長, 沒注意 domain 啊.. XD
2013-10-01 00:34:48	letoh	suhorng: 就算有 lambda 好了，我實在懷疑十年內能不能在業界普及使用...
2013-10-01 00:34:51	letoh	XDXD
2013-10-01 00:35:28	CindyLinz	C++11 的 lambda.... 普及它真的是好事嗎? orz
2013-10-01 00:36:06	CindyLinz	我覺得很局部很局部地用就好了..
2013-10-01 00:36:11	CindyLinz	那就還不錯
2013-10-01 00:37:04	letoh	唔  其實我想講的是說熟悉用這些新工具來設計程式  不過表達的不太好XD
2013-10-01 00:37:20	letoh	不過就算現在，也還是很多把 c++ 當成 c 來寫的XD
2013-10-01 00:37:21	suhorng	letoh: 可是 lambda 也是假的....XD
2013-10-01 00:37:47	suhorng	雖然真要說的話是一連串東西的結果, 可是 C++ 的 lambda 就完全不是我們平常用的 lambda
2013-10-01 00:38:12	letoh	我是覺得以 c++ 這樣的限制能提供一點新工具已經是突破了  你要它突然變成 haskell 是不太可能的啦
2013-10-01 00:38:16	CindyLinz	letoh: 這連結.... 是 Haskell 長得像 C++ 的 syntax sugar 啦 XD
2013-10-01 00:38:27	letoh	哈XDXD
2013-10-01 00:38:47	suhorng	不全然啦, 應該說 C++ 的 lambda　＝＝＝　建立function object的syntactic sugar
2013-10-01 00:39:01	suhorng	跟常見 functional language 的 lambda 意思完全不一樣
2013-10-01 00:39:29	suhorng	而 C++ 的 std::function 是用 template 把 callable object 外面再包一層東西...
2013-10-01 00:39:40	letoh	大部份的 lambda 就是 ananymous function 而已，不是要變成 functional language 講的 lambda 啦
2013-10-01 00:40:32	letoh	我覺得業界不太在意追求理論方面的滿足，主要還是實用方面，然後不要改變太大
2013-10-01 00:41:55	CindyLinz	等等.. 還有差喔? XD # lambda vs anonymous function
2013-10-01 00:42:06	CindyLinz	我是說.. 再加上 closure 的部分 :p
2013-10-01 00:42:26	CindyLinz	C++ lambda 在 by value 的部分, 還蠻像 closure 的呀
2013-10-01 00:42:58	letoh	就限定使用範圍來看吧，應該還算是可以用
2013-10-01 00:43:23	letoh	不過要我把程式改寫成 c++1x 還是有點懶... 原本的能跑就好XD
2013-10-01 00:43:38	suhorng	例如
2013-10-01 00:43:39	suhorng	let counter = ref 0 in fn () => counter := !counter + 1; counter end
2013-10-01 00:43:40	CindyLinz	已經能用的幹嘛改啊 @@"
2013-10-01 00:44:04	suhorng	C++裡面要改成 shared_ptr<int> 然後closure抓進來也是可以啦.....
2013-10-01 00:44:10	letoh	還是常常會修修改改啊  其實是可以趁機一點一點換掉XD
2013-10-01 00:44:17	suhorng	不過就是東西都要手動轉
2013-10-01 00:44:23	letoh	卡在公司還有人用 vc6...
2013-10-01 00:44:35	suhorng	vc6!!!!!!!!!!!!!!
2013-10-01 00:44:41	suhorng	我以為買不到了?
2013-10-01 00:45:07	letoh	有買 msdn subscription 的話，也許還弄得到?
2013-10-01 00:45:16	letoh	都能弄個 win3.1 來玩了XD
2013-10-01 00:45:36	suhorng	www
2013-10-01 00:45:43	CindyLinz	suhorng: 嗯, 要改值的, by ref 的就不行了....
2013-10-01 00:46:02	CindyLinz	外層函數 return 以前可以 XD
2013-10-01 00:46:37	suhorng	CindyLinz: 有個不健康的作法是, 如果確定每個 closure 的 instance 都獨立, 那加上 "mutable" ... XD
2013-10-01 00:47:13	suhorng	我覺得精確來說要一樣的話就是要用指標. 如果不想要 memory leak 就配合 shared_ptr 自動做 reference count...
2013-10-01 00:48:06	CindyLinz	那就不是 C++11 lambda 的功能了, 你是自己實作的 XD
2013-10-01 00:49:03	suhorng	好吧, 畢竟 C++ 裡面的變數都是 reference XD
2013-10-01 00:49:39	suhorng	functional language 有一種 closure 的時作方式就是把外面的變數都拷貝一份近來
2013-10-01 00:50:02	CindyLinz	變數都 imutable 真開心.. XD
2013-10-01 00:50:06	suhorng	然後 'a ref 拷貝進來的是 'a ref 所以不會出事 XD
2013-10-01 00:50:41	suhorng	但是對於 Scheme 這種沒有 type 的, 要這樣實作 closure 編譯器實作就要先把會改到的變數都變指標
2013-10-01 00:50:55	suhorng	(其中一種實作方式)
2013-10-01 00:54:20	CindyLinz	能改的東西不是原本就是指標喔? @@"
2013-10-01 00:55:28	suhorng	需要辨認出哪些被改, 因為沒有 type Orz
2013-10-01 00:56:36	suhorng	Scheme 裡面 variable reference 沒有像 ML 那樣 "!" 明確寫
2013-10-01 00:56:46	CindyLinz	喔喔...
2013-10-01 00:57:08	CindyLinz	我目前讀的部分蠻前面的, 以為都是不能改的 :p
2013-10-01 00:59:41	suhorng	大家的作法都差好多XD
2013-10-01 00:59:47	suhorng	*語言的作法
2013-10-01 01:00:34	CindyLinz	這樣很好 :p
2013-10-01 01:00:38	suhorng	XDD
2013-10-01 01:01:00	CindyLinz	有了什麼新平台想 porting 的話也比較有路
2013-10-01 01:01:11	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-01 01:01:16	CindyLinz	既然它已經用這麼多種不同的方式實作, 再多一種可能也不太難
2013-10-01 01:01:23	CindyLinz	像 perl 就... QQ
2013-10-01 01:02:09	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-10-01 01:11:30	<--	suhorng (~suhorng@118-166-48-13.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-01 01:39:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-01 02:16:44	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-01 03:01:20	<--	hashcat (~chatzilla@27.242.169.32) has quit (Ping timeout: 240 seconds)
2013-10-01 03:16:46	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-01 04:09:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-01 04:40:13	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-01 08:19:18	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-pncywyitujyutuam) has quit (Ping timeout: 245 seconds)
2013-10-01 09:04:00	-->	Yu_Lin (24ec1610@gateway/web/freenode/ip.36.236.22.16) has joined #haskell.tw
2013-10-01 10:00:10	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 10:03:41	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-10-01 10:09:36	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 10:18:17	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-ndagtskhtrntcego) has joined #haskell.tw
2013-10-01 10:52:23	<--	Yu_Lin (24ec1610@gateway/web/freenode/ip.36.236.22.16) has quit (Ping timeout: 250 seconds)
2013-10-01 12:00:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-01 12:09:40	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-01 12:32:09	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 12:32:09	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 12:32:09	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 12:32:09	--	Nicks #haskell.tw: [_13h a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean gko godfat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil]
2013-10-01 12:32:09	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-10-01 12:32:28	--	Mode #haskell.tw [+cnt]
2013-10-01 12:32:28	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 12:33:37	--	You are now known as drbean_
2013-10-01 12:33:44	-->	drbean_ (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 12:33:44	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 12:33:44	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 12:33:44	--	Nicks #haskell.tw: [_13h a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean drbean_ gko godfat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil]
2013-10-01 12:33:44	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-10-01 12:34:03	--	Mode #haskell.tw [+cnt]
2013-10-01 12:34:03	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 12:36:34	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-01 12:36:35	<--	drbean (~drbean@113.196.171.151) has quit (Read error: Operation timed out)
2013-10-01 12:36:35	--	You are now known as drbean
2013-10-01 12:44:10	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 12:44:10	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 12:44:10	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 12:44:10	--	Nicks #haskell.tw: [_13h a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom superbil]
2013-10-01 12:44:10	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-10-01 12:44:27	--	Mode #haskell.tw [+cnt]
2013-10-01 12:44:27	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 13:01:15	<--	monochrom (monokrom@216.138.220.146) has quit (Quit: NO CARRIER)
2013-10-01 13:07:14	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-01 13:08:28	-->	Yu_lin (24ec1701@gateway/web/freenode/ip.36.236.23.1) has joined #haskell.tw
2013-10-01 13:45:33	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 14:36:25	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-10-01 15:53:32	-->	hashcat (~chatzilla@27.242.169.32) has joined #haskell.tw
2013-10-01 16:49:55	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-01 17:05:27	CindyLinz	寫一寫 chrome extension 就好想自己寫個 browser....||
2013-10-01 17:06:06	CindyLinz	chrome extension 的 api 真是好亂, 東漏西漏的... 感覺像他們工程師或 PM, 想到一個功能就做一個功能, 互相不整合的 :|
2013-10-01 17:14:54	MnO2_	最後就變 NaCL 了 (誤)
2013-10-01 17:16:15	--	You are now known as drbean_
2013-10-01 17:16:38	-->	drbean_ (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 17:16:38	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 17:16:38	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 17:16:38	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean drbean_ favonia gko godfat hashcat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ mno2 MnO2_ monochrom petercommand superbil Yu_lin]
2013-10-01 17:16:38	--	Channel #haskell.tw: 30 nicks (0 ops, 0 halfops, 0 voices, 30 normals)
2013-10-01 17:16:54	--	Mode #haskell.tw [+cnt]
2013-10-01 17:16:54	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 17:17:27	--	You are now known as drbean-
2013-10-01 17:17:38	-->	drbean- (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 17:17:38	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 17:17:38	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 17:17:38	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean drbean- drbean_ favonia gko godfat hashcat hychen kanru lambdabot letoh logbot__ logfat_ lwhsu miaout171_ miaout17_ mno2 MnO2_ monochrom petercommand superbil Yu_lin]
2013-10-01 17:17:38	--	Channel #haskell.tw: 31 nicks (0 ops, 0 halfops, 0 voices, 31 normals)
2013-10-01 17:18:33	--	Mode #haskell.tw [+cnt]
2013-10-01 17:18:33	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 17:19:11	<--	drbean (~drbean@113.196.171.151) has quit (Ping timeout: 245 seconds)
2013-10-01 17:21:08	<--	drbean_ (~drbean@113.196.171.151) has quit (Ping timeout: 240 seconds)
2013-10-01 18:00:21	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-01 18:38:32	<--	logbot__ (~cinch@109.169.58.220) has quit (Remote host closed the connection)
2013-10-01 18:40:46	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-01 19:45:57	--	irc: disconnected from server
2013-10-01 19:45:59	-->	drbean- (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 19:45:59	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 19:45:59	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 19:45:59	--	Nicks #haskell.tw: [a2n cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean- favonia gko godfat hashcat hychen kanru lambdabot letoh logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom petercommand superbil Yu_lin]
2013-10-01 19:45:59	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-10-01 19:45:59	***	Buffer Playback...
2013-10-01 19:45:59	Yu_lin	[11:12:35] 久違的出現在 haskell.tw
2013-10-01 19:45:59	CindyLinz	[11:12:54] Hi XD
2013-10-01 19:45:59	Yu_lin	[11:17:49] hi
2013-10-01 19:45:59	Yu_lin	[11:18:04] 我往前翻了一些討論看到這句
2013-10-01 19:45:59	Yu_lin	[11:18:23] 01:17:10 <hashcat> "執行時會丟型別錯誤"叫dynamic, "執行時會丟型別錯誤"叫static, 兩者可並存
2013-10-01 19:45:59	CindyLinz	[11:19:19] 應該後半有筆誤啦 :p
2013-10-01 19:45:59	Yu_lin	[11:19:20] 後面那個句是不是把編譯打成執行了？
2013-10-01 19:45:59	CindyLinz	[11:21:30] 不過這樣的論述現在只能是個原則上的描述, 沒辦法精準了.. 因為現在有的語言的 compile pass 比較模糊
2013-10-01 19:45:59	Yu_lin	[11:31:44] 其實是因為我看了 type 那本，然後看到網路上有在討論 javascript 是 untype language 這件事
2013-10-01 19:45:59	CindyLinz	[11:32:25] 嗯, 是有把 dyn type 視為 untype 的說法
2013-10-01 19:45:59	CindyLinz	[11:33:23] 如果是看它的變數, 什麼 type 都能裝, 所以這個角度看是 untyped
2013-10-01 19:45:59	Yu_lin	[11:33:57] 就像 scheme 那樣？
2013-10-01 19:45:59	CindyLinz	[11:34:22] 可是從 a+b 有時候是字串相接, 有時候是數字相加... 這個角度來看, 有 type 的味道就比較強了 orz
2013-10-01 19:45:59	CindyLinz	[11:35:02] Yu_Lin: 嗯嗯
2013-10-01 19:45:59	Yu_lin	[11:37:54] 恩，了解了，感謝XD
2013-10-01 19:45:59	Yu_lin	[13:20:12] 突然發現，#hime 跟 #haskell.tw 的人.....重複還蠻高的XD
2013-10-01 19:45:59	CindyLinz	[13:44:57] 來加一下 #hime, 增加重複度.. (咦)
2013-10-01 19:45:59	CindyLinz	[13:45:36] topic 怪怪的 orz
2013-10-01 19:45:59	b4283	[15:52:50] XD
2013-10-01 19:45:59	mno2	[23:43:59] http://www.skybluetrades.net/blog/posts/2013/09/25/multilingual-blinkenlights/index.html  Haskell on 狗板
2013-10-01 19:45:59	mno2	[23:44:22] 又是 ajhc  xD
2013-10-01 19:45:59	letoh	[23:46:40] 看起來是拿來當 compiler 用而已
2013-10-01 19:45:59	godfat	[23:50:24] 不能接受這個字型...
2013-10-01 19:45:59	suhorng	[23:57:33] Haskell耶好猛XD
2013-10-01 19:45:59	letoh	[23:58:07] 喔對 原來上次有看過  這個是有 haskell runtime 的
2013-10-01 19:45:59	CindyLinz	[00:47:16] :D
2013-10-01 19:45:59	monochrom	[01:01:39] 我的師父(論文導師)乾脆教我: 真的要分開"執行時"與"編譯時"嗎?
2013-10-01 19:45:59	godfat	[01:03:02] 我想看語言吧 XD
2013-10-01 19:45:59	CindyLinz	[01:05:34] 還是有傾向的啊 ^^|  像是程式證明用的就是編譯時的檢查, 編譯時就保守估計執行時的所有可能...
2013-10-01 19:45:59	hychen	[01:25:31] CindyLinz: "compile pass 比較模糊" # 可以解釋一下這個嗎? 我不太懂
2013-10-01 19:45:59	CindyLinz	[01:27:33] hychen: 像是 javascript v8 的 just-in-time compile.. 它是 compile, 但是是 runtime 的時候做的
2013-10-01 19:45:59	letoh	[01:27:33] 因為 jit 嗎?
2013-10-01 19:45:59	letoh	[01:27:34] 喔喔喔
2013-10-01 19:45:59	CindyLinz	[01:28:09] 然後.... 這種 jit 至少還能說出 compile phase 是在什麼時候, 雖然已經是藏在 runtime 裡了...
2013-10-01 19:45:59	CindyLinz	[01:28:28] 如果(想像中)是用某 lazy evaluation 做的 vm..
2013-10-01 19:45:59	CindyLinz	[01:28:50] 它這個 jit compile 會給你 compile 到一半, 就叫你先去跑已經生出來的 op code..
2013-10-01 19:45:59	CindyLinz	[01:29:01] 剩下的嘛... 等你要用的時候我再生...
2013-10-01 19:45:59	hychen	[01:29:43] 這樣type checking沒問題? @@
2013-10-01 19:45:59	godfat	[01:29:56] 讓我想到 partial evaluation XD
2013-10-01 19:45:59	CindyLinz	[01:30:16] 有問題啊.. javascript 不就偶爾會有拿 undefined 當函數 call 的 exception? :p
2013-10-01 19:45:59	CindyLinz	[01:32:34] 唔.. partial evaluation 指的是已經在跑的程式, 偶爾還會重新 compile 自己, 重新生出更有效率的程式出來跑?
2013-10-01 19:45:59	CindyLinz	[01:34:02] hychen: 我前一陣子看王垠的文章講這個, 他另外提到.. op code -> 執行, 也可以算是一種 compile
2013-10-01 19:45:59	CindyLinz	[01:34:34] compile 成 in-memory 的一段 interpreter 的程式碼, 馬上吃掉作出動作
2013-10-01 19:45:59	letoh	[01:36:00] 一般的 jit 不就是這樣嗎?
2013-10-01 19:45:59	CindyLinz	[01:36:21] 他說的比較極端啊.. 像是 java 已經都生成 .class 檔了
2013-10-01 19:45:59	CindyLinz	[01:36:43] 他覺得執行 .class 的這一部分還是有 compile 的成份
2013-10-01 19:45:59	letoh	[01:37:33] 但 bytecode 畢竟還是得 vm 來解譯執行  所以在這邊做 jit 才合理呀
2013-10-01 19:45:59	CindyLinz	[01:38:33] letoh: 他的文章是要說 compile 和 interpret 的界限很模糊, 他這邊是要說, 一般我們會覺得這一段很明顯是 interpret 了, 仍然可以視為 compile
2013-10-01 19:45:59	letoh	[01:39:59] 嗯嗯  就是因為有 jit 的關係呀... 執行 bytecode 是很沒效率的XD
2013-10-01 19:45:59	godfat	[01:40:02] 好像不是？不過我還是不要解釋好了，現在腦袋有點模糊 XD
2013-10-01 19:45:59	godfat	[01:40:02] 總之我覺得 partial evaluation 也是模糊了 compile time 跟 runtime
2013-10-01 19:45:59	godfat	[01:40:02] 其實只是看把那條線放在哪裡而已，左邊是 compile time, 右邊是 runtime
2013-10-01 19:45:59	godfat	[01:40:02] 都是相對的
2013-10-01 19:45:59	CindyLinz	[01:42:37] 對對, 我也覺得這樣.. 沒有明確的界限, 可是是用來描述兩類不同的性質, 思考問題或規劃語言都是蠻有用的
2013-10-01 19:45:59	godfat	[01:53:52] 對啊，所以就算在 ruby 裡我也常常會說 compile time XD
2013-10-01 19:45:59	godfat	[01:53:53] 不過有時候會講成 parse time 以免誤會...
2013-10-01 19:45:59	monochrom	[01:57:23] 到最後, 我認為, 理論上不必分開, 實際上分開為了方便工作. 因此怎樣分法只看方便, 沒有固定分法.
2013-10-01 19:45:59	godfat	[01:58:40] 同意
2013-10-01 19:45:59	monochrom	[02:03:36] 就正如, "編譯時"本身還再細分"詞法"(lexicon, 用regular grammar), "語法"(context-free grammar), "型別檢查", "出機械碼". 把它們分開了, 每一個都容易做. 但誰說一定要分開呢? 把四個迴圈用 fusion law 合成一個絕到可能, 只不過你會成為瘋狂科學家而已. XD
2013-10-01 19:45:59	monochrom	[02:08:16] 唔! 有一天要試做一下!
2013-10-01 19:45:59	CindyLinz	[02:14:41] perl 的 yapp 和 haskell 的 happy 就沒有特別一個 regular 處理的 lexer 了. 它們都是直接接受 token list, 而這 token list 的產生
2013-10-01 19:45:59	CindyLinz	[02:15:20] perl 的 regex 是 context free grammar; 然後 haskell 就隨意寫函數來生, 算是.... turing complete 等級? XD
2013-10-01 19:45:59	monochrom	[02:16:05] 通常用 lex (C) 或 alex (Haskell)
2013-10-01 19:45:59	CindyLinz	[02:16:39] 我看 Happy 自己的 tutorial 就直接寫一排函數做了 ^^|
2013-10-01 19:45:59	monochrom	[02:17:54] 哈哈
2013-10-01 19:45:59	CindyLinz	[02:23:35] 來看看... 好奇 alex 有什麼特出之處 :Q   因為 Haskell 裡面 regex 的 lib 也好多個, 不知道 alex 有什麼獨立存在的意義
2013-10-01 19:45:59	monochrom	[02:26:12] 形而上 (meta) 問題: 怎麼逢星期四晚, 星期五凌晨, 各位台灣的朋友不願睡呢? XD
2013-10-01 19:45:59	monochrom	[02:27:33] "今夜不睡覺, 明天開派對"? XD
2013-10-01 19:45:59	monochrom	[02:29:11] "奉獻青春給公司, 不如奉獻春宵給 Haskell, 回到公司再睡過"? XD
2013-10-01 19:45:59	monochrom	[02:30:59] P.S. 昨晚因咖啡而不眠, 結果拿起書學 category theory 裏的 adjunction!
2013-10-01 19:45:59	monochrom	[02:33:52] 如果你自己用 regex lib, 你仍要自己加一些配套來出 token. 如果用 alex, 它替你加配套.
2013-10-01 19:45:59	monochrom	[02:35:12] 正如在 C 界有 lex 一樣
2013-10-01 19:45:59	MnO2	[09:06:47] https://plus.google.com/115504368969270249241/posts/EpQodRSVQ3r   要開 strict 的 pragma 了 xD
2013-10-01 19:45:59	MnO2	[09:38:02] http://www.cs.cmu.edu/~rwh/talks/mlw13.pdf  Harper @mlw13
2013-10-01 19:45:59	MnO2	[09:41:38] http://splashcon.org/2013/ <-- OOP 的 top conference
2013-10-01 19:45:59	MnO2	[09:45:35] https://mail.mozilla.org/pipermail/rust-dev/2013-September/005804.html  <-- rust 0.8 !
2013-10-01 19:45:59	CindyLinz	[11:15:01] #hime 其實是政治版對吧 ._.
2013-10-01 19:45:59	_13h	[11:27:42] CindyLinz: 的確是有些人比較喜歡政治話題啦，不過還有遊戲 linux 或音樂相關話題
2013-10-01 19:45:59	CindyLinz	[11:31:04] 我以為 #hime 是一個輸入法啊.. XD
2013-10-01 19:45:59	b4283	[11:32:36] 從 #gcin 時代以來一直都是這個風格 XD
2013-10-01 19:45:59	kanru	[11:54:54] so I /part #hime :P
2013-10-01 19:45:59	_13h	[12:00:19] 還有沒有可以聊輸入法的 irc channel ? XD
2013-10-01 19:45:59	CindyLinz	[13:41:31] cschat 可以吧?
2013-10-01 19:45:59	CindyLinz	[13:41:44] 欸, 還是說 hime 的 maintainer 都在 #hime, 所以... ^^|
2013-10-01 19:45:59	_13h	[13:42:21] 當然都在那邊啊
2013-10-01 19:45:59	_13h	[13:44:25] 我是有訂 chewing 的 mail list... 不過我不太喜歡 mail list 的型式XD
2013-10-01 19:45:59	b4283	[17:33:11] 形式
2013-10-01 19:45:59	letoh	[17:48:05] 嗯  形式
2013-10-01 19:45:59	suhorng	[21:56:51] hashcat: 你知道resolution在弄什麼嗎?
2013-10-01 19:45:59	suhorng	[22:00:02] 查Prolog發現有提到resolution, 可是不知道為什麼會有關@@
2013-10-01 19:45:59	hashcat	[22:06:39] 什麼跟啥嚜有關
2013-10-01 19:45:59	suhorng	[22:09:04] 不知道為什麼 Prolog 會提到 resolution? miniKanren 的實作重頭到尾只有提到 unification, 書的介紹完全沒提到 resolution, 我也不知道那是什麼囧
2013-10-01 19:45:59	hashcat	[22:10:35] resolution就是把左邊的unification結果, 帶入右邊的變數後繼續作這樣
2013-10-01 19:45:59	suhorng	[22:11:58]  ":-" 的左邊跟右邊嗎?
2013-10-01 19:45:59	hashcat	[22:12:37] 嗯嗯
2013-10-01 19:45:59	suhorng	[22:12:37] 原來如此
2013-10-01 19:45:59	hashcat	[22:55:31] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.68.2227
2013-10-01 19:45:59	hashcat	[22:56:07] 比較新的prolog vm
2013-10-01 19:45:59	letoh	[22:56:43] warren 的是 1977 那篇嗎?
2013-10-01 19:45:59	hashcat	[22:57:52] 我只記得是70年代
2013-10-01 19:45:59	suhorng	[23:00:49] 主要是我最近看 The Reasoned Schemer 學 miniKanren, 他跟 Prolog 有點像又不一樣...
2013-10-01 19:45:59	hashcat	[23:01:12] 老中青三代
2013-10-01 19:45:59	hashcat	[23:01:36] 也沒看過長一樣的
2013-10-01 19:45:59	suhorng	[23:02:25] 他寫的時候是可以弄 fresh variable, 然後寫很多 goals (== v w) 之類(也可以是data)
2013-10-01 19:45:59	letoh	[23:02:46] https://github.com/clojure/core.logic/wiki/Differences-from-The-Reasoned-Schemer
2013-10-01 19:45:59	suhorng	[23:02:47] 再加上 cond 控制 structure (backtracking在這部份)
2013-10-01 19:45:59	suhorng	[23:02:57] _13h: (woot)
2013-10-01 19:45:59	suhorng	[23:03:47] 咦? 這是code跟書上講的的差別? 我載下來的 code 跟他這個描述完全不同耶
2013-10-01 19:45:59	letoh	[23:04:01] 應該是說 clojure 的實作?
2013-10-01 19:45:59	suhorng	[23:04:10] 喔!原來是這樣
2013-10-01 19:45:59	letoh	[23:04:17] core.logic
2013-10-01 19:45:59	suhorng	[23:05:25] 他書的寫法讓我好想跟 Agda 程式一樣大量用符號, 可是很多 Scheme implementation 在 Windows 上 unicode 支援又不太好 XD
2013-10-01 19:45:59	CindyLinz	[23:20:24] 用顏文字啦~~~
2013-10-01 19:45:59	Yu_lin	[23:31:43] type Bool = T_T | ^_^ 這樣嗎？XD
2013-10-01 19:45:59	CindyLinz	[23:33:21] Yu_Lin: 我想的主要是原本想用數學符號, 改成 |-  _|_ 之類的去接啦 XD
2013-10-01 19:45:59	suhorng	[23:49:35] CindyLinz: constructor用冒號開頭也可以用符號XD
2013-10-01 19:45:59	monochrom	[00:28:34] 我喜歡 type Bool = T_T | ^_^
2013-10-01 19:45:59	favonia	[03:11:07] O_o | o_o
2013-10-01 19:45:59	letoh	[03:11:41] fO_o | o_o?
2013-10-01 19:45:59	MnO2	[10:58:12] http://registrano.com/events/5e35ff  用這背景是有人要結婚了嗎? wwwww
2013-10-01 19:45:59	monochrom	[11:02:25] 甚麼是 "滾來滾去"?
2013-10-01 19:45:59	Yu_lin	[11:02:54] 這背景......XDDD
2013-10-01 19:45:59	monochrom	[11:03:49] 無用的tautology: 每日都有人結婚 XD
2013-10-01 19:45:59	Yu_lin	[11:06:18] 這次的簡報會釋出嗎？
2013-10-01 19:45:59	monochrom	[11:08:18] 我最想在完了後看Cindy的slide或程式, 因為我太菜鳥, 不會專誠由多倫多飛來台北看 XD
2013-10-01 19:45:59	Yu_lin	[11:11:37] 其實我也是想看 Cindy 的 compiler 怎麼做......
2013-10-01 19:45:59	CindyLinz	[11:45:22] 唔.. 可是簡報上面是打算寫結語, 主要是對著程式碼講欸 @@"
2013-10-01 19:45:59	CindyLinz	[11:46:53] 目前準備了 12 個 .y 檔.. 大部分是標序號, 像是 h1, h2, h3, h3-1, h3-2
2013-10-01 19:45:59	CindyLinz	[11:47:06] 可以相臨編號的作 diff 來看
2013-10-01 19:45:59	monochrom	[11:47:48] 其實程式碼加些提示, 可能就夠了. 真的看不明再算.
2013-10-01 19:45:59	CindyLinz	[11:48:08] 不然我來把各檔要講的點加到註解好了
2013-10-01 19:45:59	CindyLinz	[11:48:39] 然後.. 在裡面寫「下一個檔請看 oooo.y 檔」XD
2013-10-01 19:45:59	CindyLinz	[12:01:28] MnO2: jaiyalas 說只是新學期新氣象.....  wwww
2013-10-01 19:45:59	MnO2	[12:11:14] https://twitter.com/ccshan/status/383625029017432064   回應讓我大笑 xD
2013-10-01 19:45:59	MnO2	[12:12:58] https://twitter.com/ezyang/status/382939785750650880  這個也蠻好笑的
2013-10-01 19:45:59	MnO2	[12:15:26] http://xkcd.com/1270/
2013-10-01 19:45:59	MnO2	[12:18:45] https://twitter.com/runarorama/status/383680373571342336/photo/1  這太靠杯了
2013-10-01 19:45:59	CindyLinz	[12:20:45] XDDD
2013-10-01 19:45:59	MnO2	[12:21:44] https://twitter.com/plragde/status/383657145499021313  Oleg 狂中槍 xD
2013-10-01 19:45:59	CindyLinz	[12:22:01] 那如果這投影片要譯成台灣版的話, 把 Oleg 換成柯向上好了.. 認識的人比較多 (逃)
2013-10-01 19:45:59	CindyLinz	[12:23:47] 看了這個.. # 09:06 < MnO2> https://plus.google.com/115504368969270249241/posts/EpQodRSVQ3r   要開 strict 的 pragma 了 xD
2013-10-01 19:45:59	MnO2	[12:24:22] 恩?
2013-10-01 19:45:59	CindyLinz	[12:24:27] 在想, 好像 GHC 的這種 pragma 常是以 module 為單位.. 但其實以 function 為單位好像也很好, 可能更好啊? @@"
2013-10-01 19:45:59	CindyLinz	[12:25:01] 啊, 大概是 Haskell 的 layout format 的問題, 不方便確定這個 pragma 屬於哪一個函數 orz
2013-10-01 19:45:59	CindyLinz	[12:25:31] 如果要求 {-# .... -} 也要縮到對應位置行不行? (思)
2013-10-01 19:45:59	CindyLinz	[12:26:16] 因為我從 perl 來的經驗.. perl 的這種 pragma 的東西, 都是在 package 為單位, 或是任何一個 block 為單位
2013-10-01 19:45:59	CindyLinz	[12:26:46] 想來 Haskell 以 layout format 的時候, block 的界限比較不明顯
2013-10-01 19:45:59	MnO2	[12:28:05] 不知道耶，可能要看 compiler 設計怎樣比較好改吧 xD
2013-10-01 19:45:59	CindyLinz	[12:28:06] perl 的 pragma 包含: source 是不是 utf8 格式 (一串 utf8 bytes 要視為一個字元, 還是n個字元), warning 的項目開關, 甚至是不同 perl 版本..
2013-10-01 19:45:59	MnO2	[12:28:13] https://twitter.com/runarorama/status/383648832174583808/photo/1/large   終於看到長甚麼樣子
2013-10-01 19:45:59	MnO2	[12:29:23] https://vimeo.com/75490786  BPFG 看起來有不少 video 可以看
2013-10-01 19:45:59	monochrom	[12:48:47] 我在 Wii 上玩過 Mario 賽車, 所以同意 "the bullet is enormous there is no escaping" XD
2013-10-01 19:45:59	monochrom	[12:58:30] monad/comonad annihilation 實在太強了! XD
2013-10-01 19:45:59	MnO2	[13:46:07] https://gist.github.com/leroux/6395804
2013-10-01 19:45:59	Yu_lin	[17:19:32] Orz|||
2013-10-01 19:45:59	Yu_lin	[17:20:20] 為了上 Courses 的 PL 課，我必須安裝 sml/nj，然後這東西搞掉我兩天的時間Orz|||
2013-10-01 19:45:59	CindyLinz	[17:20:58] 免錢的最貴.. (誤)
2013-10-01 19:45:59	Yu_lin	[17:22:48] 同樣是 sml 的實作品，mlton 可以讓我很無腦的用 src2pkg 一個指令搞定，sml/nj 則讓我花了很多時間在嘗試奇怪的事情上Orz|||
2013-10-01 19:45:59	CindyLinz	[17:24:32] 我也討厭這種事 @@"
2013-10-01 19:45:59	Yu_lin	[17:26:04] 其實我覺得最可怕的是 sml/nj 的實作是用 sml 寫的，所以需要有一個 sml 實作品才能編譯
2013-10-01 19:45:59	CindyLinz	[17:28:16] 它自己沒有內附標準的 bootstrap 流程喔? @@"
2013-10-01 19:45:59	Yu_lin	[17:28:56] 有，不過 sml/nj 沒有提供 64 bit 的版本
2013-10-01 19:45:59	CindyLinz	[17:29:45] hmm.... 不過你都做完了 XD
2013-10-01 19:45:59	CindyLinz	[17:29:56] 想說你當初沒有考慮開一個 32bit 的 vm?
2013-10-01 19:45:59	Yu_lin	[17:30:11] 如果是其他發行版，把 glibc-devel 之類的裝一裝，問題就解決了，但我用的是 slackware，所以要自己看 mutillib 怎麼弄
2013-10-01 19:45:59	CindyLinz	[17:30:18] 反正是學習, 應該能用就好
2013-10-01 19:45:59	Yu_lin	[17:31:22] 對阿，學了很多，我本來還想用 mlton 去編 sml/nj.....Orz|||
2013-10-01 19:45:59	CindyLinz	[17:31:34] 「學了很多」.... XDDDD
2013-10-01 19:45:59	hychen	[18:09:05] sml/nj 有ppa
2013-10-01 19:45:59	hychen	[18:09:16] in Ubuntu
2013-10-01 19:45:59	letoh	[18:57:28] sml/nj 不是很好裝嗎?
2013-10-01 19:45:59	letoh	[18:57:45] 除非有特殊需求  不然照預設 config 編譯就好了
2013-10-01 19:45:59	letoh	[18:58:12] Yu_lin: 我也是 slackware  不過你應該是因為 64bit 比較麻煩
2013-10-01 19:45:59	Yu_lin	[19:01:01] 對阿，問題就出在 64bit
2013-10-01 19:45:59	letoh	[19:20:21] 我的 64bit 是跑在 vm 裡  平常其實也用不太到
2013-10-01 19:45:59	letoh	[19:20:53] 32bit 環境已經用很多年沒重裝過了  都是一路一直升級上來的
2013-10-01 19:45:59	godfat	[20:08:12] 問個 vim 的問題？ orz
2013-10-01 19:45:59	godfat	[20:08:12] 我想編輯一個 zip 檔，但不想把檔名改成 .zip
2013-10-01 19:45:59	godfat	[20:08:12] 有啥方法嗎？ set filetype=zip 看來沒有用..
2013-10-01 19:45:59	b4283	[20:10:04] symlink ? XD
2013-10-01 19:45:59	godfat	[20:10:31] ~.~ 試試... 不過沒有指令可以切換模式嗎？ 囧
2013-10-01 19:45:59	petercommand	[20:11:05] godfat: hard link...
2013-10-01 19:45:59	godfat	[20:12:35] = =... symlink 看來是可以，我想 hard link 應該也行
2013-10-01 19:45:59	godfat	[20:12:35] 但還是得建額外檔案 = =
2013-10-01 19:45:59	godfat	[20:14:44] 現在在做的是修改 sublime text 的 package
2013-10-01 19:45:59	godfat	[20:14:45] sublime text 3 的 package 是 zip 檔，雖然檔名不是
2013-10-01 19:45:59	godfat	[20:14:45] 裡面的 ruby syntax highlighting 是爛的，想修好
2013-10-01 19:45:59	godfat	[20:18:49] 修好了，vim 開 zip 這件事先放著好了 orz
2013-10-01 19:45:59	Yu_lin	[20:19:08] :!mv % 想要的檔名
2013-10-01 19:45:59	Yu_lin	[20:19:11] :q!
2013-10-01 19:45:59	godfat	[20:19:22] mv.... = =
2013-10-01 19:45:59	godfat	[20:19:53] 我以為可以有 :bufmode zip 這樣就行了
2013-10-01 19:45:59	CindyLinz	[20:21:03] 那你附檔名是什麼?
2013-10-01 19:45:59	CindyLinz	[20:21:13] 幫這個附檔名設 au.. XD
2013-10-01 19:45:59	godfat	[20:22:16] sublime-package...
2013-10-01 19:45:59	godfat	[20:22:16] 剛剛查到的都是這個方式，可是我不想污染我的設定 XD
2013-10-01 19:45:59	godfat	[20:22:16] 只改這一次而已 @_@
2013-10-01 19:45:59	godfat	[20:22:16] 而且我可以想像會有很多東西是 zip 包起來的，也沒副檔名
2013-10-01 19:45:59	petercommand	[20:30:04] au?
2013-10-01 19:45:59	godfat	[20:31:49] au 可以不設副檔名嗎？
2013-10-01 19:45:59	petercommand	[20:32:43] 甚麼是au阿
2013-10-01 19:45:59	godfat	[20:33:10] vim 裡面設檔案關聯的指令（的樣子，我不熟）
2013-10-01 19:45:59	petercommand	[20:34:44] 我對vim不熟= =
2013-10-01 19:45:59	Yu_lin	[20:37:28] autocmd?
2013-10-01 19:45:59	godfat	[20:39:38] 原來 au 就是 autocmd
2013-10-01 19:45:59	godfat	[20:39:38] 我一直想試 BufRead zip 之類的但都失敗
2013-10-01 19:45:59	Yu_lin	[20:40:10] *zip 或 .*zip 的樣子？
2013-10-01 19:45:59	godfat	[20:40:35] 我要編輯的檔案裡沒有 zip 字樣，所以我猜不行？
2013-10-01 19:45:59	Yu_lin	[20:43:48] BufRead 是根據檔名來判斷，如果檔名沒有 zip，就沒辦法用 BufRead 了
2013-10-01 19:45:59	godfat	[20:44:08] 果然，好吧 :(
2013-10-01 19:45:59	CindyLinz	[20:46:33] 有可以看檔案內容的 rule 的樣子... 可是我不會 (小聲)
2013-10-01 19:45:59	CindyLinz	[20:47:37] zip 檔案開頭應該是 PK
2013-10-01 19:45:59	petercommand	[20:47:42] 像file那樣嗎?
2013-10-01 19:45:59	godfat	[20:47:57] 所以要弄自動判斷嗎？ @_@
2013-10-01 19:45:59	godfat	[20:47:57] 那也許已經有人做了，用 file 判斷之類的
2013-10-01 19:45:59	godfat	[20:48:09] 不過我以為手動切換比較簡單 -_-
2013-10-01 19:45:59	CindyLinz	[20:48:27] 手動切換你幹嘛還抗拒手動改一下附檔名 XD
2013-10-01 19:45:59	godfat	[20:48:49] 那要 mv 兩次 = =... ln 一下確實還比較快 XD
2013-10-01 19:45:59	godfat	[20:51:29] 說到這個，我想在自己的 automation task 中，不給任何選項時列出所有指令
2013-10-01 19:45:59	godfat	[20:51:29] 像是 make 時列出 make install, make all, 等等
2013-10-01 19:45:59	godfat	[20:51:29] 實際上是 rake, 我希望在打 rake 不給選項時，等同於 rake --tasks 列出所有指令
2013-10-01 19:45:59	godfat	[20:51:29] 不過發現最穩的方法是重跑一次 process... 不知道有沒有更好的作法 :(
2013-10-01 19:45:59	godfat	[20:51:29] 重跑一次 process 有點慢...
2013-10-01 19:45:59	suhorng	[21:03:50] mno2: Standard ML 那一條是什麼意思阿?
2013-10-01 19:45:59	Yu-Lin	[21:13:43] 哪一條？
2013-10-01 19:45:59	suhorng	[21:19:30] > 12:11:14 <MnO2> https://twitter.com/ccshan/status/383625029017432064   回應讓我大笑 xD
2013-10-01 19:45:59	lambdabot	[21:19:31]   Not in scope: data constructor `MnO2'Not in scope: `https'Precedence parsin...
2013-10-01 19:45:59	Yu-Lin	[22:02:09] 不過如果想自動切換 vim 的檔名，還是可以用 au 搭配 vimscript 去做XD（剛剛試了一下
2013-10-01 19:45:59	Yu-Lin	[22:02:42] 除了 BufRead 還有其他的，例如 VimLeave 之類的
2013-10-01 19:45:59	godfat	[22:05:37] 教一下？ XD 感謝 @_@
2013-10-01 19:45:59	MnO2_	[22:12:28] suhorng: 我不確定耶，應該是在調侃 standard ML 某些 strict 的性質吧。但其實我不會 SML
2013-10-01 19:45:59	godfat	[22:12:48] 我以為是在調侃美國人？ XD
2013-10-01 19:45:59	suhorng	[22:13:48] 那回應是為什麼@_@
2013-10-01 19:45:59	godfat	[22:14:22] Bob Harper 很愛 SML XD
2013-10-01 19:45:59	godfat	[22:14:48] @_@
2013-10-01 19:45:59	godfat	[22:14:48] Robert Harper... 看來不是 Bob XD
2013-10-01 19:45:59	godfat	[22:14:59] 看來我搞錯人了 orz
2013-10-01 19:45:59	b4284	[22:15:59] bob 好像就是 robert
2013-10-01 19:45:59	suhorng	[22:16:25] (!) make sense!
2013-10-01 19:45:59	suhorng	[22:16:29] http://en.wikipedia.org/wiki/Robert_Harper_(computer_scientist)
2013-10-01 19:45:59	suhorng	[22:17:00] 他是 Standard ML 定義的作者之一?
2013-10-01 19:45:59	godfat	[22:17:00] ...=_= 難怪我有這樣的連結...
2013-10-01 19:45:59	godfat	[22:17:06] 我記得是
2013-10-01 19:45:59	b4284	[22:17:27] 應該說 bob 是 robert 常用的匿稱
2013-10-01 19:45:59	b4284	[22:18:18] 就好像常叫的 bill gates 其實名字是 william
2013-10-01 19:45:59	godfat	[22:18:48] 是喔 @@ Bill 是假名？
2013-10-01 19:45:59	suhorng	[22:19:01] 原來不是名字 @_@
2013-10-01 19:45:59	b4284	[22:19:06] William Henry "Bill" Gates
2013-10-01 19:45:59	b4284	[22:19:41] 三代 (誤)
2013-10-01 19:45:59	Yu-Lin	[22:26:50] 我剛剛翻文件，vim 就算不給副檔名，它也會自動根據檔案內容判斷格式，我猜應該有個可以用來顯示格式的指令才對，但還沒找到
2013-10-01 19:45:59	Yu-Lin	[22:28:03] 然後你可以設定一個 function 用來 rename 或是用 file 來給檔案一個新的名稱，再寫另一個用來復原檔案名稱
2013-10-01 19:45:59	Yu-Lin	[22:29:06] 前面那個 function 用在 autocmd BufRead 或其他可以用來判斷檔案格式的地方，後面那個用在 autocmd BufWrite 或 VimLeave 之類的
2013-10-01 19:45:59	Yu-Lin	[22:30:27] 你可以參考這篇
2013-10-01 19:45:59	godfat	[22:30:27] 了解... 看來不是很好弄 @_@
2013-10-01 19:45:59	godfat	[22:30:28] 感謝 orz..
2013-10-01 19:45:59	Yu-Lin	[22:30:28] http://vim.wikia.com/wiki/Write_your_own_Vim_function
2013-10-01 19:45:59	Yu-Lin	[22:30:46] 或是 :help function 來翻文件
2013-10-01 19:45:59	godfat	[22:31:14] 決定還是先用 ln -s... XD
2013-10-01 19:45:59	Yu-Lin	[22:31:28] XD
2013-10-01 19:45:59	Yu-Lin	[22:32:47] 我之前好像有把 F5 設成 autocmd BufRead *html :map <F5> :!chrome %<CR> 這樣過
2013-10-01 19:45:59	Yu-Lin	[22:36:20] http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/ 有人玩過 MLRISC 這個東西嗎？
2013-10-01 19:45:59	Yu-Lin	[22:36:29] 剛剛看 sml/nj 看到的
2013-10-01 19:45:59	godfat	[22:47:35] 那是按 f5 時會重新讀取檔案的意思嗎？
2013-10-01 19:45:59	Yu-Lin	[22:49:45] 我那是用在 html 上的，如果副檔名是 html，按 F5 就會調用外部的 chrome 去跑這整份程式碼
2013-10-01 19:45:59	godfat	[22:51:06] 喔喔。我晚點研究看看，謝啦
2013-10-01 19:45:59	letoh	[22:51:39] godfat: 你都用什麼 editor 呢? 平常不是用 vim ?
2013-10-01 19:45:59	godfat	[22:52:39] 目前平常是用 sublime text XD vim 是懶得離開 terminal 時用的 @@
2013-10-01 19:45:59	letoh	[22:53:00] 原來如此
2013-10-01 19:45:59	godfat	[22:53:15] 是有想轉移到 vim 上，不過試了很多次都有點失敗 orz
2013-10-01 19:45:59	godfat	[22:53:16] 不少我需要的功能，在 vim 上很難做或是做不到之類的
2013-10-01 19:45:59	letoh	[22:54:55] 那是什麼神奇的功能啊?
2013-10-01 19:45:59	hashcat	[22:55:23] 用emacs好了
2013-10-01 19:45:59	hashcat	[22:56:08] 雖說會lag, 快速鍵還會重疊到
2013-10-01 19:45:59	godfat	[22:57:26] 我有點忘記了，好像跟 ctrlp 和 nerdtree 有點關係
2013-10-01 19:45:59	godfat	[22:57:27] 例如我希望 nerdtree 能把任意檔案當成 project 內容，
2013-10-01 19:45:59	godfat	[22:57:27] 而不是真的根據硬碟目錄
2013-10-01 19:45:59	godfat	[22:57:27] 諸如此類的
2013-10-01 19:45:59	godfat	[22:57:27] 後來想說乾脆自己改，但發現 vim script 用起來太痛苦了，
2013-10-01 19:45:59	godfat	[22:57:27] 就算了....
2013-10-01 19:45:59	godfat	[22:57:46] emacs 看看吧 ~.~ 暫時還沒空重摸工作工具 orz...
2013-10-01 19:45:59	hashcat	[22:58:22] emacs有兩種, 一種是xwindows的, 一種terminal
2013-10-01 19:45:59	letoh	[22:58:29] vim 不一定要用 vim script，可以吃 python..
2013-10-01 19:45:59	letoh	[22:58:46] emacs 有很多種XD  但本家只有一種
2013-10-01 19:45:59	hashcat	[22:58:51] xwindows不太需要記憶東西
2013-10-01 19:45:59	CindyLinz	[22:59:13] 想寫 script 的話應該 emacs 比 vim 適合?
2013-10-01 19:45:59	letoh	[22:59:19] 如果你說的是 xemacs，那的確是不是本家的東西
2013-10-01 19:45:59	hashcat	[22:59:23] terminals那種也就 alt + `
2013-10-01 19:45:59	CindyLinz	[22:59:39] 不過換一種不同的檔案類型, 就像換了整套環境的樣子
2013-10-01 19:45:59	b4284	[22:59:42] 該是 gtk 版
2013-10-01 19:45:59	CindyLinz	[22:59:55] vim 會比較相似
2013-10-01 19:45:59	hashcat	[23:00:01] 我說得就是emacs
2013-10-01 19:45:59	letoh	[23:00:02] 其實 vim 也可以  只是比較弱一點  可能得用 ft 來切換
2013-10-01 19:45:59	hashcat	[23:00:05] 前面沒x
2013-10-01 19:45:59	letoh	[23:00:33] 嗯  emacs-x11 跟 emacs-no-x11 都算本家的
2013-10-01 19:45:59	hashcat	[23:01:29] 單手沒辦法用可能是缺點
2013-10-01 19:45:59	godfat	[23:01:47] 我之前用 aquaemacs 的印象是都不太好... XD
2013-10-01 19:45:59	CindyLinz	[23:02:01] 單手... 可以練單手 dvorak layout 作補嘗.. (誤)
2013-10-01 19:45:59	hashcat	[23:02:03] 也不是完全沒辦法, 就是要繞比較大圈
2013-10-01 19:45:59	letoh	[23:02:30] 我還在用 vim 時其實也會寫一些 script，其實 vim 提供的 api 還不少，能做的事也很多... 問題就是跟 terminal 的整合太弱
2013-10-01 19:45:59	letoh	[23:02:57] 不過就算現在有改善，也回不去了XD
2013-10-01 19:45:59	letoh	[23:06:34] aquaemacs 好像是 mac 上的首選，但從來沒用過，不曉得有什麼不同@_@
2013-10-01 19:45:59	godfat	[23:08:49] 我覺得應該是我不太適應 emacs orz...
2013-10-01 19:45:59	godfat	[23:09:01] 之前想改個字型也讓我覺得好麻煩 @@
2013-10-01 19:45:59	letoh	[23:09:42] 只是改字型的話好像跟 vim 差不多
2013-10-01 19:45:59	godfat	[23:10:25] 我可能需要從 console 介面開始
2013-10-01 19:45:59	letoh	[23:10:27] 不過我其實都在 terminal，所以很少遇到字型設定問題XD
2013-10-01 19:45:59	letoh	[23:11:10] 不管是 console 或 gui 界面的使用都一樣啊  但我個人建議剛開始先從 gui 開始
2013-10-01 19:45:59	petercommand	[23:11:39] letoh: gui有menu可以按呀
2013-10-01 19:45:59	letoh	[23:11:44] emacs 有些函式設計不良，強迫要傳入 mouse event，在 console 會沒辦法呼叫
2013-10-01 19:45:59	godfat	[23:12:27] gui 我是按 menu 按到不能接受 XD
2013-10-01 19:45:59	petercommand	[23:12:34] XD
2013-10-01 19:45:59	letoh	[23:12:40] 按 menu ?
2013-10-01 19:45:59	godfat	[23:12:53] 就是覺得那 menu 設計實在太恐怖了
2013-10-01 19:45:59	letoh	[23:13:03] 唔  沒有 menu 也能用，我基本上都是拿掉 menubar 的
2013-10-01 19:45:59	petercommand	[23:13:12] XD
2013-10-01 19:45:59	godfat	[23:13:15] 所以想說從 console 著手應該比較適合我
2013-10-01 19:45:59	letoh	[23:14:13] 其實都一樣啦  但 gui 能用的功能比較完整  例如 speedbar，還不習慣 emacs 的人用 console 版的 speedbar 會瘋掉...
2013-10-01 19:45:59	hashcat	[23:14:33] 我玩eclipse玩到被eclipse玩
2013-10-01 19:45:59	letoh	[23:14:42] 練到可以在心中切換 frame 後就沒問題了XD
2013-10-01 19:45:59	hashcat	[23:15:04] 裝了那個clojure plugin後, 補全def只會出現defn
2013-10-01 19:45:59	letoh	[23:15:09] eclipse 沒辦法在 terminal 用，這對我來說是沒辦法用的XD
2013-10-01 19:45:59	hashcat	[23:15:10] 求救
2013-10-01 19:45:59	letoh	[23:15:35] 我應該有 90% 的環境需求都是需要 terminal
2013-10-01 19:45:59	hashcat	[23:15:36] 明明就有defprotocol之類的
2013-10-01 19:45:59	hashcat	[23:16:08] 那除了emacs別無選擇
2013-10-01 19:45:59	godfat	[23:16:55] 暫離..
2013-10-01 19:45:59	letoh	[23:16:57] 剩下的大概就是在 x11 畫圖或在 windows 寫 mfc 程式XD
2013-10-01 19:45:59	hashcat	[23:17:37] eclipse裝消維
2013-10-01 19:45:59	hashcat	[23:19:00] 光x11也能畫圖
2013-10-01 19:45:59	hashcat	[23:19:30] 裝個kde不是很好嘛
2013-10-01 19:45:59	hashcat	[23:20:00] 無聊還可以把桌面轉來轉去
2013-10-01 19:45:59	letoh	[23:20:23] 我只要能跑 gimp 的環境就可以
2013-10-01 19:45:59	hashcat	[23:20:45] xmonad跟mate混合不錯
2013-10-01 19:45:59	letoh	[23:20:48] 其他多餘的東西不太喜歡裝XD
2013-10-01 19:45:59	CindyLinz	[23:20:51] mate?
2013-10-01 19:45:59	hashcat	[23:21:20] 有人不喜歡gnome 3就把2分離出來
2013-10-01 19:45:59	hashcat	[23:21:25] 叫mate
2013-10-01 19:45:59	CindyLinz	[23:21:31] 喔喔
2013-10-01 19:45:59	hashcat	[23:21:48] xmonad能讓工作列整個消失不見
2013-10-01 19:45:59	CindyLinz	[23:21:52] 那 letoh 現在是用純的 xmonad?
2013-10-01 19:45:59	hashcat	[23:22:23] 也可以變回有mate工作列
2013-10-01 19:45:59	hashcat	[23:22:43] 變不見的狀況跟只開x11樣子很像
2013-10-01 19:45:59	b4284	[23:24:03] mate 很好用
2013-10-01 19:45:59	letoh	[23:24:56] 我沒有 ghc 呀，應該沒辦法跑 xmonad XD
2013-10-01 19:45:59	letoh	[23:25:18] 還是只有 hugs 也能跑?
2013-10-01 19:45:59	CindyLinz	[23:25:24] 對哄!
2013-10-01 19:45:59	letoh	[23:26:49] 可能哪天受不了就會把 ghc 裝起來了XD  到時候再試試 xmonad
2013-10-01 19:45:59	hashcat	[23:27:29] 發行版都有提供binary版吧
2013-10-01 19:45:59	letoh	[23:28:12] 不過我真的不需要特殊的 wm... 以前用一陣子 twm 和 evilwm，提供的功能已經多到用不完
2013-10-01 19:45:59	CindyLinz	[23:29:49] hashcat: xmonad 如果沒有配合 ghc 的話, config 不能改欸 ^^|
2013-10-01 19:45:59	hashcat	[23:30:53] 沒注意過
2013-10-01 19:45:59	letoh	[23:32:49] 我比較需要一個很穩定的 terminal 和一個很好改的 text editor XD
2013-10-01 19:45:59	hashcat	[23:34:18] 怎麼聽都是emacs
2013-10-01 19:45:59	hashcat	[23:34:46] 順便講eclipse上面一票plugin都不錯用
2013-10-01 19:45:59	letoh	[23:35:21] 我知道啊  因為弄 android 時只能先配合用 eclipse XD
2013-10-01 19:45:59	hashcat	[23:35:56] XL跟unified parallel C都有plugin
2013-10-01 19:45:59	hashcat	[23:37:59] http://upc.lbl.gov/
2013-10-01 19:45:59	letoh	[23:38:26] xl 是指 ibm 那個?
2013-10-01 19:45:59	hashcat	[23:38:30] 看起來就很好玩, 雖說用不上
2013-10-01 19:45:59	hashcat	[23:38:32] 嗯嗯
2013-10-01 19:45:59	letoh	[23:38:51] 唔  你在哪個環境用 xl 呢?
2013-10-01 19:45:59	hashcat	[23:39:04] 沒用過
2013-10-01 19:45:59	letoh	[23:39:13] 喔喔喔
2013-10-01 19:45:59	hashcat	[23:39:31] 只是eclipse看到有全套parallel套裝就順便裝了
2013-10-01 19:45:59	letoh	[23:39:59] 我以為你在 aix 之類的環境上工作
2013-10-01 19:45:59	hashcat	[23:40:01] 想存錢作集群
2013-10-01 19:45:59	hashcat	[23:40:38] 只是妄想集群所以先學一下
2013-10-01 19:45:59	MnO2_	[23:41:53] suhorng, godfat: Bob 的確是 Robert Harper 啊。
2013-10-01 19:45:59	MnO2_	[23:41:59] Bob = Robert
2013-10-01 19:45:59	MnO2_	[23:42:30] Bill = William
2013-10-01 19:45:59	petercommand	[23:44:42] 群集和集群是一樣的吧?
2013-10-01 19:45:59	hashcat	[23:45:10] 熊貓跟貓熊應該也是一樣
2013-10-01 19:45:59	suhorng	[23:45:22] mno2: 喔喔從名字來的!!
2013-10-01 19:45:59	b4284	[23:46:28] 叢集表示：
2013-10-01 19:45:59	petercommand	[23:46:38] XD
2013-10-01 19:45:59	CindyLinz	[23:52:44] cons 跟 snoc 也一樣喔~ (誤)
2013-10-01 19:45:59	Yu-Lin	[00:02:31] 我愈來愈搞不懂 sml 啦XD
2013-10-01 19:45:59	Yu-Lin	[00:03:55] 除了 sml/nj 用 MLRISC，Mlton 也用
2013-10-01 19:45:59	Yu-Lin	[00:04:12] 看 MLRISC 還看到了用 G machine 實作的 haskell
2013-10-01 19:45:59	MnO2_	[00:06:43] http://english.stackexchange.com/questions/8767/changes-in-english-names-of-people  請見等價大全 xD
2013-10-01 19:45:59	MnO2_	[00:09:45] 其實去公司隨便抓個 Engineer 大概都不知道 MS 跟 Apple 兩大 founders 的本名吧 xD
2013-10-01 19:45:59	MnO2_	[00:10:09] 他們都還有 middle name
2013-10-01 19:45:59	suhorng	[00:10:38] Yu-Lin: 跟 LLVM pk!
2013-10-01 19:45:59	hashcat	[00:21:12] 有人在topcoder嘛
2013-10-01 19:45:59	monochrom	[00:24:12] 嘻嘻, 我就知道 C. A. R. Hoare, Donald E. Knuth, 及 Edsger W. Dijkstra 的全寫!
2013-10-01 19:45:59	monochrom	[00:25:40] C. A. R. = Charles Anthony Richard, E = Ervin, W = Wybe
2013-10-01 19:45:59	monochrom	[00:27:29] Hoare會叫你稱他 Tony, 這是對應 Anthony
2013-10-01 19:45:59	MnO2	[00:29:14] hashcat: 請找 miaout17
2013-10-01 19:45:59	hashcat	[00:31:30] 想問賺外快難不難:D
2013-10-01 19:45:59	hashcat	[00:31:36] :D
2013-10-01 19:45:59	MnO2_	[19:25:00] PHPConf 的矛盾大對決是怎麼回事 xDD
2013-10-01 19:45:59	letoh	[19:56:52] 那是什麼?
2013-10-01 19:45:59	Yu_lin	[22:53:20] sml
2013-10-01 19:45:59	Yu_lin	[22:54:16] sml 的 lib 跟函數那邊有比較好查找的
2013-10-01 19:45:59	hashcat	[23:03:59] http://en.wikipedia.org/wiki/Horn_clauses
2013-10-01 19:45:59	hashcat	[23:48:57] F*是dependent type
2013-10-01 19:45:59	hashcat	[00:00:21] 集群用得dependent type
2013-10-01 19:45:59	gko	[00:14:22] 有人在中華嗎？現在下載超慢... wget http://optimate.dl.sourceforge.net/project/pidgin/Pidgin/2.10.7/pidgin-2.10.7.exe => 20 KB/s...
2013-10-01 19:45:59	gko	[00:15:09] Youtube也斷斷續續...
2013-10-01 19:45:59	YuLin	[23:24:00] 在 #sml 也看到了常見的帳號
2013-10-01 19:45:59	YuLin	[23:45:51] http://www.catonmat.net/blog/on-functors/
2013-10-01 19:45:59	YuLin	[23:46:08] 正在看 SML、Haskell、c++ 的 functor
2013-10-01 19:45:59	YuLin	[23:46:27] c++ 我直接跳過沒看，直接看 SML 的部份
2013-10-01 19:45:59	YuLin	[23:47:22] SML 的 funtor 看起來很像 dispatcher
2013-10-01 19:45:59	suhorng	[23:50:18] 不是三個完全同的東西嗎...?
2013-10-01 19:45:59	suhorng	[23:50:45] *完全不同
2013-10-01 19:45:59	YuLin	[23:52:07] 恩，在看一篇解釋四者的 functor
2013-10-01 19:45:59	YuLin	[23:52:18] prolog
2013-10-01 19:45:59	YuLin	[23:52:22] 沒打到
2013-10-01 19:45:59	letoh	[23:55:50] YuLin: https://www.fpcomplete.com/blog/2012/07/the-functor-pattern-in-c  這個呢?
2013-10-01 19:45:59	YuLin	[23:59:40] 這個沒看過，不過在我有生之年，能不要接觸 C++ 就不想接觸XD
2013-10-01 19:45:59	letoh	[00:00:09] C++ 還可以啦  雖然能不碰也是...(ry
2013-10-01 19:45:59	suhorng	[00:01:43] 那不是一開始沒有 lambda 才做出來的模仿品嗎XD
2013-10-01 19:45:59	CindyLinz	[00:17:41] C++ 的 functor... 就只是有 overloading () operator 的物件?
2013-10-01 19:45:59	monochrom	[00:19:03] 是
2013-10-01 19:45:59	CindyLinz	[00:19:48] 不有趣!
2013-10-01 19:45:59	hashcat	[00:20:37] 偽functor
2013-10-01 19:45:59	CindyLinz	[00:20:47] YuLin: 欸欸, C++ 的 functor 講完了, 你可以不用花時間再細看了 XD
2013-10-01 19:45:59	hashcat	[00:21:44] 可以多關注idris
2013-10-01 19:45:59	hashcat	[00:21:59] 對偏門的新語言來說活動率不算太低
2013-10-01 19:45:59	suhorng	[00:22:12] 他年代好像滿近的?
2013-10-01 19:45:59	suhorng	[00:22:30] 而且程式可以實際跑@@!!
2013-10-01 19:45:59	CindyLinz	[00:24:35] 我晚一點.. 最近想專心看 lazy 的東西...
2013-10-01 19:45:59	letoh	[00:32:32] 我貼的那一篇對 c++ 來說才是偽 functor XD
2013-10-01 19:45:59	letoh	[00:32:52] 那篇是用 c++ 實作 fmap 這些東西
2013-10-01 19:45:59	letoh	[00:33:16] 看到那個 domain 至少捧個場嘛XD
2013-10-01 19:45:59	CindyLinz	[00:34:47] letoh: 網址那麼長, 沒注意 domain 啊.. XD
2013-10-01 19:45:59	letoh	[00:34:48] suhorng: 就算有 lambda 好了，我實在懷疑十年內能不能在業界普及使用...
2013-10-01 19:45:59	letoh	[00:34:51] XDXD
2013-10-01 19:45:59	CindyLinz	[00:35:28] C++11 的 lambda.... 普及它真的是好事嗎? orz
2013-10-01 19:45:59	CindyLinz	[00:36:06] 我覺得很局部很局部地用就好了..
2013-10-01 19:45:59	CindyLinz	[00:36:11] 那就還不錯
2013-10-01 19:45:59	letoh	[00:37:04] 唔  其實我想講的是說熟悉用這些新工具來設計程式  不過表達的不太好XD
2013-10-01 19:45:59	letoh	[00:37:20] 不過就算現在，也還是很多把 c++ 當成 c 來寫的XD
2013-10-01 19:45:59	suhorng	[00:37:21] letoh: 可是 lambda 也是假的....XD
2013-10-01 19:45:59	suhorng	[00:37:47] 雖然真要說的話是一連串東西的結果, 可是 C++ 的 lambda 就完全不是我們平常用的 lambda
2013-10-01 19:45:59	letoh	[00:38:12] 我是覺得以 c++ 這樣的限制能提供一點新工具已經是突破了  你要它突然變成 haskell 是不太可能的啦
2013-10-01 19:45:59	CindyLinz	[00:38:16] letoh: 這連結.... 是 Haskell 長得像 C++ 的 syntax sugar 啦 XD
2013-10-01 19:45:59	letoh	[00:38:27] 哈XDXD
2013-10-01 19:45:59	suhorng	[00:38:47] 不全然啦, 應該說 C++ 的 lambda　＝＝＝　建立function object的syntactic sugar
2013-10-01 19:45:59	suhorng	[00:39:01] 跟常見 functional language 的 lambda 意思完全不一樣
2013-10-01 19:45:59	suhorng	[00:39:29] 而 C++ 的 std::function 是用 template 把 callable object 外面再包一層東西...
2013-10-01 19:45:59	letoh	[00:39:40] 大部份的 lambda 就是 ananymous function 而已，不是要變成 functional language 講的 lambda 啦
2013-10-01 19:45:59	letoh	[00:40:32] 我覺得業界不太在意追求理論方面的滿足，主要還是實用方面，然後不要改變太大
2013-10-01 19:45:59	CindyLinz	[00:41:55] 等等.. 還有差喔? XD # lambda vs anonymous function
2013-10-01 19:45:59	CindyLinz	[00:42:06] 我是說.. 再加上 closure 的部分 :p
2013-10-01 19:45:59	CindyLinz	[00:42:26] C++ lambda 在 by value 的部分, 還蠻像 closure 的呀
2013-10-01 19:45:59	letoh	[00:42:58] 就限定使用範圍來看吧，應該還算是可以用
2013-10-01 19:45:59	letoh	[00:43:23] 不過要我把程式改寫成 c++1x 還是有點懶... 原本的能跑就好XD
2013-10-01 19:45:59	suhorng	[00:43:38] 例如
2013-10-01 19:45:59	suhorng	[00:43:39] let counter = ref 0 in fn () => counter := !counter + 1; counter end
2013-10-01 19:45:59	CindyLinz	[00:43:40] 已經能用的幹嘛改啊 @@"
2013-10-01 19:45:59	suhorng	[00:44:04] C++裡面要改成 shared_ptr<int> 然後closure抓進來也是可以啦.....
2013-10-01 19:45:59	letoh	[00:44:10] 還是常常會修修改改啊  其實是可以趁機一點一點換掉XD
2013-10-01 19:45:59	suhorng	[00:44:17] 不過就是東西都要手動轉
2013-10-01 19:45:59	letoh	[00:44:23] 卡在公司還有人用 vc6...
2013-10-01 19:45:59	suhorng	[00:44:35] vc6!!!!!!!!!!!!!!
2013-10-01 19:45:59	suhorng	[00:44:41] 我以為買不到了?
2013-10-01 19:45:59	letoh	[00:45:07] 有買 msdn subscription 的話，也許還弄得到?
2013-10-01 19:45:59	letoh	[00:45:16] 都能弄個 win3.1 來玩了XD
2013-10-01 19:45:59	suhorng	[00:45:36] www
2013-10-01 19:45:59	CindyLinz	[00:45:43] suhorng: 嗯, 要改值的, by ref 的就不行了....
2013-10-01 19:45:59	CindyLinz	[00:46:02] 外層函數 return 以前可以 XD
2013-10-01 19:45:59	suhorng	[00:46:37] CindyLinz: 有個不健康的作法是, 如果確定每個 closure 的 instance 都獨立, 那加上 "mutable" ... XD
2013-10-01 19:45:59	suhorng	[00:47:13] 我覺得精確來說要一樣的話就是要用指標. 如果不想要 memory leak 就配合 shared_ptr 自動做 reference count...
2013-10-01 19:45:59	CindyLinz	[00:48:06] 那就不是 C++11 lambda 的功能了, 你是自己實作的 XD
2013-10-01 19:45:59	suhorng	[00:49:03] 好吧, 畢竟 C++ 裡面的變數都是 reference XD
2013-10-01 19:45:59	suhorng	[00:49:39] functional language 有一種 closure 的時作方式就是把外面的變數都拷貝一份近來
2013-10-01 19:45:59	CindyLinz	[00:50:02] 變數都 imutable 真開心.. XD
2013-10-01 19:45:59	suhorng	[00:50:06] 然後 'a ref 拷貝進來的是 'a ref 所以不會出事 XD
2013-10-01 19:45:59	suhorng	[00:50:41] 但是對於 Scheme 這種沒有 type 的, 要這樣實作 closure 編譯器實作就要先把會改到的變數都變指標
2013-10-01 19:45:59	suhorng	[00:50:55] (其中一種實作方式)
2013-10-01 19:45:59	CindyLinz	[00:54:20] 能改的東西不是原本就是指標喔? @@"
2013-10-01 19:45:59	suhorng	[00:55:28] 需要辨認出哪些被改, 因為沒有 type Orz
2013-10-01 19:45:59	suhorng	[00:56:36] Scheme 裡面 variable reference 沒有像 ML 那樣 "!" 明確寫
2013-10-01 19:45:59	CindyLinz	[00:56:46] 喔喔...
2013-10-01 19:45:59	CindyLinz	[00:57:08] 我目前讀的部分蠻前面的, 以為都是不能改的 :p
2013-10-01 19:45:59	suhorng	[00:59:41] 大家的作法都差好多XD
2013-10-01 19:45:59	suhorng	[00:59:47] *語言的作法
2013-10-01 19:45:59	CindyLinz	[01:00:34] 這樣很好 :p
2013-10-01 19:45:59	suhorng	[01:00:38] XDD
2013-10-01 19:45:59	CindyLinz	[01:01:00] 有了什麼新平台想 porting 的話也比較有路
2013-10-01 19:45:59	CindyLinz	[01:01:16] 既然它已經用這麼多種不同的方式實作, 再多一種可能也不太難
2013-10-01 19:45:59	CindyLinz	[01:01:23] 像 perl 就... QQ
2013-10-01 19:45:59	CindyLinz	[17:05:27] 寫一寫 chrome extension 就好想自己寫個 browser....||
2013-10-01 19:45:59	CindyLinz	[17:06:06] chrome extension 的 api 真是好亂, 東漏西漏的... 感覺像他們工程師或 PM, 想到一個功能就做一個功能, 互相不整合的 :|
2013-10-01 19:45:59	MnO2_	[17:14:54] 最後就變 NaCL 了 (誤)
2013-10-01 19:45:59	***	Playback Complete.
2013-10-01 19:46:53	--	Mode #haskell.tw [+cnt]
2013-10-01 19:46:53	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 19:54:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Remote host closed the connection)
2013-10-01 19:55:08	--	irc: disconnected from server
2013-10-01 19:55:10	-->	drbean- (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-01 19:55:10	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-01 19:55:10	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-01 19:55:10	--	Nicks #haskell.tw: [a2n cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean- gko godfat hashcat hychen kanru lambdabot letoh logfat_ lwhsu miaout171_ miaout17_ MnO2_ monochrom petercommand superbil Yu_lin]
2013-10-01 19:55:10	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-10-01 19:55:10	***	Buffer Playback...
2013-10-01 19:55:10	Yu_lin	[11:12:35] 久違的出現在 haskell.tw
2013-10-01 19:55:10	CindyLinz	[11:12:54] Hi XD
2013-10-01 19:55:10	Yu_lin	[11:17:49] hi
2013-10-01 19:55:10	Yu_lin	[11:18:04] 我往前翻了一些討論看到這句
2013-10-01 19:55:10	Yu_lin	[11:18:23] 01:17:10 <hashcat> "執行時會丟型別錯誤"叫dynamic, "執行時會丟型別錯誤"叫static, 兩者可並存
2013-10-01 19:55:10	CindyLinz	[11:19:19] 應該後半有筆誤啦 :p
2013-10-01 19:55:10	Yu_lin	[11:19:20] 後面那個句是不是把編譯打成執行了？
2013-10-01 19:55:10	CindyLinz	[11:21:30] 不過這樣的論述現在只能是個原則上的描述, 沒辦法精準了.. 因為現在有的語言的 compile pass 比較模糊
2013-10-01 19:55:10	Yu_lin	[11:31:44] 其實是因為我看了 type 那本，然後看到網路上有在討論 javascript 是 untype language 這件事
2013-10-01 19:55:10	CindyLinz	[11:32:25] 嗯, 是有把 dyn type 視為 untype 的說法
2013-10-01 19:55:10	CindyLinz	[11:33:23] 如果是看它的變數, 什麼 type 都能裝, 所以這個角度看是 untyped
2013-10-01 19:55:10	Yu_lin	[11:33:57] 就像 scheme 那樣？
2013-10-01 19:55:10	CindyLinz	[11:34:22] 可是從 a+b 有時候是字串相接, 有時候是數字相加... 這個角度來看, 有 type 的味道就比較強了 orz
2013-10-01 19:55:10	CindyLinz	[11:35:02] Yu_Lin: 嗯嗯
2013-10-01 19:55:10	Yu_lin	[11:37:54] 恩，了解了，感謝XD
2013-10-01 19:55:10	Yu_lin	[13:20:12] 突然發現，#hime 跟 #haskell.tw 的人.....重複還蠻高的XD
2013-10-01 19:55:10	CindyLinz	[13:44:57] 來加一下 #hime, 增加重複度.. (咦)
2013-10-01 19:55:10	CindyLinz	[13:45:36] topic 怪怪的 orz
2013-10-01 19:55:10	b4283	[15:52:50] XD
2013-10-01 19:55:10	mno2	[23:43:59] http://www.skybluetrades.net/blog/posts/2013/09/25/multilingual-blinkenlights/index.html  Haskell on 狗板
2013-10-01 19:55:10	mno2	[23:44:22] 又是 ajhc  xD
2013-10-01 19:55:10	letoh	[23:46:40] 看起來是拿來當 compiler 用而已
2013-10-01 19:55:10	godfat	[23:50:24] 不能接受這個字型...
2013-10-01 19:55:10	suhorng	[23:57:33] Haskell耶好猛XD
2013-10-01 19:55:10	letoh	[23:58:07] 喔對 原來上次有看過  這個是有 haskell runtime 的
2013-10-01 19:55:10	CindyLinz	[00:47:16] :D
2013-10-01 19:55:10	monochrom	[01:01:39] 我的師父(論文導師)乾脆教我: 真的要分開"執行時"與"編譯時"嗎?
2013-10-01 19:55:10	godfat	[01:03:02] 我想看語言吧 XD
2013-10-01 19:55:10	CindyLinz	[01:05:34] 還是有傾向的啊 ^^|  像是程式證明用的就是編譯時的檢查, 編譯時就保守估計執行時的所有可能...
2013-10-01 19:55:10	hychen	[01:25:31] CindyLinz: "compile pass 比較模糊" # 可以解釋一下這個嗎? 我不太懂
2013-10-01 19:55:10	CindyLinz	[01:27:33] hychen: 像是 javascript v8 的 just-in-time compile.. 它是 compile, 但是是 runtime 的時候做的
2013-10-01 19:55:10	letoh	[01:27:33] 因為 jit 嗎?
2013-10-01 19:55:10	letoh	[01:27:34] 喔喔喔
2013-10-01 19:55:10	CindyLinz	[01:28:09] 然後.... 這種 jit 至少還能說出 compile phase 是在什麼時候, 雖然已經是藏在 runtime 裡了...
2013-10-01 19:55:10	CindyLinz	[01:28:28] 如果(想像中)是用某 lazy evaluation 做的 vm..
2013-10-01 19:55:10	CindyLinz	[01:28:50] 它這個 jit compile 會給你 compile 到一半, 就叫你先去跑已經生出來的 op code..
2013-10-01 19:55:10	CindyLinz	[01:29:01] 剩下的嘛... 等你要用的時候我再生...
2013-10-01 19:55:10	hychen	[01:29:43] 這樣type checking沒問題? @@
2013-10-01 19:55:10	godfat	[01:29:56] 讓我想到 partial evaluation XD
2013-10-01 19:55:10	CindyLinz	[01:30:16] 有問題啊.. javascript 不就偶爾會有拿 undefined 當函數 call 的 exception? :p
2013-10-01 19:55:10	CindyLinz	[01:32:34] 唔.. partial evaluation 指的是已經在跑的程式, 偶爾還會重新 compile 自己, 重新生出更有效率的程式出來跑?
2013-10-01 19:55:10	CindyLinz	[01:34:02] hychen: 我前一陣子看王垠的文章講這個, 他另外提到.. op code -> 執行, 也可以算是一種 compile
2013-10-01 19:55:10	CindyLinz	[01:34:34] compile 成 in-memory 的一段 interpreter 的程式碼, 馬上吃掉作出動作
2013-10-01 19:55:10	letoh	[01:36:00] 一般的 jit 不就是這樣嗎?
2013-10-01 19:55:10	CindyLinz	[01:36:21] 他說的比較極端啊.. 像是 java 已經都生成 .class 檔了
2013-10-01 19:55:10	CindyLinz	[01:36:43] 他覺得執行 .class 的這一部分還是有 compile 的成份
2013-10-01 19:55:10	letoh	[01:37:33] 但 bytecode 畢竟還是得 vm 來解譯執行  所以在這邊做 jit 才合理呀
2013-10-01 19:55:10	CindyLinz	[01:38:33] letoh: 他的文章是要說 compile 和 interpret 的界限很模糊, 他這邊是要說, 一般我們會覺得這一段很明顯是 interpret 了, 仍然可以視為 compile
2013-10-01 19:55:10	letoh	[01:39:59] 嗯嗯  就是因為有 jit 的關係呀... 執行 bytecode 是很沒效率的XD
2013-10-01 19:55:10	godfat	[01:40:02] 好像不是？不過我還是不要解釋好了，現在腦袋有點模糊 XD
2013-10-01 19:55:10	godfat	[01:40:02] 總之我覺得 partial evaluation 也是模糊了 compile time 跟 runtime
2013-10-01 19:55:10	godfat	[01:40:02] 其實只是看把那條線放在哪裡而已，左邊是 compile time, 右邊是 runtime
2013-10-01 19:55:10	godfat	[01:40:02] 都是相對的
2013-10-01 19:55:10	CindyLinz	[01:42:37] 對對, 我也覺得這樣.. 沒有明確的界限, 可是是用來描述兩類不同的性質, 思考問題或規劃語言都是蠻有用的
2013-10-01 19:55:10	godfat	[01:53:52] 對啊，所以就算在 ruby 裡我也常常會說 compile time XD
2013-10-01 19:55:10	godfat	[01:53:53] 不過有時候會講成 parse time 以免誤會...
2013-10-01 19:55:10	monochrom	[01:57:23] 到最後, 我認為, 理論上不必分開, 實際上分開為了方便工作. 因此怎樣分法只看方便, 沒有固定分法.
2013-10-01 19:55:10	godfat	[01:58:40] 同意
2013-10-01 19:55:10	monochrom	[02:03:36] 就正如, "編譯時"本身還再細分"詞法"(lexicon, 用regular grammar), "語法"(context-free grammar), "型別檢查", "出機械碼". 把它們分開了, 每一個都容易做. 但誰說一定要分開呢? 把四個迴圈用 fusion law 合成一個絕到可能, 只不過你會成為瘋狂科學家而已. XD
2013-10-01 19:55:10	monochrom	[02:08:16] 唔! 有一天要試做一下!
2013-10-01 19:55:10	CindyLinz	[02:14:41] perl 的 yapp 和 haskell 的 happy 就沒有特別一個 regular 處理的 lexer 了. 它們都是直接接受 token list, 而這 token list 的產生
2013-10-01 19:55:10	CindyLinz	[02:15:20] perl 的 regex 是 context free grammar; 然後 haskell 就隨意寫函數來生, 算是.... turing complete 等級? XD
2013-10-01 19:55:10	monochrom	[02:16:05] 通常用 lex (C) 或 alex (Haskell)
2013-10-01 19:55:10	CindyLinz	[02:16:39] 我看 Happy 自己的 tutorial 就直接寫一排函數做了 ^^|
2013-10-01 19:55:10	monochrom	[02:17:54] 哈哈
2013-10-01 19:55:10	CindyLinz	[02:23:35] 來看看... 好奇 alex 有什麼特出之處 :Q   因為 Haskell 裡面 regex 的 lib 也好多個, 不知道 alex 有什麼獨立存在的意義
2013-10-01 19:55:10	monochrom	[02:26:12] 形而上 (meta) 問題: 怎麼逢星期四晚, 星期五凌晨, 各位台灣的朋友不願睡呢? XD
2013-10-01 19:55:10	monochrom	[02:27:33] "今夜不睡覺, 明天開派對"? XD
2013-10-01 19:55:10	monochrom	[02:29:11] "奉獻青春給公司, 不如奉獻春宵給 Haskell, 回到公司再睡過"? XD
2013-10-01 19:55:10	monochrom	[02:30:59] P.S. 昨晚因咖啡而不眠, 結果拿起書學 category theory 裏的 adjunction!
2013-10-01 19:55:10	monochrom	[02:33:52] 如果你自己用 regex lib, 你仍要自己加一些配套來出 token. 如果用 alex, 它替你加配套.
2013-10-01 19:55:10	monochrom	[02:35:12] 正如在 C 界有 lex 一樣
2013-10-01 19:55:10	MnO2	[09:06:47] https://plus.google.com/115504368969270249241/posts/EpQodRSVQ3r   要開 strict 的 pragma 了 xD
2013-10-01 19:55:10	MnO2	[09:38:02] http://www.cs.cmu.edu/~rwh/talks/mlw13.pdf  Harper @mlw13
2013-10-01 19:55:10	MnO2	[09:41:38] http://splashcon.org/2013/ <-- OOP 的 top conference
2013-10-01 19:55:10	MnO2	[09:45:35] https://mail.mozilla.org/pipermail/rust-dev/2013-September/005804.html  <-- rust 0.8 !
2013-10-01 19:55:10	CindyLinz	[11:15:01] #hime 其實是政治版對吧 ._.
2013-10-01 19:55:10	_13h	[11:27:42] CindyLinz: 的確是有些人比較喜歡政治話題啦，不過還有遊戲 linux 或音樂相關話題
2013-10-01 19:55:10	CindyLinz	[11:31:04] 我以為 #hime 是一個輸入法啊.. XD
2013-10-01 19:55:10	b4283	[11:32:36] 從 #gcin 時代以來一直都是這個風格 XD
2013-10-01 19:55:10	kanru	[11:54:54] so I /part #hime :P
2013-10-01 19:55:10	_13h	[12:00:19] 還有沒有可以聊輸入法的 irc channel ? XD
2013-10-01 19:55:10	CindyLinz	[13:41:31] cschat 可以吧?
2013-10-01 19:55:10	CindyLinz	[13:41:44] 欸, 還是說 hime 的 maintainer 都在 #hime, 所以... ^^|
2013-10-01 19:55:10	_13h	[13:42:21] 當然都在那邊啊
2013-10-01 19:55:10	_13h	[13:44:25] 我是有訂 chewing 的 mail list... 不過我不太喜歡 mail list 的型式XD
2013-10-01 19:55:10	b4283	[17:33:11] 形式
2013-10-01 19:55:10	letoh	[17:48:05] 嗯  形式
2013-10-01 19:55:10	suhorng	[21:56:51] hashcat: 你知道resolution在弄什麼嗎?
2013-10-01 19:55:10	suhorng	[22:00:02] 查Prolog發現有提到resolution, 可是不知道為什麼會有關@@
2013-10-01 19:55:10	hashcat	[22:06:39] 什麼跟啥嚜有關
2013-10-01 19:55:10	suhorng	[22:09:04] 不知道為什麼 Prolog 會提到 resolution? miniKanren 的實作重頭到尾只有提到 unification, 書的介紹完全沒提到 resolution, 我也不知道那是什麼囧
2013-10-01 19:55:10	hashcat	[22:10:35] resolution就是把左邊的unification結果, 帶入右邊的變數後繼續作這樣
2013-10-01 19:55:10	suhorng	[22:11:58]  ":-" 的左邊跟右邊嗎?
2013-10-01 19:55:10	hashcat	[22:12:37] 嗯嗯
2013-10-01 19:55:10	suhorng	[22:12:37] 原來如此
2013-10-01 19:55:10	hashcat	[22:55:31] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.68.2227
2013-10-01 19:55:10	hashcat	[22:56:07] 比較新的prolog vm
2013-10-01 19:55:10	letoh	[22:56:43] warren 的是 1977 那篇嗎?
2013-10-01 19:55:10	hashcat	[22:57:52] 我只記得是70年代
2013-10-01 19:55:10	suhorng	[23:00:49] 主要是我最近看 The Reasoned Schemer 學 miniKanren, 他跟 Prolog 有點像又不一樣...
2013-10-01 19:55:10	hashcat	[23:01:12] 老中青三代
2013-10-01 19:55:10	hashcat	[23:01:36] 也沒看過長一樣的
2013-10-01 19:55:10	suhorng	[23:02:25] 他寫的時候是可以弄 fresh variable, 然後寫很多 goals (== v w) 之類(也可以是data)
2013-10-01 19:55:10	letoh	[23:02:46] https://github.com/clojure/core.logic/wiki/Differences-from-The-Reasoned-Schemer
2013-10-01 19:55:10	suhorng	[23:02:47] 再加上 cond 控制 structure (backtracking在這部份)
2013-10-01 19:55:10	suhorng	[23:02:57] _13h: (woot)
2013-10-01 19:55:10	suhorng	[23:03:47] 咦? 這是code跟書上講的的差別? 我載下來的 code 跟他這個描述完全不同耶
2013-10-01 19:55:10	letoh	[23:04:01] 應該是說 clojure 的實作?
2013-10-01 19:55:10	suhorng	[23:04:10] 喔!原來是這樣
2013-10-01 19:55:10	letoh	[23:04:17] core.logic
2013-10-01 19:55:10	suhorng	[23:05:25] 他書的寫法讓我好想跟 Agda 程式一樣大量用符號, 可是很多 Scheme implementation 在 Windows 上 unicode 支援又不太好 XD
2013-10-01 19:55:10	CindyLinz	[23:20:24] 用顏文字啦~~~
2013-10-01 19:55:10	Yu_lin	[23:31:43] type Bool = T_T | ^_^ 這樣嗎？XD
2013-10-01 19:55:10	CindyLinz	[23:33:21] Yu_Lin: 我想的主要是原本想用數學符號, 改成 |-  _|_ 之類的去接啦 XD
2013-10-01 19:55:10	suhorng	[23:49:35] CindyLinz: constructor用冒號開頭也可以用符號XD
2013-10-01 19:55:10	monochrom	[00:28:34] 我喜歡 type Bool = T_T | ^_^
2013-10-01 19:55:10	favonia	[03:11:07] O_o | o_o
2013-10-01 19:55:10	letoh	[03:11:41] fO_o | o_o?
2013-10-01 19:55:10	MnO2	[10:58:12] http://registrano.com/events/5e35ff  用這背景是有人要結婚了嗎? wwwww
2013-10-01 19:55:10	monochrom	[11:02:25] 甚麼是 "滾來滾去"?
2013-10-01 19:55:10	Yu_lin	[11:02:54] 這背景......XDDD
2013-10-01 19:55:10	monochrom	[11:03:49] 無用的tautology: 每日都有人結婚 XD
2013-10-01 19:55:10	Yu_lin	[11:06:18] 這次的簡報會釋出嗎？
2013-10-01 19:55:10	monochrom	[11:08:18] 我最想在完了後看Cindy的slide或程式, 因為我太菜鳥, 不會專誠由多倫多飛來台北看 XD
2013-10-01 19:55:10	Yu_lin	[11:11:37] 其實我也是想看 Cindy 的 compiler 怎麼做......
2013-10-01 19:55:10	CindyLinz	[11:45:22] 唔.. 可是簡報上面是打算寫結語, 主要是對著程式碼講欸 @@"
2013-10-01 19:55:10	CindyLinz	[11:46:53] 目前準備了 12 個 .y 檔.. 大部分是標序號, 像是 h1, h2, h3, h3-1, h3-2
2013-10-01 19:55:10	CindyLinz	[11:47:06] 可以相臨編號的作 diff 來看
2013-10-01 19:55:10	monochrom	[11:47:48] 其實程式碼加些提示, 可能就夠了. 真的看不明再算.
2013-10-01 19:55:10	CindyLinz	[11:48:08] 不然我來把各檔要講的點加到註解好了
2013-10-01 19:55:10	CindyLinz	[11:48:39] 然後.. 在裡面寫「下一個檔請看 oooo.y 檔」XD
2013-10-01 19:55:10	CindyLinz	[12:01:28] MnO2: jaiyalas 說只是新學期新氣象.....  wwww
2013-10-01 19:55:10	MnO2	[12:11:14] https://twitter.com/ccshan/status/383625029017432064   回應讓我大笑 xD
2013-10-01 19:55:10	MnO2	[12:12:58] https://twitter.com/ezyang/status/382939785750650880  這個也蠻好笑的
2013-10-01 19:55:10	MnO2	[12:15:26] http://xkcd.com/1270/
2013-10-01 19:55:10	MnO2	[12:18:45] https://twitter.com/runarorama/status/383680373571342336/photo/1  這太靠杯了
2013-10-01 19:55:10	CindyLinz	[12:20:45] XDDD
2013-10-01 19:55:10	MnO2	[12:21:44] https://twitter.com/plragde/status/383657145499021313  Oleg 狂中槍 xD
2013-10-01 19:55:10	CindyLinz	[12:22:01] 那如果這投影片要譯成台灣版的話, 把 Oleg 換成柯向上好了.. 認識的人比較多 (逃)
2013-10-01 19:55:10	CindyLinz	[12:23:47] 看了這個.. # 09:06 < MnO2> https://plus.google.com/115504368969270249241/posts/EpQodRSVQ3r   要開 strict 的 pragma 了 xD
2013-10-01 19:55:10	MnO2	[12:24:22] 恩?
2013-10-01 19:55:10	CindyLinz	[12:24:27] 在想, 好像 GHC 的這種 pragma 常是以 module 為單位.. 但其實以 function 為單位好像也很好, 可能更好啊? @@"
2013-10-01 19:55:10	CindyLinz	[12:25:01] 啊, 大概是 Haskell 的 layout format 的問題, 不方便確定這個 pragma 屬於哪一個函數 orz
2013-10-01 19:55:10	CindyLinz	[12:25:31] 如果要求 {-# .... -} 也要縮到對應位置行不行? (思)
2013-10-01 19:55:10	CindyLinz	[12:26:16] 因為我從 perl 來的經驗.. perl 的這種 pragma 的東西, 都是在 package 為單位, 或是任何一個 block 為單位
2013-10-01 19:55:10	CindyLinz	[12:26:46] 想來 Haskell 以 layout format 的時候, block 的界限比較不明顯
2013-10-01 19:55:10	MnO2	[12:28:05] 不知道耶，可能要看 compiler 設計怎樣比較好改吧 xD
2013-10-01 19:55:10	CindyLinz	[12:28:06] perl 的 pragma 包含: source 是不是 utf8 格式 (一串 utf8 bytes 要視為一個字元, 還是n個字元), warning 的項目開關, 甚至是不同 perl 版本..
2013-10-01 19:55:10	MnO2	[12:28:13] https://twitter.com/runarorama/status/383648832174583808/photo/1/large   終於看到長甚麼樣子
2013-10-01 19:55:10	MnO2	[12:29:23] https://vimeo.com/75490786  BPFG 看起來有不少 video 可以看
2013-10-01 19:55:10	monochrom	[12:48:47] 我在 Wii 上玩過 Mario 賽車, 所以同意 "the bullet is enormous there is no escaping" XD
2013-10-01 19:55:10	monochrom	[12:58:30] monad/comonad annihilation 實在太強了! XD
2013-10-01 19:55:10	MnO2	[13:46:07] https://gist.github.com/leroux/6395804
2013-10-01 19:55:10	Yu_lin	[17:19:32] Orz|||
2013-10-01 19:55:10	Yu_lin	[17:20:20] 為了上 Courses 的 PL 課，我必須安裝 sml/nj，然後這東西搞掉我兩天的時間Orz|||
2013-10-01 19:55:10	CindyLinz	[17:20:58] 免錢的最貴.. (誤)
2013-10-01 19:55:10	Yu_lin	[17:22:48] 同樣是 sml 的實作品，mlton 可以讓我很無腦的用 src2pkg 一個指令搞定，sml/nj 則讓我花了很多時間在嘗試奇怪的事情上Orz|||
2013-10-01 19:55:10	CindyLinz	[17:24:32] 我也討厭這種事 @@"
2013-10-01 19:55:10	Yu_lin	[17:26:04] 其實我覺得最可怕的是 sml/nj 的實作是用 sml 寫的，所以需要有一個 sml 實作品才能編譯
2013-10-01 19:55:10	CindyLinz	[17:28:16] 它自己沒有內附標準的 bootstrap 流程喔? @@"
2013-10-01 19:55:10	Yu_lin	[17:28:56] 有，不過 sml/nj 沒有提供 64 bit 的版本
2013-10-01 19:55:10	CindyLinz	[17:29:45] hmm.... 不過你都做完了 XD
2013-10-01 19:55:10	CindyLinz	[17:29:56] 想說你當初沒有考慮開一個 32bit 的 vm?
2013-10-01 19:55:10	Yu_lin	[17:30:11] 如果是其他發行版，把 glibc-devel 之類的裝一裝，問題就解決了，但我用的是 slackware，所以要自己看 mutillib 怎麼弄
2013-10-01 19:55:10	CindyLinz	[17:30:18] 反正是學習, 應該能用就好
2013-10-01 19:55:10	Yu_lin	[17:31:22] 對阿，學了很多，我本來還想用 mlton 去編 sml/nj.....Orz|||
2013-10-01 19:55:10	CindyLinz	[17:31:34] 「學了很多」.... XDDDD
2013-10-01 19:55:10	hychen	[18:09:05] sml/nj 有ppa
2013-10-01 19:55:10	hychen	[18:09:16] in Ubuntu
2013-10-01 19:55:10	letoh	[18:57:28] sml/nj 不是很好裝嗎?
2013-10-01 19:55:10	letoh	[18:57:45] 除非有特殊需求  不然照預設 config 編譯就好了
2013-10-01 19:55:10	letoh	[18:58:12] Yu_lin: 我也是 slackware  不過你應該是因為 64bit 比較麻煩
2013-10-01 19:55:10	Yu_lin	[19:01:01] 對阿，問題就出在 64bit
2013-10-01 19:55:10	letoh	[19:20:21] 我的 64bit 是跑在 vm 裡  平常其實也用不太到
2013-10-01 19:55:10	letoh	[19:20:53] 32bit 環境已經用很多年沒重裝過了  都是一路一直升級上來的
2013-10-01 19:55:10	godfat	[20:08:12] 問個 vim 的問題？ orz
2013-10-01 19:55:10	godfat	[20:08:12] 我想編輯一個 zip 檔，但不想把檔名改成 .zip
2013-10-01 19:55:10	godfat	[20:08:12] 有啥方法嗎？ set filetype=zip 看來沒有用..
2013-10-01 19:55:10	b4283	[20:10:04] symlink ? XD
2013-10-01 19:55:10	godfat	[20:10:31] ~.~ 試試... 不過沒有指令可以切換模式嗎？ 囧
2013-10-01 19:55:10	petercommand	[20:11:05] godfat: hard link...
2013-10-01 19:55:10	godfat	[20:12:35] = =... symlink 看來是可以，我想 hard link 應該也行
2013-10-01 19:55:10	godfat	[20:12:35] 但還是得建額外檔案 = =
2013-10-01 19:55:10	godfat	[20:14:44] 現在在做的是修改 sublime text 的 package
2013-10-01 19:55:10	godfat	[20:14:45] sublime text 3 的 package 是 zip 檔，雖然檔名不是
2013-10-01 19:55:10	godfat	[20:14:45] 裡面的 ruby syntax highlighting 是爛的，想修好
2013-10-01 19:55:10	godfat	[20:18:49] 修好了，vim 開 zip 這件事先放著好了 orz
2013-10-01 19:55:10	Yu_lin	[20:19:08] :!mv % 想要的檔名
2013-10-01 19:55:10	Yu_lin	[20:19:11] :q!
2013-10-01 19:55:10	godfat	[20:19:22] mv.... = =
2013-10-01 19:55:10	godfat	[20:19:53] 我以為可以有 :bufmode zip 這樣就行了
2013-10-01 19:55:10	CindyLinz	[20:21:03] 那你附檔名是什麼?
2013-10-01 19:55:10	CindyLinz	[20:21:13] 幫這個附檔名設 au.. XD
2013-10-01 19:55:10	godfat	[20:22:16] sublime-package...
2013-10-01 19:55:10	godfat	[20:22:16] 剛剛查到的都是這個方式，可是我不想污染我的設定 XD
2013-10-01 19:55:10	godfat	[20:22:16] 只改這一次而已 @_@
2013-10-01 19:55:10	godfat	[20:22:16] 而且我可以想像會有很多東西是 zip 包起來的，也沒副檔名
2013-10-01 19:55:10	petercommand	[20:30:04] au?
2013-10-01 19:55:10	godfat	[20:31:49] au 可以不設副檔名嗎？
2013-10-01 19:55:10	petercommand	[20:32:43] 甚麼是au阿
2013-10-01 19:55:10	godfat	[20:33:10] vim 裡面設檔案關聯的指令（的樣子，我不熟）
2013-10-01 19:55:10	petercommand	[20:34:44] 我對vim不熟= =
2013-10-01 19:55:10	Yu_lin	[20:37:28] autocmd?
2013-10-01 19:55:10	godfat	[20:39:38] 原來 au 就是 autocmd
2013-10-01 19:55:10	godfat	[20:39:38] 我一直想試 BufRead zip 之類的但都失敗
2013-10-01 19:55:10	Yu_lin	[20:40:10] *zip 或 .*zip 的樣子？
2013-10-01 19:55:10	godfat	[20:40:35] 我要編輯的檔案裡沒有 zip 字樣，所以我猜不行？
2013-10-01 19:55:10	Yu_lin	[20:43:48] BufRead 是根據檔名來判斷，如果檔名沒有 zip，就沒辦法用 BufRead 了
2013-10-01 19:55:10	godfat	[20:44:08] 果然，好吧 :(
2013-10-01 19:55:10	CindyLinz	[20:46:33] 有可以看檔案內容的 rule 的樣子... 可是我不會 (小聲)
2013-10-01 19:55:10	CindyLinz	[20:47:37] zip 檔案開頭應該是 PK
2013-10-01 19:55:10	petercommand	[20:47:42] 像file那樣嗎?
2013-10-01 19:55:10	godfat	[20:47:57] 所以要弄自動判斷嗎？ @_@
2013-10-01 19:55:10	godfat	[20:47:57] 那也許已經有人做了，用 file 判斷之類的
2013-10-01 19:55:10	godfat	[20:48:09] 不過我以為手動切換比較簡單 -_-
2013-10-01 19:55:10	CindyLinz	[20:48:27] 手動切換你幹嘛還抗拒手動改一下附檔名 XD
2013-10-01 19:55:10	godfat	[20:48:49] 那要 mv 兩次 = =... ln 一下確實還比較快 XD
2013-10-01 19:55:10	godfat	[20:51:29] 說到這個，我想在自己的 automation task 中，不給任何選項時列出所有指令
2013-10-01 19:55:10	godfat	[20:51:29] 像是 make 時列出 make install, make all, 等等
2013-10-01 19:55:10	godfat	[20:51:29] 實際上是 rake, 我希望在打 rake 不給選項時，等同於 rake --tasks 列出所有指令
2013-10-01 19:55:10	godfat	[20:51:29] 不過發現最穩的方法是重跑一次 process... 不知道有沒有更好的作法 :(
2013-10-01 19:55:10	godfat	[20:51:29] 重跑一次 process 有點慢...
2013-10-01 19:55:10	suhorng	[21:03:50] mno2: Standard ML 那一條是什麼意思阿?
2013-10-01 19:55:10	Yu-Lin	[21:13:43] 哪一條？
2013-10-01 19:55:10	suhorng	[21:19:30] > 12:11:14 <MnO2> https://twitter.com/ccshan/status/383625029017432064   回應讓我大笑 xD
2013-10-01 19:55:10	lambdabot	[21:19:31]   Not in scope: data constructor `MnO2'Not in scope: `https'Precedence parsin...
2013-10-01 19:55:10	Yu-Lin	[22:02:09] 不過如果想自動切換 vim 的檔名，還是可以用 au 搭配 vimscript 去做XD（剛剛試了一下
2013-10-01 19:55:10	Yu-Lin	[22:02:42] 除了 BufRead 還有其他的，例如 VimLeave 之類的
2013-10-01 19:55:10	godfat	[22:05:37] 教一下？ XD 感謝 @_@
2013-10-01 19:55:10	MnO2_	[22:12:28] suhorng: 我不確定耶，應該是在調侃 standard ML 某些 strict 的性質吧。但其實我不會 SML
2013-10-01 19:55:10	godfat	[22:12:48] 我以為是在調侃美國人？ XD
2013-10-01 19:55:10	suhorng	[22:13:48] 那回應是為什麼@_@
2013-10-01 19:55:10	godfat	[22:14:22] Bob Harper 很愛 SML XD
2013-10-01 19:55:10	godfat	[22:14:48] @_@
2013-10-01 19:55:10	godfat	[22:14:48] Robert Harper... 看來不是 Bob XD
2013-10-01 19:55:10	godfat	[22:14:59] 看來我搞錯人了 orz
2013-10-01 19:55:10	b4284	[22:15:59] bob 好像就是 robert
2013-10-01 19:55:10	suhorng	[22:16:25] (!) make sense!
2013-10-01 19:55:10	suhorng	[22:16:29] http://en.wikipedia.org/wiki/Robert_Harper_(computer_scientist)
2013-10-01 19:55:10	suhorng	[22:17:00] 他是 Standard ML 定義的作者之一?
2013-10-01 19:55:10	godfat	[22:17:00] ...=_= 難怪我有這樣的連結...
2013-10-01 19:55:10	godfat	[22:17:06] 我記得是
2013-10-01 19:55:10	b4284	[22:17:27] 應該說 bob 是 robert 常用的匿稱
2013-10-01 19:55:10	b4284	[22:18:18] 就好像常叫的 bill gates 其實名字是 william
2013-10-01 19:55:10	godfat	[22:18:48] 是喔 @@ Bill 是假名？
2013-10-01 19:55:10	suhorng	[22:19:01] 原來不是名字 @_@
2013-10-01 19:55:10	b4284	[22:19:06] William Henry "Bill" Gates
2013-10-01 19:55:10	b4284	[22:19:41] 三代 (誤)
2013-10-01 19:55:10	Yu-Lin	[22:26:50] 我剛剛翻文件，vim 就算不給副檔名，它也會自動根據檔案內容判斷格式，我猜應該有個可以用來顯示格式的指令才對，但還沒找到
2013-10-01 19:55:10	Yu-Lin	[22:28:03] 然後你可以設定一個 function 用來 rename 或是用 file 來給檔案一個新的名稱，再寫另一個用來復原檔案名稱
2013-10-01 19:55:10	Yu-Lin	[22:29:06] 前面那個 function 用在 autocmd BufRead 或其他可以用來判斷檔案格式的地方，後面那個用在 autocmd BufWrite 或 VimLeave 之類的
2013-10-01 19:55:10	Yu-Lin	[22:30:27] 你可以參考這篇
2013-10-01 19:55:10	godfat	[22:30:27] 了解... 看來不是很好弄 @_@
2013-10-01 19:55:10	godfat	[22:30:28] 感謝 orz..
2013-10-01 19:55:10	Yu-Lin	[22:30:28] http://vim.wikia.com/wiki/Write_your_own_Vim_function
2013-10-01 19:55:10	Yu-Lin	[22:30:46] 或是 :help function 來翻文件
2013-10-01 19:55:10	godfat	[22:31:14] 決定還是先用 ln -s... XD
2013-10-01 19:55:10	Yu-Lin	[22:31:28] XD
2013-10-01 19:55:10	Yu-Lin	[22:32:47] 我之前好像有把 F5 設成 autocmd BufRead *html :map <F5> :!chrome %<CR> 這樣過
2013-10-01 19:55:10	Yu-Lin	[22:36:20] http://www.cs.nyu.edu/leunga/MLRISC/Doc/html/ 有人玩過 MLRISC 這個東西嗎？
2013-10-01 19:55:10	Yu-Lin	[22:36:29] 剛剛看 sml/nj 看到的
2013-10-01 19:55:10	godfat	[22:47:35] 那是按 f5 時會重新讀取檔案的意思嗎？
2013-10-01 19:55:10	Yu-Lin	[22:49:45] 我那是用在 html 上的，如果副檔名是 html，按 F5 就會調用外部的 chrome 去跑這整份程式碼
2013-10-01 19:55:10	godfat	[22:51:06] 喔喔。我晚點研究看看，謝啦
2013-10-01 19:55:10	letoh	[22:51:39] godfat: 你都用什麼 editor 呢? 平常不是用 vim ?
2013-10-01 19:55:10	godfat	[22:52:39] 目前平常是用 sublime text XD vim 是懶得離開 terminal 時用的 @@
2013-10-01 19:55:10	letoh	[22:53:00] 原來如此
2013-10-01 19:55:10	godfat	[22:53:15] 是有想轉移到 vim 上，不過試了很多次都有點失敗 orz
2013-10-01 19:55:10	godfat	[22:53:16] 不少我需要的功能，在 vim 上很難做或是做不到之類的
2013-10-01 19:55:10	letoh	[22:54:55] 那是什麼神奇的功能啊?
2013-10-01 19:55:10	hashcat	[22:55:23] 用emacs好了
2013-10-01 19:55:10	hashcat	[22:56:08] 雖說會lag, 快速鍵還會重疊到
2013-10-01 19:55:10	godfat	[22:57:26] 我有點忘記了，好像跟 ctrlp 和 nerdtree 有點關係
2013-10-01 19:55:10	godfat	[22:57:27] 例如我希望 nerdtree 能把任意檔案當成 project 內容，
2013-10-01 19:55:10	godfat	[22:57:27] 而不是真的根據硬碟目錄
2013-10-01 19:55:10	godfat	[22:57:27] 諸如此類的
2013-10-01 19:55:10	godfat	[22:57:27] 後來想說乾脆自己改，但發現 vim script 用起來太痛苦了，
2013-10-01 19:55:10	godfat	[22:57:27] 就算了....
2013-10-01 19:55:10	godfat	[22:57:46] emacs 看看吧 ~.~ 暫時還沒空重摸工作工具 orz...
2013-10-01 19:55:10	hashcat	[22:58:22] emacs有兩種, 一種是xwindows的, 一種terminal
2013-10-01 19:55:10	letoh	[22:58:29] vim 不一定要用 vim script，可以吃 python..
2013-10-01 19:55:10	letoh	[22:58:46] emacs 有很多種XD  但本家只有一種
2013-10-01 19:55:10	hashcat	[22:58:51] xwindows不太需要記憶東西
2013-10-01 19:55:10	CindyLinz	[22:59:13] 想寫 script 的話應該 emacs 比 vim 適合?
2013-10-01 19:55:10	letoh	[22:59:19] 如果你說的是 xemacs，那的確是不是本家的東西
2013-10-01 19:55:10	hashcat	[22:59:23] terminals那種也就 alt + `
2013-10-01 19:55:10	CindyLinz	[22:59:39] 不過換一種不同的檔案類型, 就像換了整套環境的樣子
2013-10-01 19:55:10	b4284	[22:59:42] 該是 gtk 版
2013-10-01 19:55:10	CindyLinz	[22:59:55] vim 會比較相似
2013-10-01 19:55:10	hashcat	[23:00:01] 我說得就是emacs
2013-10-01 19:55:10	letoh	[23:00:02] 其實 vim 也可以  只是比較弱一點  可能得用 ft 來切換
2013-10-01 19:55:10	hashcat	[23:00:05] 前面沒x
2013-10-01 19:55:10	letoh	[23:00:33] 嗯  emacs-x11 跟 emacs-no-x11 都算本家的
2013-10-01 19:55:10	hashcat	[23:01:29] 單手沒辦法用可能是缺點
2013-10-01 19:55:10	godfat	[23:01:47] 我之前用 aquaemacs 的印象是都不太好... XD
2013-10-01 19:55:10	CindyLinz	[23:02:01] 單手... 可以練單手 dvorak layout 作補嘗.. (誤)
2013-10-01 19:55:10	hashcat	[23:02:03] 也不是完全沒辦法, 就是要繞比較大圈
2013-10-01 19:55:10	letoh	[23:02:30] 我還在用 vim 時其實也會寫一些 script，其實 vim 提供的 api 還不少，能做的事也很多... 問題就是跟 terminal 的整合太弱
2013-10-01 19:55:10	letoh	[23:02:57] 不過就算現在有改善，也回不去了XD
2013-10-01 19:55:10	letoh	[23:06:34] aquaemacs 好像是 mac 上的首選，但從來沒用過，不曉得有什麼不同@_@
2013-10-01 19:55:10	godfat	[23:08:49] 我覺得應該是我不太適應 emacs orz...
2013-10-01 19:55:10	godfat	[23:09:01] 之前想改個字型也讓我覺得好麻煩 @@
2013-10-01 19:55:10	letoh	[23:09:42] 只是改字型的話好像跟 vim 差不多
2013-10-01 19:55:10	godfat	[23:10:25] 我可能需要從 console 介面開始
2013-10-01 19:55:10	letoh	[23:10:27] 不過我其實都在 terminal，所以很少遇到字型設定問題XD
2013-10-01 19:55:10	letoh	[23:11:10] 不管是 console 或 gui 界面的使用都一樣啊  但我個人建議剛開始先從 gui 開始
2013-10-01 19:55:10	petercommand	[23:11:39] letoh: gui有menu可以按呀
2013-10-01 19:55:10	letoh	[23:11:44] emacs 有些函式設計不良，強迫要傳入 mouse event，在 console 會沒辦法呼叫
2013-10-01 19:55:10	godfat	[23:12:27] gui 我是按 menu 按到不能接受 XD
2013-10-01 19:55:10	petercommand	[23:12:34] XD
2013-10-01 19:55:10	letoh	[23:12:40] 按 menu ?
2013-10-01 19:55:10	godfat	[23:12:53] 就是覺得那 menu 設計實在太恐怖了
2013-10-01 19:55:10	letoh	[23:13:03] 唔  沒有 menu 也能用，我基本上都是拿掉 menubar 的
2013-10-01 19:55:10	petercommand	[23:13:12] XD
2013-10-01 19:55:10	godfat	[23:13:15] 所以想說從 console 著手應該比較適合我
2013-10-01 19:55:10	letoh	[23:14:13] 其實都一樣啦  但 gui 能用的功能比較完整  例如 speedbar，還不習慣 emacs 的人用 console 版的 speedbar 會瘋掉...
2013-10-01 19:55:10	hashcat	[23:14:33] 我玩eclipse玩到被eclipse玩
2013-10-01 19:55:10	letoh	[23:14:42] 練到可以在心中切換 frame 後就沒問題了XD
2013-10-01 19:55:10	hashcat	[23:15:04] 裝了那個clojure plugin後, 補全def只會出現defn
2013-10-01 19:55:10	letoh	[23:15:09] eclipse 沒辦法在 terminal 用，這對我來說是沒辦法用的XD
2013-10-01 19:55:10	hashcat	[23:15:10] 求救
2013-10-01 19:55:10	letoh	[23:15:35] 我應該有 90% 的環境需求都是需要 terminal
2013-10-01 19:55:10	hashcat	[23:15:36] 明明就有defprotocol之類的
2013-10-01 19:55:10	hashcat	[23:16:08] 那除了emacs別無選擇
2013-10-01 19:55:10	godfat	[23:16:55] 暫離..
2013-10-01 19:55:10	letoh	[23:16:57] 剩下的大概就是在 x11 畫圖或在 windows 寫 mfc 程式XD
2013-10-01 19:55:10	hashcat	[23:17:37] eclipse裝消維
2013-10-01 19:55:10	hashcat	[23:19:00] 光x11也能畫圖
2013-10-01 19:55:10	hashcat	[23:19:30] 裝個kde不是很好嘛
2013-10-01 19:55:10	hashcat	[23:20:00] 無聊還可以把桌面轉來轉去
2013-10-01 19:55:10	letoh	[23:20:23] 我只要能跑 gimp 的環境就可以
2013-10-01 19:55:10	hashcat	[23:20:45] xmonad跟mate混合不錯
2013-10-01 19:55:10	letoh	[23:20:48] 其他多餘的東西不太喜歡裝XD
2013-10-01 19:55:10	CindyLinz	[23:20:51] mate?
2013-10-01 19:55:10	hashcat	[23:21:20] 有人不喜歡gnome 3就把2分離出來
2013-10-01 19:55:10	hashcat	[23:21:25] 叫mate
2013-10-01 19:55:10	CindyLinz	[23:21:31] 喔喔
2013-10-01 19:55:10	hashcat	[23:21:48] xmonad能讓工作列整個消失不見
2013-10-01 19:55:10	CindyLinz	[23:21:52] 那 letoh 現在是用純的 xmonad?
2013-10-01 19:55:10	hashcat	[23:22:23] 也可以變回有mate工作列
2013-10-01 19:55:10	hashcat	[23:22:43] 變不見的狀況跟只開x11樣子很像
2013-10-01 19:55:10	b4284	[23:24:03] mate 很好用
2013-10-01 19:55:10	letoh	[23:24:56] 我沒有 ghc 呀，應該沒辦法跑 xmonad XD
2013-10-01 19:55:10	letoh	[23:25:18] 還是只有 hugs 也能跑?
2013-10-01 19:55:10	CindyLinz	[23:25:24] 對哄!
2013-10-01 19:55:10	letoh	[23:26:49] 可能哪天受不了就會把 ghc 裝起來了XD  到時候再試試 xmonad
2013-10-01 19:55:10	hashcat	[23:27:29] 發行版都有提供binary版吧
2013-10-01 19:55:10	letoh	[23:28:12] 不過我真的不需要特殊的 wm... 以前用一陣子 twm 和 evilwm，提供的功能已經多到用不完
2013-10-01 19:55:10	CindyLinz	[23:29:49] hashcat: xmonad 如果沒有配合 ghc 的話, config 不能改欸 ^^|
2013-10-01 19:55:10	hashcat	[23:30:53] 沒注意過
2013-10-01 19:55:10	letoh	[23:32:49] 我比較需要一個很穩定的 terminal 和一個很好改的 text editor XD
2013-10-01 19:55:10	hashcat	[23:34:18] 怎麼聽都是emacs
2013-10-01 19:55:10	hashcat	[23:34:46] 順便講eclipse上面一票plugin都不錯用
2013-10-01 19:55:10	letoh	[23:35:21] 我知道啊  因為弄 android 時只能先配合用 eclipse XD
2013-10-01 19:55:10	hashcat	[23:35:56] XL跟unified parallel C都有plugin
2013-10-01 19:55:10	hashcat	[23:37:59] http://upc.lbl.gov/
2013-10-01 19:55:10	letoh	[23:38:26] xl 是指 ibm 那個?
2013-10-01 19:55:10	hashcat	[23:38:30] 看起來就很好玩, 雖說用不上
2013-10-01 19:55:10	hashcat	[23:38:32] 嗯嗯
2013-10-01 19:55:10	letoh	[23:38:51] 唔  你在哪個環境用 xl 呢?
2013-10-01 19:55:10	hashcat	[23:39:04] 沒用過
2013-10-01 19:55:10	letoh	[23:39:13] 喔喔喔
2013-10-01 19:55:10	hashcat	[23:39:31] 只是eclipse看到有全套parallel套裝就順便裝了
2013-10-01 19:55:10	letoh	[23:39:59] 我以為你在 aix 之類的環境上工作
2013-10-01 19:55:10	hashcat	[23:40:01] 想存錢作集群
2013-10-01 19:55:10	hashcat	[23:40:38] 只是妄想集群所以先學一下
2013-10-01 19:55:10	MnO2_	[23:41:53] suhorng, godfat: Bob 的確是 Robert Harper 啊。
2013-10-01 19:55:10	MnO2_	[23:41:59] Bob = Robert
2013-10-01 19:55:10	MnO2_	[23:42:30] Bill = William
2013-10-01 19:55:10	petercommand	[23:44:42] 群集和集群是一樣的吧?
2013-10-01 19:55:10	hashcat	[23:45:10] 熊貓跟貓熊應該也是一樣
2013-10-01 19:55:10	suhorng	[23:45:22] mno2: 喔喔從名字來的!!
2013-10-01 19:55:10	b4284	[23:46:28] 叢集表示：
2013-10-01 19:55:10	petercommand	[23:46:38] XD
2013-10-01 19:55:10	CindyLinz	[23:52:44] cons 跟 snoc 也一樣喔~ (誤)
2013-10-01 19:55:10	Yu-Lin	[00:02:31] 我愈來愈搞不懂 sml 啦XD
2013-10-01 19:55:10	Yu-Lin	[00:03:55] 除了 sml/nj 用 MLRISC，Mlton 也用
2013-10-01 19:55:10	Yu-Lin	[00:04:12] 看 MLRISC 還看到了用 G machine 實作的 haskell
2013-10-01 19:55:10	MnO2_	[00:06:43] http://english.stackexchange.com/questions/8767/changes-in-english-names-of-people  請見等價大全 xD
2013-10-01 19:55:10	MnO2_	[00:09:45] 其實去公司隨便抓個 Engineer 大概都不知道 MS 跟 Apple 兩大 founders 的本名吧 xD
2013-10-01 19:55:10	MnO2_	[00:10:09] 他們都還有 middle name
2013-10-01 19:55:10	suhorng	[00:10:38] Yu-Lin: 跟 LLVM pk!
2013-10-01 19:55:10	hashcat	[00:21:12] 有人在topcoder嘛
2013-10-01 19:55:10	monochrom	[00:24:12] 嘻嘻, 我就知道 C. A. R. Hoare, Donald E. Knuth, 及 Edsger W. Dijkstra 的全寫!
2013-10-01 19:55:10	monochrom	[00:25:40] C. A. R. = Charles Anthony Richard, E = Ervin, W = Wybe
2013-10-01 19:55:10	monochrom	[00:27:29] Hoare會叫你稱他 Tony, 這是對應 Anthony
2013-10-01 19:55:10	MnO2	[00:29:14] hashcat: 請找 miaout17
2013-10-01 19:55:10	hashcat	[00:31:30] 想問賺外快難不難:D
2013-10-01 19:55:10	hashcat	[00:31:36] :D
2013-10-01 19:55:10	MnO2_	[19:25:00] PHPConf 的矛盾大對決是怎麼回事 xDD
2013-10-01 19:55:10	letoh	[19:56:52] 那是什麼?
2013-10-01 19:55:10	Yu_lin	[22:53:20] sml
2013-10-01 19:55:10	Yu_lin	[22:54:16] sml 的 lib 跟函數那邊有比較好查找的
2013-10-01 19:55:10	hashcat	[23:03:59] http://en.wikipedia.org/wiki/Horn_clauses
2013-10-01 19:55:10	hashcat	[23:48:57] F*是dependent type
2013-10-01 19:55:10	hashcat	[00:00:21] 集群用得dependent type
2013-10-01 19:55:10	gko	[00:14:22] 有人在中華嗎？現在下載超慢... wget http://optimate.dl.sourceforge.net/project/pidgin/Pidgin/2.10.7/pidgin-2.10.7.exe => 20 KB/s...
2013-10-01 19:55:10	gko	[00:15:09] Youtube也斷斷續續...
2013-10-01 19:55:10	YuLin	[23:24:00] 在 #sml 也看到了常見的帳號
2013-10-01 19:55:10	YuLin	[23:45:51] http://www.catonmat.net/blog/on-functors/
2013-10-01 19:55:10	YuLin	[23:46:08] 正在看 SML、Haskell、c++ 的 functor
2013-10-01 19:55:10	YuLin	[23:46:27] c++ 我直接跳過沒看，直接看 SML 的部份
2013-10-01 19:55:10	YuLin	[23:47:22] SML 的 funtor 看起來很像 dispatcher
2013-10-01 19:55:10	suhorng	[23:50:18] 不是三個完全同的東西嗎...?
2013-10-01 19:55:10	suhorng	[23:50:45] *完全不同
2013-10-01 19:55:10	YuLin	[23:52:07] 恩，在看一篇解釋四者的 functor
2013-10-01 19:55:10	YuLin	[23:52:18] prolog
2013-10-01 19:55:10	YuLin	[23:52:22] 沒打到
2013-10-01 19:55:10	letoh	[23:55:50] YuLin: https://www.fpcomplete.com/blog/2012/07/the-functor-pattern-in-c  這個呢?
2013-10-01 19:55:10	YuLin	[23:59:40] 這個沒看過，不過在我有生之年，能不要接觸 C++ 就不想接觸XD
2013-10-01 19:55:10	letoh	[00:00:09] C++ 還可以啦  雖然能不碰也是...(ry
2013-10-01 19:55:10	suhorng	[00:01:43] 那不是一開始沒有 lambda 才做出來的模仿品嗎XD
2013-10-01 19:55:10	CindyLinz	[00:17:41] C++ 的 functor... 就只是有 overloading () operator 的物件?
2013-10-01 19:55:10	monochrom	[00:19:03] 是
2013-10-01 19:55:10	CindyLinz	[00:19:48] 不有趣!
2013-10-01 19:55:10	hashcat	[00:20:37] 偽functor
2013-10-01 19:55:10	CindyLinz	[00:20:47] YuLin: 欸欸, C++ 的 functor 講完了, 你可以不用花時間再細看了 XD
2013-10-01 19:55:10	hashcat	[00:21:44] 可以多關注idris
2013-10-01 19:55:10	hashcat	[00:21:59] 對偏門的新語言來說活動率不算太低
2013-10-01 19:55:10	suhorng	[00:22:12] 他年代好像滿近的?
2013-10-01 19:55:10	suhorng	[00:22:30] 而且程式可以實際跑@@!!
2013-10-01 19:55:10	CindyLinz	[00:24:35] 我晚一點.. 最近想專心看 lazy 的東西...
2013-10-01 19:55:10	letoh	[00:32:32] 我貼的那一篇對 c++ 來說才是偽 functor XD
2013-10-01 19:55:10	letoh	[00:32:52] 那篇是用 c++ 實作 fmap 這些東西
2013-10-01 19:55:10	letoh	[00:33:16] 看到那個 domain 至少捧個場嘛XD
2013-10-01 19:55:10	CindyLinz	[00:34:47] letoh: 網址那麼長, 沒注意 domain 啊.. XD
2013-10-01 19:55:10	letoh	[00:34:48] suhorng: 就算有 lambda 好了，我實在懷疑十年內能不能在業界普及使用...
2013-10-01 19:55:10	letoh	[00:34:51] XDXD
2013-10-01 19:55:10	CindyLinz	[00:35:28] C++11 的 lambda.... 普及它真的是好事嗎? orz
2013-10-01 19:55:10	CindyLinz	[00:36:06] 我覺得很局部很局部地用就好了..
2013-10-01 19:55:10	CindyLinz	[00:36:11] 那就還不錯
2013-10-01 19:55:10	letoh	[00:37:04] 唔  其實我想講的是說熟悉用這些新工具來設計程式  不過表達的不太好XD
2013-10-01 19:55:10	letoh	[00:37:20] 不過就算現在，也還是很多把 c++ 當成 c 來寫的XD
2013-10-01 19:55:10	suhorng	[00:37:21] letoh: 可是 lambda 也是假的....XD
2013-10-01 19:55:10	suhorng	[00:37:47] 雖然真要說的話是一連串東西的結果, 可是 C++ 的 lambda 就完全不是我們平常用的 lambda
2013-10-01 19:55:10	letoh	[00:38:12] 我是覺得以 c++ 這樣的限制能提供一點新工具已經是突破了  你要它突然變成 haskell 是不太可能的啦
2013-10-01 19:55:10	CindyLinz	[00:38:16] letoh: 這連結.... 是 Haskell 長得像 C++ 的 syntax sugar 啦 XD
2013-10-01 19:55:10	letoh	[00:38:27] 哈XDXD
2013-10-01 19:55:10	suhorng	[00:38:47] 不全然啦, 應該說 C++ 的 lambda　＝＝＝　建立function object的syntactic sugar
2013-10-01 19:55:10	suhorng	[00:39:01] 跟常見 functional language 的 lambda 意思完全不一樣
2013-10-01 19:55:10	suhorng	[00:39:29] 而 C++ 的 std::function 是用 template 把 callable object 外面再包一層東西...
2013-10-01 19:55:10	letoh	[00:39:40] 大部份的 lambda 就是 ananymous function 而已，不是要變成 functional language 講的 lambda 啦
2013-10-01 19:55:10	letoh	[00:40:32] 我覺得業界不太在意追求理論方面的滿足，主要還是實用方面，然後不要改變太大
2013-10-01 19:55:10	CindyLinz	[00:41:55] 等等.. 還有差喔? XD # lambda vs anonymous function
2013-10-01 19:55:10	CindyLinz	[00:42:06] 我是說.. 再加上 closure 的部分 :p
2013-10-01 19:55:10	CindyLinz	[00:42:26] C++ lambda 在 by value 的部分, 還蠻像 closure 的呀
2013-10-01 19:55:10	letoh	[00:42:58] 就限定使用範圍來看吧，應該還算是可以用
2013-10-01 19:55:10	letoh	[00:43:23] 不過要我把程式改寫成 c++1x 還是有點懶... 原本的能跑就好XD
2013-10-01 19:55:10	suhorng	[00:43:38] 例如
2013-10-01 19:55:10	suhorng	[00:43:39] let counter = ref 0 in fn () => counter := !counter + 1; counter end
2013-10-01 19:55:10	CindyLinz	[00:43:40] 已經能用的幹嘛改啊 @@"
2013-10-01 19:55:10	suhorng	[00:44:04] C++裡面要改成 shared_ptr<int> 然後closure抓進來也是可以啦.....
2013-10-01 19:55:10	letoh	[00:44:10] 還是常常會修修改改啊  其實是可以趁機一點一點換掉XD
2013-10-01 19:55:10	suhorng	[00:44:17] 不過就是東西都要手動轉
2013-10-01 19:55:10	letoh	[00:44:23] 卡在公司還有人用 vc6...
2013-10-01 19:55:10	suhorng	[00:44:35] vc6!!!!!!!!!!!!!!
2013-10-01 19:55:10	suhorng	[00:44:41] 我以為買不到了?
2013-10-01 19:55:10	letoh	[00:45:07] 有買 msdn subscription 的話，也許還弄得到?
2013-10-01 19:55:10	letoh	[00:45:16] 都能弄個 win3.1 來玩了XD
2013-10-01 19:55:10	suhorng	[00:45:36] www
2013-10-01 19:55:10	CindyLinz	[00:45:43] suhorng: 嗯, 要改值的, by ref 的就不行了....
2013-10-01 19:55:10	CindyLinz	[00:46:02] 外層函數 return 以前可以 XD
2013-10-01 19:55:10	suhorng	[00:46:37] CindyLinz: 有個不健康的作法是, 如果確定每個 closure 的 instance 都獨立, 那加上 "mutable" ... XD
2013-10-01 19:55:10	suhorng	[00:47:13] 我覺得精確來說要一樣的話就是要用指標. 如果不想要 memory leak 就配合 shared_ptr 自動做 reference count...
2013-10-01 19:55:10	CindyLinz	[00:48:06] 那就不是 C++11 lambda 的功能了, 你是自己實作的 XD
2013-10-01 19:55:10	suhorng	[00:49:03] 好吧, 畢竟 C++ 裡面的變數都是 reference XD
2013-10-01 19:55:10	suhorng	[00:49:39] functional language 有一種 closure 的時作方式就是把外面的變數都拷貝一份近來
2013-10-01 19:55:10	CindyLinz	[00:50:02] 變數都 imutable 真開心.. XD
2013-10-01 19:55:10	suhorng	[00:50:06] 然後 'a ref 拷貝進來的是 'a ref 所以不會出事 XD
2013-10-01 19:55:10	suhorng	[00:50:41] 但是對於 Scheme 這種沒有 type 的, 要這樣實作 closure 編譯器實作就要先把會改到的變數都變指標
2013-10-01 19:55:10	suhorng	[00:50:55] (其中一種實作方式)
2013-10-01 19:55:10	CindyLinz	[00:54:20] 能改的東西不是原本就是指標喔? @@"
2013-10-01 19:55:10	suhorng	[00:55:28] 需要辨認出哪些被改, 因為沒有 type Orz
2013-10-01 19:55:10	suhorng	[00:56:36] Scheme 裡面 variable reference 沒有像 ML 那樣 "!" 明確寫
2013-10-01 19:55:10	CindyLinz	[00:56:46] 喔喔...
2013-10-01 19:55:10	CindyLinz	[00:57:08] 我目前讀的部分蠻前面的, 以為都是不能改的 :p
2013-10-01 19:55:10	suhorng	[00:59:41] 大家的作法都差好多XD
2013-10-01 19:55:10	suhorng	[00:59:47] *語言的作法
2013-10-01 19:55:10	CindyLinz	[01:00:34] 這樣很好 :p
2013-10-01 19:55:10	suhorng	[01:00:38] XDD
2013-10-01 19:55:10	CindyLinz	[01:01:00] 有了什麼新平台想 porting 的話也比較有路
2013-10-01 19:55:10	CindyLinz	[01:01:16] 既然它已經用這麼多種不同的方式實作, 再多一種可能也不太難
2013-10-01 19:55:10	CindyLinz	[01:01:23] 像 perl 就... QQ
2013-10-01 19:55:10	CindyLinz	[17:05:27] 寫一寫 chrome extension 就好想自己寫個 browser....||
2013-10-01 19:55:10	CindyLinz	[17:06:06] chrome extension 的 api 真是好亂, 東漏西漏的... 感覺像他們工程師或 PM, 想到一個功能就做一個功能, 互相不整合的 :|
2013-10-01 19:55:10	MnO2_	[17:14:54] 最後就變 NaCL 了 (誤)
2013-10-01 19:55:10	***	Playback Complete.
2013-10-01 19:55:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-01 19:56:06	--	Mode #haskell.tw [+cnt]
2013-10-01 19:56:06	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-01 20:02:25	-->	b4283 (~b4283@218-164-200-229.dynamic.hinet.net) has joined #haskell.tw
2013-10-01 20:08:39	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-doepnocmuuiwknte) has quit (Ping timeout: 264 seconds)
2013-10-01 20:16:45	--	You are now known as drbean
2013-10-01 20:20:29	<--	b4283 (~b4283@218-164-200-229.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-01 20:22:43	-->	b4283 (~b4283@218-164-218-33.dynamic.hinet.net) has joined #haskell.tw
2013-10-01 20:25:38	hashcat	https://github.com/overtone/emacs-live
2013-10-01 20:25:49	hashcat	用這個寫clojure中
2013-10-01 20:38:34	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 20:44:59	-->	suhorng (~suhorng@118-166-48-13.dynamic.hinet.net) has joined #haskell.tw
2013-10-01 20:45:21	suhorng	hashcat: 好奇一下XD　你用 ParEdit (minor) mode 嗎?
2013-10-01 20:46:38	hashcat	他預設開的就用了
2013-10-01 20:48:10	hashcat	下括號拔不掉, 要移動一段只能整塊括號成對剪下
2013-10-01 20:48:31	hashcat	培養了個好習慣
2013-10-01 20:51:41	suhorng	真的
2013-10-01 20:51:51	suhorng	而且我覺得一些直接操作一整個node超級好用
2013-10-01 20:52:37	suhorng	像是把這個節點最前/後的子節點吐出去, 或把外面的吞進來, 還可以兩層換位置之類
2013-10-01 20:52:43	suhorng	直接編輯AST的感覺XD
2013-10-01 20:53:50	hashcat	有時後會出鎚
2013-10-01 20:54:04	suhorng	bug？
2013-10-01 20:54:08	hashcat	不知道按到啥括號不成對了
2013-10-01 20:54:32	hashcat	他貌似不是每種刪除下括號都擋得了
2013-10-01 20:54:35	suhorng	嗯..我是有不小心按過大括號, 然後就再也動不了了
2013-10-01 20:54:55	suhorng	有的刪除可能是 emacs 內建的刪除功能, 造成不成對 (像 C-Del)
2013-10-01 20:56:11	hashcat	C-w
2013-10-01 20:56:29	suhorng	嗯 應該也會
2013-10-01 20:56:57	hashcat	忘記怎用出來了
2013-10-01 20:57:15	hashcat	有次跑出一個下括號刪不掉
2013-10-01 20:58:38	suhorng	那樣真的很麻煩= =|||
2013-10-01 20:58:39	hashcat	貌似不是啥重要的事情
2013-10-01 20:59:47	hashcat	換成vim補起來
2013-10-01 21:01:37	suhorng	十分難過XD 內建的還原不太好用...
2013-10-01 21:02:29	CindyLinz	想到王垠的 editor... ^^
2013-10-01 21:02:33	hashcat	emacs-live的還原很好用
2013-10-01 21:02:40	hashcat	又是王垠
2013-10-01 21:03:24	CindyLinz	hashcat: 中文的文章不好找啊.... (攤)
2013-10-01 21:03:40	suhorng	hmm.. lisp.tw XD?
2013-10-01 21:04:01	Yu_lin	中文文章難找，看起來只好自己寫了？XD
2013-10-01 21:04:20	hashcat	他寫中文繁體字我也看不懂
2013-10-01 21:04:20	CindyLinz	先拜.... m(_._)m
2013-10-01 21:06:48	CindyLinz	我直接看簡體字沒什麼障礙, 只是看到用繁體字寫的, 有台灣用語的大陸用語會很不慣 ^^|
2013-10-01 21:07:51	CindyLinz	像什麼... 「內存緊張」「魯棒的冗餘迴路設計」.. XD
2013-10-01 21:07:58	hashcat	我是不知道他到底要講啥
2013-10-01 21:08:03	hashcat	看簡體字是沒差
2013-10-01 21:08:16	godfat	內存緊張.... 是缺少記憶體？
2013-10-01 21:08:24	CindyLinz	yes...||
2013-10-01 21:08:57	godfat	說真的我好討厭那些奇怪的翻譯呀...
2013-10-01 21:09:07	hashcat	robust應該翻譯成強健或耐受之類的吧
2013-10-01 21:09:11	CindyLinz	但如果純簡體字寫就沒有違和感 ^^
2013-10-01 21:09:14	hashcat	魯棒很難聽
2013-10-01 21:09:49	CindyLinz	魯棒真是罕見的大陸譯法 XD  我覺得他們通常是用意譯的
2013-10-01 21:09:58	hashcat	說是音譯唸起來也沒像到哪去
2013-10-01 21:10:12	CindyLinz	而且常常譯得不錯, 音譯不常見
2013-10-01 21:10:20	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 21:10:26	CindyLinz	hashcat: 可能大陸人的英文發音跟這個字會比較像? @@"
2013-10-01 21:10:39	godfat	我記得數量級有一個翻譯跟台灣不一樣，好像是 mega?
2013-10-01 21:10:44	CindyLinz	兆
2013-10-01 21:10:59	godfat	那真正的兆怎麼說？
2013-10-01 21:11:15	CindyLinz	應該還是兆吧.. @_@"  反正中文本來就吃 context 吃很重 ._.
2013-10-01 21:11:21	godfat	........orz
2013-10-01 21:12:54	MnO2_	音譯應該香港一堆吧 xD   屈臣氏
2013-10-01 21:12:54	CindyLinz	想到今天看 free monad 介紹文裡面的 sample code.. instance 定義裡面用到的 type variable 和它的函數字義的 variable 喜歡用重複的名字... 不小心就會很困惑 @@"
2013-10-01 21:13:46	hashcat	他們根本是想直接講英文吧
2013-10-01 21:14:01	CindyLinz	我超愛前一陣子在一個大陸寫的 php library 裡面看到的註解..
2013-10-01 21:14:28	CindyLinz	(找一下)
2013-10-01 21:17:26	CindyLinz	token
2013-10-01 21:17:30	CindyLinz	叫作 令牌
2013-10-01 21:18:03	godfat	查了一下，他們叫「太」 @_@
2013-10-01 21:18:04	godfat	http://zh.wikipedia.org/zh-tw/太拉
2013-10-01 21:18:21	godfat	令牌 XDDDDDD
2013-10-01 21:18:23	CindyLinz	tera?
2013-10-01 21:18:27	godfat	嗯
2013-10-01 21:18:55	CindyLinz	咦, 他們高位數直接改成千進位喔 @@"
2013-10-01 21:21:04	Yu_lin	把資料寫進 ax 的千進位......？
2013-10-01 21:21:16	CindyLinz	這個表... 怎麼中華民國的部分我都覺得陌生 orz
2013-10-01 21:21:31	godfat	說來萬好像是個有點微妙的存在倒是... ~.~
2013-10-01 21:22:29	godfat	對照這個
2013-10-01 21:22:29	godfat	http://zh.wikipedia.org/zh-tw/中文数字
2013-10-01 21:22:29	godfat	三個零和四個零的麻煩 -_-
2013-10-01 21:22:55	CindyLinz	godfat: 欸, 這個表是「國際單位制詞頭」.. 不能拿來代表他們平常沒有用 萬億兆京 啊 @"
2013-10-01 21:22:58	CindyLinz	@@"
2013-10-01 21:23:53	godfat	XD 真麻煩 orz
2013-10-01 21:24:26	godfat	不可說不可說不可說 XDDDD
2013-10-01 21:24:28	CindyLinz	還是靠 context 對吧 XD
2013-10-01 21:24:37	godfat	看來是 orz....
2013-10-01 21:25:16	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-alffyndopvboeofx) has joined #haskell.tw
2013-10-01 21:29:31	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-01 21:30:13	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 21:30:44	CindyLinz	我們現在用的是中數系統, 是萬進位的... 上數系統的「數窮則變」看起來真不錯, 這才是好好利用每一個 symbol 呀 :p
2013-10-01 21:31:10	CindyLinz	就是.. 億兆京垓.. 這些, 每一個都是前一個的平方倍
2013-10-01 21:33:16	godfat	意思就是用萬億之類的方式，而不是換字嗎？
2013-10-01 21:33:33	<--	b4283 (~b4283@218-164-218-33.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-01 21:34:22	-->	b4283 (~b4283@218-164-218-33.dynamic.hinet.net) has joined #haskell.tw
2013-10-01 21:36:08	CindyLinz	godfat: 對, 用一樣的十個字
2013-10-01 21:36:24	CindyLinz	欸.. 喔, 嗯嗯 中間是繼續組合小字
2013-10-01 21:36:41	godfat	不過這樣數字很大很亂時，比較難一眼看出數量級
2013-10-01 21:36:45	suhorng	慘了orz Haskell寫多了寫 OCaml 就寫錯了...
2013-10-01 21:38:02	suhorng	let itoa4 n output =
2013-10-01 21:38:02	suhorng	  let rec aux m t =
2013-10-01 21:38:02	suhorng	    if t == 0
2013-10-01 21:38:02	suhorng	    then ()
2013-10-01 21:38:02	suhorng	    else output.(t-1) <- Char.chr ((m mod 10) + 48);
2013-10-01 21:38:02	suhorng	         aux (m / 10) (t - 1)
2013-10-01 21:38:02	suhorng	  in aux n 4;;
2013-10-01 21:38:03	suhorng	這個的 type 是.... int → char array → 'a （？？？？）
2013-10-01 21:38:23	suhorng	因為 if-then-else 只到 ...+ 48); 那裡為止, 遞迴的部份變成不在 if 裡面..
2013-10-01 21:43:01	mno2	https://docs.google.com/presentation/d/1ZODuGNVnddLy2DG_IiPnBb5LBl0r1Rwhm_5LGGDQECY/edit#slide=id.p  下禮拜的投影片初稿
2013-10-01 21:43:19	mno2	不過做了半天發覺好像跟 FP 關係不是很大 xD
2013-10-01 21:43:25	mno2	幾乎都是系統
2013-10-01 21:43:29	Yu_lin	我寫 sml 也是快掛掉了
2013-10-01 21:44:16	CindyLinz	啊.. 投影片 orz
2013-10-01 21:44:44	mno2	已經 4x 頁了 xD
2013-10-01 21:45:00	mno2	但其實還有東西沒有講
2013-10-01 21:46:51	CindyLinz	要不要分成兩次講啊 orz
2013-10-01 21:47:49	CindyLinz	mno2: 用的符號很 Haskell 啊 XD # 21:43 < mno2> 不過做了半天發覺好像跟 FP 關係不是很大 xD
2013-10-01 21:48:18	CindyLinz	你下面那三顆水桶的位置是不是斜的啊 @@"
2013-10-01 21:48:35	mno2	哪三顆？
2013-10-01 21:48:56	mno2	喔喔
2013-10-01 21:48:58	mno2	好像有點斜
2013-10-01 21:49:06	CindyLinz	Gateway server, Middleware server, Web server
2013-10-01 21:49:10	mno2	隨便啦，用 touchpad 畫的 xD
2013-10-01 21:52:39	CindyLinz	結束時間訂成九點半好了... ^^|
2013-10-01 21:53:41	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-01 21:54:20	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 22:08:59	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-01 22:09:42	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 22:14:55	<--	b4283 (~b4283@218-164-218-33.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-10-01 22:15:36	<--	superbil (uid12362@gateway/web/irccloud.com/x-vduvzivwnaptqnub) has quit (Ping timeout: 245 seconds)
2013-10-01 22:16:27	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-alffyndopvboeofx) has quit (Ping timeout: 248 seconds)
2013-10-01 22:17:09	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-ndagtskhtrntcego) has quit (Ping timeout: 248 seconds)
2013-10-01 22:17:40	<--	hychen (uid12518@gateway/web/irccloud.com/x-vefebancabsfhgbo) has quit (Ping timeout: 256 seconds)
2013-10-01 22:20:55	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-01 22:22:56	<--	suhorng (~suhorng@118-166-48-13.dynamic.hinet.net) has left #haskell.tw
2013-10-01 22:23:36	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 22:34:54	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-10-01 22:39:13	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 22:39:29	-->	b4283 (~b4283@218-164-218-33.dynamic.hinet.net) has joined #haskell.tw
2013-10-01 22:39:48	-->	hychen (uid12518@gateway/web/irccloud.com/x-mwikaxkrxifxydia) has joined #haskell.tw
2013-10-01 22:44:52	<--	b4283 (~b4283@218-164-218-33.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-01 22:48:29	mno2	CindyLinz 有在寫 blog 喔？
2013-10-01 23:03:51	<--	Yu_lin (24ec1701@gateway/web/freenode/ip.36.236.23.1) has quit (Ping timeout: 250 seconds)
2013-10-01 23:10:14	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-01 23:11:35	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 23:18:28	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-01 23:30:31	-->	Yu-Lin (24ec1701@gateway/web/freenode/ip.36.236.23.1) has joined #haskell.tw
2013-10-01 23:30:53	CindyLinz	mno2: 有「想要寫」很久了.. orz
2013-10-01 23:31:05	CindyLinz	所以一直很敬佩那些一直寫一直寫的人 @@"
2013-10-01 23:31:23	mno2	喔喔。只是看到你說要註冊 logdown 想說沒搜到啊 xD
2013-10-01 23:33:08	CindyLinz	註冊了..
2013-10-01 23:33:18	CindyLinz	http://cindylinz.logdown.com/
2013-10-01 23:33:24	CindyLinz	空的... ._.
2013-10-01 23:33:51	letoh	markdown syntax...
2013-10-01 23:34:00	petercommand	logdown的創始人的fb天天都在宅配零食阿，洋芋片，礦泉水之類的XD
2013-10-01 23:34:19	CindyLinz	此風不可長....
2013-10-01 23:34:45	mno2	不太健康 xD
2013-10-01 23:34:56	letoh	這 table 語法是外掛的吧? markdown 應該不支援 table ?
2013-10-01 23:35:07	CindyLinz	前幾天他去他的對手 (宅配對手XD) 的公司, 哭說他覺得被霸凌了
2013-10-01 23:35:18	petercommand	XD
2013-10-01 23:35:23	CindyLinz	因為他寄了一大堆食物, 隔天已經被吃掉 90%
2013-10-01 23:35:30	Yu-Lin	XD
2013-10-01 23:35:53	CindyLinz	對方說: 公司大就沒在怕啊! 你那十個人的小公司怎麼跟我們玩!?
2013-10-01 23:36:08	petercommand	XDDD
2013-10-01 23:36:08	mno2	markdown 好像很多方言的樣子 xD
2013-10-01 23:36:09	CindyLinz	KKBox 200人..
2013-10-01 23:36:44	CindyLinz	letoh: ```語言   ``` 也是方言才有呀.. 純 markdown 我覺得蠻漂亮的, 可是真的是太少了 ^^|
2013-10-01 23:36:58	CindyLinz	markdown 還有放 latex 外掛 XD
2013-10-01 23:37:00	letoh	唔  所以找 markdown renderer 還得看相容哪個方言? XD
2013-10-01 23:37:05	mno2	最近還有 MultiMarkdown
2013-10-01 23:37:09	CindyLinz	letoh: 用眼睛看吧 XD
2013-10-01 23:37:09	mno2	對啊
2013-10-01 23:38:24	CindyLinz	想到以前學校有個學長, 習慣看 latex over 建出來的 pdf/ps....
2013-10-01 23:38:38	CindyLinz	他很適合直接看有 latex 外掛的 markdown..... wwww
2013-10-01 23:39:01	letoh	我的公司報告和簡報也是用 latex
2013-10-01 23:39:17	letoh	不過必要時還是得改成 word XD
2013-10-01 23:39:39	CindyLinz	我每一次做簡報都用一套不同的東西.... orz   還沒找到用起來開心可以用第二次的 orz
2013-10-01 23:40:01	CindyLinz	這次想用 suhorng 上次用的那個, 希望就一直用下去了 :D
2013-10-01 23:40:09	CindyLinz	也是 markdown 血統的東西 :p
2013-10-01 23:40:15	letoh	powerpoint 實在不好用啊  打開後不曉得該做什麼XD
2013-10-01 23:40:24	petercommand	CindyLinz: 太強了XD
2013-10-01 23:40:28	letoh	suhorng 上次用哪一套?
2013-10-01 23:40:51	CindyLinz	letoh: 先用一次 libreoffice 的 presentation, 然後就會覺得 MS powerpoint 真是好用到令人痛哭流涕 ._.
2013-10-01 23:41:28	CindyLinz	letoh: 這個 https://github.com/gnab/remark
2013-10-01 23:41:29	letoh	我用過 openoffice 的... 這樣一比的確會覺得 powerpoint 很不錯
2013-10-01 23:41:42	letoh	其實我根本覺得 openoffice 沒資格出來比XD
2013-10-01 23:41:47	CindyLinz	petercommand: 我作簡報的間隔很長啦... ^^|
2013-10-01 23:41:53	letoh	CindyLinz: thanks, 研究看看
2013-10-01 23:42:47	petercommand	CindyLinz: 天天用不同套超強大阿^^
2013-10-01 23:42:54	letoh	嗯  不過限定 in browser 對我來說就比較不適合
2013-10-01 23:43:09	<--	Yu-Lin (24ec1701@gateway/web/freenode/ip.36.236.23.1) has quit (Quit: Page closed)
2013-10-01 23:43:10	CindyLinz	petercommand: 如果是「天天」才有超強大啊... ^^|
2013-10-01 23:43:32	CindyLinz	我每次相隔幾個月吧 XD
2013-10-01 23:43:54	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-10-01 23:43:56	petercommand	XD
2013-10-01 23:44:02	CindyLinz	letoh: 你會在沒 browser 的環境用啊? @@"
2013-10-01 23:44:14	CindyLinz	它不用連網路啊
2013-10-01 23:44:21	letoh	應該是說 除了簡報外  還得把資料交出去
2013-10-01 23:44:29	CindyLinz	就交一個 html?
2013-10-01 23:44:38	letoh	圖片之類的怎麼辦? XD
2013-10-01 23:44:42	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 23:45:01	letoh	不過可以研究看看  當成 org-mode 的某個 backend 來用XD
2013-10-01 23:45:13	CindyLinz	<img src="data:image/png;base64,......./>
2013-10-01 23:45:14	letoh	要交出去再重新轉成 pdf 就好
2013-10-01 23:45:22	letoh	還有這招XD
2013-10-01 23:45:37	CindyLinz	圖片 < 2MB 的時候可以安全用 ._.
2013-10-01 23:45:51	letoh	剛剛就在想說只能把資料塞進 html 裡了
2013-10-01 23:45:52	CindyLinz	>= 2MB 以後.... IE or Firefox 可以用, chrome 就出局了
2013-10-01 23:45:59	petercommand	CindyLinz: XDD
2013-10-01 23:49:15	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-01 23:49:32	CindyLinz	啊.. 如果圖檔 >= 2MB 還想給 chrome 用的話, 有個古老的方法!
2013-10-01 23:49:39	CindyLinz	把圖片分塊......
2013-10-01 23:49:49	petercommand	...
2013-10-01 23:49:59	CindyLinz	老祖先(?)的智慧
2013-10-01 23:50:07	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 23:52:40	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Client Quit)
2013-10-01 23:53:10	petercommand	恐怖的html XD
2013-10-01 23:53:24	CindyLinz	在 RoR 陣營的 XDite 的 FB 上看到 Haskell 的東西耶~ # https://www.facebook.com/xdite/posts/10151943935503552
2013-10-01 23:54:12	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-01 23:55:54	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Client Quit)
2013-10-01 23:57:15	mno2	QuickCheck 還蠻多移植的 xD
2013-10-01 23:57:22	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 00:01:38	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-02 00:02:41	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 00:06:24	hashcat	有沒有prolog陣營
2013-10-02 00:07:06	hashcat	在妄想後端x10的prolog
2013-10-02 00:15:29	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-cozpsejagcnreylf) has joined #haskell.tw
2013-10-02 00:15:37	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-nbzldlmmxembxijl) has joined #haskell.tw
2013-10-02 00:22:45	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-02 01:10:13	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-02 01:20:39	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-10-02 02:58:43	<--	hashcat (~chatzilla@27.242.169.32) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-10-02 02:58:55	CindyLinz	不過我覺得 latex 的描述性不太好, 它是 favor compiler, 不是 favor user...
2013-10-02 02:59:27	CindyLinz	有些地方用起來像 state machine... @@"
2013-10-02 03:00:18	CindyLinz	這使得偶爾想要重新組織文章內容的時候會麻煩..
2013-10-02 03:07:55	letoh	現在當然是把 latex 當作 asm 來用
2013-10-02 03:13:09	CindyLinz	letoh: 那, 你有用什麼比較高階的語言, 然後再 compile 成 latex 嗎? @@"
2013-10-02 03:13:37	letoh	差不多是這樣  類似 markdown 的東西
2013-10-02 03:13:46	CindyLinz	嗯嗯嗯
2013-10-02 03:14:14	CindyLinz	剛正在想說.. 不該問一個拿 forth 當水喝的人這種問題的 ^^|
2013-10-02 03:15:21	letoh	這跟 forth 沒關係啦XD  剛好 emacs 內建一些工具就直接用了
2013-10-02 03:15:58	CindyLinz	可是你看組語太順暢了啊 XD
2013-10-02 03:17:15	letoh	其實也還好啦  我比較習慣看「寫成 forth 的組語」XD
2013-10-02 03:22:49	-->	miaout17__ (~miaout17@miaout17.net) has joined #haskell.tw
2013-10-02 03:27:22	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-10-02 03:27:22	<--	miaout171_ (~miaout17@miaout17.net) has quit (*.net *.split)
2013-10-02 03:27:22	<--	cataska (~cataska@210.64.6.233) has quit (*.net *.split)
2013-10-02 04:16:32	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-10-02 06:46:15	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-02 07:43:53	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 09:56:43	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 11:42:23	-->	Yu-LIn (24ec1751@gateway/web/freenode/ip.36.236.23.81) has joined #haskell.tw
2013-10-02 11:57:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-02 12:05:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-02 12:19:20	CindyLinz	letoh: 突然覺得.... 你應該也會習慣直接看 lpr 的指令 ._.
2013-10-02 12:19:33	CindyLinz	或是 ps 的指令
2013-10-02 12:19:47	CindyLinz	pdf 的指令不知道是長怎樣了 XD
2013-10-02 12:24:11	Yu-LIn	pdf 的指令是 ps 修改兼擴充
2013-10-02 12:27:33	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-10-02 12:33:13	CindyLinz	噢, 所以拿來當 ps 看也行 ^^
2013-10-02 12:37:50	Yu-LIn	我記得可以在 adobe 下載到舊版本的 pdf 定義，pdf 其實可以看成結構化的 ps....XD
2013-10-02 12:39:33	Yu-LIn	裡面有一個叫作 xref 的結構，這結構裡面全部只有數字，可能要翻 ascii 或 pdf 規格文件，才會知道那串數字是什麼Orz|||
2013-10-02 12:41:20	Yu-LIn	除此之外都是描述一頁是什麼，裡面有哪些東西這樣
2013-10-02 12:48:13	_13h	xref 就是指到物件的表而已吧，通常是文字或影像之類的
2013-10-02 14:17:58	<--	Yu-LIn (24ec1751@gateway/web/freenode/ip.36.236.23.81) has quit (Quit: Page closed)
2013-10-02 15:14:37	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 15:52:25	-->	hashcat (~chatzilla@27.241.175.151) has joined #haskell.tw
2013-10-02 16:12:02	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-02 16:39:28	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-02 16:40:42	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 17:52:31	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-nbzldlmmxembxijl) has quit (Ping timeout: 245 seconds)
2013-10-02 17:54:13	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-cozpsejagcnreylf) has quit (Ping timeout: 248 seconds)
2013-10-02 18:33:09	<--	hashcat (~chatzilla@27.241.175.151) has quit (Ping timeout: 240 seconds)
2013-10-02 18:35:32	-->	hashcat (~chatzilla@218-173-238-69.dynamic.hinet.net) has joined #haskell.tw
2013-10-02 18:49:59	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-02 19:41:32	letoh	ps 的指令我可以看一點啊，不算很熟就是
2013-10-02 20:14:51	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-iwzcukeekergjybf) has joined #haskell.tw
2013-10-02 20:15:56	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-yzadzisrbkpvzjlg) has joined #haskell.tw
2013-10-02 20:19:29	-->	b4283 (~b4283@1-173-102-191.dynamic.hinet.net) has joined #haskell.tw
2013-10-02 20:28:26	-->	superbil (uid12362@gateway/web/irccloud.com/x-qddkokgnmklsahsw) has joined #haskell.tw
2013-10-02 20:32:26	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-02 20:34:42	darkx	letoh: https://github.com/xatier/git_intro
2013-10-02 20:34:49	darkx	之前用過  remark 寫簡報
2013-10-02 20:34:54	darkx	基本上還不壞
2013-10-02 20:35:06	letoh	可輸出 pdf 嗎?
2013-10-02 20:37:03	darkx	似乎無法XD
2013-10-02 20:37:14	darkx	我正要說輸出成 pdf 是問題 lol
2013-10-02 20:37:23	letoh	XDXD
2013-10-02 20:37:38	letoh	看來只好 print to ps 再 ps2pdf XD
2013-10-02 20:37:48	darkx	不過現在都用 html5 的時代應該沒人會在意啦(不對
2013-10-02 20:45:25	CindyLinz	以前用過 css 的 print 分頁...
2013-10-02 20:48:15	letoh	darkx: 剛剛才發現是你自己的帳號
2013-10-02 20:48:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-10-02 20:51:15	darkx	letoh: 裡面太多奇怪的東西惹 >///<
2013-10-02 20:51:19	darkx	請不要亂翻XDDDDDD
2013-10-02 20:51:36	letoh	有什麼秘密怕被我發現嗎? XD
2013-10-02 20:51:40	 *	CindyLinz 來翻..
2013-10-02 20:53:12	letoh	github 的預設 avatar 什麼意義嗎? 感覺像 tetris XD
2013-10-02 20:55:20	darkx	嗚嗚Q___Q
2013-10-02 20:55:26	darkx	letoh: 不知道耶
2013-10-02 20:56:36	CindyLinz	g8d_r5e 是 markdown 練習 repository 嗎 >///<
2013-10-02 20:57:12	darkx	不是耶 XD
2013-10-02 20:57:17	CindyLinz	還有別人 fork.....
2013-10-02 20:57:21	darkx	XD
2013-10-02 20:57:30	darkx	其實也是從別人那邊啟發的想法 lol
2013-10-02 20:57:32	CindyLinz	這應該就要推 在一起在一起在一起 了...
2013-10-02 20:57:53	darkx	人家是日本人啊  *哭*
2013-10-02 20:58:34	 *	darkx 只是一個想要討拍拍的宅宅 QQ
2013-10-02 21:01:08	CindyLinz	東西好多喔.... ._.
2013-10-02 21:01:25	darkx	._.
2013-10-02 21:02:21	letoh	強大
2013-10-02 21:02:29	darkx	QQ
2013-10-02 21:02:40	darkx	很多只是把作業推上來而已XD
2013-10-02 21:05:57	letoh	darkx: http://www.ugo.com/tech/anime-girl  人體暖爐(?
2013-10-02 21:06:23	darkx	嗚嗚
2013-10-02 21:06:59	-->	Yu_lin (24ec13a9@gateway/web/freenode/ip.36.236.19.169) has joined #haskell.tw
2013-10-02 21:10:38	CindyLinz	我看過有人平常也穿玩偶裝耶~
2013-10-02 21:10:52	letoh	剛剛那個是電腦喔
2013-10-02 21:11:10	letoh	但我一時找不到完整的組裝記錄... 很多年前看到的XD
2013-10-02 21:11:21	CindyLinz	畫質太差了, 我看手和大腿的部分以為是真人 XD
2013-10-02 21:11:46	letoh	不是  那外殼是用保麗龍切的
2013-10-02 21:13:02	CindyLinz	這才是人體版 XD # https://fbcdn-sphotos-b-a.akamaihd.net/hphotos-ak-prn2/1375119_740579375968312_52655034_n.jpg
2013-10-02 21:13:21	letoh	這應該是真人裝的XD
2013-10-02 21:13:45	CindyLinz	對啊 真的人
2013-10-02 21:14:06	letoh	十之八九是日本人  日本傳統文化喜歡把自己搞成人偶
2013-10-02 21:14:27	letoh	在 acg 裡也搞這套不意外XD
2013-10-02 21:14:46	Yu_lin	發生什麼事情，怎麼在討論這個？XD
2013-10-02 21:14:57	letoh	人體暖爐XD
2013-10-02 21:15:15	letoh	剛剛在找人體造型  又會發熱的東西XD
2013-10-02 21:15:44	darkx	XDDDDDD
2013-10-02 21:16:15	Yu_lin	XD
2013-10-02 21:18:30	CindyLinz	我找的是人體, 不是人體造型啊~~ XD
2013-10-02 21:18:47	CindyLinz	好吧, 裡面是人體, 外面是人體造型..
2013-10-02 21:18:51	letoh	XDXD
2013-10-02 21:18:53	letoh	type
2013-10-02 21:19:13	letoh	人體是 instance
2013-10-02 21:34:03	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 21:37:12	Yu_lin	有什麼方便簡單的 blog 可以用嗎？想寫寫文章
2013-10-02 21:37:20	Yu_lin	如果能用 rst 是最好了
2013-10-02 21:37:24	CindyLinz	昨天剛註冊了 logdown XD
2013-10-02 21:37:28	CindyLinz	rst?
2013-10-02 21:37:50	Yu_lin	RestructuredText
2013-10-02 21:38:05	CindyLinz	logdown 是 markdown 派的
2013-10-02 21:38:15	CindyLinz	xdite 做的
2013-10-02 21:46:47	Yu_lin	看起來 lodgown 好像吃 html，來試試看好了
2013-10-02 21:46:55	-->	b4284 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-02 21:47:29	letoh	原來是 xdite... 有支援直接吃 github 或 gist 嗎? XD
2013-10-02 21:48:45	Yu_lin	可以直接用 github sign up 耶XD
2013-10-02 21:49:51	Yu_lin	下面那一排 Link 居然沒有 plurk 嗎....？
2013-10-02 21:53:40	CindyLinz	我昨天才在問他.. # 21:47 < letoh> 原來是 xdite... 有支援直接吃 github 或 gist 嗎? XD
2013-10-02 21:54:02	letoh	所以應該很快就會有了? XD
2013-10-02 21:54:44	CindyLinz	他說「有計劃排入架構...目前還是 db backend ....」
2013-10-02 21:55:03	letoh	嗯嗯... gist 是別人的 db XD
2013-10-02 21:55:04	CindyLinz	現在應該就自己用 git 寫完以後
2013-10-02 21:55:11	CindyLinz	複製--貼上--- XD
2013-10-02 21:55:24	letoh	好麻煩XD
2013-10-02 21:55:39	CindyLinz	其實只要能用 git push 上去我覺得就很方便了, 不見得要 github
2013-10-02 21:55:53	CindyLinz	反正有 git, 我自己可以設兩個不同的 remote ^^
2013-10-02 21:56:05	letoh	也是啦
2013-10-02 21:56:19	letoh	我現在很多程式也是都兩個 remote
2013-10-02 22:05:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-02 22:14:58	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-02 22:16:15	favonia	xref 就是很噁心的 pointer 啊 lol
2013-10-02 22:16:50	letoh	這麼說也沒錯XD
2013-10-02 22:18:06	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 22:23:10	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-10-02 22:23:24	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-02 22:28:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-02 22:32:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-02 22:33:43	-->	hashcat_ (~chatzilla@27.241.175.151) has joined #haskell.tw
2013-10-02 22:34:08	<--	hashcat (~chatzilla@218-173-238-69.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-02 22:34:25	--	hashcat_ is now known as hashcat
2013-10-02 22:48:21	petercommand	CindyLinz: 我看到同一串XD
2013-10-02 23:08:39	Yu_lin	可惡，用 sml 要自己解決 UTF8，可是用 haskell 會遇到 monad，好煩阿XD
2013-10-02 23:10:32	hashcat	對monad有困難
2013-10-02 23:13:31	CindyLinz	petercommand: 啊?
2013-10-02 23:14:02	CindyLinz	Yu_lin: 那把 monad desugar 以後再用會比較順手嗎?
2013-10-02 23:14:12	CindyLinz	其實我是說 do-notation ^^|
2013-10-02 23:15:44	Yu_lin	寫 monad 對我來說沒問題，可是要解釋這東西就會出問題XD
2013-10-02 23:17:02	Yu_lin	比較怕的是同時出現兩個 monad 的時候，我覺得不太好處理
2013-10-02 23:19:53	petercommand	CindyLinz: git integration那個留言呀
2013-10-02 23:25:30	hashcat	兩個monad不會互相怎樣阿
2013-10-02 23:28:08	hashcat	不喜歡用monad可以用Arrow
2013-10-02 23:30:23	hashcat	用mercury好了嘿
2013-10-02 23:30:36	mno2	我想 Yu_lin 是說兩個 Monad 長得不太一樣的時候吧。  如果是 monad transformer 疊的東西又不太一樣就比較討厭。大絕就是都 run 成 IO
2013-10-02 23:31:04	mno2	blog 我覺得 scriptogr.am 還不錯耶
2013-10-02 23:31:21	mno2	貼到 dropbox 裡面就好了
2013-10-02 23:33:09	mno2	markdown 還是本地端的軟體好用.. 所以 dropbox 對我來說比較順手
2013-10-02 23:34:31	mno2	如果喜歡 markdown 的話可以參考這篇 -> http://scriptogr.am/wastemobile/post/markdown-publishing
2013-10-02 23:34:35	mno2	RST 就不知道了 ..
2013-10-02 23:38:50	petercommand	本地做note的話，我覺得lonote蠻好用的
2013-10-02 23:47:08	CindyLinz	Yu_lin: 這 monad 是你建立出來的, 不是 library 提供的介面喔?
2013-10-02 23:49:11	Yu_lin	不是阿XD
2013-10-02 23:49:24	Yu_lin	阿，不是我自己寫的阿
2013-10-02 23:55:17	CindyLinz	Yu_lin: 嗯, 因為你說要「解釋」, 所以以為是你自己寫的 lib, 要寫 doc 給別人看之類的
2013-10-02 23:58:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-03 00:02:03	Yu_lin	通常我是寫給以後的自己看的（被打
2013-10-03 00:02:46	Yu_lin	以前寫 perl 有遇過一年前寫的程式已經看不懂的情況....所以就....
2013-10-03 00:02:59	CindyLinz	噢..
2013-10-03 00:03:21	CindyLinz	我目前對 monad 的體會是....
2013-10-03 00:03:45	CindyLinz	不要去想 monad 是什麼, 而是去想 monad 的性質在這裡是不是剛好可以用
2013-10-03 00:04:20	CindyLinz	它沒有什麼理由, 可能就只是剛好符合, 可以用, 而用起來好像又蠻方便的, 所以就用了....
2013-10-03 00:05:46	<--	b4283 (~b4283@1-173-102-191.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-03 00:07:38	CindyLinz	我們去理解一個事物的時候, 常常用隱喻, 用類比.. 類比一個我們比較熟悉的東西, 最好是具體的東西..
2013-10-03 00:08:20	CindyLinz	但是這每一個能夠類比的東西, 總是會有個無法類比下去的 axiom, 也就是這個具體想像的開頭
2013-10-03 00:08:54	CindyLinz	我是絕望地覺得 monad 自己就是這一個開頭, 它自己就是我們經驗中最具體最熟悉的存在了... XD
2013-10-03 00:09:36	Yu_lin	XD
2013-10-03 00:09:50	CindyLinz	所以解釋 monad 的理由就變成是: 因為它是 monad 所以怎樣怎樣...
2013-10-03 00:10:02	CindyLinz	它就像 monad 一樣如何如何...
2013-10-03 00:11:59	<--	Yu_lin (24ec13a9@gateway/web/freenode/ip.36.236.19.169) has quit (Quit: Page closed)
2013-10-03 00:22:49	<--	b4284 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-10-03 01:02:22	hashcat	無他, 唯手熟爾
2013-10-03 01:02:39	hashcat	這是範疇論的哲學點
2013-10-03 01:03:16	hashcat	一個東西是啥不在於他本身, 在於他跟其他東西的關聯是什麼
2013-10-03 01:05:45	monochrom	明天問題: 我是誰? XD
2013-10-03 01:08:40	hashcat	以後說不定人腦可以用奈米機械或電子元件替代
2013-10-03 01:09:18	hashcat	腦殘失智或失語裝了那玩意, 還算不算自己
2013-10-03 01:12:39	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-10-03 01:12:56	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 01:25:57	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-03 01:33:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-03 02:11:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-03 02:14:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-03 02:54:27	<--	hashcat (~chatzilla@27.241.175.151) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-10-03 03:03:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-03 03:06:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-03 03:40:33	-->	mimosa (~mimosa@187-78-16-4.user.veloxzone.com.br) has joined #haskell.tw
2013-10-03 04:00:59	<--	mimosa (~mimosa@187-78-16-4.user.veloxzone.com.br) has quit (Quit: leaving)
2013-10-03 04:25:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-03 04:54:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-03 07:01:14	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-03 09:48:51	MnO2_	關於 blog 看到 zonble 在用這套 http://postach.io/  ，第一次看到 backend 用 evernote 的
2013-10-03 09:56:09	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 09:59:31	MnO2_	https://twitter.com/jgoldberg_/status/385487897207398401
2013-10-03 09:59:32	MnO2_	http://arstechnica.com/security/2013/10/silk-road-mastermind-unmasked-by-rookie-goofs-complaint-alleges/
2013-10-03 10:00:38	MnO2_	PHP 中槍
2013-10-03 10:02:17	MnO2_	cchan 居然還在用 svk ? https://twitter.com/ccshan/status/385475795965050880
2013-10-03 10:51:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-03 11:14:27	_13h	svk 不是停止開發了嗎?
2013-10-03 11:15:51	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 11:16:03	MnO2_	應該吧，所以才覺得奇特
2013-10-03 11:45:16	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-03 11:46:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-03 12:15:49	-->	Yu_lin (24ec1676@gateway/web/freenode/ip.36.236.22.118) has joined #haskell.tw
2013-10-03 12:21:04	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-03 13:39:58	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 14:07:31	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-03 14:08:00	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 14:23:02	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-03 14:28:17	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 14:41:20	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-03 14:46:29	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-03 15:12:24	-->	godfat (~Adium@1-164-254-188.dynamic.hinet.net) has joined #haskell.tw
2013-10-03 15:38:43	-->	godfat1 (~Adium@36-224-219-233.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-03 15:39:42	<--	Yu_lin (24ec1676@gateway/web/freenode/ip.36.236.22.118) has quit (Quit: Page closed)
2013-10-03 15:42:09	<--	godfat (~Adium@1-164-254-188.dynamic.hinet.net) has quit (Ping timeout: 241 seconds)
2013-10-03 15:42:26	godfat1	投影片我上次是用 https://github.com/shower/shower
2013-10-03 15:42:26	godfat1	據說用 chrome 輸出不錯，
2013-10-03 15:42:27	godfat1	不過裡面所有 html 轉 pdf 的工具，
2013-10-03 15:42:27	godfat1	轉我的只有 princexml 轉出來比較正常，
2013-10-03 15:42:27	godfat1	其他版面是完全爛的
2013-10-03 15:42:30	--	godfat1 is now known as godfat
2013-10-03 15:49:38	_13h	現在的開發都以 browser 為平台了XD
2013-10-03 16:03:22	MnO2_	我覺得用 browser 版的 slide 就是畫圖比較討厭。
2013-10-03 16:08:10	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-03 16:21:35	_13h	你是說要畫箭頭之類的嗎？也許要靠 canvas 解決?
2013-10-03 16:21:45	CindyLinz	SVG 啊~~ ^^
2013-10-03 16:22:36	mno2	favonia 流 (SVG)
2013-10-03 16:22:45	_13h	嗯  svg 應該也不錯
2013-10-03 16:23:21	_13h	像昨天講的那一套只是靠 css 排版而已吧
2013-10-03 16:24:59	CindyLinz	文件不大的時候可以用 SVG.. (遠目)
2013-10-03 16:25:16	CindyLinz	SVG 蠻慢的... ._.
2013-10-03 17:23:09	-->	hashcat (~chatzilla@36-238-38-135.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-03 18:17:35	godfat	favonia 那個看起來很棒，不過我 firefox 跑不動... ~.~
2013-10-03 18:29:12	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-03 18:41:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-03 18:56:12	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-03 19:34:04	<--	godfat (~Adium@36-224-219-233.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-10-03 20:02:03	-->	b4283 (~b4283@218-164-216-11.dynamic.hinet.net) has joined #haskell.tw
2013-10-03 20:20:11	-->	Yu_lin (24ec1669@gateway/web/freenode/ip.36.236.22.105) has joined #haskell.tw
2013-10-03 20:56:27	Yu_lin	問一個私人一點的問題....有人有用噗浪然後被下面這個帳號加粉絲的嗎？
2013-10-03 20:56:28	Yu_lin	http://www.plurk.com/carrolltrust
2013-10-03 22:37:22	<--	b4283 (~b4283@218-164-216-11.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-03 22:54:01	-->	suhorng (~suhorng@118-166-53-31.dynamic.hinet.net) has joined #haskell.tw
2013-10-03 22:54:52	<--	suhorng (~suhorng@118-166-53-31.dynamic.hinet.net) has quit (Client Quit)
2013-10-03 22:55:03	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-03 22:55:24	-->	suhorng (~suhorng@118-166-53-31.dynamic.hinet.net) has joined #haskell.tw
2013-10-03 22:55:48	suhorng	8122   110/03 carelai      □ [問題] 大家覺得函數式語言有前途嗎？ http://www.ptt.cc/bbs/Programming/M.1380810707.A.861.html
2013-10-03 22:55:52	suhorng	<戰> (誤)
2013-10-03 22:59:40	suhorng	http://haskellnews.org/grouped 原來有這種整合介面XD
2013-10-03 23:01:03	suhorng	my god, http://alpmestan.com/2013/06/27/ghc-core-by-example-episode-1/ http://alpmestan.com/2013/10/01/ghc-core-by-example-episode-2-evaluation/
2013-10-03 23:04:08	hashcat	額這很難回答
2013-10-03 23:04:49	hashcat	要正確分析這種問題要同時對經濟跟語言有一定認識
2013-10-03 23:05:32	suhorng	然後不知道他是不是要問關於工作之類的
2013-10-03 23:05:37	hashcat	人的慣性不遜於質點的慣性
2013-10-03 23:05:40	b4283	上次不是分析過了，haskell 最沒錢途啊 XD
2013-10-03 23:05:45	hashcat	哦那沒有
2013-10-03 23:06:10	hashcat	就慣性來說scala最有機會
2013-10-03 23:07:08	hashcat	轉移成本比另外三個都低
2013-10-03 23:08:04	CindyLinz	suhorng: 看起來不錯耶 :D # ghc-core-by-example-episode
2013-10-03 23:08:21	hashcat	有史為證
2013-10-03 23:08:35	suhorng	hashcat: 真的很多都是這樣耶
2013-10-03 23:08:51	suhorng	CindyLinz: 就是剛剛 haskellnews.org 首頁看到的XD
2013-10-03 23:09:39	Yu_lin	ghc bootstrappppppp
2013-10-03 23:09:43	hashcat	suhorng: 這是技術狂考量不到的事情
2013-10-03 23:11:05	hashcat	沒有什麼危及存亡之秋的理由, 不用期待大小企業會突然想到
2013-10-03 23:11:22	hashcat	沒ppt帳號
2013-10-03 23:11:44	suhorng	嗯, 要有帳號才能推文回文
2013-10-03 23:11:49	hashcat	有沒人有心轉答
2013-10-03 23:12:21	CindyLinz	那既然他問題問得這麼簡略.. 是不是只要存在至少一種 evaluation 方式, 使得存在至少一種函數式語言, 在某個特定的情況下有前途, 就可以回答他一個字: 有 了
2013-10-03 23:13:11	suhorng	假設不存在然後推矛盾 (X
2013-10-03 23:13:28	Yu_lin	不考慮用 agda 或 coq 嗎？XD
2013-10-03 23:13:31	letoh	自從 ptt 一堆連線板不禁推文的問題越來越嚴重後，我就不在 ptt 看連線板了XD
2013-10-03 23:13:32	hashcat	prolog可以取代你們了
2013-10-03 23:14:03	Yu_lin	It can run backward!
2013-10-03 23:15:33	suhorng	letoh: 現在已經不是連線板啦~ Group.NCTU (~ 2013)
2013-10-03 23:18:04	letoh	現在不是接到 tw.bbs.comp.language 啦?
2013-10-03 23:23:13	suhorng	大驚, 原來有接新的
2013-10-03 23:25:45	Yu_lin	hashcat 我幫你轉達好了，不過可能要請你再整理一下，哪些是要轉達的部份
2013-10-03 23:25:56	Yu_lin	全部？
2013-10-03 23:26:17	hashcat	意思到就好拉
2013-10-03 23:28:22	hashcat	反正我不負責嘿嘿
2013-10-03 23:28:56	Yu_lin	XDDDD
2013-10-03 23:42:52	hashcat	頭一次只開emacs-live沒開任何檔案
2013-10-03 23:43:24	hashcat	有噁心到
2013-10-03 23:46:01	hashcat	突然被文字編輯器表白
2013-10-03 23:46:33	Yu_lin	不愧是 emacs，連表白都學會了
2013-10-03 23:48:00	b4283	emacs-live 是什麼模式？
2013-10-03 23:49:09	hashcat	一時衝動把emacs做掉了
2013-10-03 23:49:51	hashcat	http://overtone.github.io/emacs-live/
2013-10-03 23:56:36	hashcat	貌似幾乎只支持clojure
2013-10-04 00:03:10	<--	hashcat (~chatzilla@36-238-38-135.dynamic-ip.hinet.net) has quit (Remote host closed the connection)
2013-10-04 00:04:30	-->	hashcat (~chatzilla@36-238-38-135.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-04 00:05:28	<--	suhorng (~suhorng@118-166-53-31.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-04 00:05:44	hychen	"突然被文字編輯器表白" # 被戳中笑點.... XD
2013-10-04 00:06:46	letoh	那是怎麼回事@_@
2013-10-04 00:07:36	petercommand	hychen: 是文字編輯器的彩蛋嗎XD
2013-10-04 00:15:41	hashcat	砍了唉
2013-10-04 00:16:00	hashcat	不是因為被他表白的關係
2013-10-04 00:16:11	hashcat	每次開都要載入一票東西
2013-10-04 00:17:15	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-10-04 00:30:10	<--	hashcat (~chatzilla@36-238-38-135.dynamic-ip.hinet.net) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-10-04 00:37:04	Yu_lin	手殘不小心把文章發出去了，本來想要明天繼續打的...Orz|||
2013-10-04 00:37:06	<--	Yu_lin (24ec1669@gateway/web/freenode/ip.36.236.22.105) has quit (Quit: Page closed)
2013-10-04 00:41:46	CindyLinz	下集待續 XD
2013-10-04 00:43:53	-->	godfat (~Adium@114-24-5-113.dynamic.hinet.net) has joined #haskell.tw
2013-10-04 00:52:18	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-04 01:10:33	letoh	那大長篇  還有下集啊?
2013-10-04 01:20:01	letoh	某推文：「所有語言只分為OO跟非OO 其他差異都不算大。為什麼會這樣分？是因為這兩種系統的思考方向是不同的。」   這人玩過多少東西可以有這樣的論點啊XD
2013-10-04 01:25:01	CindyLinz	然後就被 suhorng 和 Yu_lin 圍了?
2013-10-04 01:25:35	letoh	那是另外一篇 c++ 的文章，不是 fp 那篇
2013-10-04 01:26:16	CindyLinz	對啊, 下面 suhorng 推了好幾個 :p
2013-10-04 01:27:16	letoh	喔  那個 drm... 剛剛沒注意到XD
2013-10-04 01:29:01	letoh	唔  那個板竟然還有留我的廢文XD
2013-10-04 01:29:36	letoh	然後我回的文原來就是 drm XD
2013-10-04 01:38:47	CindyLinz	remark 目前用起來感覺不錯, 只剩下一個最嚴重的問題
2013-10-04 01:38:50	CindyLinz	內容....||
2013-10-04 01:49:14	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-10-04 01:58:18	letoh	內容?
2013-10-04 01:58:26	CindyLinz	投影片啊 ._.
2013-10-04 01:58:39	letoh	喔喔喔
2013-10-04 02:11:45	monochrom	對我來說, 所有語言只分為: 定義了 f x = x+x 後, f (g 5) 是不是等同 g 5 + g 5.
2013-10-04 02:13:52	monochrom	這個分別完全決定你可以怎樣把程式組織 (即怎樣把問題分割)
2013-10-04 02:16:12	monochrom	這是一個 substitutability principle, 而且比 Liskov's substitutability principle 更基礎!
2013-10-04 02:17:27	monochrom	呀, 應該 s/基礎/根本/ , 我想用的英文是 fundamental
2013-10-04 02:56:25	CindyLinz	suhorng: remark 的頁面裡想要一項一項出來, 方法就是複製貼上整頁, 然後再補上想多出來的項目嗎? @@"
2013-10-04 03:00:00	monochrom	那就太可惜了!
2013-10-04 03:02:26	CindyLinz	啊, 可以不用!
2013-10-04 03:02:54	CindyLinz	假設 page 1 / page 2 有這樣的關係, 就是 page 2 是 page 1 一樣的內容再多加一項
2013-10-04 03:03:13	CindyLinz	可以在 page 2 裡面說拿 page 1 當 template
2013-10-04 03:03:19	CindyLinz	然後再加 page 2 多出來的內容
2013-10-04 03:05:14	CindyLinz	remark 這種 browser based 的還做了會和前台連動的 presenter 模式真是很炫的感覺 XD
2013-10-04 03:08:06	CindyLinz	可是用 template 的話, 好像需要把被當 template 的頁面取 name @@"
2013-10-04 03:08:15	CindyLinz	不知道怎麼跟他說我要用「前一頁」
2013-10-04 03:56:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-04 04:29:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-04 05:06:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-04 05:33:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-04 06:29:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-04 07:29:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-04 09:04:52	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-04 09:47:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-04 10:00:41	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 10:16:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-04 10:17:33	MnO2_	https://www.fpcomplete.com/user/dolio/many-roads-to-free-monads
2013-10-04 10:20:58	-->	Yu_lin (24ec16a5@gateway/web/freenode/ip.36.236.22.165) has joined #haskell.tw
2013-10-04 10:25:49	Yu_lin	本來想說早上起來，頭腦比較清醒，就把 scheme 的心得補完，結果不小心按到送出，只好草草做結了
2013-10-04 10:32:08	MnO2_	blog? where?
2013-10-04 10:32:26	Yu_lin	昨晚 ptt 上那篇
2013-10-04 10:32:29	_13h	所以你要發展成大長篇了嗎? XD
2013-10-04 10:32:42	Yu_lin	沒有阿，我已經做結了XDDD
2013-10-04 10:32:44	_13h	而且還是連載大長篇XD
2013-10-04 10:32:57	_13h	喔喔喔  晚上再看看XD
2013-10-04 10:33:55	Yu_lin	我對這句推文「所有語言只分為OO跟非OO 其他差異都不算大。為什麼會這樣分？是因為這兩種系統的思考方向是不同的。」有印象，但是想不起來是那邊看到的
2013-10-04 10:34:51	_13h	ptt.. 往上翻一頁的某一篇文章裡看到的
2013-10-04 10:40:05	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 10:54:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-04 11:08:13	monochrom	哈哈 monads are just free-monad monad monad-algebras
2013-10-04 11:15:14	Yu_lin	好想推 yoco315 那句「連 c 都不會就更好了....」
2013-10-04 11:27:24	_13h	那句我有看到，很中肯啊
2013-10-04 11:30:46	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-10-04 11:34:04	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-04 11:59:42	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-04 12:00:12	Yu_lin	咦！coursera 還有這種互動式的課堂小問題喔XD
2013-10-04 12:02:50	favonia	Yu_lin: yoco315 那句在哪裡？
2013-10-04 12:03:46	Yu_lin	所有語言只分為OO跟非OO那一篇
2013-10-04 12:04:32	CindyLinz	http://www.ptt.cc/bbs/Programming/M.1378091656.A.857.html
2013-10-04 12:21:57	favonia	xDD
2013-10-04 12:25:38	_13h	那個人後來又說 asm 是特例
2013-10-04 12:26:41	_13h	Yu_lin: 你補的部份 web 版看不到嗎?
2013-10-04 12:27:10	Yu_lin	我補的？是說昨天那個 FPL 前途那篇嗎？
2013-10-04 12:27:29	_13h	對啊
2013-10-04 12:27:40	_13h	你不是說有補 scheme 的部份嗎?
2013-10-04 12:28:22	Yu_lin	本來想說早上起來要補的，手滑發出去，就想說算了，好像也沒什麼需要補的了XD
2013-10-04 12:29:54	Yu_lin	比起我的看法，讓他去看王垠對 scheme 的解釋會更好吧XDD
2013-10-04 12:40:09	_13h	原來 vb 還在用 ocx 元件啊
2013-10-04 12:40:25	_13h	而且現在還有人在開發 ocx 元件XD
2013-10-04 13:33:17	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 13:48:38	CindyLinz	Yu_lin: 初看那些文章的時候跳到最下面, 突然覺得很疑惑, 奇怪不是轉述 hashcat 的意見嗎, 怎麼竟然會推荐王垠 XDD
2013-10-04 13:49:17	Yu_lin	XD
2013-10-04 13:53:13	CindyLinz	找到.. remark 如果用 -- 分頁而不是 --- 分頁的話, 那麼就是把前一頁的內容再加上這一頁新寫的內容
2013-10-04 14:09:46	-->	suhorng (8c701083@gateway/web/freenode/ip.140.112.16.131) has joined #haskell.tw
2013-10-04 14:10:36	suhorng	sorry, 我沒仔細研究 remark 的語法 orz
2013-10-04 14:10:44	suhorng	所以上次的投影片檔案才會那麼大....
2013-10-04 14:11:59	suhorng	http://stackoverflow.com/questions/13352205/what-are-free-monads
2013-10-04 14:12:10	CindyLinz	suhorng: 你的投影片是我的 tutorial.. XD
2013-10-04 14:12:52	CindyLinz	Free monad.. 我前幾天寫了一半這篇的練習..... 目前好像開始有一點點 fu :Q http://blog.ezyang.com/2012/01/problem-set-the-codensity-transformation/
2013-10-04 14:13:28	suhorng	是說 Free Monad 就是 GHC TypeHoles 舉的例子, 但是想在 Agda 裡面弄卻不知道要怎麼寫XD
2013-10-04 14:13:49	suhorng	codensity (!) 一直不知道這是什麼
2013-10-04 14:15:09	suhorng	我只記得之前有這篇 http://www.haskellforall.com/2013/06/from-zero-to-cooperative-threads-in-33.html 有人做了demo XD 剛好有使用free monad
2013-10-04 14:15:27	CindyLinz	依目前的一點點 fu... 覺得好像是推廣的 [a] 變成 [a] -> [a], 以作出 constant time append 的效果
2013-10-04 14:15:53	CindyLinz	這個叫 Hughes list
2013-10-04 14:17:01	CindyLinz	我現在的具體想像是把將來可能要接, 但現在還沒出現的後半, 先留在 function 的參數裡, 等將來它真的出現了定案了, 才拿它來把真實的 list 建出來
2013-10-04 14:23:49	suhorng	來研究看看
2013-10-04 14:24:53	suhorng	上次看到 codensity 這個字出現在 http://blog.sigfpe.com/2008/12/mother-of-all-monads.html (Edward Kmett的留言)
2013-10-04 14:40:38	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-04 15:16:11	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-10-04 15:31:02	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-10-04 16:14:58	<--	suhorng (8c701083@gateway/web/freenode/ip.140.112.16.131) has quit
2013-10-04 17:02:47	-->	hashcat (~chatzilla@27.241.175.151) has joined #haskell.tw
2013-10-04 17:22:41	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-10-04 17:40:44	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 17:41:16	<--	godfat (~Adium@114-24-5-113.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-10-04 17:55:20	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-10-04 18:00:17	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-04 18:13:26	<--	hashcat (~chatzilla@27.241.175.151) has quit (Ping timeout: 240 seconds)
2013-10-04 18:49:57	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-04 19:28:52	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 19:44:13	-->	b4283 (~b4283@1-173-96-68.dynamic.hinet.net) has joined #haskell.tw
2013-10-04 20:41:45	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 21:37:08	-->	hashcat (~chatzilla@27.52.79.123) has joined #haskell.tw
2013-10-04 21:47:10	<--	b4283 (~b4283@1-173-96-68.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-04 21:59:08	-->	suhorng (76a6351f@gateway/web/freenode/ip.118.166.53.31) has joined #haskell.tw
2013-10-04 22:02:30	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-04 22:11:39	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-04 22:12:16	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-04 23:10:20	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-04 23:31:06	<--	Yu_lin (24ec16a5@gateway/web/freenode/ip.36.236.22.165) has quit (Quit: Page closed)
2013-10-04 23:35:20	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-04 23:52:01	-->	liuzhoou (~liuzhoou@58.51.149.218) has joined #haskell.tw
2013-10-04 23:58:02	<--	suhorng (76a6351f@gateway/web/freenode/ip.118.166.53.31) has quit
2013-10-05 00:00:42	<--	liuzhoou (~liuzhoou@58.51.149.218) has quit (Remote host closed the connection)
2013-10-05 00:01:49	-->	liuzhoou (~liuzhoou@58.55.124.228) has joined #haskell.tw
2013-10-05 00:47:58	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-10-05 00:52:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-05 01:04:41	-->	caasih (~caasiHuan@114-46-156-157.dynamic.hinet.net) has joined #haskell.tw
2013-10-05 01:38:02	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-05 01:44:25	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-05 02:16:59	<--	liuzhoou (~liuzhoou@58.55.124.228) has quit (Remote host closed the connection)
2013-10-05 02:30:54	<--	hashcat (~chatzilla@27.52.79.123) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-10-05 02:33:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-05 02:36:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-05 02:43:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-05 02:55:06	<--	caasih (~caasiHuan@114-46-156-157.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-05 03:15:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-05 04:09:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-05 05:27:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-05 06:18:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-05 07:49:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-05 08:04:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-05 09:19:07	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-05 09:21:43	MnO2	godfat1: ping
2013-10-05 09:24:36	godfat1	yo
2013-10-05 09:24:42	--	godfat1 is now known as godfat
2013-10-05 09:24:55	godfat	MnO2, pong
2013-10-05 09:26:01	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-05 09:29:16	mno2_	godfat: private message
2013-10-05 09:29:22	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-05 09:29:22	--	mno2_ is now known as mno2
2013-10-05 09:29:55	godfat	mno2_ 有看到，抱歉正在跟人講話 XD
2013-10-05 09:31:26	mno2	OK
2013-10-05 10:12:18	-->	b4283 (~b4283@218-164-203-129.dynamic.hinet.net) has joined #haskell.tw
2013-10-05 11:54:59	--	irc: disconnected from server
2013-10-06 09:57:41	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-06 09:57:41	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-06 09:57:41	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-06 09:57:41	--	Nicks #haskell.tw: [a2n cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru lambdabot letoh logfat_ lwhsu miaout17_ miaout17__ monochrom shik superbil]
2013-10-06 09:57:41	--	Channel #haskell.tw: 23 nicks (0 ops, 0 halfops, 0 voices, 23 normals)
2013-10-06 09:57:41	***	Buffer Playback...
2013-10-06 09:57:41	suhorng	[00:55:28] 需要辨認出哪些被改, 因為沒有 type Orz
2013-10-06 09:57:41	suhorng	[00:56:36] Scheme 裡面 variable reference 沒有像 ML 那樣 "!" 明確寫
2013-10-06 09:57:41	CindyLinz	[00:56:46] 喔喔...
2013-10-06 09:57:41	CindyLinz	[00:57:08] 我目前讀的部分蠻前面的, 以為都是不能改的 :p
2013-10-06 09:57:41	suhorng	[00:59:41] 大家的作法都差好多XD
2013-10-06 09:57:41	suhorng	[00:59:47] *語言的作法
2013-10-06 09:57:41	CindyLinz	[01:00:34] 這樣很好 :p
2013-10-06 09:57:41	suhorng	[01:00:38] XDD
2013-10-06 09:57:41	CindyLinz	[01:01:00] 有了什麼新平台想 porting 的話也比較有路
2013-10-06 09:57:41	CindyLinz	[01:01:16] 既然它已經用這麼多種不同的方式實作, 再多一種可能也不太難
2013-10-06 09:57:41	CindyLinz	[01:01:23] 像 perl 就... QQ
2013-10-06 09:57:41	CindyLinz	[17:05:27] 寫一寫 chrome extension 就好想自己寫個 browser....||
2013-10-06 09:57:41	CindyLinz	[17:06:06] chrome extension 的 api 真是好亂, 東漏西漏的... 感覺像他們工程師或 PM, 想到一個功能就做一個功能, 互相不整合的 :|
2013-10-06 09:57:41	MnO2_	[17:14:54] 最後就變 NaCL 了 (誤)
2013-10-06 09:57:41	hashcat	[20:25:38] https://github.com/overtone/emacs-live
2013-10-06 09:57:41	hashcat	[20:25:49] 用這個寫clojure中
2013-10-06 09:57:41	suhorng	[20:45:21] hashcat: 好奇一下XD　你用 ParEdit (minor) mode 嗎?
2013-10-06 09:57:41	hashcat	[20:46:38] 他預設開的就用了
2013-10-06 09:57:41	hashcat	[20:48:10] 下括號拔不掉, 要移動一段只能整塊括號成對剪下
2013-10-06 09:57:41	hashcat	[20:48:31] 培養了個好習慣
2013-10-06 09:57:41	suhorng	[20:51:41] 真的
2013-10-06 09:57:41	suhorng	[20:51:51] 而且我覺得一些直接操作一整個node超級好用
2013-10-06 09:57:41	suhorng	[20:52:37] 像是把這個節點最前/後的子節點吐出去, 或把外面的吞進來, 還可以兩層換位置之類
2013-10-06 09:57:41	suhorng	[20:52:43] 直接編輯AST的感覺XD
2013-10-06 09:57:41	hashcat	[20:53:50] 有時後會出鎚
2013-10-06 09:57:41	suhorng	[20:54:04] bug？
2013-10-06 09:57:41	hashcat	[20:54:08] 不知道按到啥括號不成對了
2013-10-06 09:57:41	hashcat	[20:54:32] 他貌似不是每種刪除下括號都擋得了
2013-10-06 09:57:41	suhorng	[20:54:35] 嗯..我是有不小心按過大括號, 然後就再也動不了了
2013-10-06 09:57:41	suhorng	[20:54:55] 有的刪除可能是 emacs 內建的刪除功能, 造成不成對 (像 C-Del)
2013-10-06 09:57:41	hashcat	[20:56:11] C-w
2013-10-06 09:57:41	suhorng	[20:56:29] 嗯 應該也會
2013-10-06 09:57:41	hashcat	[20:56:57] 忘記怎用出來了
2013-10-06 09:57:41	hashcat	[20:57:15] 有次跑出一個下括號刪不掉
2013-10-06 09:57:41	suhorng	[20:58:38] 那樣真的很麻煩= =|||
2013-10-06 09:57:41	hashcat	[20:58:39] 貌似不是啥重要的事情
2013-10-06 09:57:41	hashcat	[20:59:47] 換成vim補起來
2013-10-06 09:57:41	suhorng	[21:01:37] 十分難過XD 內建的還原不太好用...
2013-10-06 09:57:41	CindyLinz	[21:02:29] 想到王垠的 editor... ^^
2013-10-06 09:57:41	hashcat	[21:02:33] emacs-live的還原很好用
2013-10-06 09:57:41	hashcat	[21:02:40] 又是王垠
2013-10-06 09:57:41	CindyLinz	[21:03:24] hashcat: 中文的文章不好找啊.... (攤)
2013-10-06 09:57:41	suhorng	[21:03:40] hmm.. lisp.tw XD?
2013-10-06 09:57:41	Yu_lin	[21:04:01] 中文文章難找，看起來只好自己寫了？XD
2013-10-06 09:57:41	hashcat	[21:04:20] 他寫中文繁體字我也看不懂
2013-10-06 09:57:41	CindyLinz	[21:04:20] 先拜.... m(_._)m
2013-10-06 09:57:41	CindyLinz	[21:06:48] 我直接看簡體字沒什麼障礙, 只是看到用繁體字寫的, 有台灣用語的大陸用語會很不慣 ^^|
2013-10-06 09:57:41	CindyLinz	[21:07:51] 像什麼... 「內存緊張」「魯棒的冗餘迴路設計」.. XD
2013-10-06 09:57:41	hashcat	[21:07:58] 我是不知道他到底要講啥
2013-10-06 09:57:41	hashcat	[21:08:03] 看簡體字是沒差
2013-10-06 09:57:41	godfat	[21:08:16] 內存緊張.... 是缺少記憶體？
2013-10-06 09:57:41	CindyLinz	[21:08:24] yes...||
2013-10-06 09:57:41	godfat	[21:08:57] 說真的我好討厭那些奇怪的翻譯呀...
2013-10-06 09:57:41	hashcat	[21:09:07] robust應該翻譯成強健或耐受之類的吧
2013-10-06 09:57:41	CindyLinz	[21:09:11] 但如果純簡體字寫就沒有違和感 ^^
2013-10-06 09:57:41	hashcat	[21:09:14] 魯棒很難聽
2013-10-06 09:57:41	CindyLinz	[21:09:49] 魯棒真是罕見的大陸譯法 XD  我覺得他們通常是用意譯的
2013-10-06 09:57:41	hashcat	[21:09:58] 說是音譯唸起來也沒像到哪去
2013-10-06 09:57:41	CindyLinz	[21:10:12] 而且常常譯得不錯, 音譯不常見
2013-10-06 09:57:41	CindyLinz	[21:10:26] hashcat: 可能大陸人的英文發音跟這個字會比較像? @@"
2013-10-06 09:57:41	godfat	[21:10:39] 我記得數量級有一個翻譯跟台灣不一樣，好像是 mega?
2013-10-06 09:57:41	CindyLinz	[21:10:44] 兆
2013-10-06 09:57:41	godfat	[21:10:59] 那真正的兆怎麼說？
2013-10-06 09:57:41	CindyLinz	[21:11:15] 應該還是兆吧.. @_@"  反正中文本來就吃 context 吃很重 ._.
2013-10-06 09:57:41	godfat	[21:11:21] ........orz
2013-10-06 09:57:41	MnO2_	[21:12:54] 音譯應該香港一堆吧 xD   屈臣氏
2013-10-06 09:57:41	CindyLinz	[21:12:54] 想到今天看 free monad 介紹文裡面的 sample code.. instance 定義裡面用到的 type variable 和它的函數字義的 variable 喜歡用重複的名字... 不小心就會很困惑 @@"
2013-10-06 09:57:41	hashcat	[21:13:46] 他們根本是想直接講英文吧
2013-10-06 09:57:41	CindyLinz	[21:14:01] 我超愛前一陣子在一個大陸寫的 php library 裡面看到的註解..
2013-10-06 09:57:41	CindyLinz	[21:14:28] (找一下)
2013-10-06 09:57:41	CindyLinz	[21:17:26] token
2013-10-06 09:57:41	CindyLinz	[21:17:30] 叫作 令牌
2013-10-06 09:57:41	godfat	[21:18:03] 查了一下，他們叫「太」 @_@
2013-10-06 09:57:41	godfat	[21:18:04] http://zh.wikipedia.org/zh-tw/太拉
2013-10-06 09:57:41	godfat	[21:18:21] 令牌 XDDDDDD
2013-10-06 09:57:41	CindyLinz	[21:18:23] tera?
2013-10-06 09:57:41	godfat	[21:18:27] 嗯
2013-10-06 09:57:41	CindyLinz	[21:18:55] 咦, 他們高位數直接改成千進位喔 @@"
2013-10-06 09:57:41	Yu_lin	[21:21:04] 把資料寫進 ax 的千進位......？
2013-10-06 09:57:41	CindyLinz	[21:21:16] 這個表... 怎麼中華民國的部分我都覺得陌生 orz
2013-10-06 09:57:41	godfat	[21:21:31] 說來萬好像是個有點微妙的存在倒是... ~.~
2013-10-06 09:57:41	godfat	[21:22:29] 對照這個
2013-10-06 09:57:41	godfat	[21:22:29] http://zh.wikipedia.org/zh-tw/中文数字
2013-10-06 09:57:41	godfat	[21:22:29] 三個零和四個零的麻煩 -_-
2013-10-06 09:57:41	CindyLinz	[21:22:55] godfat: 欸, 這個表是「國際單位制詞頭」.. 不能拿來代表他們平常沒有用 萬億兆京 啊 @"
2013-10-06 09:57:41	CindyLinz	[21:22:58] @@"
2013-10-06 09:57:41	godfat	[21:23:53] XD 真麻煩 orz
2013-10-06 09:57:41	godfat	[21:24:26] 不可說不可說不可說 XDDDD
2013-10-06 09:57:41	CindyLinz	[21:24:28] 還是靠 context 對吧 XD
2013-10-06 09:57:41	godfat	[21:24:37] 看來是 orz....
2013-10-06 09:57:41	CindyLinz	[21:30:44] 我們現在用的是中數系統, 是萬進位的... 上數系統的「數窮則變」看起來真不錯, 這才是好好利用每一個 symbol 呀 :p
2013-10-06 09:57:41	CindyLinz	[21:31:10] 就是.. 億兆京垓.. 這些, 每一個都是前一個的平方倍
2013-10-06 09:57:41	godfat	[21:33:16] 意思就是用萬億之類的方式，而不是換字嗎？
2013-10-06 09:57:41	CindyLinz	[21:36:08] godfat: 對, 用一樣的十個字
2013-10-06 09:57:41	CindyLinz	[21:36:24] 欸.. 喔, 嗯嗯 中間是繼續組合小字
2013-10-06 09:57:41	godfat	[21:36:41] 不過這樣數字很大很亂時，比較難一眼看出數量級
2013-10-06 09:57:41	suhorng	[21:36:45] 慘了orz Haskell寫多了寫 OCaml 就寫錯了...
2013-10-06 09:57:41	suhorng	[21:38:02] let itoa4 n output =
2013-10-06 09:57:41	suhorng	[21:38:02]   let rec aux m t =
2013-10-06 09:57:41	suhorng	[21:38:02]     if t == 0
2013-10-06 09:57:41	suhorng	[21:38:02]     then ()
2013-10-06 09:57:41	suhorng	[21:38:02]     else output.(t-1) <- Char.chr ((m mod 10) + 48);
2013-10-06 09:57:41	suhorng	[21:38:02]          aux (m / 10) (t - 1)
2013-10-06 09:57:41	suhorng	[21:38:02]   in aux n 4;;
2013-10-06 09:57:41	suhorng	[21:38:03] 這個的 type 是.... int → char array → 'a （？？？？）
2013-10-06 09:57:41	suhorng	[21:38:23] 因為 if-then-else 只到 ...+ 48); 那裡為止, 遞迴的部份變成不在 if 裡面..
2013-10-06 09:57:41	mno2	[21:43:01] https://docs.google.com/presentation/d/1ZODuGNVnddLy2DG_IiPnBb5LBl0r1Rwhm_5LGGDQECY/edit#slide=id.p  下禮拜的投影片初稿
2013-10-06 09:57:41	mno2	[21:43:19] 不過做了半天發覺好像跟 FP 關係不是很大 xD
2013-10-06 09:57:41	mno2	[21:43:25] 幾乎都是系統
2013-10-06 09:57:41	Yu_lin	[21:43:29] 我寫 sml 也是快掛掉了
2013-10-06 09:57:41	CindyLinz	[21:44:16] 啊.. 投影片 orz
2013-10-06 09:57:41	mno2	[21:44:44] 已經 4x 頁了 xD
2013-10-06 09:57:41	mno2	[21:45:00] 但其實還有東西沒有講
2013-10-06 09:57:41	CindyLinz	[21:46:51] 要不要分成兩次講啊 orz
2013-10-06 09:57:41	CindyLinz	[21:47:49] mno2: 用的符號很 Haskell 啊 XD # 21:43 < mno2> 不過做了半天發覺好像跟 FP 關係不是很大 xD
2013-10-06 09:57:41	CindyLinz	[21:48:18] 你下面那三顆水桶的位置是不是斜的啊 @@"
2013-10-06 09:57:41	mno2	[21:48:35] 哪三顆？
2013-10-06 09:57:41	mno2	[21:48:56] 喔喔
2013-10-06 09:57:41	mno2	[21:48:58] 好像有點斜
2013-10-06 09:57:41	CindyLinz	[21:49:06] Gateway server, Middleware server, Web server
2013-10-06 09:57:41	mno2	[21:49:10] 隨便啦，用 touchpad 畫的 xD
2013-10-06 09:57:41	CindyLinz	[21:52:39] 結束時間訂成九點半好了... ^^|
2013-10-06 09:57:41	mno2	[22:48:29] CindyLinz 有在寫 blog 喔？
2013-10-06 09:57:41	CindyLinz	[23:30:53] mno2: 有「想要寫」很久了.. orz
2013-10-06 09:57:41	CindyLinz	[23:31:05] 所以一直很敬佩那些一直寫一直寫的人 @@"
2013-10-06 09:57:41	mno2	[23:31:23] 喔喔。只是看到你說要註冊 logdown 想說沒搜到啊 xD
2013-10-06 09:57:41	CindyLinz	[23:33:08] 註冊了..
2013-10-06 09:57:41	CindyLinz	[23:33:18] http://cindylinz.logdown.com/
2013-10-06 09:57:41	CindyLinz	[23:33:24] 空的... ._.
2013-10-06 09:57:41	letoh	[23:33:51] markdown syntax...
2013-10-06 09:57:41	petercommand	[23:34:00] logdown的創始人的fb天天都在宅配零食阿，洋芋片，礦泉水之類的XD
2013-10-06 09:57:41	CindyLinz	[23:34:19] 此風不可長....
2013-10-06 09:57:41	mno2	[23:34:45] 不太健康 xD
2013-10-06 09:57:41	letoh	[23:34:56] 這 table 語法是外掛的吧? markdown 應該不支援 table ?
2013-10-06 09:57:41	CindyLinz	[23:35:07] 前幾天他去他的對手 (宅配對手XD) 的公司, 哭說他覺得被霸凌了
2013-10-06 09:57:41	petercommand	[23:35:18] XD
2013-10-06 09:57:41	CindyLinz	[23:35:23] 因為他寄了一大堆食物, 隔天已經被吃掉 90%
2013-10-06 09:57:41	Yu-Lin	[23:35:30] XD
2013-10-06 09:57:41	CindyLinz	[23:35:53] 對方說: 公司大就沒在怕啊! 你那十個人的小公司怎麼跟我們玩!?
2013-10-06 09:57:41	petercommand	[23:36:08] XDDD
2013-10-06 09:57:41	mno2	[23:36:08] markdown 好像很多方言的樣子 xD
2013-10-06 09:57:41	CindyLinz	[23:36:09] KKBox 200人..
2013-10-06 09:57:41	CindyLinz	[23:36:44] letoh: ```語言   ``` 也是方言才有呀.. 純 markdown 我覺得蠻漂亮的, 可是真的是太少了 ^^|
2013-10-06 09:57:41	CindyLinz	[23:36:58] markdown 還有放 latex 外掛 XD
2013-10-06 09:57:41	letoh	[23:37:00] 唔  所以找 markdown renderer 還得看相容哪個方言? XD
2013-10-06 09:57:41	mno2	[23:37:05] 最近還有 MultiMarkdown
2013-10-06 09:57:41	CindyLinz	[23:37:09] letoh: 用眼睛看吧 XD
2013-10-06 09:57:41	mno2	[23:37:09] 對啊
2013-10-06 09:57:41	CindyLinz	[23:38:24] 想到以前學校有個學長, 習慣看 latex over 建出來的 pdf/ps....
2013-10-06 09:57:41	CindyLinz	[23:38:38] 他很適合直接看有 latex 外掛的 markdown..... wwww
2013-10-06 09:57:41	letoh	[23:39:01] 我的公司報告和簡報也是用 latex
2013-10-06 09:57:41	letoh	[23:39:17] 不過必要時還是得改成 word XD
2013-10-06 09:57:41	CindyLinz	[23:39:39] 我每一次做簡報都用一套不同的東西.... orz   還沒找到用起來開心可以用第二次的 orz
2013-10-06 09:57:41	CindyLinz	[23:40:01] 這次想用 suhorng 上次用的那個, 希望就一直用下去了 :D
2013-10-06 09:57:41	CindyLinz	[23:40:09] 也是 markdown 血統的東西 :p
2013-10-06 09:57:41	letoh	[23:40:15] powerpoint 實在不好用啊  打開後不曉得該做什麼XD
2013-10-06 09:57:41	petercommand	[23:40:24] CindyLinz: 太強了XD
2013-10-06 09:57:41	letoh	[23:40:28] suhorng 上次用哪一套?
2013-10-06 09:57:41	CindyLinz	[23:40:51] letoh: 先用一次 libreoffice 的 presentation, 然後就會覺得 MS powerpoint 真是好用到令人痛哭流涕 ._.
2013-10-06 09:57:41	CindyLinz	[23:41:28] letoh: 這個 https://github.com/gnab/remark
2013-10-06 09:57:41	letoh	[23:41:29] 我用過 openoffice 的... 這樣一比的確會覺得 powerpoint 很不錯
2013-10-06 09:57:41	letoh	[23:41:42] 其實我根本覺得 openoffice 沒資格出來比XD
2013-10-06 09:57:41	CindyLinz	[23:41:47] petercommand: 我作簡報的間隔很長啦... ^^|
2013-10-06 09:57:41	letoh	[23:41:53] CindyLinz: thanks, 研究看看
2013-10-06 09:57:41	petercommand	[23:42:47] CindyLinz: 天天用不同套超強大阿^^
2013-10-06 09:57:41	letoh	[23:42:54] 嗯  不過限定 in browser 對我來說就比較不適合
2013-10-06 09:57:41	CindyLinz	[23:43:10] petercommand: 如果是「天天」才有超強大啊... ^^|
2013-10-06 09:57:41	CindyLinz	[23:43:32] 我每次相隔幾個月吧 XD
2013-10-06 09:57:41	petercommand	[23:43:56] XD
2013-10-06 09:57:41	CindyLinz	[23:44:02] letoh: 你會在沒 browser 的環境用啊? @@"
2013-10-06 09:57:41	CindyLinz	[23:44:14] 它不用連網路啊
2013-10-06 09:57:41	letoh	[23:44:21] 應該是說 除了簡報外  還得把資料交出去
2013-10-06 09:57:41	CindyLinz	[23:44:29] 就交一個 html?
2013-10-06 09:57:41	letoh	[23:44:38] 圖片之類的怎麼辦? XD
2013-10-06 09:57:41	letoh	[23:45:01] 不過可以研究看看  當成 org-mode 的某個 backend 來用XD
2013-10-06 09:57:41	CindyLinz	[23:45:13] <img src="data:image/png;base64,......./>
2013-10-06 09:57:41	letoh	[23:45:14] 要交出去再重新轉成 pdf 就好
2013-10-06 09:57:41	letoh	[23:45:22] 還有這招XD
2013-10-06 09:57:41	CindyLinz	[23:45:37] 圖片 < 2MB 的時候可以安全用 ._.
2013-10-06 09:57:41	letoh	[23:45:51] 剛剛就在想說只能把資料塞進 html 裡了
2013-10-06 09:57:41	CindyLinz	[23:45:52] >= 2MB 以後.... IE or Firefox 可以用, chrome 就出局了
2013-10-06 09:57:41	petercommand	[23:45:59] CindyLinz: XDD
2013-10-06 09:57:41	CindyLinz	[23:49:32] 啊.. 如果圖檔 >= 2MB 還想給 chrome 用的話, 有個古老的方法!
2013-10-06 09:57:41	CindyLinz	[23:49:39] 把圖片分塊......
2013-10-06 09:57:41	petercommand	[23:49:49] ...
2013-10-06 09:57:41	CindyLinz	[23:49:59] 老祖先(?)的智慧
2013-10-06 09:57:41	petercommand	[23:53:10] 恐怖的html XD
2013-10-06 09:57:41	CindyLinz	[23:53:24] 在 RoR 陣營的 XDite 的 FB 上看到 Haskell 的東西耶~ # https://www.facebook.com/xdite/posts/10151943935503552
2013-10-06 09:57:41	mno2	[23:57:15] QuickCheck 還蠻多移植的 xD
2013-10-06 09:57:41	hashcat	[00:06:24] 有沒有prolog陣營
2013-10-06 09:57:41	hashcat	[00:07:06] 在妄想後端x10的prolog
2013-10-06 09:57:41	CindyLinz	[02:58:55] 不過我覺得 latex 的描述性不太好, 它是 favor compiler, 不是 favor user...
2013-10-06 09:57:41	CindyLinz	[02:59:27] 有些地方用起來像 state machine... @@"
2013-10-06 09:57:41	CindyLinz	[03:00:18] 這使得偶爾想要重新組織文章內容的時候會麻煩..
2013-10-06 09:57:41	letoh	[03:07:55] 現在當然是把 latex 當作 asm 來用
2013-10-06 09:57:41	CindyLinz	[03:13:09] letoh: 那, 你有用什麼比較高階的語言, 然後再 compile 成 latex 嗎? @@"
2013-10-06 09:57:41	letoh	[03:13:37] 差不多是這樣  類似 markdown 的東西
2013-10-06 09:57:41	CindyLinz	[03:13:46] 嗯嗯嗯
2013-10-06 09:57:41	CindyLinz	[03:14:14] 剛正在想說.. 不該問一個拿 forth 當水喝的人這種問題的 ^^|
2013-10-06 09:57:41	letoh	[03:15:21] 這跟 forth 沒關係啦XD  剛好 emacs 內建一些工具就直接用了
2013-10-06 09:57:41	CindyLinz	[03:15:58] 可是你看組語太順暢了啊 XD
2013-10-06 09:57:41	letoh	[03:17:15] 其實也還好啦  我比較習慣看「寫成 forth 的組語」XD
2013-10-06 09:57:41	CindyLinz	[12:19:20] letoh: 突然覺得.... 你應該也會習慣直接看 lpr 的指令 ._.
2013-10-06 09:57:41	CindyLinz	[12:19:33] 或是 ps 的指令
2013-10-06 09:57:41	CindyLinz	[12:19:47] pdf 的指令不知道是長怎樣了 XD
2013-10-06 09:57:41	Yu-LIn	[12:24:11] pdf 的指令是 ps 修改兼擴充
2013-10-06 09:57:41	CindyLinz	[12:33:13] 噢, 所以拿來當 ps 看也行 ^^
2013-10-06 09:57:41	Yu-LIn	[12:37:50] 我記得可以在 adobe 下載到舊版本的 pdf 定義，pdf 其實可以看成結構化的 ps....XD
2013-10-06 09:57:41	Yu-LIn	[12:39:33] 裡面有一個叫作 xref 的結構，這結構裡面全部只有數字，可能要翻 ascii 或 pdf 規格文件，才會知道那串數字是什麼Orz|||
2013-10-06 09:57:41	Yu-LIn	[12:41:20] 除此之外都是描述一頁是什麼，裡面有哪些東西這樣
2013-10-06 09:57:41	_13h	[12:48:13] xref 就是指到物件的表而已吧，通常是文字或影像之類的
2013-10-06 09:57:41	letoh	[19:41:32] ps 的指令我可以看一點啊，不算很熟就是
2013-10-06 09:57:41	darkx	[20:34:42] letoh: https://github.com/xatier/git_intro
2013-10-06 09:57:41	darkx	[20:34:49] 之前用過  remark 寫簡報
2013-10-06 09:57:41	darkx	[20:34:54] 基本上還不壞
2013-10-06 09:57:41	letoh	[20:35:06] 可輸出 pdf 嗎?
2013-10-06 09:57:41	darkx	[20:37:03] 似乎無法XD
2013-10-06 09:57:41	darkx	[20:37:14] 我正要說輸出成 pdf 是問題 lol
2013-10-06 09:57:41	letoh	[20:37:23] XDXD
2013-10-06 09:57:41	letoh	[20:37:38] 看來只好 print to ps 再 ps2pdf XD
2013-10-06 09:57:41	darkx	[20:37:48] 不過現在都用 html5 的時代應該沒人會在意啦(不對
2013-10-06 09:57:41	CindyLinz	[20:45:25] 以前用過 css 的 print 分頁...
2013-10-06 09:57:41	letoh	[20:48:15] darkx: 剛剛才發現是你自己的帳號
2013-10-06 09:57:41	darkx	[20:51:15] letoh: 裡面太多奇怪的東西惹 >///<
2013-10-06 09:57:41	darkx	[20:51:19] 請不要亂翻XDDDDDD
2013-10-06 09:57:41	letoh	[20:51:36] 有什麼秘密怕被我發現嗎? XD
2013-10-06 09:57:41	 *	CindyLinz [20:51:40] 來翻..
2013-10-06 09:57:41	letoh	[20:53:12] github 的預設 avatar 什麼意義嗎? 感覺像 tetris XD
2013-10-06 09:57:41	darkx	[20:55:20] 嗚嗚Q___Q
2013-10-06 09:57:41	darkx	[20:55:26] letoh: 不知道耶
2013-10-06 09:57:41	CindyLinz	[20:56:36] g8d_r5e 是 markdown 練習 repository 嗎 >///<
2013-10-06 09:57:41	darkx	[20:57:12] 不是耶 XD
2013-10-06 09:57:41	CindyLinz	[20:57:17] 還有別人 fork.....
2013-10-06 09:57:41	darkx	[20:57:21] XD
2013-10-06 09:57:41	darkx	[20:57:30] 其實也是從別人那邊啟發的想法 lol
2013-10-06 09:57:41	CindyLinz	[20:57:32] 這應該就要推 在一起在一起在一起 了...
2013-10-06 09:57:41	darkx	[20:57:53] 人家是日本人啊  *哭*
2013-10-06 09:57:41	 *	darkx [20:58:34] 只是一個想要討拍拍的宅宅 QQ
2013-10-06 09:57:41	CindyLinz	[21:01:08] 東西好多喔.... ._.
2013-10-06 09:57:41	darkx	[21:01:25] ._.
2013-10-06 09:57:41	letoh	[21:02:21] 強大
2013-10-06 09:57:41	darkx	[21:02:29] QQ
2013-10-06 09:57:41	darkx	[21:02:40] 很多只是把作業推上來而已XD
2013-10-06 09:57:41	letoh	[21:05:57] darkx: http://www.ugo.com/tech/anime-girl  人體暖爐(?
2013-10-06 09:57:41	darkx	[21:06:23] 嗚嗚
2013-10-06 09:57:41	CindyLinz	[21:10:38] 我看過有人平常也穿玩偶裝耶~
2013-10-06 09:57:41	letoh	[21:10:52] 剛剛那個是電腦喔
2013-10-06 09:57:41	letoh	[21:11:10] 但我一時找不到完整的組裝記錄... 很多年前看到的XD
2013-10-06 09:57:41	CindyLinz	[21:11:21] 畫質太差了, 我看手和大腿的部分以為是真人 XD
2013-10-06 09:57:41	letoh	[21:11:46] 不是  那外殼是用保麗龍切的
2013-10-06 09:57:41	CindyLinz	[21:13:02] 這才是人體版 XD # https://fbcdn-sphotos-b-a.akamaihd.net/hphotos-ak-prn2/1375119_740579375968312_52655034_n.jpg
2013-10-06 09:57:41	letoh	[21:13:21] 這應該是真人裝的XD
2013-10-06 09:57:41	CindyLinz	[21:13:45] 對啊 真的人
2013-10-06 09:57:41	letoh	[21:14:06] 十之八九是日本人  日本傳統文化喜歡把自己搞成人偶
2013-10-06 09:57:41	letoh	[21:14:27] 在 acg 裡也搞這套不意外XD
2013-10-06 09:57:41	Yu_lin	[21:14:46] 發生什麼事情，怎麼在討論這個？XD
2013-10-06 09:57:41	letoh	[21:14:57] 人體暖爐XD
2013-10-06 09:57:41	letoh	[21:15:15] 剛剛在找人體造型  又會發熱的東西XD
2013-10-06 09:57:41	darkx	[21:15:44] XDDDDDD
2013-10-06 09:57:41	Yu_lin	[21:16:15] XD
2013-10-06 09:57:41	CindyLinz	[21:18:30] 我找的是人體, 不是人體造型啊~~ XD
2013-10-06 09:57:41	CindyLinz	[21:18:47] 好吧, 裡面是人體, 外面是人體造型..
2013-10-06 09:57:41	letoh	[21:18:51] XDXD
2013-10-06 09:57:41	letoh	[21:18:53] type
2013-10-06 09:57:41	letoh	[21:19:13] 人體是 instance
2013-10-06 09:57:41	Yu_lin	[21:37:12] 有什麼方便簡單的 blog 可以用嗎？想寫寫文章
2013-10-06 09:57:41	Yu_lin	[21:37:20] 如果能用 rst 是最好了
2013-10-06 09:57:41	CindyLinz	[21:37:24] 昨天剛註冊了 logdown XD
2013-10-06 09:57:41	CindyLinz	[21:37:28] rst?
2013-10-06 09:57:41	Yu_lin	[21:37:50] RestructuredText
2013-10-06 09:57:41	CindyLinz	[21:38:05] logdown 是 markdown 派的
2013-10-06 09:57:41	CindyLinz	[21:38:15] xdite 做的
2013-10-06 09:57:41	Yu_lin	[21:46:47] 看起來 lodgown 好像吃 html，來試試看好了
2013-10-06 09:57:41	letoh	[21:47:29] 原來是 xdite... 有支援直接吃 github 或 gist 嗎? XD
2013-10-06 09:57:41	Yu_lin	[21:48:45] 可以直接用 github sign up 耶XD
2013-10-06 09:57:41	Yu_lin	[21:49:51] 下面那一排 Link 居然沒有 plurk 嗎....？
2013-10-06 09:57:41	CindyLinz	[21:53:40] 我昨天才在問他.. # 21:47 < letoh> 原來是 xdite... 有支援直接吃 github 或 gist 嗎? XD
2013-10-06 09:57:41	letoh	[21:54:02] 所以應該很快就會有了? XD
2013-10-06 09:57:41	CindyLinz	[21:54:44] 他說「有計劃排入架構...目前還是 db backend ....」
2013-10-06 09:57:41	letoh	[21:55:03] 嗯嗯... gist 是別人的 db XD
2013-10-06 09:57:41	CindyLinz	[21:55:04] 現在應該就自己用 git 寫完以後
2013-10-06 09:57:41	CindyLinz	[21:55:11] 複製--貼上--- XD
2013-10-06 09:57:41	letoh	[21:55:24] 好麻煩XD
2013-10-06 09:57:41	CindyLinz	[21:55:39] 其實只要能用 git push 上去我覺得就很方便了, 不見得要 github
2013-10-06 09:57:41	CindyLinz	[21:55:53] 反正有 git, 我自己可以設兩個不同的 remote ^^
2013-10-06 09:57:41	letoh	[21:56:05] 也是啦
2013-10-06 09:57:41	letoh	[21:56:19] 我現在很多程式也是都兩個 remote
2013-10-06 09:57:41	favonia	[22:16:15] xref 就是很噁心的 pointer 啊 lol
2013-10-06 09:57:41	letoh	[22:16:50] 這麼說也沒錯XD
2013-10-06 09:57:41	petercommand	[22:48:21] CindyLinz: 我看到同一串XD
2013-10-06 09:57:41	Yu_lin	[23:08:39] 可惡，用 sml 要自己解決 UTF8，可是用 haskell 會遇到 monad，好煩阿XD
2013-10-06 09:57:41	hashcat	[23:10:32] 對monad有困難
2013-10-06 09:57:41	CindyLinz	[23:13:31] petercommand: 啊?
2013-10-06 09:57:41	CindyLinz	[23:14:02] Yu_lin: 那把 monad desugar 以後再用會比較順手嗎?
2013-10-06 09:57:41	CindyLinz	[23:14:12] 其實我是說 do-notation ^^|
2013-10-06 09:57:41	Yu_lin	[23:15:44] 寫 monad 對我來說沒問題，可是要解釋這東西就會出問題XD
2013-10-06 09:57:41	Yu_lin	[23:17:02] 比較怕的是同時出現兩個 monad 的時候，我覺得不太好處理
2013-10-06 09:57:41	petercommand	[23:19:53] CindyLinz: git integration那個留言呀
2013-10-06 09:57:41	hashcat	[23:25:30] 兩個monad不會互相怎樣阿
2013-10-06 09:57:41	hashcat	[23:28:08] 不喜歡用monad可以用Arrow
2013-10-06 09:57:41	hashcat	[23:30:23] 用mercury好了嘿
2013-10-06 09:57:41	mno2	[23:30:36] 我想 Yu_lin 是說兩個 Monad 長得不太一樣的時候吧。  如果是 monad transformer 疊的東西又不太一樣就比較討厭。大絕就是都 run 成 IO
2013-10-06 09:57:41	mno2	[23:31:04] blog 我覺得 scriptogr.am 還不錯耶
2013-10-06 09:57:41	mno2	[23:31:21] 貼到 dropbox 裡面就好了
2013-10-06 09:57:41	mno2	[23:33:09] markdown 還是本地端的軟體好用.. 所以 dropbox 對我來說比較順手
2013-10-06 09:57:41	mno2	[23:34:31] 如果喜歡 markdown 的話可以參考這篇 -> http://scriptogr.am/wastemobile/post/markdown-publishing
2013-10-06 09:57:41	mno2	[23:34:35] RST 就不知道了 ..
2013-10-06 09:57:41	petercommand	[23:38:50] 本地做note的話，我覺得lonote蠻好用的
2013-10-06 09:57:41	CindyLinz	[23:47:08] Yu_lin: 這 monad 是你建立出來的, 不是 library 提供的介面喔?
2013-10-06 09:57:41	Yu_lin	[23:49:11] 不是阿XD
2013-10-06 09:57:41	Yu_lin	[23:49:24] 阿，不是我自己寫的阿
2013-10-06 09:57:41	CindyLinz	[23:55:17] Yu_lin: 嗯, 因為你說要「解釋」, 所以以為是你自己寫的 lib, 要寫 doc 給別人看之類的
2013-10-06 09:57:41	Yu_lin	[00:02:03] 通常我是寫給以後的自己看的（被打
2013-10-06 09:57:41	Yu_lin	[00:02:46] 以前寫 perl 有遇過一年前寫的程式已經看不懂的情況....所以就....
2013-10-06 09:57:41	CindyLinz	[00:02:59] 噢..
2013-10-06 09:57:41	CindyLinz	[00:03:21] 我目前對 monad 的體會是....
2013-10-06 09:57:41	CindyLinz	[00:03:45] 不要去想 monad 是什麼, 而是去想 monad 的性質在這裡是不是剛好可以用
2013-10-06 09:57:41	CindyLinz	[00:04:20] 它沒有什麼理由, 可能就只是剛好符合, 可以用, 而用起來好像又蠻方便的, 所以就用了....
2013-10-06 09:57:41	CindyLinz	[00:07:38] 我們去理解一個事物的時候, 常常用隱喻, 用類比.. 類比一個我們比較熟悉的東西, 最好是具體的東西..
2013-10-06 09:57:41	CindyLinz	[00:08:20] 但是這每一個能夠類比的東西, 總是會有個無法類比下去的 axiom, 也就是這個具體想像的開頭
2013-10-06 09:57:41	CindyLinz	[00:08:54] 我是絕望地覺得 monad 自己就是這一個開頭, 它自己就是我們經驗中最具體最熟悉的存在了... XD
2013-10-06 09:57:41	Yu_lin	[00:09:36] XD
2013-10-06 09:57:41	CindyLinz	[00:09:50] 所以解釋 monad 的理由就變成是: 因為它是 monad 所以怎樣怎樣...
2013-10-06 09:57:41	CindyLinz	[00:10:02] 它就像 monad 一樣如何如何...
2013-10-06 09:57:41	hashcat	[01:02:22] 無他, 唯手熟爾
2013-10-06 09:57:41	hashcat	[01:02:39] 這是範疇論的哲學點
2013-10-06 09:57:41	hashcat	[01:03:16] 一個東西是啥不在於他本身, 在於他跟其他東西的關聯是什麼
2013-10-06 09:57:41	monochrom	[01:05:45] 明天問題: 我是誰? XD
2013-10-06 09:57:41	hashcat	[01:08:40] 以後說不定人腦可以用奈米機械或電子元件替代
2013-10-06 09:57:41	hashcat	[01:09:18] 腦殘失智或失語裝了那玩意, 還算不算自己
2013-10-06 09:57:41	MnO2_	[09:48:51] 關於 blog 看到 zonble 在用這套 http://postach.io/  ，第一次看到 backend 用 evernote 的
2013-10-06 09:57:41	MnO2_	[09:59:31] https://twitter.com/jgoldberg_/status/385487897207398401
2013-10-06 09:57:41	MnO2_	[09:59:32] http://arstechnica.com/security/2013/10/silk-road-mastermind-unmasked-by-rookie-goofs-complaint-alleges/
2013-10-06 09:57:41	MnO2_	[10:00:38] PHP 中槍
2013-10-06 09:57:41	MnO2_	[10:02:17] cchan 居然還在用 svk ? https://twitter.com/ccshan/status/385475795965050880
2013-10-06 09:57:41	_13h	[11:14:27] svk 不是停止開發了嗎?
2013-10-06 09:57:41	MnO2_	[11:16:03] 應該吧，所以才覺得奇特
2013-10-06 09:57:41	godfat1	[15:42:26] 投影片我上次是用 https://github.com/shower/shower
2013-10-06 09:57:41	godfat1	[15:42:26] 據說用 chrome 輸出不錯，
2013-10-06 09:57:41	godfat1	[15:42:27] 不過裡面所有 html 轉 pdf 的工具，
2013-10-06 09:57:41	godfat1	[15:42:27] 轉我的只有 princexml 轉出來比較正常，
2013-10-06 09:57:41	godfat1	[15:42:27] 其他版面是完全爛的
2013-10-06 09:57:41	_13h	[15:49:38] 現在的開發都以 browser 為平台了XD
2013-10-06 09:57:41	MnO2_	[16:03:22] 我覺得用 browser 版的 slide 就是畫圖比較討厭。
2013-10-06 09:57:41	_13h	[16:21:35] 你是說要畫箭頭之類的嗎？也許要靠 canvas 解決?
2013-10-06 09:57:41	CindyLinz	[16:21:45] SVG 啊~~ ^^
2013-10-06 09:57:41	mno2	[16:22:36] favonia 流 (SVG)
2013-10-06 09:57:41	_13h	[16:22:45] 嗯  svg 應該也不錯
2013-10-06 09:57:41	_13h	[16:23:21] 像昨天講的那一套只是靠 css 排版而已吧
2013-10-06 09:57:41	CindyLinz	[16:24:59] 文件不大的時候可以用 SVG.. (遠目)
2013-10-06 09:57:41	CindyLinz	[16:25:16] SVG 蠻慢的... ._.
2013-10-06 09:57:41	godfat	[18:17:35] favonia 那個看起來很棒，不過我 firefox 跑不動... ~.~
2013-10-06 09:57:41	Yu_lin	[20:56:27] 問一個私人一點的問題....有人有用噗浪然後被下面這個帳號加粉絲的嗎？
2013-10-06 09:57:41	Yu_lin	[20:56:28] http://www.plurk.com/carrolltrust
2013-10-06 09:57:41	suhorng	[22:55:48] 8122   110/03 carelai      □ [問題] 大家覺得函數式語言有前途嗎？ http://www.ptt.cc/bbs/Programming/M.1380810707.A.861.html
2013-10-06 09:57:41	suhorng	[22:55:52] <戰> (誤)
2013-10-06 09:57:41	suhorng	[22:59:40] http://haskellnews.org/grouped 原來有這種整合介面XD
2013-10-06 09:57:41	suhorng	[23:01:03] my god, http://alpmestan.com/2013/06/27/ghc-core-by-example-episode-1/ http://alpmestan.com/2013/10/01/ghc-core-by-example-episode-2-evaluation/
2013-10-06 09:57:41	hashcat	[23:04:08] 額這很難回答
2013-10-06 09:57:41	hashcat	[23:04:49] 要正確分析這種問題要同時對經濟跟語言有一定認識
2013-10-06 09:57:41	suhorng	[23:05:32] 然後不知道他是不是要問關於工作之類的
2013-10-06 09:57:41	hashcat	[23:05:37] 人的慣性不遜於質點的慣性
2013-10-06 09:57:41	b4283	[23:05:40] 上次不是分析過了，haskell 最沒錢途啊 XD
2013-10-06 09:57:41	hashcat	[23:05:45] 哦那沒有
2013-10-06 09:57:41	hashcat	[23:06:10] 就慣性來說scala最有機會
2013-10-06 09:57:41	hashcat	[23:07:08] 轉移成本比另外三個都低
2013-10-06 09:57:41	CindyLinz	[23:08:04] suhorng: 看起來不錯耶 :D # ghc-core-by-example-episode
2013-10-06 09:57:41	hashcat	[23:08:21] 有史為證
2013-10-06 09:57:41	suhorng	[23:08:35] hashcat: 真的很多都是這樣耶
2013-10-06 09:57:41	suhorng	[23:08:51] CindyLinz: 就是剛剛 haskellnews.org 首頁看到的XD
2013-10-06 09:57:41	Yu_lin	[23:09:39] ghc bootstrappppppp
2013-10-06 09:57:41	hashcat	[23:09:43] suhorng: 這是技術狂考量不到的事情
2013-10-06 09:57:41	hashcat	[23:11:05] 沒有什麼危及存亡之秋的理由, 不用期待大小企業會突然想到
2013-10-06 09:57:41	hashcat	[23:11:22] 沒ppt帳號
2013-10-06 09:57:41	suhorng	[23:11:44] 嗯, 要有帳號才能推文回文
2013-10-06 09:57:41	hashcat	[23:11:49] 有沒人有心轉答
2013-10-06 09:57:41	CindyLinz	[23:12:21] 那既然他問題問得這麼簡略.. 是不是只要存在至少一種 evaluation 方式, 使得存在至少一種函數式語言, 在某個特定的情況下有前途, 就可以回答他一個字: 有 了
2013-10-06 09:57:41	suhorng	[23:13:11] 假設不存在然後推矛盾 (X
2013-10-06 09:57:41	Yu_lin	[23:13:28] 不考慮用 agda 或 coq 嗎？XD
2013-10-06 09:57:41	letoh	[23:13:31] 自從 ptt 一堆連線板不禁推文的問題越來越嚴重後，我就不在 ptt 看連線板了XD
2013-10-06 09:57:41	hashcat	[23:13:32] prolog可以取代你們了
2013-10-06 09:57:41	Yu_lin	[23:14:03] It can run backward!
2013-10-06 09:57:41	suhorng	[23:15:33] letoh: 現在已經不是連線板啦~ Group.NCTU (~ 2013)
2013-10-06 09:57:41	letoh	[23:18:04] 現在不是接到 tw.bbs.comp.language 啦?
2013-10-06 09:57:41	suhorng	[23:23:13] 大驚, 原來有接新的
2013-10-06 09:57:41	Yu_lin	[23:25:45] hashcat 我幫你轉達好了，不過可能要請你再整理一下，哪些是要轉達的部份
2013-10-06 09:57:41	Yu_lin	[23:25:56] 全部？
2013-10-06 09:57:41	hashcat	[23:26:17] 意思到就好拉
2013-10-06 09:57:41	hashcat	[23:28:22] 反正我不負責嘿嘿
2013-10-06 09:57:41	Yu_lin	[23:28:56] XDDDD
2013-10-06 09:57:41	hashcat	[23:42:52] 頭一次只開emacs-live沒開任何檔案
2013-10-06 09:57:41	hashcat	[23:43:24] 有噁心到
2013-10-06 09:57:41	hashcat	[23:46:01] 突然被文字編輯器表白
2013-10-06 09:57:41	Yu_lin	[23:46:33] 不愧是 emacs，連表白都學會了
2013-10-06 09:57:41	b4283	[23:48:00] emacs-live 是什麼模式？
2013-10-06 09:57:41	hashcat	[23:49:09] 一時衝動把emacs做掉了
2013-10-06 09:57:41	hashcat	[23:49:51] http://overtone.github.io/emacs-live/
2013-10-06 09:57:41	hashcat	[23:56:36] 貌似幾乎只支持clojure
2013-10-06 09:57:41	hychen	[00:05:44] "突然被文字編輯器表白" # 被戳中笑點.... XD
2013-10-06 09:57:41	letoh	[00:06:46] 那是怎麼回事@_@
2013-10-06 09:57:41	petercommand	[00:07:36] hychen: 是文字編輯器的彩蛋嗎XD
2013-10-06 09:57:41	hashcat	[00:15:41] 砍了唉
2013-10-06 09:57:41	hashcat	[00:16:00] 不是因為被他表白的關係
2013-10-06 09:57:41	hashcat	[00:16:11] 每次開都要載入一票東西
2013-10-06 09:57:41	Yu_lin	[00:37:04] 手殘不小心把文章發出去了，本來想要明天繼續打的...Orz|||
2013-10-06 09:57:41	CindyLinz	[00:41:46] 下集待續 XD
2013-10-06 09:57:41	letoh	[01:10:33] 那大長篇  還有下集啊?
2013-10-06 09:57:41	letoh	[01:20:01] 某推文：「所有語言只分為OO跟非OO 其他差異都不算大。為什麼會這樣分？是因為這兩種系統的思考方向是不同的。」   這人玩過多少東西可以有這樣的論點啊XD
2013-10-06 09:57:41	CindyLinz	[01:25:01] 然後就被 suhorng 和 Yu_lin 圍了?
2013-10-06 09:57:41	letoh	[01:25:35] 那是另外一篇 c++ 的文章，不是 fp 那篇
2013-10-06 09:57:41	CindyLinz	[01:26:16] 對啊, 下面 suhorng 推了好幾個 :p
2013-10-06 09:57:41	letoh	[01:27:16] 喔  那個 drm... 剛剛沒注意到XD
2013-10-06 09:57:41	letoh	[01:29:01] 唔  那個板竟然還有留我的廢文XD
2013-10-06 09:57:41	letoh	[01:29:36] 然後我回的文原來就是 drm XD
2013-10-06 09:57:41	CindyLinz	[01:38:47] remark 目前用起來感覺不錯, 只剩下一個最嚴重的問題
2013-10-06 09:57:41	CindyLinz	[01:38:50] 內容....||
2013-10-06 09:57:41	letoh	[01:58:18] 內容?
2013-10-06 09:57:41	CindyLinz	[01:58:26] 投影片啊 ._.
2013-10-06 09:57:41	letoh	[01:58:39] 喔喔喔
2013-10-06 09:57:41	monochrom	[02:11:45] 對我來說, 所有語言只分為: 定義了 f x = x+x 後, f (g 5) 是不是等同 g 5 + g 5.
2013-10-06 09:57:41	monochrom	[02:13:52] 這個分別完全決定你可以怎樣把程式組織 (即怎樣把問題分割)
2013-10-06 09:57:41	monochrom	[02:16:12] 這是一個 substitutability principle, 而且比 Liskov's substitutability principle 更基礎!
2013-10-06 09:57:41	monochrom	[02:17:27] 呀, 應該 s/基礎/根本/ , 我想用的英文是 fundamental
2013-10-06 09:57:41	CindyLinz	[02:56:25] suhorng: remark 的頁面裡想要一項一項出來, 方法就是複製貼上整頁, 然後再補上想多出來的項目嗎? @@"
2013-10-06 09:57:41	monochrom	[03:00:00] 那就太可惜了!
2013-10-06 09:57:41	CindyLinz	[03:02:26] 啊, 可以不用!
2013-10-06 09:57:41	CindyLinz	[03:02:54] 假設 page 1 / page 2 有這樣的關係, 就是 page 2 是 page 1 一樣的內容再多加一項
2013-10-06 09:57:41	CindyLinz	[03:03:13] 可以在 page 2 裡面說拿 page 1 當 template
2013-10-06 09:57:41	CindyLinz	[03:03:19] 然後再加 page 2 多出來的內容
2013-10-06 09:57:41	CindyLinz	[03:05:14] remark 這種 browser based 的還做了會和前台連動的 presenter 模式真是很炫的感覺 XD
2013-10-06 09:57:41	CindyLinz	[03:08:06] 可是用 template 的話, 好像需要把被當 template 的頁面取 name @@"
2013-10-06 09:57:41	CindyLinz	[03:08:15] 不知道怎麼跟他說我要用「前一頁」
2013-10-06 09:57:41	MnO2_	[10:17:33] https://www.fpcomplete.com/user/dolio/many-roads-to-free-monads
2013-10-06 09:57:41	Yu_lin	[10:25:49] 本來想說早上起來，頭腦比較清醒，就把 scheme 的心得補完，結果不小心按到送出，只好草草做結了
2013-10-06 09:57:41	MnO2_	[10:32:08] blog? where?
2013-10-06 09:57:41	Yu_lin	[10:32:26] 昨晚 ptt 上那篇
2013-10-06 09:57:41	_13h	[10:32:29] 所以你要發展成大長篇了嗎? XD
2013-10-06 09:57:41	Yu_lin	[10:32:42] 沒有阿，我已經做結了XDDD
2013-10-06 09:57:41	_13h	[10:32:44] 而且還是連載大長篇XD
2013-10-06 09:57:41	_13h	[10:32:57] 喔喔喔  晚上再看看XD
2013-10-06 09:57:41	Yu_lin	[10:33:55] 我對這句推文「所有語言只分為OO跟非OO 其他差異都不算大。為什麼會這樣分？是因為這兩種系統的思考方向是不同的。」有印象，但是想不起來是那邊看到的
2013-10-06 09:57:41	_13h	[10:34:51] ptt.. 往上翻一頁的某一篇文章裡看到的
2013-10-06 09:57:41	monochrom	[11:08:13] 哈哈 monads are just free-monad monad monad-algebras
2013-10-06 09:57:41	Yu_lin	[11:15:14] 好想推 yoco315 那句「連 c 都不會就更好了....」
2013-10-06 09:57:41	_13h	[11:27:24] 那句我有看到，很中肯啊
2013-10-06 09:57:41	Yu_lin	[12:00:12] 咦！coursera 還有這種互動式的課堂小問題喔XD
2013-10-06 09:57:41	favonia	[12:02:50] Yu_lin: yoco315 那句在哪裡？
2013-10-06 09:57:41	Yu_lin	[12:03:46] 所有語言只分為OO跟非OO那一篇
2013-10-06 09:57:41	CindyLinz	[12:04:32] http://www.ptt.cc/bbs/Programming/M.1378091656.A.857.html
2013-10-06 09:57:41	favonia	[12:21:57] xDD
2013-10-06 09:57:41	_13h	[12:25:38] 那個人後來又說 asm 是特例
2013-10-06 09:57:41	_13h	[12:26:41] Yu_lin: 你補的部份 web 版看不到嗎?
2013-10-06 09:57:41	Yu_lin	[12:27:10] 我補的？是說昨天那個 FPL 前途那篇嗎？
2013-10-06 09:57:41	_13h	[12:27:29] 對啊
2013-10-06 09:57:41	_13h	[12:27:40] 你不是說有補 scheme 的部份嗎?
2013-10-06 09:57:41	Yu_lin	[12:28:22] 本來想說早上起來要補的，手滑發出去，就想說算了，好像也沒什麼需要補的了XD
2013-10-06 09:57:41	Yu_lin	[12:29:54] 比起我的看法，讓他去看王垠對 scheme 的解釋會更好吧XDD
2013-10-06 09:57:41	_13h	[12:40:09] 原來 vb 還在用 ocx 元件啊
2013-10-06 09:57:41	_13h	[12:40:25] 而且現在還有人在開發 ocx 元件XD
2013-10-06 09:57:41	CindyLinz	[13:48:38] Yu_lin: 初看那些文章的時候跳到最下面, 突然覺得很疑惑, 奇怪不是轉述 hashcat 的意見嗎, 怎麼竟然會推荐王垠 XDD
2013-10-06 09:57:41	Yu_lin	[13:49:17] XD
2013-10-06 09:57:41	CindyLinz	[13:53:13] 找到.. remark 如果用 -- 分頁而不是 --- 分頁的話, 那麼就是把前一頁的內容再加上這一頁新寫的內容
2013-10-06 09:57:41	suhorng	[14:10:36] sorry, 我沒仔細研究 remark 的語法 orz
2013-10-06 09:57:41	suhorng	[14:10:44] 所以上次的投影片檔案才會那麼大....
2013-10-06 09:57:41	suhorng	[14:11:59] http://stackoverflow.com/questions/13352205/what-are-free-monads
2013-10-06 09:57:41	CindyLinz	[14:12:10] suhorng: 你的投影片是我的 tutorial.. XD
2013-10-06 09:57:41	CindyLinz	[14:12:52] Free monad.. 我前幾天寫了一半這篇的練習..... 目前好像開始有一點點 fu :Q http://blog.ezyang.com/2012/01/problem-set-the-codensity-transformation/
2013-10-06 09:57:41	suhorng	[14:13:28] 是說 Free Monad 就是 GHC TypeHoles 舉的例子, 但是想在 Agda 裡面弄卻不知道要怎麼寫XD
2013-10-06 09:57:41	suhorng	[14:13:49] codensity (!) 一直不知道這是什麼
2013-10-06 09:57:41	suhorng	[14:15:09] 我只記得之前有這篇 http://www.haskellforall.com/2013/06/from-zero-to-cooperative-threads-in-33.html 有人做了demo XD 剛好有使用free monad
2013-10-06 09:57:41	CindyLinz	[14:15:27] 依目前的一點點 fu... 覺得好像是推廣的 [a] 變成 [a] -> [a], 以作出 constant time append 的效果
2013-10-06 09:57:41	CindyLinz	[14:15:53] 這個叫 Hughes list
2013-10-06 09:57:41	CindyLinz	[14:17:01] 我現在的具體想像是把將來可能要接, 但現在還沒出現的後半, 先留在 function 的參數裡, 等將來它真的出現了定案了, 才拿它來把真實的 list 建出來
2013-10-06 09:57:41	suhorng	[14:23:49] 來研究看看
2013-10-06 09:57:41	suhorng	[14:24:53] 上次看到 codensity 這個字出現在 http://blog.sigfpe.com/2008/12/mother-of-all-monads.html (Edward Kmett的留言)
2013-10-06 09:57:41	MnO2	[09:21:43] godfat1: ping
2013-10-06 09:57:41	godfat1	[09:24:36] yo
2013-10-06 09:57:41	godfat	[09:24:55] MnO2, pong
2013-10-06 09:57:41	mno2_	[09:29:16] godfat: private message
2013-10-06 09:57:41	godfat	[09:29:55] mno2_ 有看到，抱歉正在跟人講話 XD
2013-10-06 09:57:41	mno2	[09:31:26] OK
2013-10-06 09:57:41	Yu_lin	[21:25:12] 囧，我太依賴 chrome 了，平常都用 facebook 連上 coursera
2013-10-06 09:57:41	Yu_lin	[21:25:36] chrome 一掛掉，我就沒辦法連上 coursera
2013-10-06 09:57:41	CindyLinz	[21:29:13] chrome 掛掉不是重開就好了嗎? @@"
2013-10-06 09:57:41	Yu_lin	[21:32:43] 我把 v29 的 chrome 砍掉，從 google 下載 deb 想說這邊的應該也升級了，就載下來裝
2013-10-06 09:57:41	CindyLinz	[22:59:02] 原來是這種永久性的掛法.... @@"
2013-10-06 09:57:41	Yu_lin	[00:09:57] 我終於知道問題出在哪了Orz|||
2013-10-06 09:57:41	Yu_lin	[00:10:03] 害我花了一天去找
2013-10-06 09:57:41	Yu_lin	[00:10:29] 我忘了 sml 的 andalso 的特性了
2013-10-06 09:57:41	CindyLinz	[00:12:58] short circuit 版的 and 喔?
2013-10-06 09:57:41	Yu_lin	[00:14:37] 對阿，搞了半天才想到這件事
2013-10-06 09:57:41	favonia	[00:16:39] xD
2013-10-06 09:57:41	favonia	[00:16:51] 應該是名字太長的關係（誤
2013-10-06 09:57:41	CindyLinz	[00:17:14] 我剛沒看出來這是兩個字接在一起
2013-10-06 09:57:41	CindyLinz	[00:17:29] 拿去丟 google 跳出 MSDN VB 的 AndAlso 才知道...
2013-10-06 09:57:41	monochrom	[00:24:23] 人家已經特地起名叫 andalso 了 :)
2013-10-06 09:57:41	monochrom	[00:24:46] 還有 orelse
2013-10-06 09:57:41	CindyLinz	[00:25:55] monochrom: 以為是什麼神祕語言的字啊 an-dal-so
2013-10-06 09:57:41	monochrom	[00:27:12] 我也很久沒玩 SML 了, 需要幾秒才認得
2013-10-06 09:57:41	CindyLinz	[01:54:21] #haskell channel 現在有個講話的人, nick 和 favonia 好像 XD
2013-10-06 09:57:41	***	Playback Complete.
2013-10-06 09:57:58	--	Mode #haskell.tw [+cnt]
2013-10-06 09:57:58	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-06 10:29:39	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-06 10:32:32	-->	Yu_lin (24ec1625@gateway/web/freenode/ip.36.236.22.37) has joined #haskell.tw
2013-10-06 10:38:26	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-06 11:09:49	-->	b4283 (~b4283@218-164-206-4.dynamic.hinet.net) has joined #haskell.tw
2013-10-06 11:14:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-06 11:28:21	Yu_lin	https://spark-public.s3.amazonaws.com/proglang/proglang-002/red_dog/homework1_Gc76UVW2rpe6MRviIpzZTlapyHq0WN.jpg
2013-10-06 11:28:23	Yu_lin	XDDDDDDD
2013-10-06 13:05:22	<--	Yu_lin (24ec1625@gateway/web/freenode/ip.36.236.22.37) has quit (Quit: Page closed)
2013-10-06 13:37:30	-->	b4284 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-06 13:46:27	<--	b4284 (~b4283@118.150.134.111) has quit (Read error: Connection reset by peer)
2013-10-06 15:32:42	<--	drbean (~drbean@113.196.171.151) has left #haskell.tw
2013-10-06 15:32:42	--	irc: disconnected from server
2013-10-06 15:33:14	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-06 15:33:14	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-06 15:33:14	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-06 15:33:14	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean gko godfat hychen kanru lambdabot letoh logfat_ lwhsu miaout17_ miaout17__ mno2 monochrom petercommand shik superbil]
2013-10-06 15:33:14	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-10-06 15:33:31	--	Mode #haskell.tw [+cnt]
2013-10-06 15:33:31	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-06 17:54:36	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-10-06 17:58:36	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-06 18:20:24	CindyLinz	最近正在學 Haskell 的 free monad, 看起來是一個可以拿來在不使用 template 外掛的情況下, 用純 Haskell 和 do-notation 製造 embedded domain specific language 的東西
2013-10-06 18:20:57	CindyLinz	(雖然 Template 是純 Haskell 的標準內容... 只是私以為它比較像外掛 ^^|)
2013-10-06 18:21:35	CindyLinz	(就跟 foreign function interface  一樣, 是標準的..... 外掛 XD)
2013-10-06 18:27:57	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-06 19:42:28	-->	caasih (~caasiHuan@114-46-118-153.dynamic.hinet.net) has joined #haskell.tw
2013-10-06 19:46:16	-->	suhorng (~suhorng@118-166-62-3.dynamic.hinet.net) has joined #haskell.tw
2013-10-06 19:46:29	suhorng	http://www.yinwang.org/blog-cn/2013/10/05/random-words/ 不過我不喜歡 S-expressions...
2013-10-06 19:47:09	letoh	為什麼呢?
2013-10-06 19:47:59	suhorng	主要還是人眼匹配上的問題, 有時候排版不那麼明顯 (例如印出來的 list 很多層的時候)
2013-10-06 19:48:32	suhorng	雖然這可能比較像印出來的程式可以印的更好XD
2013-10-06 19:49:53	suhorng	像 r6rs 中在 () 之外允許 [], 不就是為了方便閱讀？
2013-10-06 19:50:42	letoh	其實我對人眼匹配問題覺得還好，排版一下的話就跟看 c 差不多，多看一點就會比較習慣
2013-10-06 19:51:27	letoh	不排版就真的很難看... 我只覺得 s-exp 不適合輸入而已，要按括號很麻煩XD
2013-10-06 19:51:52	suhorng	很多層的時候讀起來不方便吧？不知道哪層對哪層
2013-10-06 19:52:00	suhorng	輸入的話有 ParEdit mode, 不怕XD
2013-10-06 19:52:05	CindyLinz	s-exp 的層數會多很多
2013-10-06 19:53:18	letoh	嗯  是會比較多  但還是可以排版啊  不過我自己也沒寫過很多行的就是  有寫的話一個函式大概兩三個螢幕畫面的程度
2013-10-06 19:53:45	suhorng	例如一個很多層的例子是
2013-10-06 19:53:46	suhorng	((((((f x y) g h) i)
2013-10-06 19:53:46	suhorng	   (j k l)
2013-10-06 19:53:46	suhorng	   (p q r))
2013-10-06 19:53:46	suhorng	  a b c))
2013-10-06 19:53:54	suhorng	這樣實在對不出來 a b c 是在哪一層阿...
2013-10-06 19:54:06	letoh	而且喔  一般 scheme/lisp 的 s-exp 其實就跟一般寫 c 很像  配合 progn 的效果
2013-10-06 19:54:27	letoh	其實就是一行一行而已  不必硬塞在某個括號裡
2013-10-06 19:54:41	suhorng	progn是什麼？
2013-10-06 19:55:00	letoh	(progn (exp1) (exp2) (exp3) ...)
2013-10-06 19:55:31	letoh	可以想成 do 那樣的語法型式? (實際運作上當然不太一樣)
2013-10-06 19:55:47	suhorng	嗯, 跟 Scheme 的 begin 很像
2013-10-06 19:56:14	suhorng	那個很多層的我想是在把資料印出來時會遇到
2013-10-06 19:56:20	letoh	嗯嗯
2013-10-06 19:58:26	suhorng	不過 Scheme 寫了一些之後再寫其他程式就出事了 XDD 寫出 (func) 還想說奇怪怎麼type不太對
2013-10-06 20:49:01	<--	b4283 (~b4283@218-164-206-4.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-06 20:57:48	<--	caasih (~caasiHuan@114-46-118-153.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-06 21:02:52	-->	caasih (~caasiHuan@114-46-118-153.dynamic.hinet.net) has joined #haskell.tw
2013-10-06 21:47:45	-->	b4283 (~b4283@118.150.134.111) has joined #haskell.tw
2013-10-06 22:27:08	<--	darkx (~x4r@162.243.134.31) has quit (Ping timeout: 240 seconds)
2013-10-06 22:59:57	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-06 23:21:55	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-06 23:25:39	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-06 23:32:38	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-10-06 23:35:45	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-06 23:47:30	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-06 23:57:39	<--	suhorng (~suhorng@118-166-62-3.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-07 01:01:09	<--	b4283 (~b4283@118.150.134.111) has quit (Remote host closed the connection)
2013-10-07 01:18:42	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-07 02:51:40	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-10-07 02:56:07	-->	godfat (~Adium@114-24-4-247.dynamic.hinet.net) has joined #haskell.tw
2013-10-07 03:02:12	<--	caasih (~caasiHuan@114-46-118-153.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-07 03:21:20	-->	darkx_ (~x4r@162.243.133.203) has joined #haskell.tw
2013-10-07 09:46:11	--	darkx_ is now known as darkx
2013-10-07 09:58:08	-->	b4283 (~b4283@60.249.196.111) has joined #haskell.tw
2013-10-07 10:57:23	-->	Yu_lin (24ec15fc@gateway/web/freenode/ip.36.236.21.252) has joined #haskell.tw
2013-10-07 11:09:26	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 13:21:57	-->	godfat1 (~Adium@114-24-4-247.dynamic.hinet.net) has joined #haskell.tw
2013-10-07 13:22:39	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-07 13:23:45	<--	godfat (~Adium@114-24-4-247.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-10-07 14:08:19	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 15:48:33	<--	Yu_lin (24ec15fc@gateway/web/freenode/ip.36.236.21.252) has quit (Quit: Page closed)
2013-10-07 17:29:45	-->	hashcat (~chatzilla@218-166-236-101.dynamic.hinet.net) has joined #haskell.tw
2013-10-07 17:50:00	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-07 17:51:13	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-07 18:35:22	<--	b4283 (~b4283@60.249.196.111) has quit (Quit: 暫離)
2013-10-07 19:00:06	<--	hashcat (~chatzilla@218-166-236-101.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-10-07 19:12:59	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 19:13:11	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-07 19:13:57	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 19:38:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-07 20:20:57	-->	b4283 (~b4283@1-175-62-123.dynamic.hinet.net) has joined #haskell.tw
2013-10-07 21:33:36	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-07 22:21:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-07 22:33:50	-->	letoh_ (~stackvm@203.67.167.123) has joined #haskell.tw
2013-10-07 22:34:59	<--	letoh (~stackvm@59-104-57-113.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 256 seconds)
2013-10-07 22:54:03	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-07 23:03:16	-->	Yu_lin (24ec1495@gateway/web/freenode/ip.36.236.20.149) has joined #haskell.tw
2013-10-07 23:09:01	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 23:15:26	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-10-07 23:18:03	<--	Yu_lin (24ec1495@gateway/web/freenode/ip.36.236.20.149) has quit (Quit: Page closed)
2013-10-07 23:19:06	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 23:19:16	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-07 23:20:00	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-07 23:23:33	--	letoh_ is now known as letoh
2013-10-07 23:30:49	-->	liuzhoou (~liuzhoou@58.38.15.88) has joined #haskell.tw
2013-10-07 23:58:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-08 00:07:09	CindyLinz	fun-thursday mailing list 信寄不出去啊 QQ
2013-10-08 00:07:17	CindyLinz	需要 approval
2013-10-08 00:47:56	<--	liuzhoou (~liuzhoou@58.38.15.88) has quit (Remote host closed the connection)
2013-10-08 00:58:57	godfat1	咦，我以為我有收到？
2013-10-08 00:59:00	<--	b4283 (~b4283@1-175-62-123.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-08 00:59:02	--	godfat1 is now known as godfat
2013-10-08 00:59:20	godfat	喔，可能是時差，已經被 approval 了 XD
2013-10-08 01:04:04	mno2	明天 in2 有要到喔？ xD
2013-10-08 01:04:22	mno2	突然備感壓力 xD
2013-10-08 01:06:13	godfat	XDD
2013-10-08 01:07:53	CindyLinz	我抓的 :D
2013-10-08 01:08:14	CindyLinz	結果我跑去 FB post 以後就收到有人回信說收到了 ._.
2013-10-08 01:24:35	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-08 03:12:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-08 04:20:33	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-08 04:23:36	<--	godfat (~Adium@114-24-4-247.dynamic.hinet.net) has quit (Ping timeout: 268 seconds)
2013-10-08 04:26:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-08 05:34:53	<--	superbil (uid12362@gateway/web/irccloud.com/x-qddkokgnmklsahsw) has quit (Ping timeout: 245 seconds)
2013-10-08 07:19:04	-->	caasih (~caasiHuan@114-46-146-193.dynamic.hinet.net) has joined #haskell.tw
2013-10-08 07:25:19	-->	superbil (uid12362@gateway/web/irccloud.com/x-ynyrwlswwnlvdfga) has joined #haskell.tw
2013-10-08 09:29:17	-->	Yu-LIN (24ec1508@gateway/web/freenode/ip.36.236.21.8) has joined #haskell.tw
2013-10-08 09:54:11	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-08 09:56:48	-->	MnO2 (daa1025c@gateway/web/freenode/ip.218.161.2.92) has joined #haskell.tw
2013-10-08 09:57:14	MnO2	http://aosabook.org/en/index.html 有了新章節：The Performance of Open Source Applications
2013-10-08 09:57:28	MnO2	http://aosabook.org/en/posa/from-socialcalc-to-ethercalc.html   au 也有寫
2013-10-08 09:59:32	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-08 10:02:07	b4283	第一次聽說 Ninja
2013-10-08 10:04:44	godfat1	我也是，不知道好用嗎
2013-10-08 10:04:49	--	godfat1 is now known as godfat
2013-10-08 10:05:42	b4283	喔喔，原來亮點是 Audrey Tang
2013-10-08 10:07:05	b4283	http://martine.github.io/ninja/
2013-10-08 10:09:23	<--	MnO2 (daa1025c@gateway/web/freenode/ip.218.161.2.92) has quit (Quit: Page closed)
2013-10-08 10:09:24	--	mno2_ is now known as mno2
2013-10-08 10:09:33	godfat	看起來不適合我 :o 不過 gyp 我在 mac 上一直有問題，
2013-10-08 10:09:33	godfat	所以 v8 build 不起來，然後 node 有他們自己的 patch... = =
2013-10-08 10:10:07	godfat	這個問題
2013-10-08 10:10:07	godfat	http://code.google.com/p/gyp/issues/detail?id=292
2013-10-08 10:10:42	godfat	有時候我真覺得 google 的 open source 假假的...
2013-10-08 10:12:20	caasih	MnO2: godfat: 乍看 Multi-core Scaling 那段想起 godfat 之前的演講
2013-10-08 10:13:19	mno2	我不知道是 godfat 哪一段演講 xD
2013-10-08 10:16:10	godfat	rubyconf 的？
2013-10-08 10:16:10	godfat	http://www.slideshare.net/godfat/concurrent-ruby-application-servers
2013-10-08 10:17:18	caasih	yes yes yes XD
2013-10-08 10:17:42	mno2	晚點再看一下~
2013-10-08 10:18:16	godfat	我後來發現這投影片做得太華麗了，翻起來有點慢... XD
2013-10-08 10:19:11	caasih	之前應該是抓下來看的，筆電網上看，翻一頁超過一分鐘XDDD
2013-10-08 10:19:55	caasih	不對，是 slideshare 下面的按鈕壞掉了。
2013-10-08 10:20:01	caasih	用左右小手就正常
2013-10-08 10:20:23	godfat	....O_o 那比我想像的還誇張 orz
2013-10-08 10:20:24	godfat	不過我在自己電腦裡翻也很慢，可以感覺到停頓，也沒辦法快速翻頁 orz
2013-10-08 10:21:40	caasih	剛才看完你貼來的 SKI ，循線索才知道有 uncomputable number @_@
2013-10-08 10:22:05	caasih	另外 lunadance 回台灣了，但是 24 號又要離開 D:
2013-10-08 10:22:53	godfat	我沒聽過 uncomputable number... XD
2013-10-08 10:22:53	godfat	太好了，你們可以好好聊聊 XD
2013-10-08 10:23:27	caasih	沒法把他抓到你面前啊....XDD
2013-10-08 10:23:37	caasih	順其自然好了 :p
2013-10-08 10:23:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-08 10:23:44	godfat	:D
2013-10-08 10:24:09	caasih	> Every computable number is definable, but not vice versa. There are many definable, noncomputable real numbers
2013-10-08 10:24:10	lambdabot	  <hint>:1:37: parse error on input `,'
2013-10-08 10:24:22	caasih	http://en.wikipedia.org/wiki/Computable_number
2013-10-08 10:24:35	caasih	oops, 抱歉， lambdabot XD
2013-10-08 10:26:40	godfat	The binary representation of the halting problem 不知道是？
2013-10-08 10:26:41	godfat	不過我的想像是，其實這是表示法的問題？
2013-10-08 10:28:38	caasih	halting problem 的證明記得是把 program 都編碼起來，然後證明有種編碼會矛盾？ # 抱歉只看過科普版
2013-10-08 10:33:20	godfat	我不知道 XD 不過這讓我想到之前看到不完備定理的證明
2013-10-08 10:34:14	caasih	我看的也是科普版 0rz 數學少女中的證明說明讓我覺得 Godel 在寫程式XDDD
2013-10-08 10:34:39	godfat	這倒是還沒看完 orz 不過應該快了，我先把這本看完好了... XD
2013-10-08 10:35:11	caasih	他編碼的方式讓他可以用某種方式取他要的值XD 但現在書不在手邊...
2013-10-08 10:35:23	caasih	現在在看的是...？
2013-10-08 10:35:48	godfat	確定性的失落 XD
2013-10-08 10:36:26	caasih	另外 wiki 也有提到不完備定理與 halting problem 的關聯
2013-10-08 10:36:59	caasih	http://en.wikipedia.org/wiki/Halting_problem#Relationship_with_G.C3.B6del.27s_incompleteness_theorems
2013-10-08 10:39:47	caasih	妙的是，結成浩老師在數學少女中對不完備定理的態度比較光明。
2013-10-08 10:40:08	caasih	與西方科普書有點悲觀的看法不同XD
2013-10-08 10:42:44	favonia	caasih: 在 lambda calculus 的世界裡面 halting problem 可以有很多種表達形式
2013-10-08 10:43:05	favonia	caasih: 因為 lambda calculus 有真。function. 不像 Turing machine 所有東西都是 bits
2013-10-08 10:44:25	caasih	好處是比較好證明？ <-- 門外漢XD
2013-10-08 10:44:48	favonia	caasih: 如果你是要證明「不能存取到程式碼」的真。函式版本，其實滿短的 lol 可以存取到程式碼的版本概念也滿簡單，但要嚴謹寫下來有點長（就是要寫清楚怎麼編碼程式）
2013-10-08 10:45:53	favonia	caasih: 順便一提，所謂 "Turing-complete" 是指如果只看「整數到整數」的函式。如果你還想探討「函數到函數」的計算等等， Turing machine 先天就無法表達 xD
2013-10-08 10:46:59	godfat	caasih, 我去把書翻出來好了，一時沒找到 XD
2013-10-08 10:47:00	godfat	對於光明的態度感到好奇 XD
2013-10-08 10:47:12	favonia	caasih: 基本原則是一樣的啦，但我相信嚴謹寫下來一定是 Turing machine 比較崩潰
2013-10-08 10:47:23	caasih	favonia: 崩潰XDDD
2013-10-08 10:47:56	caasih	等等來查查好了，函數到函數那部份其實聽不懂 XD
2013-10-08 10:48:03	caasih	favonia: 謝謝 <(_"_)>
2013-10-08 10:49:54	favonia	Turing complete 是說，你定義的「整數到整數」(類似 Int -> Int) 的函式的能力，跟 Turing machine 一樣厲害
2013-10-08 10:50:03	caasih	godfat: 印象中他的態度是認為，這樣我們有工具可以比較兩個體系誰比較大誰比較小...
2013-10-08 10:50:24	favonia	但像 Haskell 隨便就可以寫 (Int->Int)->[Int]->[Int] 這種...
2013-10-08 10:50:33	caasih	讓我想到前幾周葉李華教授提到的科學實證主義什麼的...
2013-10-08 10:50:33	favonia	這種就不在比較範圍內
2013-10-08 10:51:15	caasih	favonia: 啊，我不清楚的是，不能把 Int->Int 編碼成某種 Int 嗎？
2013-10-08 10:51:25	caasih	還是說這樣就會出事？XD
2013-10-08 10:51:36	favonia	caasih: 系統內不能。系統外可以。
2013-10-08 10:52:46	favonia	caasih: 我舉個比較遠的例子來說明。如果集合論用一階邏輯寫下來，而且有合理的 model, 那就有個 countable model....
2013-10-08 10:53:06	favonia	caasih: 意思是說在這 model 中什麼都是可數的
2013-10-08 10:53:52	favonia	caasih: 可是在集合論內我們還是可以討論「不可數的東西」。原因是整數和實數中間的對應「系統內」不存在
2013-10-08 10:55:04	favonia	剛才講說什麼都是可以數的狀況是系統外才看得到
2013-10-08 10:55:42	favonia	你剛才說把程式編碼，那是因為你從上帝的角度，在系統外看整個東西，才有機會把程式編碼成一個數字
2013-10-08 10:56:45	favonia	這種編碼方法，在（合理的）系統內是不存在的...
2013-10-08 10:57:47	caasih	是指：把所有的函數都編碼，這件事不存在嗎？
2013-10-08 10:57:59	caasih	在系統內不存在
2013-10-08 10:58:22	favonia	對。在大多數合理的系統中，可以說明系統內不存在。
2013-10-08 10:59:05	caasih	好像有點頭緒了，如果只是編一些些做得到，但是要把所有 Int->Int 的都編碼做不到，
2013-10-08 10:59:31	caasih	和科普的 halting problem 證明似乎有點像
2013-10-08 10:59:46	favonia	基本技巧其實都是一樣的
2013-10-08 11:00:29	favonia	這其實是好事。你看，這樣代表我們可以在系統內討論不可數的東西
2013-10-08 11:01:04	favonia	即使系統外有上帝覺得什麼都可數 xDDD
2013-10-08 11:02:00	Yu-LIN	XD
2013-10-08 11:02:07	caasih	favonia++
2013-10-08 11:02:09	favonia	在系統內你拿到一個函式 Int -> Int 時，基本上只能測試 input/output
2013-10-08 11:02:22	favonia	這樣怎麼可能知道裡面到底是什麼
2013-10-08 11:02:38	favonia	當然這只是直覺啦，要真的證明還是要花點功夫
2013-10-08 11:06:30	caasih	問個奇怪的問題，在系統內，就算能建出一個，在有限數量的 i/o 都和某個 Int -> Int 函式執行結果一樣的函式
2013-10-08 11:07:10	caasih	也因為無法測試所有的 i/o ，而無法說新的函式與本來的一樣？
2013-10-08 11:07:42	favonia	嗯
2013-10-08 11:08:07	favonia	應該是說像這種測試很容易就找到反例吧
2013-10-08 11:08:35	favonia	這跟 halting problem 的直覺是一樣的
2013-10-08 11:08:41	favonia	基本上你也只能跑跑看
2013-10-08 11:08:55	favonia	其他都不會比較好
2013-10-08 11:09:31	caasih	這個系統可以讓 i/o 是無窮的可數集合嗎？還是說和計算機一樣礙於時間做不到XD
2013-10-08 11:10:05	favonia	? Int 就無窮啦
2013-10-08 11:10:25	favonia	你可以想像更難搞的 (Int -> Int) -> (Int -> Int)
2013-10-08 11:10:41	caasih	啊，我想說的是測試的時候XD 就，真的要跑過才知道？
2013-10-08 11:11:12	favonia	應該是說你最後發現，再怎樣設計也跟實際跑跑看一樣糟糕
2013-10-08 11:11:18	caasih	XDD
2013-10-08 11:11:20	favonia	反正這問題本來就無解
2013-10-08 11:11:35	favonia	給一個 f : (Int -> Int) -> (Int -> Int) 應該會「更慘」 xDDD
2013-10-08 11:11:40	favonia	我是說如果你要編碼 f
2013-10-08 11:13:17	caasih	favonia: 啊，又想到一個門外漢問題XD
2013-10-08 11:14:06	caasih	從你以上的說明，我知道函數集合不可數，那我們可以比較哪個函數比另外一個函數複雜嗎？
2013-10-08 11:14:49	caasih	譬如把某些可以編碼的彼此比較之類的？
2013-10-08 11:17:47	caasih	再來想請教，不知道有無推薦的入門書？不然怕自己只會問更多對各位來說已經是常識的問題。
2013-10-08 11:18:30	caasih	這邊的能力大概停在可以看懂簡單的證明（歸納法什麼的），
2013-10-08 11:19:13	caasih	但是太複雜的抽象的很難讀懂，像是幾何中點跟面角色互換那種
2013-10-08 11:47:37	favonia	caasih: 我沒有仔細想過，不知道 lol
2013-10-08 11:55:43	caasih	favonia: 無論如何，再次感謝說明。我還是順其自然好了XDD
2013-10-08 12:03:52	mno2	http://aosabook.org/en/posa/warp-images/benchmark.png   mighttpd2 scale 得也太漂亮了吧 xD 讓人不太敢相信
2013-10-08 12:05:12	godfat	單台電腦？ @@
2013-10-08 12:06:13	mno2	對啊。他們都是有錢人
2013-10-08 12:06:56	mno2	http://aosabook.org/en/posa/warp.html
2013-10-08 12:07:07	mno2	Two “12 core” machines (Intel Xeon E5645, two sockets, 6 cores per 1 CPU) connected with 1 gbps Ethernet.
2013-10-08 12:09:02	godfat	真是一般人暫時還無法用 XD
2013-10-08 12:09:02	godfat	也來讀讀.. http://aosabook.org/en/posa/warp.html
2013-10-08 12:09:52	mno2	如果數據沒有出錯真的是很厲害….   mighttpd2 不是那種 minimal server，很多功能都有
2013-10-08 12:10:20	godfat	當 application server 用這樣？
2013-10-08 12:10:39	mno2	對啊
2013-10-08 12:14:17	b4283	cool
2013-10-08 12:16:48	godfat	是喔？ XDDD
2013-10-08 12:16:48	godfat	: Node.js used the event-driven architecture in the past, but recently it also implemented the prefork technique
2013-10-08 12:19:32	mno2	應該很早就是了。標準招式啊 ~
2013-10-08 12:20:41	godfat	只是想說之前相信 node 的 hype 的人實在是 XD
2013-10-08 12:20:42	godfat	我應該趕快忘記那些可笑的言論 XD
2013-10-08 12:29:25	godfat	warp 那篇看一看有種難以言喻的感覺
2013-10-08 12:29:25	godfat	很多在這邊理所當然的東西，在其他地方別人不理解也不相信
2013-10-08 12:29:25	godfat	更遑論那些更巧妙先進的方式了..
2013-10-08 12:35:52	CindyLinz	godfat: 你開始有王垠的氣勢了.... (蓋章)
2013-10-08 12:36:35	godfat	......~.~ 雖然這樣說聽起來好像是好事（？）
2013-10-08 12:36:35	godfat	但說真的這一年實在好感嘆呀...
2013-10-08 12:38:41	CindyLinz	呃... 怎麼開始沈重起來 @@"
2013-10-08 12:39:30	godfat	可是這句「其他地方別人不理解也不相信」本身不就是比較沉重的話嗎？ XD
2013-10-08 12:45:47	<--	caasih (~caasiHuan@114-46-146-193.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-08 12:49:56	CindyLinz	godfat: 你這一年遇到了什麼啊 @@"
2013-10-08 12:50:13	CindyLinz	我以為那一句到處都在發生啊 @@"
2013-10-08 12:53:23	godfat	CindyLinz, XD
2013-10-08 12:53:23	godfat	是沒錯啦，但這麼切身又老是在發生，又覺得這樣很不合理，感觸就特別深
2013-10-08 12:53:23	godfat	簡單地說就是一年前我在弄這種 model:
2013-10-08 12:53:23	godfat	http://aosabook.org/en/posa/warp-images/4.png
2013-10-08 12:53:23	godfat	結果被質疑到現在，我老是要重複解釋，現在他們不信邪又要換別的事...
2013-10-08 12:53:37	godfat	s/事/試/
2013-10-08 12:59:46	CindyLinz	聽起來很悶...
2013-10-08 13:00:02	CindyLinz	往好處想你就不用負責了....
2013-10-08 13:00:17	CindyLinz	咦不對 已經開始用了
2013-10-08 13:02:13	godfat	是啊... 悶到我快受不了了
2013-10-08 13:02:13	godfat	是說要換回來也只是一行而已，反正我都寫好放在那邊隨便他們換著試
2013-10-08 13:02:13	godfat	只是這感覺實在好差
2013-10-08 13:14:09	CindyLinz	嗯 orz
2013-10-08 14:05:13	godfat	晚上 jaiyalas 不便參加聚會了 @@
2013-10-08 14:05:14	godfat	我看看能不能早點過去，看有沒有需要處理什麼事之類的
2013-10-08 14:16:41	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-08 15:16:19	--	You are now known as drbean_
2013-10-08 15:16:55	-->	drbean_ (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-08 15:16:55	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-08 15:16:55	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-08 15:16:55	--	Nicks #haskell.tw: [a2n b4283 caasih cataska cataska_ chihhsin cibs CindyLinz cyt93cs cyt93cs_ darkx drbean drbean_ favonia gko godfat hychen kanru lambdabot letoh logfat_ lwhsu miaout17_ miaout17__ mno2 monochrom petercommand shik superbil Yu-LIN]
2013-10-08 15:16:55	--	Channel #haskell.tw: 30 nicks (0 ops, 0 halfops, 0 voices, 30 normals)
2013-10-08 15:17:06	--	Mode #haskell.tw [+cnt]
2013-10-08 15:17:06	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-08 15:17:50	<--	drbean (~drbean@113.196.171.151) has quit (*.net *.split)
2013-10-08 15:17:50	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-iwzcukeekergjybf) has quit (*.net *.split)
2013-10-08 15:17:51	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2013-10-08 15:17:51	--	You are now known as drbean
2013-10-08 16:45:13	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-10-08 16:45:43	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-08 17:07:38	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-geewhcpwxaezzqxz) has joined #haskell.tw
2013-10-08 17:50:01	petercommand	Int->Int是甚麼?
2013-10-08 17:51:29	b4283	petercommand: 吃一個 Integer 給一個 Integer
2013-10-08 17:52:18	CindyLinz	要出發去 Functional Thursday 了 (緊張..)
2013-10-08 17:53:36	petercommand	(Int->Int)->(Int->Int)呢?
2013-10-08 17:53:58	CindyLinz	吃一個函數, 給一個函數
2013-10-08 17:54:08	petercommand	喔喔
2013-10-08 17:54:28	CindyLinz	吃一個(吃一個Integerer給一個Integer的函數)給一個(吃一個Integerer給一個Integer的函數)
2013-10-08 17:54:54	petercommand	恩
2013-10-08 17:55:18	petercommand	應該了解了@@
2013-10-08 17:56:17	b4283	(lambda (f) (lambda (x) (+ (f 1) x))
2013-10-08 17:56:33	b4283	) XD
2013-10-08 18:13:52	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-08 18:41:23	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-08 18:45:38	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-08 18:55:38	-->	godfat (~Adium@36-231-133-222.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-08 19:18:40	-->	hashcat (~chatzilla@27.52.150.185) has joined #haskell.tw
2013-10-08 19:24:19	-->	mno2 (~mno2@36-231-132-40.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-08 19:29:04	<--	hashcat (~chatzilla@27.52.150.185) has quit (Remote host closed the connection)
2013-10-08 19:33:29	<--	mno2 (~mno2@36-231-132-40.dynamic-ip.hinet.net) has quit (Quit: mno2)
2013-10-08 19:35:20	<--	godfat (~Adium@36-231-133-222.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-10-08 19:55:56	-->	b4283 (~b4283@36-238-132-29.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-08 20:04:01	-->	mno2 (~mno2@36-231-133-222.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-08 20:06:20	petercommand	原來這叫first-class function
2013-10-08 20:08:17	letoh	petercommand: 跟 lisp 有什麼不一樣嗎? XD
2013-10-08 20:08:44	petercommand	沒有XD
2013-10-08 20:28:36	petercommand	只是沒聽過叫first-class function而已= =
2013-10-08 20:34:11	mno2	CindyLinz: https://docs.google.com/presentation/d/1ZODuGNVnddLy2DG_IiPnBb5LBl0r1Rwhm_5LGGDQECY/edit#slide=id.p
2013-10-08 20:34:22	<--	mno2 (~mno2@36-231-133-222.dynamic-ip.hinet.net) has quit (Quit: mno2)
2013-10-08 20:34:55	-->	godfat (~Adium@36-231-133-222.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-08 20:45:09	Yu-LIN	讚
2013-10-08 20:47:48	<--	godfat (~Adium@36-231-133-222.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2013-10-08 22:11:30	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-10-08 22:11:54	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-08 22:27:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-08 22:28:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-08 23:23:25	CindyLinz	QQ 原來 scm 也沒去
2013-10-08 23:24:07	CindyLinz	來整理 material..
2013-10-08 23:32:57	<--	b4283 (~b4283@36-238-132-29.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-10-08 23:39:18	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-08 23:43:44	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-08 23:45:59	-->	godfat (~Adium@114-24-0-229.dynamic.hinet.net) has joined #haskell.tw
2013-10-08 23:50:46	<--	Yu-LIN (24ec1508@gateway/web/freenode/ip.36.236.21.8) has quit (Quit: Page closed)
2013-10-09 00:09:45	mno2	發信給 Yamamoto 詢問了 :p
2013-10-09 00:26:15	CindyLinz	今天講的投影片和素材~ https://github.com/CindyLinz/Talk-HappyMonadFix-Easy-NPassCompiler/
2013-10-09 00:38:37	<--	b4283 (~b4283@118.150.141.110) has quit (Ping timeout: 265 seconds)
2013-10-09 00:44:45	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-09 01:27:42	mno2	http://www.quora.com/What-are-some-great-stories-about-Bill-Gates
2013-10-09 01:27:57	mno2	原來 Logicomix 的那位數學家教過 Bill Gates!
2013-10-09 01:36:54	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-09 01:56:03	CindyLinz	討厭 quora.. QQ
2013-10-09 01:57:01	letoh	quora 的內容根本看不到  所以無視XD
2013-10-09 01:57:21	CindyLinz	不是這部分.. 是我以前點過一次授權 quora 的 FB app
2013-10-09 01:57:34	CindyLinz	然後他就一天到晚寄信給我的朋友說我在 quora 上面 follow 他們
2013-10-09 01:57:55	CindyLinz	但其實我那時點完就後悔, 把 quora app 刪了, 也再也沒上去過
2013-10-09 01:58:25	CindyLinz	我會知道是因為有朋友好奇問我說為什麼跑去 follow 他, 他在 quora 上面根本就沒有什麼動態, 不值得 follow 啊
2013-10-09 01:58:58	letoh	sns 不都是這樣嗎? XD
2013-10-09 01:59:02	CindyLinz	然後我也有陸續收一大堆朋友 follow 我的通知信.. 我相信相當多都不是他們真的有 follow 我...
2013-10-09 01:59:29	CindyLinz	letoh: 不一樣, 他在通知信裡面說了我沒有做的事情
2013-10-09 01:59:54	letoh	該不會有什麼自動 follow 的功能?
2013-10-09 02:00:11	letoh	像 linkedin 那樣一直想從 email 裡挖名單出來之類的?
2013-10-09 02:00:11	CindyLinz	這跟詐騙電話裡面冒充某某人的小孩哭說他被綁了希望爸爸救他, 是 isomorphic 的!
2013-10-09 02:00:22	letoh	isomorphic XD
2013-10-09 02:00:32	CindyLinz	他可以信上說某某人有註冊 quora 的帳號就好
2013-10-09 02:01:27	letoh	我是收過很多有人在某某服務上找我的信 (不是 facebook)  都直接砍掉了
2013-10-09 02:02:07	CindyLinz	如果那是那個朋友真的有點個什麼這樣描述的按鈕, 我感覺就不會這麼差了...
2013-10-09 02:02:25	CindyLinz	像 FB 小遊戲會引誘玩家去發邀請
2013-10-09 02:02:42	CindyLinz	畢竟還是玩家決定要發的..
2013-10-09 02:02:47	CindyLinz	雖然是被利誘的 XD
2013-10-09 02:03:12	CindyLinz	但是冒用我的名義去亂講話不一樣 orz
2013-10-09 02:03:42	letoh	就這點來說  quora 的做法的確不好
2013-10-09 02:04:17	CindyLinz	所以別的廣告信我常常只是就丟 trash, 或是就設 filter 自動 trash.. quora 就給他丟 spam 了...
2013-10-09 02:05:19	letoh	我以為 sns 就是想辦法弄到使用者的人際關係資料，然後就可以隨便用了 (所以我一直不喜歡用這類服務...)
2013-10-09 02:05:42	CindyLinz	letoh: 那樣可以告的...
2013-10-09 02:05:58	CindyLinz	而且可以「團告」.. XD
2013-10-09 02:06:13	CindyLinz	所以玩太大, 會出現蟑螂律師開團來告
2013-10-09 02:06:37	letoh	我覺得比較可怕的是  我身邊的人其實都對這樣的情況無感
2013-10-09 02:06:51	CindyLinz	反正舉證都一樣, 把名單收集一下, 賠的錢可以分成, 越大團律師就越賺... XD
2013-10-09 02:07:11	letoh	XDXD  聽起來像是好生意XD
2013-10-09 02:07:40	CindyLinz	http://www.ithome.com.tw/itadm/article.php?c=61306&s=12
2013-10-09 02:07:50	CindyLinz	每人每件可求償500～20,000元，相同原因造成的事件總求償金額最高2億元
2013-10-09 02:08:04	CindyLinz	可是外國網站就.... wwww
2013-10-09 02:08:56	letoh	只要 server 放國外就算外國網站吧? 還是說有 .tw 就不能算?
2013-10-09 02:09:45	CindyLinz	這邊講的對象是公司
2013-10-09 02:09:56	CindyLinz	跟 server 在哪倒沒關係
2013-10-09 02:10:25	CindyLinz	因為也不一定專指網站上的問題
2013-10-09 02:10:38	CindyLinz	像保險業亂用個資也在範圍內
2013-10-09 02:11:05	letoh	嗯嗯  也是  電信方面應該也很喜歡賣個資XD
2013-10-09 02:11:15	CindyLinz	(瞪)
2013-10-09 02:11:48	letoh	我一直懷疑 line 也有XD
2013-10-09 02:12:04	letoh	自從建完帳號  每天都在收一堆簡訊XD
2013-10-09 02:16:16	CindyLinz	orz
2013-10-09 02:27:56	CindyLinz	額外發現 github page 裡面不能用 symlink XD
2013-10-09 02:28:06	CindyLinz	我原本用 ln -s slide.html index.html
2013-10-09 02:28:11	CindyLinz	放上去都 404.. XD
2013-10-09 02:28:21	CindyLinz	必須直接放有內容的 index.html
2013-10-09 02:29:09	letoh	symlink 是 link 到哪裡? symlink 有不能跨 fs 的限制
2013-10-09 02:29:28	letoh	講錯了XD
2013-10-09 02:29:57	letoh	剛想的是跨 repo 可能會有問題.. 講成跨 fs
2013-10-09 02:31:03	CindyLinz	我原本是放一個真實有內容的 slide.html 和 index.html->slide.html
2013-10-09 02:31:28	CindyLinz	然後 404.. 而且 404 頁面還提醒說可能要等十分鐘, 因為是新建的 github page...
2013-10-09 02:31:48	CindyLinz	只是我手癢開了一下 /slide.html 發現是有東西的
2013-10-09 02:31:56	letoh	原來如此  這倒是沒試過  那用 redirect 呢?
2013-10-09 02:32:09	letoh	就一個真實的 index.html，裡面 redirect 到 slide
2013-10-09 02:32:20	CindyLinz	那就不是 symlink 了啊 XD
2013-10-09 02:32:24	CindyLinz	我想 redir 應該是可以吧
2013-10-09 02:32:40	CindyLinz	<meta http-equiv=refresh content=0;url=slide.html>
2013-10-09 02:32:55	CindyLinz	不知道有沒有記錯, 好久沒寫了 XD
2013-10-09 02:33:00	letoh	嗯.. html 版的 symlink (這是啥XD
2013-10-09 02:36:18	CindyLinz	我在我們公司自家的網站, symlink 來來去去都很順的嘛 XDDD
2013-10-09 02:39:23	letoh	這樣應該比較正常  想不到不能用 symlink 的原因
2013-10-09 02:40:22	CindyLinz	可能他背後是 NTFS..... (逃)
2013-10-09 02:40:54	letoh	ntfs 應該也有 symlink，只是需要工具XD
2013-10-09 02:41:19	CindyLinz	也許他怕我們亂 link 到不可以被 link 的地方? @@"
2013-10-09 02:41:48	letoh	ln -s /etc/xxxx 之類的? XD
2013-10-09 02:53:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-10-09 02:57:44	CindyLinz	對...
2013-10-09 02:58:48	CindyLinz	或是不小心猜到什麼 db account password config 檔的路徑...
2013-10-09 03:28:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 03:45:38	CindyLinz	現在最多人用的 Lens 是哪一套呀?
2013-10-09 03:45:39	CindyLinz	(haskell)
2013-10-09 03:56:28	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-09 04:28:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-09 04:43:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 05:34:13	monochrom	hackage.haskell.org/package/lens
2013-10-09 05:38:47	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-09 06:45:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-09 07:01:36	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Ping timeout: 260 seconds)
2013-10-09 07:04:23	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-10-09 08:06:13	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 09:51:28	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-09 10:05:28	-->	Yu_lin (24ec105c@gateway/web/freenode/ip.36.236.16.92) has joined #haskell.tw
2013-10-09 10:24:44	Yu_lin	昨天 Cindy 這個範例 " fix f = let x = f x in x " 中， f x  的 x 是從哪邊來的？
2013-10-09 10:58:44	<--	Yu_lin (24ec105c@gateway/web/freenode/ip.36.236.16.92) has quit (Quit: Page closed)
2013-10-09 11:07:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-09 11:10:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 11:14:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-09 11:22:34	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (*.net *.split)
2013-10-09 11:22:34	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-10-09 11:25:00	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-09 11:37:36	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-09 11:52:23	-->	Yu_lin (24ec14c7@gateway/web/freenode/ip.36.236.20.199) has joined #haskell.tw
2013-10-09 12:07:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 12:15:08	monochrom	請看我的 http://www.vex.net/~trebla/haskell/fix.xhtml
2013-10-09 12:49:46	CindyLinz	Yu_lin: let x = ... 來的呀
2013-10-09 13:01:16	CindyLinz	monochrom: 謝謝~~ ^^
2013-10-09 13:01:55	CindyLinz	這 hackage lens 的說明頁也太有誠意了吧...... 這一定不是 hackage 啊.... wwww
2013-10-09 13:02:07	monochrom	哈哈
2013-10-09 13:04:20	CindyLinz	Yu_lin: 這個 fix f 下去能不能用, 這個 f 的內容是什麼是很關鍵的.. 不是所有的 f 都能用. 有些 f 會直接 halt, 有些 f 可以用. 也許在你心裡是卡在這邊?
2013-10-09 13:04:56	CindyLinz	不對, 不只是 f... 還要看最後 fix f 的 in x 出去以後, 這個 x 被怎麼利用的
2013-10-09 13:07:48	CindyLinz	如果我們寫 let fix f = let x = f x in x in fix id 然後想把這整個 expr 的結果印出來, 這會卡住的
2013-10-09 13:09:10	CindyLinz	如果寫 let fix f = let x = f x in x in fix (\as -> 0 : as) 那麼就會出一個全部都是 0 的無窮 list
2013-10-09 13:09:30	CindyLinz	如果再對它取 take, 就可以印出其中有限項
2013-10-09 13:09:59	CindyLinz	let fix f = let x = f x in x in take 3 $ fix (\as -> 0 : as)
2013-10-09 13:10:38	CindyLinz	如果想把來籠去脈都讀一讀的話, 還是移駕 monochrom 的文章 :p
2013-10-09 13:32:38	CindyLinz	嗯, 當然這個 f 也可以完全不看自己的參數
2013-10-09 13:32:40	CindyLinz	let fix f = let x = f x in x in fix (\_ -> 3)
2013-10-09 13:32:57	CindyLinz	這樣結果是 3, 不過這樣就失去用 fix 的意義了
2013-10-09 14:05:04	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-09 14:45:48	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-09 14:59:40	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-09 15:00:43	<--	godfat (~Adium@114-24-0-229.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-09 15:08:51	-->	hashcat (~chatzilla@39.13.7.79) has joined #haskell.tw
2013-10-09 15:35:34	<--	Yu_lin (24ec14c7@gateway/web/freenode/ip.36.236.20.199) has quit (Quit: Page closed)
2013-10-09 16:26:02	--	godfat1 is now known as godfat
2013-10-09 16:56:03	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-09 17:40:49	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-09 17:53:03	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-09 18:20:59	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-09 18:51:09	<--	hashcat (~chatzilla@39.13.7.79) has quit (Remote host closed the connection)
2013-10-09 19:31:05	-->	hashcat (~chatzilla@39.13.7.79) has joined #haskell.tw
2013-10-09 20:03:13	mno2	http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation/te-8510
2013-10-09 20:54:23	-->	jarod_chen (~jarod_che@115.193.176.37) has joined #haskell.tw
2013-10-09 20:56:21	-->	b4284 (~b4283@218-164-220-87.dynamic.hinet.net) has joined #haskell.tw
2013-10-09 21:08:21	<--	hashcat (~chatzilla@39.13.7.79) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 24.0/20130916094533])
2013-10-09 21:22:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-09 21:55:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 22:23:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-10-09 22:29:27	b4283	godfat: http://nodeos.github.io/
2013-10-09 22:31:07	letoh	可怕...
2013-10-09 22:32:13	b4283	nodejs 要出來跟 guile 搶生意啦
2013-10-09 22:32:31	petercommand	b4283: omg
2013-10-09 22:32:46	petercommand	b4283: 做網頁的都變os了...
2013-10-09 22:33:43	CindyLinz	這樣是有什麼好處啊 @_@"
2013-10-09 22:34:10	CindyLinz	叫用系統服務之類的比較低階的事情, javascript 沒有比 C 好寫啊 @@"
2013-10-09 22:37:21	petercommand	有趣呀XDD
2013-10-09 22:39:01	CindyLinz	好吧, 這理由太有說服力了 XD
2013-10-09 22:39:24	godfat	我不知道 guile 是啥 @@
2013-10-09 22:39:24	godfat	我實在不能理解為什麼要擁抱 javascript,
2013-10-09 22:39:25	godfat	不過看到 no bash here 倒是有點爽 orz
2013-10-09 22:39:25	godfat	bash 我覺得也是超難用的
2013-10-09 22:40:04	<--	b4284 (~b4283@218-164-220-87.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-10-09 22:40:08	letoh	godfat: guile 是快打旋風裡的平頭美軍 (誤
2013-10-09 22:40:15	godfat	XDDDD
2013-10-09 22:40:41	godfat	阿雷估
2013-10-09 22:40:49	letoh	原來你知道XD
2013-10-09 22:41:05	godfat	我知道那個人，不記得他的名字 XD
2013-10-09 22:41:19	letoh	喔喔  就凱爾啊
2013-10-09 22:41:36	CindyLinz	godfat: 打 tcsh 就做到 no bash 了啊 (歪頭)
2013-10-09 22:41:45	letoh	其實每次有人問 guile 時  我都先給這個答案XD
2013-10-09 22:41:56	CindyLinz	不過好像更難用.. (謎)
2013-10-09 22:42:20	godfat	ok XD 我記得之前有聽過別人說為什麼 sonic boom 會聽起來像是阿雷估
2013-10-09 22:42:28	godfat	我自己是用 fish
2013-10-09 22:42:44	CindyLinz	我同事用 tcsh.. 聽說 tcsh 寫迴圈一定要換行, 不像 bash 是用分號分隔的, 所以在 command line 就打不出來... 目前他們常用解法是用 echo, 然後再 pipe 給 tcsh..... *_*
2013-10-09 22:43:18	godfat	....
2013-10-09 22:43:19	godfat	fish 是本來就能在 terminal 上換行
2013-10-09 22:44:07	CindyLinz	我那時是建議他直接 perl -e '寫perl程式' 算了
2013-10-09 22:44:28	godfat	話說回來，我不太能想像 NodeJS based operating system 是什麼意思...
2013-10-09 22:44:28	godfat	是說上面所有 application 都用 nodejs 來跑？
2013-10-09 22:45:07	godfat	喔喔，那我想起來另一件事。上次也有人跟我抱怨 sh 超難用
2013-10-09 22:45:07	godfat	我跟他說那你乾脆寫 perl 好了，反正大部分的 linux 也都有 perl,
2013-10-09 22:45:07	godfat	不太有跨平台的考量... XD
2013-10-09 22:48:55	godfat	看來他 readme 寫得比較清楚...
2013-10-09 22:48:56	godfat	https://github.com/NodeOS/NodeOS
2013-10-09 22:49:24	godfat	等等，為啥就只有 README 沒別的了......
2013-10-09 22:49:43	godfat	這是詐騙吧 XD 還兩百多人 star...
2013-10-09 22:49:46	letoh	因為放 github 比較好曝光 (誤
2013-10-09 22:49:57	godfat	~.~ 莫名....
2013-10-09 22:50:18	CindyLinz	...........||
2013-10-09 22:50:22	CindyLinz	我剛也在想這件事
2013-10-09 22:50:47	godfat	(關電視)
2013-10-09 22:54:44	b4283	XD
2013-10-09 22:54:57	b4283	原來是詐騙集團XD
2013-10-09 22:56:06	godfat	另外一個可能是開發沒 open source 或是還沒真的開始做啦 ~.~
2013-10-09 22:57:03	CindyLinz	b4283: 你是幫兇 XD # 22:54 < b4283> 原來是詐騙集團XD
2013-10-09 23:00:10	-->	b4284 (~b4283@218-164-220-87.dynamic.hinet.net) has joined #haskell.tw
2013-10-09 23:03:43	b4284	GNU make 4.0 要用 guile 當 extended language
2013-10-09 23:03:55	b4284	真不錯呵
2013-10-09 23:04:15	letoh	sonic boom~
2013-10-09 23:05:03	b4284	spinning bird kick!
2013-10-09 23:06:56	letoh	用 guile 會不會搞死其他人啊  我覺得 guile 並不是很流行的東西@_@
2013-10-09 23:07:30	<--	jarod_chen (~jarod_che@115.193.176.37) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-10-09 23:10:28	b4284	是新功能嘛，需要的人就會去學了 XD
2013-10-09 23:12:43	petercommand	原來guile是scheme interpreter@@
2013-10-09 23:12:57	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-09 23:13:24	petercommand	從上面看下來以為guile是一種語言XD
2013-10-09 23:13:49	letoh	就某個實作的名字吧
2013-10-09 23:14:28	b4284	各家的小地方都不太一樣 @@
2013-10-09 23:16:43	petercommand	只要standard的地方一樣應該還好
2013-10-09 23:18:19	petercommand	dialect之類的就....
2013-10-09 23:18:39	petercommand	需要在看一下
2013-10-09 23:19:46	letoh	guile 的用法可能跟 racket 有點像
2013-10-09 23:21:54	petercommand	scheme不同實作會差很多嗎?
2013-10-09 23:23:22	mno2	http://stackoverflow.com/questions/19210935/why-does-the-c-preprocessor-interpret-the-word-linux-as-the-constant-1
2013-10-09 23:23:33	letoh	語法的部份一般會參考 rnrs 吧
2013-10-09 23:24:41	b4284	r6rs 的 standard library 不是很完整，例如 posix networking 的部份是 guile 自己做的
2013-10-09 23:24:57	b4284	不足的地方都是自己腦補
2013-10-09 23:25:40	b4284	r7rs 應該可以解決這個問題，不過他們還在寫
2013-10-09 23:43:40	letoh	玩了一下 remark.. 覺得這種設計的指令好亂...
2013-10-10 00:02:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-10 00:51:23	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-10 01:01:33	<--	b4284 (~b4283@218-164-220-87.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-10 01:48:47	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-10 02:03:51	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-10 02:32:39	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2013-10-10 02:36:23	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-10-10 02:49:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 03:14:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-10 03:26:27	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-10 03:28:25	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-10-10 03:38:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 04:27:24	CindyLinz	Const functor 真是作弊的傢伙!
2013-10-10 04:28:12	CindyLinz	(正在聽這個演講.. # 20:03 < mno2> http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation/te-8510 )
2013-10-10 04:29:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-10 04:31:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 04:47:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-10 05:03:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 05:12:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-10 06:04:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 06:15:33	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-10 06:27:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 06:34:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-10 09:05:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 09:17:49	-->	b4283 (~b4283@36-238-231-172.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-10 10:23:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-10 11:17:08	godfat	CindyLinz, 本來想試試把你的 .y 改成 parsec 的方式（或是 Text.Parser? 不知道差在哪），結果發現 as 沒辦法 assemble XD 看來得先改成 llvm asm @_@ 好吧，本來就是計畫中的，只是順序變了 XD
2013-10-10 11:19:23	-->	snakepit (~snakepit@123.119.189.245) has joined #haskell.tw
2013-10-10 11:23:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 11:27:38	<--	b4283 (~b4283@36-238-231-172.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-10-10 11:31:30	-->	b4283 (~b4283@1-175-235-171.dynamic.hinet.net) has joined #haskell.tw
2013-10-10 11:36:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-10 11:37:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 11:43:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-10 12:09:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-10 13:24:54	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 248 seconds)
2013-10-10 13:31:04	godfat	唔唔，llvm 似乎是 register based... 沒有 push/pop @_@
2013-10-10 14:03:35	-->	monochrm (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-10 14:18:01	<--	b4283 (~b4283@1-175-235-171.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-10-10 14:25:43	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-10 15:14:57	--	monochrm is now known as monochrom
2013-10-10 15:31:27	-->	snakepit_ (~snakepit@221.217.160.184) has joined #haskell.tw
2013-10-10 15:34:49	<--	snakepit (~snakepit@123.119.189.245) has quit (Ping timeout: 240 seconds)
2013-10-10 16:06:47	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-10 16:14:55	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-10 16:57:59	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-10 16:58:54	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-10 17:13:02	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-10 17:16:30	godfat	好不容易 orz
2013-10-10 17:16:31	godfat	果然就算是 llvm 這麼高階的東西，組語不會就是不會 XD
2013-10-10 17:16:31	godfat	https://github.com/godfat/Talk-HappyMonadFix-Easy-NPassCompiler/commit/6f683cc6f37d656c93e9a5fbf29ea6f872d5eccf
2013-10-10 17:24:01	godfat	我覺得我需要 string interpolation 和 asm emitter
2013-10-10 17:24:01	godfat	assembly 裡一堆一樣的動作...
2013-10-10 17:28:37	mno2	llvm hack age 上有 library 可以寫 DSL
2013-10-10 17:28:47	mno2	雖然沒有全部功能不過還蠻方便的
2013-10-10 17:29:21	godfat	hack age... XD
2013-10-10 17:29:52	mno2	輸入自己斷字..
2013-10-10 17:29:57	mno2	https://github.com/MnO2/kaleidoscope-plus 可以參考這邊
2013-10-10 17:30:45	godfat	剛剛是翻到這個
2013-10-10 17:30:45	godfat	https://github.com/bos/llvm/blob/master/examples/Fibonacci.hs
2013-10-10 17:31:38	mno2	喔，同一個東西，都可以
2013-10-10 17:33:49	godfat	不過像是 appendBasicBlock 之類的東西，
2013-10-10 17:33:49	godfat	會比直接寫 llvm assembly 容易嗎？ @_@
2013-10-10 17:33:49	godfat	我之前有直接用 c++ 寫過，覺得要記好多 API @@
2013-10-10 17:34:51	godfat	另外則是比對從 c compile 過來的 llvm asm,
2013-10-10 17:34:51	godfat	覺得如果語言本身夠像 c 的話，compile 成 c
2013-10-10 17:34:51	godfat	還有好處是 -O3 最佳化看起來不錯... XD
2013-10-10 17:34:51	godfat	剛剛測直接用 llvm asm 的狀況，好像看不太出來差別
2013-10-10 17:35:41	mno2	block 是 flow chart 的概念，抽象程度比較好操作一些
2013-10-10 17:36:32	mno2	不過必須要先了解一下標準寫 compiler 的架構啦..
2013-10-10 17:36:35	godfat	嗯嗯，還有寫在 haskell 裡有 type 也好很多吧，我猜
2013-10-10 17:36:36	godfat	我剛剛 i32* 那個 * 少打，看半天搞好久最後才注意到是我少打 orz...
2013-10-10 17:37:07	mno2	那個 library 裡面超多神奇的 type，我都看不懂
2013-10-10 17:37:42	godfat	倒是 llvm 給的錯誤訊息都滿豐富的，亂寫也都會有明確的錯誤，很不錯
2013-10-10 17:37:42	godfat	我想算是滿安全的組合語言。可惜的是我還是看不懂，都要查好久才搞清楚狀況 orz
2013-10-10 17:37:43	godfat	XDDDD
2013-10-10 17:38:14	mno2	弄清楚之後就蠻好懂的
2013-10-10 17:39:09	godfat	我相信 XDDD 果然沒白吃的午餐 XDDD
2013-10-10 17:39:09	godfat	我弄到一半還在查 stack based machine 要怎麼轉 register based machine... ~.~
2013-10-10 17:39:09	godfat	忽然間才想通其實很單純 @@
2013-10-10 17:40:02	mno2	compiler 就是一個容易寫，但不好測的東西。所以寫這種東西我都會希望 type 會豐富一點
2013-10-10 17:41:40	godfat	結果 haskell llvm binding 就一堆奇怪的 type? XDD
2013-10-10 17:42:07	godfat	不過愈用愈覺得 llvm 真的是神器啊 XDD
2013-10-10 17:42:46	mno2	他那是為了建 DSL 才弄的吧，使用者不會看到
2013-10-10 17:42:54	mno2	我是好奇才追進去看
2013-10-10 17:43:42	godfat	原來是內部的 XD 之前看 frp 裡的東西也一堆怪怪的 type ~.~
2013-10-10 17:43:42	godfat	想起以前用 c++ template 也是寫了一堆內部用的奇怪東西
2013-10-10 18:30:15	<--	snakepit_ (~snakepit@221.217.160.184) has quit (Remote host closed the connection)
2013-10-10 18:41:56	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-10 20:23:40	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-10 21:56:05	-->	Yu_lin (24ec186d@gateway/web/freenode/ip.36.236.24.109) has joined #haskell.tw
2013-10-10 22:02:02	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-10 22:04:17	Yu_lin	昨天那個 nodeos 的圖，裡面的 root 是指 shell 吧？叫 NodeOS 我還真的以為有人要用 javascript 重新寫一個新的 OS 了XD
2013-10-10 22:25:06	-->	suhorng (~suhorng@118-166-53-142.dynamic.hinet.net) has joined #haskell.tw
2013-10-10 22:35:27	<--	suhorng (~suhorng@118-166-53-142.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-10 22:37:23	-->	suhorng (~suhorng@118-166-53-142.dynamic.hinet.net) has joined #haskell.tw
2013-10-10 23:04:26	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-10 23:22:58	<--	Yu_lin (24ec186d@gateway/web/freenode/ip.36.236.24.109) has quit (Quit: Page closed)
2013-10-10 23:24:37	<--	miaout17_ (uid13197@gateway/web/irccloud.com/x-geewhcpwxaezzqxz) has quit (Ping timeout: 264 seconds)
2013-10-10 23:51:25	suhorng	wow, 意思是改成 llvm 板的已經寫完嗎XD
2013-10-10 23:53:43	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-10 23:56:54	CindyLinz	godfat: 原來就直接這樣 fork 繼續寫喔 XD
2013-10-10 23:58:29	CindyLinz	這... @_@" # 17:39 < godfat> 我弄到一半還在查 stack based machine 要怎麼轉 register based machine... ~.~
2013-10-10 23:58:52	CindyLinz	我突然覺得還好我選了 gnu as, 沒有選 llvm..... orz
2013-10-10 23:59:48	CindyLinz	從小到大只有寫過 stack based machine... -- MASM & NASM & mips(spim)...
2013-10-11 00:01:06	letoh	mips 算嗎?
2013-10-11 00:01:24	letoh	不過我也不太懂為什麼 masm/nasm 也算@_@
2013-10-11 00:01:38	 *	letoh (前面討論沒跟到  先研究一下XD)
2013-10-11 00:01:53	CindyLinz	因為這四種寫起來我覺得都一樣啊 XD
2013-10-11 00:02:25	CindyLinz	不過 mips 的指令不一樣, 另外三個我都是寫 8086 血統的, 超像..
2013-10-11 00:02:42	CindyLinz	差異只在以前用 dos / bios 的服務, 現在用 linux 的服務
2013-10-11 00:02:57	letoh	喔喔喔  我以為是說跟 stack machine 很像
2013-10-11 00:03:04	CindyLinz	欸?
2013-10-11 00:03:13	CindyLinz	好像誤解 godfat 了... @@"
2013-10-11 00:03:29	CindyLinz	他說的 stack based 是 llvm 喔?
2013-10-11 00:03:39	CindyLinz	那好吧, 我寫的都是 register based XDD
2013-10-11 00:03:41	letoh	llvm 應該是 register based ?
2013-10-11 00:03:49	CindyLinz	呃...
2013-10-11 00:03:58	suhorng	x86/MIPS/ARM不算吧?
2013-10-11 00:03:59	CindyLinz	godfat: 那你為什麼要查這個啊 XD
2013-10-11 00:04:01	letoh	現在要碰到 stack machine 應該很難@_@
2013-10-11 00:04:07	suhorng	LLVM是register based阿
2013-10-11 00:04:18	CindyLinz	那 MASM 咧?
2013-10-11 00:04:20	suhorng	x86/MIPS/ARM主要也都是register, 只不過有stack
2013-10-11 00:04:21	letoh	我以為 j1 那種才算
2013-10-11 00:04:32	CindyLinz	LLVM 沒有 stack?
2013-10-11 00:04:37	suhorng	lisp machine那類型(像上次那個 toy machine)的才算吧XD
2013-10-11 00:04:43	letoh	但那不叫 stack-based machine 啊XD
2013-10-11 00:04:50	CindyLinz	所以要自己拿 heap 當 stack 用?
2013-10-11 00:05:04	letoh	suhorng: 我也以為是那樣
2013-10-11 00:05:05	suhorng	forth也算?
2013-10-11 00:05:12	CindyLinz	forth 超標準的 stack based...
2013-10-11 00:05:16	letoh	很難說... forth cpu 才算
2013-10-11 00:05:17	suhorng	呃 奠基的
2013-10-11 00:05:20	suhorng	對
2013-10-11 00:05:28	CindyLinz	不過我看 godfat 那樣講的時候, 我的確是把 stack based 理解成有 stack 的環境
2013-10-11 00:05:30	letoh	forth 不算  所以我剛剛說 j1 那種才算
2013-10-11 00:06:04	letoh	x86 的 stack 使用，我覺得那是模擬出來的XD
2013-10-11 00:06:48	CindyLinz	letoh: 因為 sp 可以亂搞?
2013-10-11 00:07:10	CindyLinz	來等 godfat 解釋好了 XD
2013-10-11 00:07:21	suhorng	對llvm不是很有印象, 他好像不需要顯式的stack吧.. register數量"無上限"
2013-10-11 00:07:24	letoh	嗯  反正就用記憶體跟某個 register 配合就可以弄出 stack 了不是嗎? XD
2013-10-11 00:07:33	CindyLinz	register 無上限..... (默)
2013-10-11 00:07:45	CindyLinz	真是太過份了......
2013-10-11 00:08:19	suhorng	就只是個 SSA XD
2013-10-11 00:08:27	mno2	http://skillsmatter.com/podcast/home/simon-marlow  video 出來了
2013-10-11 00:08:58	CindyLinz	我沒法直接播, 會說什麼我的環境設定不對
2013-10-11 00:09:04	suhorng	simon marlow http://ro-che.info/ccc/19
2013-10-11 00:09:13	CindyLinz	所以昨天我就去翻它的 url, 把 mp4 下載下來用 mplayer 開 XDDD
2013-10-11 00:09:47	CindyLinz	XDDD
2013-10-11 00:10:10	letoh	http://www.ece.cmu.edu/~koopman/stack_computers/sec4_4.html  novix 也是很有名的 stack cpu
2013-10-11 00:11:19	suhorng	今天的內容忽然很硬體lol
2013-10-11 00:11:54	letoh	比前在 bbs 的古文聽說台大有  不過應該是很古老的事了
2013-10-11 00:12:11	letoh	應該是某個 lab 的財產吧
2013-10-11 00:13:06	CindyLinz	日本東京的 rails meetup 幾乎沒有日本人參加, 都是白人和大陸人... 忍不住還是笑了.. :p # https://www.facebook.com/xdite/posts/10151961185373552
2013-10-11 00:14:21	monochrom	是不是日本人不喜歡西人盜用了 ruby 一詞呢? XD
2013-10-11 00:14:52	letoh	ruby 這詞也不是日本的吧?
2013-10-11 00:15:02	CindyLinz	「剛開始這個 Meetup 雖然是英國人 Miles 創辦的，但在一開始其實是有日本人參加的。但是因為國情不同，白種 Developer 在 Meetup 通常會很熱情的認識陌生人："Hi, dude, where are you come from? What kind of project are you working on?"」
2013-10-11 00:15:10	CindyLinz	「但是很多日本人的英文程度是很爛的 XDDDD 他們沒辦法應付這種社交場合，要用英文聊天是一種是巨大的社交壓力！於是雖然會有日本人參加，但他們只會來一次，下次就不來了！！」
2013-10-11 00:15:20	CindyLinz	「但是白種 Developer 參加這種 Event 會覺得很開心，於是他們也把他們的朋友拖來，不管他是不是也是寫 Rails 的。結果這個 Meetup 最後就只剩下白種 Developers 和 Greater China 的 Developer 在參加 orz.....」
2013-10-11 00:15:57	suhorng	/o/
2013-10-11 00:16:55	monochrom	在日本開會用英文, 很不正常啊
2013-10-11 00:17:28	letoh	上次開會  會場有一半日本人  但還是全程用英文
2013-10-11 00:18:28	 *	letoh 其實我越聽越習慣了，反而不習慣西洋人的英文XD
2013-10-11 00:18:33	CindyLinz	日本人應該聽英文還是很厲害吧? 只是比較沒自信一點所以不想講, 我猜其實還是會講吧 @@"
2013-10-11 00:19:11	letoh	會講  但發音問題不太好改善... 我是把他們講的都當作日文來聽  很自然就能聽懂XD
2013-10-11 00:19:36	letoh	當成英文來理解應該會陣亡XD
2013-10-11 00:20:23	CindyLinz	letoh: 我現在漸漸覺得... 說發音有問題, 其實是聽的人英文不夠好才會聽不懂.. ._.
2013-10-11 00:20:46	CindyLinz	我聽印度腔英文聽得很痛苦, 美國人卻是聽得很順的... QQ
2013-10-11 00:21:09	letoh	這當然也是一個問題啦  可能要強到聽不懂的部份也可以腦補
2013-10-11 00:21:29	mno2	那是因為台灣接觸到的 training data 都太美式了
2013-10-11 00:21:38	letoh	我聽日文可以  漏掉一些我也補的起來  但聽英文還不行，只要漏掉幾個字就完了XD
2013-10-11 00:21:44	CindyLinz	你字還沒講出來他就已經猜到了, 等你字講出來, 只是讓他作 verify 而已? XD
2013-10-11 00:22:14	mno2	上課應該要播不同口音的才實用
2013-10-11 00:22:18	letoh	練外語聽力應該都要練到這種程度?
2013-10-11 00:22:57	CindyLinz	覺得聽演講比實際對話難, 因為講的人不會停下來等我理解... @@"
2013-10-11 00:23:06	monochrom	你們聽過香港腔的國語嗎? XD
2013-10-11 00:23:07	CindyLinz	不過演講錄影就沒問題了, 可以重播 A_A
2013-10-11 00:23:34	CindyLinz	有啊, 以前有遇過僑生 ^^
2013-10-11 00:23:54	letoh	感覺不會特別奇怪啊  還是聽得懂的程度
2013-10-11 00:24:47	CindyLinz	表示我們中文夠好 :D
2013-10-11 00:24:51	letoh	是指像是港星講普通話那種感覺嗎?
2013-10-11 00:24:57	letoh	唔  應該是XD
2013-10-11 00:25:09	CindyLinz	letoh: 港星... 其實講得有比較好懂了說
2013-10-11 00:33:01	<--	suhorng (~suhorng@118-166-53-142.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-11 01:11:33	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-11 01:21:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-11 01:21:46	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-ywtyifpbylietman) has joined #haskell.tw
2013-10-11 02:07:00	-->	hashcat (~hashcat@39.10.46.94) has joined #haskell.tw
2013-10-11 02:33:59	<--	hashcat (~hashcat@39.10.46.94) has quit (Quit: Leaving)
2013-10-11 04:17:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-11 04:23:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-11 04:53:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-11 06:01:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-11 06:31:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-11 07:11:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-11 07:16:10	-->	hashcat (~hashcat@27.246.84.188) has joined #haskell.tw
2013-10-11 07:17:38	<--	hashcat (~hashcat@27.246.84.188) has quit (Remote host closed the connection)
2013-10-11 09:25:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-11 09:51:41	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-11 10:04:33	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-10-11 10:06:12	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-11 10:44:16	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (*.net *.split)
2013-10-11 10:44:27	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-11 11:08:08	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-11 11:30:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-11 11:34:23	<--	cataska (~cataska@210.64.6.233) has quit (*.net *.split)
2013-10-11 11:34:23	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2013-10-11 11:34:34	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-10-11 12:39:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-11 12:44:53	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-11 13:10:20	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-10-11 13:10:39	suhorng	昨天想到stack machine..我突然想到最明顯的例子就是 JVM XDDD
2013-10-11 13:11:54	suhorng	至少看一些bytecode的感覺是(汗" http://en.wikipedia.org/wiki/Java_bytecode#Example
2013-10-11 13:37:27	CindyLinz	突然開始讀一堆組語... (汗)
2013-10-11 14:53:13	godfat	呃 XD 我太不熟了，所以我的意思是能不能用 push/pop
2013-10-11 14:53:13	godfat	現在看起來 llvm 中是沒有類似的指令，所以得用 register
2013-10-11 14:53:13	godfat	比方說最後 double 那個 function 是長這樣：
2013-10-11 14:53:14	godfat	  %val.addr = alloca i32
2013-10-11 14:53:15	godfat	  store i32 %arg, i32* %val.addr
2013-10-11 14:53:15	godfat	  %0 = load i32* %val.addr
2013-10-11 14:53:15	godfat	  store i32 %arg, i32* %val.addr
2013-10-11 14:53:15	godfat	  %1 = load i32* %val.addr
2013-10-11 14:53:15	godfat	  %2 = add nsw i32 %0, %1
2013-10-11 14:53:15	godfat	  store i32 %2, i32* %val.addr
2013-10-11 14:53:16	godfat	  %val = load i32* %val.addr
2013-10-11 14:53:16	godfat	  ret i32 %val
2013-10-11 14:54:03	godfat	我本來也想重複利用 register, 不過後來發現不行...
2013-10-11 14:54:03	godfat	但是名稱可以重複，所以就變成用 %0, %1, %2 去遞增...
2013-10-11 14:54:23	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-11 14:54:26	godfat	然後這好像也是 llvm 標準手法 ~.~ 他甚至會去檢查你的數字遞增對不對
2013-10-11 14:55:00	godfat	中間我沒打 label 時，他會自動給 label 名字，導致我的數字少了
2013-10-11 14:55:00	godfat	這一點我也是查好久才找到原因的...
2013-10-11 15:22:04	suhorng	不能重複assign
2013-10-11 15:22:47	suhorng	如果有什麼分支的 需要把東西並起來的話好像用 Φ (phi)
2013-10-11 15:22:58	suhorng	完全是SSA的樣子...
2013-10-11 15:26:04	CindyLinz	所以如果想用 stack, 就是去找一段記憶體, 然後自己找一個固定的 address 來保存 SP 這樣?
2013-10-11 15:27:41	suhorng	大概是吧..
2013-10-11 17:09:34	-->	Yu-Lin (24ec14d2@gateway/web/freenode/ip.36.236.20.210) has joined #haskell.tw
2013-10-11 17:55:28	petercommand	CindyLinz: 我記得日本人說的中文也很難懂
2013-10-11 17:56:40	petercommand	之前有日本的交換學校來 他們代表上台致詞的時候聽的很辛苦
2013-10-11 17:56:47	petercommand	之前有日本的交換學校來 他們的代表上台致詞的時候聽的很辛苦
2013-10-11 18:01:45	CindyLinz	我沒聽過日本人說中文 ._.
2013-10-11 18:03:13	letoh	我常常聽XD
2013-10-11 18:05:56	letoh	petercommand: 像瀬上剛講中文那種感覺?
2013-10-11 18:06:52	petercommand	不知道他是誰= =
2013-10-11 18:07:20	petercommand	有聲音可以聽聽看嗎?
2013-10-11 18:07:31	letoh	日本牙技師，有主持台灣的旅遊節目
2013-10-11 18:07:37	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Quit: Page closed)
2013-10-11 18:07:55	letoh	petercommand: 算蠻有名的，你 youtube 找一下就有
2013-10-11 18:08:09	petercommand	ok
2013-10-11 18:09:23	letoh	我還蠻喜歡看的，可以學一下怎麼用日文介紹台灣XD
2013-10-11 18:09:30	petercommand	letoh: 他是講日文阿
2013-10-11 18:09:44	letoh	他跟台灣人說話就是講中文  自言自語時是日文沒錯
2013-10-11 18:10:06	petercommand	XD
2013-10-11 18:10:44	letoh	petercommand: https://www.youtube.com/watch?v=drzMmX8Jmjc#t=3m30s  隨便找的
2013-10-11 18:11:07	letoh	我的老師也超愛講中文  明明是我要去學日文，結果都在聽中文XD
2013-10-11 18:11:53	petercommand	letoh: 他中文講的很好阿XD
2013-10-11 18:12:39	letoh	他在台灣也很久了啦  像我的老師來台灣不到一年  講中文沒那麼標準，但也是聽得懂的程度
2013-10-11 18:12:55	letoh	聽得出是外國人就是
2013-10-11 18:14:09	b4283	letoh: 他沒用很多「就是」，肯定不是台灣人！
2013-10-11 18:14:18	letoh	XDXD
2013-10-11 18:14:53	letoh	就是說啊  (這樣有像台灣人嗎?XD
2013-10-11 18:15:15	petercommand	XD
2013-10-11 18:15:15	CindyLinz	well...
2013-10-11 18:49:16	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-11 20:16:37	-->	b4283 (~b4283@218-164-218-109.dynamic.hinet.net) has joined #haskell.tw
2013-10-11 20:40:07	-->	hashcat (~hashcat@27.246.84.188) has joined #haskell.tw
2013-10-11 21:01:31	<--	Yu-Lin (24ec14d2@gateway/web/freenode/ip.36.236.20.210) has quit (Quit: Page closed)
2013-10-11 22:09:33	<--	hashcat (~hashcat@27.246.84.188) has quit (Ping timeout: 272 seconds)
2013-10-11 22:10:04	-->	hashcat (~hashcat@27.246.84.188) has joined #haskell.tw
2013-10-11 23:05:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-11 23:44:46	-->	suhorng (~suhorng@118-166-53-142.dynamic.hinet.net) has joined #haskell.tw
2013-10-11 23:58:35	<--	b4283 (~b4283@218-164-218-109.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-12 00:18:27	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-12 00:20:56	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-12 00:25:15	<--	suhorng (~suhorng@118-166-53-142.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-12 01:39:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-12 01:49:41	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-12 02:04:59	<--	hashcat (~hashcat@27.246.84.188) has quit (Remote host closed the connection)
2013-10-12 02:55:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-12 03:23:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-12 04:29:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-12 04:32:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-12 06:27:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-12 08:20:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-12 09:31:23	-->	b4283 (~b4283@36-238-225-95.dynamic-ip.hinet.net) has joined #haskell.tw
2013-10-12 11:26:24	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-12 12:24:23	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-12 14:24:29	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-12 14:36:25	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-12 15:38:29	-->	hashcat (~hashcat@27.246.84.188) has joined #haskell.tw
2013-10-12 15:47:13	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-12 16:08:30	<--	b4283 (~b4283@36-238-225-95.dynamic-ip.hinet.net) has quit (Quit: Leaving)
2013-10-12 16:53:34	hychen	在mac踩到haskell地雷
2013-10-12 16:53:44	hychen	https://github.com/haskell/cabal/issues/1496
2013-10-12 16:57:47	CindyLinz	ticket 可以這樣, 開了又關, 關了又開嗎~
2013-10-12 17:00:22	petercommand	應該可以吧
2013-10-12 17:03:37	godfat	XDDD
2013-10-12 17:03:38	godfat	我個人覺得比較禮貌的方式還是請事主關
2013-10-12 17:03:38	godfat	是說看了那篇才發現我 mac 很久沒更新了...
2013-10-12 17:03:38	godfat	10.8.2 => 10.8.4
2013-10-12 17:03:38	godfat	難怪我沒問題 -_-
2013-10-12 17:03:38	godfat	以前不都會自動更新嗎？怎麼現在還要我自己去確認...
2013-10-12 17:08:15	godfat	算了，我還是要更新，祝我好運 XD
2013-10-12 17:08:29	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-10-12 17:24:20	-->	godfat (~Adium@114-24-2-93.dynamic.hinet.net) has joined #haskell.tw
2013-10-12 17:25:15	godfat	直接跳 10.8.5 了 @_@
2013-10-12 17:48:10	mno2	http://www.rustforrubyists.com/book/index.html
2013-10-12 18:06:37	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-12 19:48:26	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-12 20:04:40	-->	suhorng (~suhorng@118-166-50-231.dynamic.hinet.net) has joined #haskell.tw
2013-10-12 22:08:20	petercommand	以前常看到書名叫how to teach yourself blah blah in XX days, 現在直接放fuxnum了XD http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html
2013-10-12 22:29:47	-->	delta4d (delta@219.228.118.113) has joined #haskell.tw
2013-10-12 22:45:34	<--	delta4d (delta@219.228.118.113) has quit (Quit: Leaving)
2013-10-12 23:28:35	<--	hashcat (~hashcat@27.246.84.188) has quit (Read error: No route to host)
2013-10-13 00:01:46	<--	suhorng (~suhorng@118-166-50-231.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-13 00:42:49	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-13 00:59:00	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-13 01:00:00	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 01:41:07	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-13 02:12:20	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-13 04:20:50	-->	hashcat (~hashcat@27.243.113.112) has joined #haskell.tw
2013-10-13 04:50:11	<--	hashcat (~hashcat@27.243.113.112) has quit (Remote host closed the connection)
2013-10-13 10:45:34	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-13 10:57:09	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 11:02:55	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-13 11:05:32	-->	b4284 (~b4283@218-164-205-21.dynamic.hinet.net) has joined #haskell.tw
2013-10-13 11:07:18	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 11:38:07	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-13 12:03:54	-->	liuzhoou (~liuzhoou@180.171.146.213) has joined #haskell.tw
2013-10-13 12:04:49	<--	liuzhoou (~liuzhoou@180.171.146.213) has quit (Remote host closed the connection)
2013-10-13 12:05:19	-->	liuzhoou (~liuzhoou@180.171.146.213) has joined #haskell.tw
2013-10-13 12:16:15	<--	liuzhoou (~liuzhoou@180.171.146.213) has quit (Remote host closed the connection)
2013-10-13 13:01:57	CindyLinz	suhorng 上任 ptt #PLT 板主了 :D
2013-10-13 13:25:49	letoh	賀!!
2013-10-13 13:31:43	-->	liuzhoou (~liuzhoou@180.171.146.213) has joined #haskell.tw
2013-10-13 14:01:28	-->	mno2 (~mno2@220-133-16-91.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 14:37:37	<--	b4283 (~b4283@118.150.141.110) has left #haskell.tw ("Killed buffer")
2013-10-13 14:37:45	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-13 14:53:07	<--	mno2 (~mno2@220-133-16-91.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-13 15:19:50	CindyLinz	問問.....
2013-10-13 15:20:03	CindyLinz	GADT 可以用 syntax sugar 作到嗎?
2013-10-13 15:20:32	CindyLinz	用 class / instance 和 existential type 去作出跟 GADT 一樣的效果?
2013-10-13 15:22:32	CindyLinz	我也有一點在懷疑 GHC 7.6(?) 的某個 extension, 可以讓 type level 的計算不再只有 * 的(像是 * -> *), 而是可以加上限制為某些特定 type 的
2013-10-13 15:22:40	CindyLinz	是不是也可以用 class / instance 作出來
2013-10-13 15:23:32	CindyLinz	只是看起來會是: 如果滿足某 class 的話, 就會符合要求的效果, 而不符合要求的 data 雖然造得出來, 但是就不會符合該 class 的 instance
2013-10-13 15:24:22	CindyLinz	而由 GADT 和這個 extension 作出來的會像是連造都造不出來.
2013-10-13 15:24:58	CindyLinz	另外一點差異是, class 的 instance 可以隨別人亂加, 一旦被亂加了, 就會破壞(放寬)原始的限制
2013-10-13 15:25:25	CindyLinz	所以由 class / instance 的實作作出來的保證, 有個前提是使用的人沒有去亂加
2013-10-13 15:25:37	CindyLinz	(是這樣嗎? @@)
2013-10-13 15:39:43	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 15:39:50	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-13 15:40:38	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 16:21:54	<--	liuzhoou (~liuzhoou@180.171.146.213) has quit (Remote host closed the connection)
2013-10-13 18:18:54	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-13 18:19:54	<--	b4284 (~b4283@218-164-205-21.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-13 19:56:27	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-13 20:10:27	favonia	執行 .ghci 下的檔案的安全性問題 xD # http://ghc.haskell.org/trac/ghc/ticket/6017
2013-10-13 21:40:14	-->	hashcat (~hashcat@27.243.113.112) has joined #haskell.tw
2013-10-13 22:01:40	--	miaout17_ is now known as miaout17
2013-10-13 22:23:01	-->	suhorng (~suhorng@118-166-50-231.dynamic.hinet.net) has joined #haskell.tw
2013-10-13 22:25:08	suhorng	ghci...
2013-10-13 22:26:15	petercommand	rvm也會，不過他會先警告
2013-10-13 23:03:42	hashcat	rvm是啥
2013-10-13 23:11:57	petercommand	管理ruby版本的工具
2013-10-13 23:14:40	hashcat	看上去像是r語言虛擬機
2013-10-13 23:14:48	petercommand	XD
2013-10-13 23:30:37	letoh	這樣看好像不太準，就像 prolog 的 vm 也沒叫 pvm 或 provm 啊XD
2013-10-13 23:35:53	petercommand	除了java外，有其他是這樣叫的嘛?
2013-10-13 23:36:10	letoh	llvm (誤
2013-10-13 23:36:15	CindyLinz	nvm (誤
2013-10-13 23:36:17	petercommand	...
2013-10-13 23:36:21	petercommand	XDD
2013-10-13 23:36:32	godfat	nvm XD
2013-10-13 23:36:39	petercommand	連nvm都出現了XD
2013-10-13 23:38:47	CindyLinz	GHC 的叫 RTS
2013-10-13 23:39:18	petercommand	real time strategy (誤
2013-10-13 23:53:19	hashcat	pvm 是 parallel virtual machine
2013-10-13 23:53:47	hashcat	已經被佔用了
2013-10-13 23:54:03	suhorng	只好叫 lvm, logical virtual machine 了?
2013-10-13 23:55:15	hashcat	lvm好像是磁碟管理的東西
2013-10-13 23:55:43	suhorng	糟了w
2013-10-13 23:56:31	hashcat	prolog虛擬機有兩種叫法
2013-10-13 23:57:02	hashcat	上面都沒p字母
2013-10-13 23:58:07	hashcat	wam跟vam, 連全稱也都沒半個p
2013-10-13 23:59:17	suhorng	那是人名吧...XD
2013-10-14 00:04:14	hashcat	一個是地名
2013-10-14 00:27:50	<--	suhorng (~suhorng@118-166-50-231.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-14 00:35:44	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-14 00:53:06	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-14 01:14:48	CindyLinz	用 llvm 寫的東西, 是不是通常可以跨 architecture, 但是不能跨 OS?
2013-10-14 01:15:10	CindyLinz	machine code / assembly 層面的東西可以跨, 但是系統服務跨不了這樣?
2013-10-14 01:29:12	hashcat	是說直接寫ir嗎
2013-10-14 01:31:44	godfat	系統服務是指什麼？
2013-10-14 01:31:48	CindyLinz	對
2013-10-14 01:32:03	CindyLinz	像是 int 0x80 的 OS 系統呼叫
2013-10-14 01:32:06	letoh	類似呼叫 dos int 那種感覺?
2013-10-14 01:32:09	CindyLinz	對
2013-10-14 01:32:15	CindyLinz	dos 是 21h, linux 是 80h
2013-10-14 01:32:41	godfat	我不知道這是啥..... XD
2013-10-14 01:32:41	CindyLinz	我在想如果我用 haskell (ghc) 寫了個東西
2013-10-14 01:32:54	CindyLinz	要給沒在用 haskell, 也沒有 ghc 環境的人用
2013-10-14 01:33:15	CindyLinz	如果直接給他 haskell source, 可能有點太粗暴...
2013-10-14 01:33:31	CindyLinz	所以想如果退而求其次, 給編出來的 llvm
2013-10-14 01:33:56	CindyLinz	有考慮過一下包 package, 不過我還不會包 package.. XD
2013-10-14 01:34:06	CindyLinz	我是說 .deb 或 .rpm 這種的
2013-10-14 01:34:32	 *	letoh <- 死不裝 ghc 的人XD
2013-10-14 01:35:06	CindyLinz	如果只是吃 stdin, 然後輸出 stdout 的程式.. 不知道是不是比較容易闖過 OS 不同這一關 :Q
2013-10-14 01:36:35	hashcat	通常來說llvm沒法直接跨平台
2013-10-14 01:37:34	CindyLinz	卡在哪邊啊?
2013-10-14 01:37:38	hashcat	看編譯器怎設計
2013-10-14 01:37:53	hashcat	有些編譯器會在ir嵌入組合語言
2013-10-14 01:39:37	hashcat	就算沒那個, 還有些IR是平台限定的
2013-10-14 01:40:07	CindyLinz	你說的平台是 OS 嗎?
2013-10-14 01:40:17	CindyLinz	還是硬體也限制?
2013-10-14 01:40:39	hashcat	硬體限制
2013-10-14 01:40:55	hashcat	光是能嵌入組合語言就很難搞了吧
2013-10-14 01:41:29	CindyLinz	看能不能運氣好點要求 compiler 不要塞特製的組語啊 ._.
2013-10-14 01:41:33	hashcat	像是會依照架構可能產生i32或者i64這種東西
2013-10-14 01:41:47	hashcat	完全避開也是可以
2013-10-14 01:42:00	CindyLinz	所以還是包 package 比較實際嗎? @@"
2013-10-14 01:42:00	hashcat	要看編譯器有沒這個心
2013-10-14 01:42:22	hashcat	推廣haskell比較實際
2013-10-14 01:42:43	hashcat	不要用haskell最實際哈哈
2013-10-14 01:43:01	CindyLinz	推廣了 haskell 還是 letoh 這種人會卡在 ghc 啊 XD
2013-10-14 01:43:32	CindyLinz	letoh: 看看你 /_\
2013-10-14 01:43:37	monochrom	用 hugs 也不錯 XD
2013-10-14 01:43:52	letoh	XDXD
2013-10-14 01:43:59	CindyLinz	如果整個程式從頭到尾都是自己刻出來的, 用 hugs 比較沒問題...
2013-10-14 01:44:08	CindyLinz	可是想用別人的 library 啊.... /_\
2013-10-14 01:44:32	letoh	我在 rpi 上有裝比較舊的 ghc 啦，只是 ghc 在 arm 上使用起來實在很不好用XD
2013-10-14 01:44:37	godfat	趕快幫 hugs 加東西趕上 ghc 才是正解？ XD
2013-10-14 01:45:19	CindyLinz	我想做 language level 的 embedded haskell... ([非常]遠目)
2013-10-14 01:45:20	hashcat	如果沒用上ghc上的一堆擴展
2013-10-14 01:45:22	hashcat	http://www.cs.uu.nl/wiki/UHC
2013-10-14 01:45:28	hashcat	看這個能不能編過
2013-10-14 01:45:31	letoh	連 interactive shell 都沒有
2013-10-14 01:46:00	letoh	然後編譯出來的程式又超級肥大
2013-10-14 01:46:02	CindyLinz	是還沒寫啦.. 所以不能試編 XD..   只是我沒去用不夠啊, 要底下的 library 都沒有去用... orz
2013-10-14 01:46:17	CindyLinz	ghc 編出來真的大.... extreme inline....
2013-10-14 01:46:23	hashcat	能產生c
2013-10-14 01:46:26	letoh	language level 是指像 livescript 那種語法?
2013-10-14 01:46:32	hashcat	支持cabal
2013-10-14 01:47:00	hashcat	說反了
2013-10-14 01:47:02	CindyLinz	我那次練習 compiler, 順便用 haskell 寫了一個 test script
2013-10-14 01:47:07	hashcat	cabal支持
2013-10-14 01:47:08	CindyLinz	編出來的執行檔 12MB....
2013-10-14 01:47:51	CindyLinz	letoh: 語法是 haskell.. 只是可以編成指定的目標語言, 然後把它塞在目標語言寫的程式裡面
2013-10-14 01:48:19	CindyLinz	hashcat: 給別人 ghc 生出來的 c 程式碼, 然後讓使用的人自行 gcc?
2013-10-14 01:48:27	letoh	就像上次有人提到可以用在 cortex m4 的 haskell compiler ?
2013-10-14 01:48:45	CindyLinz	letoh: 那個是 ajhc 生出 c 程式
2013-10-14 01:49:02	hashcat	是UHC
2013-10-14 01:49:21	letoh	是啊  c 不就是目標語言的一種嗎?  我是指類似那種用法?
2013-10-14 01:50:05	hashcat	用ghc產生的c貌似很麻煩
2013-10-14 01:50:18	letoh	像 vala 也是產生 c
2013-10-14 01:50:31	hashcat	要把ghc重新編譯
2013-10-14 01:50:57	hashcat	chapel也是生成c
2013-10-14 01:51:06	CindyLinz	letoh: 其實我最想要的是在 perl 和 javascript 裡面用 XD
2013-10-14 01:51:27	hashcat	uhc可以產生javascript
2013-10-14 01:51:29	CindyLinz	平常 perl 用比較多, 所以二擇一的話選 perl XD
2013-10-14 01:52:08	CindyLinz	不過.. embedded haskell 再說啦, 覺得好遙遠.. orz
2013-10-14 01:52:13	hashcat	推廣chapel
2013-10-14 01:53:15	hashcat	chapel chapel
2013-10-14 01:53:34	hashcat	離題..
2013-10-14 01:54:19	CindyLinz	XD
2013-10-14 01:54:35	CindyLinz	chapel google 第一筆看起來像什麼地名景點 XD
2013-10-14 01:54:45	hashcat	如果要跨平台加小巧貌似uhc比ghc容易多了
2013-10-14 01:54:49	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-14 01:54:56	hashcat	http://chapel.cray.com/
2013-10-14 01:55:21	CindyLinz	離了 ghc 這舒適圈, 就放棄一堆 library 的感覺 orz
2013-10-14 01:55:36	CindyLinz	可以看一下是不是剛好可以避開
2013-10-14 01:55:37	hashcat	cabal有支持uhc
2013-10-14 01:56:09	hashcat	chapel 感覺就是強大加簡潔
2013-10-14 01:56:11	CindyLinz	uhc 另有一個類似 hackage 的地方?
2013-10-14 01:56:19	hashcat	沒有
2013-10-14 01:56:37	hashcat	只是可以賭賭看hackage上的包能不編譯過
2013-10-14 01:56:37	CindyLinz	直接用 hackage 裡面的東西, 然後, 運氣好就能動這樣?
2013-10-14 01:56:54	letoh	有龐大 package 支援真是惡魔，像我就很難丟掉 python XD
2013-10-14 01:56:59	hashcat	HLearn就不行了
2013-10-14 01:57:49	hashcat	本來有貢獻那專案 跟作者抗議ghc擴展用太多無效後就不鳥了
2013-10-14 01:58:36	hashcat	uhc也是支持不少擴展, 編譯過得機會應該不低
2013-10-14 01:59:14	hashcat	HLearn那狀況是ghc少一個版本號就編不過
2013-10-14 02:02:25	hashcat	letoh: hackage是唬爛的
2013-10-14 02:02:41	hashcat	就算是用ghc也是一堆編不過
2013-10-14 02:02:58	letoh	聽起來很慘XD
2013-10-14 02:05:38	hashcat	有很多看起來很厲害的
2013-10-14 02:05:45	hashcat	都是當年勇
2013-10-14 02:11:16	CindyLinz	需要一個 hackage-worked 列表 XD
2013-10-14 02:12:32	hashcat	stackage
2013-10-14 02:13:23	hashcat	還有hackage二代
2013-10-14 02:13:45	CindyLinz	stackage? XD
2013-10-14 02:14:24	hashcat	額剛剛看了hackage發現已經換成2代了
2013-10-14 02:16:47	hashcat	找不到stackage
2013-10-14 02:18:23	CindyLinz	stackage 是 2代的開發代號?
2013-10-14 02:18:37	hashcat	以前明明看過有列表, 現在莫名其妙變成沒發布過
2013-10-14 02:18:42	hashcat	不同的東西
2013-10-14 02:18:54	hashcat	stackage是fpcomplete把關
2013-10-14 02:19:02	CindyLinz	喔, stackage 就是確認能用的白名單?
2013-10-14 02:19:05	CindyLinz	嗯嗯嗯
2013-10-14 02:19:10	hashcat	hackage 2是正牌
2013-10-14 02:19:21	hashcat	嫡系
2013-10-14 02:19:24	CindyLinz	嗯嗯
2013-10-14 02:23:04	hashcat	結果是stackage還沒發布
2013-10-14 02:23:24	hashcat	很久以前我好像還有看到列表
2013-10-14 02:30:01	hashcat	台灣有沒人買過cray
2013-10-14 02:30:42	hashcat	在台灣有分公司噗噗
2013-10-14 04:21:57	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 248 seconds)
2013-10-14 04:24:52	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-14 05:30:56	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-14 05:32:48	<--	godfat (~Adium@114-24-2-93.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-10-14 05:35:04	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 256 seconds)
2013-10-14 05:37:00	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-14 06:02:26	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 272 seconds)
2013-10-14 06:03:03	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-14 06:13:06	<--	hashcat (~hashcat@27.243.113.112) has quit (Ping timeout: 245 seconds)
2013-10-14 06:26:18	-->	hashcat (~hashcat@27.243.84.126) has joined #haskell.tw
2013-10-14 08:00:53	-->	jarod_chen (~jarod_che@115.193.185.183) has joined #haskell.tw
2013-10-14 09:50:56	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-14 09:52:36	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-14 10:31:16	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-14 11:43:25	CindyLinz	原來 Happy 就 Simon Marlow 做的喔.... ._.
2013-10-14 11:43:53	CindyLinz	那, notHappyAtAll 就是他的梗嘍 XD
2013-10-14 11:53:26	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-14 12:04:21	<--	hashcat (~hashcat@27.243.84.126) has quit (Ping timeout: 245 seconds)
2013-10-14 12:26:35	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-14 13:10:20	-->	Yu_lin (24ec15f2@gateway/web/freenode/ip.36.236.21.242) has joined #haskell.tw
2013-10-14 13:10:57	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-14 13:26:47	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-14 14:26:26	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-10-14 14:56:02	-->	godfat (~Adium@118-168-254-76.dynamic.hinet.net) has joined #haskell.tw
2013-10-14 15:00:20	mno2	https://www.youtube.com/watch?v=_gZK0tW8EhQ
2013-10-14 15:07:24	<--	godfat (~Adium@118-168-254-76.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-14 15:25:22	<--	jarod_chen (~jarod_che@115.193.185.183) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-10-14 15:55:39	-->	hashcat (~hashcat@27.243.84.126) has joined #haskell.tw
2013-10-14 16:17:00	CindyLinz	這個我能怎麼寫, 讓它看起來更「順眼」呢? \x -> isAlpha x || isDigit x || '-' == x
2013-10-14 16:17:44	CindyLinz	希望能寫成類似: (isAlpha || isDigit || ('-'==)) 的感覺的東西
2013-10-14 16:18:14	CindyLinz	看起來有一點點像某種 Applicative?
2013-10-14 16:23:54	CindyLinz	Applicative ((->) a)
2013-10-14 16:30:16	mno2	CindyLinz: liftA3 ?  可是好像沒有內建的三元 or ?
2013-10-14 16:31:03	mno2	要不然 sequence 然後 fold 好了 xD
2013-10-14 16:31:39	CindyLinz	在想 N 元的 XD
2013-10-14 16:32:07	CindyLinz	再配一個 traversable?
2013-10-14 16:35:09	mno2	用 sequence 應該就假設 Traversable 了吧？
2013-10-14 16:38:50	CindyLinz	data Seq a ?
2013-10-14 16:43:06	CindyLinz	這問題先暫時丟一邊 ._.
2013-10-14 17:49:46	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-14 17:58:25	<--	Yu_lin (24ec15f2@gateway/web/freenode/ip.36.236.21.242) has quit (Quit: Page closed)
2013-10-14 18:23:00	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-14 18:48:37	CindyLinz	為什麼 Haskell 的 if..then..else 的設計需要去對 indent 啊? @@"
2013-10-14 19:04:40	hashcat	\x -> or $ map (\f -> f x) [isAlpha, isDigit, ('-' ==)]
2013-10-14 19:09:32	hashcat	貌似catamorphism也可以
2013-10-14 19:09:40	hashcat	只不過反而更長
2013-10-14 19:19:51	hashcat	\x -> foldl (||) False $ map (\f -> f x) [isAlpha, isDigit, ('-' ==)]
2013-10-14 19:20:01	hashcat	差不多難看
2013-10-14 19:23:52	hashcat	如果是想要抽象歡樂世界的話就我來說catamorphism最順眼
2013-10-14 19:37:56	-->	godfat (~Adium@118-168-254-76.dynamic.hinet.net) has joined #haskell.tw
2013-10-14 19:48:39	<--	godfat (~Adium@118-168-254-76.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-14 19:50:18	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-14 20:06:06	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-14 20:41:03	CindyLinz	咦, or 有吃 [Bool] 的版本?
2013-10-14 20:41:15	CindyLinz	真的耶 :p
2013-10-14 20:42:18	CindyLinz	以前聽 perl6 可以把一堆函數作 disjunction 變成另一個函數, 會把參數 apply 到它裡面的各函數, 然後結果 or 起來
2013-10-14 20:43:23	-->	suhorng (~suhorng@118-166-50-231.dynamic.hinet.net) has joined #haskell.tw
2013-10-14 20:45:32	suhorng	縮code乾脆把 \f -> f x 換成 ($ x) XD (誤
2013-10-14 20:47:08	favonia	@pl \x -> or $ map (\f -> f x) [isAlpha, isDigit, ('-' ==)]
2013-10-14 20:47:11	lambdabot	(or $) . flip (map . flip id) [isAlpha, isDigit, ('-' ==)]
2013-10-14 20:47:11	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-14 20:47:53	favonia	CindyLinz: 因為很多人把 else 和 if 寫到同一行....
2013-10-14 20:48:01	suhorng	:t or . flip map [('-' ==)] . flip ($)
2013-10-14 20:48:02	lambdabot	Char -> Bool
2013-10-14 20:48:11	suhorng	:&
2013-10-14 20:48:45	suhorng	> or . flip map [isAlpha, isDigit, ('-' ==)] . flip ($)
2013-10-14 20:48:46	lambdabot	  <Char -> Bool>
2013-10-14 20:49:02	suhorng	大驚 XDDD 竟然不會噴出 no instance for (Show ....)
2013-10-14 20:53:51	CindyLinz	favonia: 同一... column?
2013-10-14 20:54:19	CindyLinz	favonia: 我是想說, if..then..else 好像不需要靠 layout 來決定 parsing 才對 @@"
2013-10-14 20:54:54	favonia	layout 是在那種 parsing 之前的
2013-10-14 20:55:50	CindyLinz	咦, 其實是只有在 do-notation 裡面才會有差是不是?
2013-10-14 20:56:27	CindyLinz	因為 do-notation 需要靠裡面的縮排來決定各獨立的 action 在哪裡?
2013-10-14 21:09:02	favonia	應該吧（沒有仔細想
2013-10-14 21:15:43	CindyLinz	mmm..
2013-10-14 21:49:04	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-14 22:21:34	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-14 22:28:11	hashcat	haskellwiki滿詳盡的
2013-10-14 22:28:18	hashcat	這裡面也有講
2013-10-14 22:43:13	hashcat	http://en.wikibooks.org/wiki/Haskell/Indentation#The_golden_rule_of_indentation
2013-10-14 22:43:23	hashcat	黃金規則
2013-10-14 22:44:08	CindyLinz	gold..golden rule... o_O
2013-10-14 22:44:25	CindyLinz	不過.. 這頁真是謝謝了 ^^
2013-10-14 22:48:14	hashcat	我知道有人看到這個會想到大便規則
2013-10-14 22:48:42	hashcat	因為我已經想到了
2013-10-14 22:49:31	hashcat	記得haskellwiki有套規則
2013-10-14 22:49:43	hashcat	這會找不到只找到那個
2013-10-14 22:49:52	CindyLinz	hashcat ← witness
2013-10-14 23:07:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-14 23:18:45	-->	godfat (~Adium@114-45-185-71.dynamic.hinet.net) has joined #haskell.tw
2013-10-15 00:02:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-15 00:05:35	<--	suhorng (~suhorng@118-166-50-231.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-15 00:29:51	CindyLinz	覺得 Data.ByteString 裡面一些像是 span :: (Word8 -> Bool) -> ByteString -> (ByteString -> ByteString) 這樣的函數
2013-10-15 00:29:57	CindyLinz	缺了 monadic 版本...
2013-10-15 00:30:38	CindyLinz	想要 spanM :: Monad m => (Word8 -> m Bool) -> ByteString -> m (ByteString, ByteString)
2013-10-15 00:30:52	CindyLinz	(剛剛前面那個的 return type 寫錯了, 要寫成 pair 才對 :p)
2013-10-15 00:31:40	CindyLinz	沒有 monadic 版本, 也沒有可以額外 carry 自備 payload 的參數
2013-10-15 00:32:07	CindyLinz	不知道要怎麼寫一次拿兩個字來作判斷的作法
2013-10-15 00:32:20	CindyLinz	像是想要找 \r\n 來作為切斷點...
2013-10-15 00:32:45	godfat	我上次好像有在找類似的東西
2013-10-15 00:33:53	CindyLinz	現在看起來只能先用 foldl :: (a -> Char -> a) -> a -> ByteString -> a 爬一遍
2013-10-15 00:34:26	CindyLinz	算出位置, 然後再拿這個位置去 splitAt :: Int -> ByteString -> (ByteString, ByteString)
2013-10-15 00:34:45	CindyLinz	但這樣就不能 on-the-fly 做了
2013-10-15 00:35:26	CindyLinz	godfat: 有找到嗎!
2013-10-15 00:35:27	godfat	覺得說來微妙，很多都做起來簡單，但 library 裡好像就沒有
2013-10-15 00:35:27	godfat	有時候會想乾脆把 ruby 裡的操作都實作一次算了..
2013-10-15 00:35:36	CindyLinz	聽起來沒有 QQ
2013-10-15 00:36:10	CindyLinz	可是這個用 foldl 爬一遍的作法, 如果 \r\n 之前的 ByteString 很長的話
2013-10-15 00:36:26	CindyLinz	這一段超長的 ByteString 就要整個都 keep 在記憶體裡面...
2013-10-15 00:36:27	godfat	我正在翻 source.. 印象中是沒有
2013-10-15 00:36:27	godfat	String 跟 ByteString 又不一樣有時候也滿討厭的
2013-10-15 00:36:44	CindyLinz	因為拿 foldl 算位置的時候, 它是一口氣算完的 @@"
2013-10-15 00:37:33	godfat	用 foldr 呢？
2013-10-15 00:38:10	CindyLinz	我要它出來的結果是一個數字.... 它怎樣都會是一口氣出來吧?
2013-10-15 00:38:37	CindyLinz	因為我要嘛就是還用不到這個數字, 要嘛就是馬上要拿這數字做事了
2013-10-15 00:38:41	godfat	實際上要處理的問題是？
2013-10-15 00:39:08	CindyLinz	實際上我是要找 */ 來把 ByteString 切斷
2013-10-15 00:39:39	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-15 00:39:46	godfat	我可以想成把 comment 移除嗎？ XD
2013-10-15 00:39:50	CindyLinz	對
2013-10-15 00:40:21	CindyLinz	正在試圖 parse sass..
2013-10-15 00:41:00	godfat	話說如果用 parser 應該不用這樣處理？
2013-10-15 00:41:16	CindyLinz	在寫 lexer 的部分 XD
2013-10-15 00:41:29	CindyLinz	想用 lexer 就把註解吃掉
2013-10-15 00:41:39	godfat	找到了，我是用 split package...
2013-10-15 00:41:39	godfat	http://hackage.haskell.org/package/split-0.2.1.1/docs/Data-List-Split.html
2013-10-15 00:42:51	godfat	用 parser combinator 的話不用特別做 lexer?
2013-10-15 00:42:51	godfat	或是說就是不想在語法裡處理 comment?
2013-10-15 00:43:31	CindyLinz	想說用 lexer 比較省啊 XD
2013-10-15 00:44:03	CindyLinz	直接用 parser (or parsec?) 的話, 就是用把 Char 當 token 用的 default lexer
2013-10-15 00:44:15	godfat	我想說搞不好 sass 有超肥的 XD
2013-10-15 00:46:11	CindyLinz	想.... :Q 如果把 [Char] 拿去給我們寫出來的 parser 吃, 應該每一個 Char 的 list node 都會依序被建出來, 不會被 fusion 吃掉..
2013-10-15 00:46:38	godfat	所以這樣反而超慢嗎？
2013-10-15 00:47:22	CindyLinz	一個 list node 有 1個ref到value, 1個ref到next, 1個constructor(:), 然後再這個 Char 本身, 共 5bytes
2013-10-15 00:48:07	CindyLinz	主要就慢在這 2.5 倍的記憶體, 還有 allocate 和 derefrence 的時間
2013-10-15 00:48:35	CindyLinz	應該不會同時都建出來吃光記憶體, 只是動作都會需要走過
2013-10-15 00:49:38	CindyLinz	那我想用 lexer 吃成比較大顆的 token, 內附一個 ByteString.UTF8
2013-10-15 00:50:10	CindyLinz	實用的時候常常會有像是 border-width 這樣子一整串的字
2013-10-15 00:50:24	CindyLinz	就省了 11 組 reference :p
2013-10-15 00:50:37	godfat	cool~
2013-10-15 00:52:11	CindyLinz	然後.. 剛剛我前面說的如果 */ 之前的字太長.. 其實是我額外想的延伸問題, 我現在其實不打算把它丟掉 ^^|
2013-10-15 00:52:39	godfat	難怪要 span XD
2013-10-15 00:52:43	CindyLinz	我只是想說, 存在這樣的情境會是無法處理的....
2013-10-15 00:52:58	CindyLinz	嗯, 不然好像應該用 drop.. :p
2013-10-15 00:53:10	CindyLinz	但還是很想 on-the-fly 做呀 :|
2013-10-15 00:53:36	godfat	自己遞回？
2013-10-15 00:54:23	CindyLinz	不知道怎麼摸它的內部資料
2013-10-15 00:54:46	godfat	ByteString?
2013-10-15 00:55:11	CindyLinz	我用 ByteString.UTF8...
2013-10-15 00:55:21	CindyLinz	欸... 突然覺得我應該直接回去用 ByteString 就好
2013-10-15 00:55:34	CindyLinz	因為所有有特別意義的字元都在 ascii 裡面..
2013-10-15 00:55:52	godfat	如果有人 variable 用 utf-8?
2013-10-15 00:56:05	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-15 00:56:08	CindyLinz	sass 是說它支援任何 encoding.. 不過我想現在都 2013 了, 獨尊 UTF-8 就好了 XD
2013-10-15 00:56:37	CindyLinz	我想我可以只把我想認的那幾個符號字元列出來, 剩下就都當「字」
2013-10-15 00:56:49	godfat	除非他 variable 只准 ascii-7bit, 不然不能支援任何 encoding 吧？
2013-10-15 00:57:04	CindyLinz	然後 unicode 額外定的空白字元就給他 sorry 了 XD
2013-10-15 00:57:22	CindyLinz	sass 規定可以在一開始寫 @charset XXXX 來指定
2013-10-15 00:57:41	godfat	可是我 @charset unknown 他要怎麼處理？
2013-10-15 00:57:55	CindyLinz	我打算 ignore 這一條, 直接當它 UTF-8, 想用別的 encoding 的人請自己先用 iconv 轉 ^^|
2013-10-15 00:58:27	godfat	iconv 轉 big5 問題一堆 XD
2013-10-15 00:58:27	godfat	愛用 bsdconv @_@
2013-10-15 00:58:27	godfat	https://github.com/buganini/bsdconv
2013-10-15 00:58:38	CindyLinz	沒試過, 應該就是丟 error, 或是出 warning 然後繼續當它 UTF-8
2013-10-15 00:58:44	CindyLinz	是喔 XD
2013-10-15 00:58:45	godfat	XDDDDDD
2013-10-15 00:59:19	godfat	之前花過不少時間考證 iconv, 啊啊啊最後 blog post 沒寫出來 ><
2013-10-15 00:59:19	godfat	幾年前了 :o
2013-10-15 00:59:19	godfat	總之結論是不要用 iconv 轉 big5
2013-10-15 00:59:22	CindyLinz	那我翻一下 ByteString 的資料... 用 UTF-8 連要直接跳第 N 個字都沒法 constant time... orz
2013-10-15 00:59:31	CindyLinz	好! XD
2013-10-15 01:00:12	godfat	utf8 好像本來就不能 constant time 抓第 n 個字？
2013-10-15 01:00:27	CindyLinz	對啊.. 所以你剛剛說 recursion 讓我也很苦惱 XD
2013-10-15 01:00:41	CindyLinz	起碼它得給我個什麼 iterator
2013-10-15 01:00:44	godfat	可能還是要照 char 去切..
2013-10-15 01:00:58	CindyLinz	而直接用它的 foldl 那些, 就還是不能自己遞迴了
2013-10-15 01:01:18	godfat	不然就要看 utf8 spec, 自己寫 parser 了 (?) XDDD
2013-10-15 01:01:55	godfat	-- | Traverse a bytestring (left biased).
2013-10-15 01:01:55	godfat	-- This fuction is strict in the acumulator.
2013-10-15 01:01:55	godfat	foldl :: (a -> Char -> a) -> a -> B.ByteString -> a
2013-10-15 01:01:55	godfat	foldl add acc cs  = case uncons cs of
2013-10-15 01:01:55	godfat	                      Just (a,as) -> let v = add acc a
2013-10-15 01:01:55	godfat	                                     in seq v (foldl add v as)
2013-10-15 01:01:55	godfat	                      Nothing     -> acc
2013-10-15 01:01:59	godfat	http://hackage.haskell.org/package/utf8-string-0.3/docs/src/Data-ByteString-UTF8.html#foldl
2013-10-15 01:02:18	godfat	用 uncons?
2013-10-15 01:04:19	CindyLinz	對喔 uncons..
2013-10-15 01:04:29	CindyLinz	就用它了!
2013-10-15 01:04:52	CindyLinz	不過還是換回沒有 UTF8 的 ByteString 好了
2013-10-15 01:06:10	CindyLinz	我有用到 uncons, 卻沒想到要拿來遞迴 ._.
2013-10-15 01:07:33	godfat	XDD
2013-10-15 01:07:34	godfat	不過我覺得我沒很搞懂， foldl 應該也不會把整段 bytestring 抓住？
2013-10-15 01:08:44	CindyLinz	不會
2013-10-15 01:09:10	CindyLinz	但是我接下來會拿這個出來的位置再去 drop
2013-10-15 01:09:23	CindyLinz	為了讓 drop 能執行, 它就會把 bytestring keep 住
2013-10-15 01:13:39	godfat	直接把 drop/span 要做的事情放到 foldl 裡面？
2013-10-15 01:13:39	godfat	例如給他的 function 最後拿 (Int, (ByteString, ByteString))
2013-10-15 01:13:54	godfat	這樣兩件事一次做完？ @_@
2013-10-15 01:14:51	CindyLinz	drop 的好像可以..
2013-10-15 01:15:08	CindyLinz	就把滿足條件那一次的 uncons 的結果輸出就好
2013-10-15 01:15:28	CindyLinz	span 的話要把左邊接回來有點痛苦
2013-10-15 01:15:58	CindyLinz	所以說, 沒 monadic 版, 是因為真的用不到嗎 ._.
2013-10-15 01:16:38	godfat	唔唔，我猜 span 可能真的要自己寫 rec function 了
2013-10-15 01:16:39	godfat	用 foldl 看來真的會很痛苦 XD
2013-10-15 01:16:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-15 01:17:33	CindyLinz	可是把 ByteString 「接回來」這樣的動作, 會生出新的 ByteString, 不能直接把原始的那個 ByteString 「框出來」 @@"
2013-10-15 01:17:42	godfat	monadic 版我不知道.. 感覺所有排列組合都做滿多的 :o
2013-10-15 01:17:42	godfat	有時候我覺得 haskell 裡可以很簡單自己寫的東西，
2013-10-15 01:17:42	godfat	都沒有提供 std function..
2013-10-15 01:17:59	godfat	自己遞迴應該就可以了？
2013-10-15 01:18:17	CindyLinz	leave you as an exercise XD
2013-10-15 01:18:25	godfat	XDDD....
2013-10-15 01:18:42	godfat	Haskell the Tutor
2013-10-15 01:19:26	CindyLinz	好像要去摸 ByteString 的 internal 結構才行...?
2013-10-15 01:20:01	CindyLinz	我希望能夠不用 keep 住整個前段, 而又不用生出新的 ByteString 的話
2013-10-15 01:20:03	godfat	不知道能不能 chunk by chunk...?
2013-10-15 01:20:08	CindyLinz	我最好是能夠一次放一個 chunk
2013-10-15 01:20:16	CindyLinz	要跟原始的長得一樣
2013-10-15 01:20:44	CindyLinz	嗯嗯嗯
2013-10-15 01:21:25	godfat	乾脆試試 conduit (誤
2013-10-15 01:21:29	CindyLinz	不過... 把 UTF8 去掉以後, 我找到直接就是我要的函數了: breakSubstring :: ByteString -> ByteString -> (ByteString, ByteString)
2013-10-15 01:21:51	godfat	....=_=...
2013-10-15 01:22:30	CindyLinz	雖然我要找的只有兩個字, 包成 ByteString 稍嫌貴了點, 不過也就是 1 塊錢的影印費漲價成 4 塊錢這樣.. 漲幅大, 還是不太痛 :p
2013-10-15 01:22:49	godfat	看印多少.... XD
2013-10-15 01:23:17	CindyLinz	正常當然不會是一大堆空行吧 XD
2013-10-15 01:23:43	godfat	話說... 可以去神來也玩 haskell 嗎？ XDD
2013-10-15 01:23:45	CindyLinz	嗯, 我 //.....\n 要找的是一個字的 \n 不會有這問題; 而兩個字的 */ 應該正常不會一堆空的 XD
2013-10-15 01:24:10	CindyLinz	現在來還不會有能隨意寫 haskell 的地方 orz
2013-10-15 01:24:11	godfat	話說 nested comment 有處理嗎？
2013-10-15 01:24:25	CindyLinz	sass 的說明沒看出來, 我也不打算處理
2013-10-15 01:24:29	godfat	有機會就不錯了 XD
2013-10-15 01:24:58	CindyLinz	如果需要處理 nested 的話.. 我這邊就白糾結了 XD
2013-10-15 01:25:09	godfat	XDDDD
2013-10-15 01:25:22	godfat	我想不起來 ruby 有沒有，不過印象中好像沒問題
2013-10-15 01:25:22	CindyLinz	沒有講到, 那我猜應該是沒有..
2013-10-15 01:25:38	CindyLinz	有的話就不能用 lexer 找 comment 了呀
2013-10-15 01:26:01	CindyLinz	啊不對... 我這邊 lexer 根本有 turing complete 的 power.....||
2013-10-15 01:26:08	godfat	可以多 pass 到沒有 comment 為止？ XDD
2013-10-15 01:26:22	CindyLinz	真 lexer 沒辦法啦 XD
2013-10-15 01:26:30	CindyLinz	真．lexer XD
2013-10-15 01:27:27	monochrom	照計 sass 的作者不會自找麻煩, sass 的用者也不會那麼邪惡 :)
2013-10-15 01:27:59	godfat	用 comment 暫時拿掉程式時應該滿容易碰到的說
2013-10-15 01:28:00	CindyLinz	sass 的用者應該主要是設計師..
2013-10-15 01:28:26	CindyLinz	嗯, 可是主流語言都會爆, 所以就養成習慣用整排 // 來拿掉 XD
2013-10-15 01:29:05	godfat	editor 好像都是這樣做 :o
2013-10-15 01:29:43	CindyLinz	而且還可以作出巢狀的歷史效果 :D
2013-10-15 01:29:57	CindyLinz	最早被拿掉的部分, 前面積的 // 會比較厚 XD
2013-10-15 01:30:32	godfat	我沒記錯的話，textmate 用快鍵加 comment 會有 toggle 的效果
2013-10-15 01:30:32	godfat	所以已經被 comment 不是多一層，而是被 uncomment XD
2013-10-15 01:31:06	CindyLinz	xor XD
2013-10-15 01:32:15	monochrom	xor 會造成很趣怪的效果啊!
2013-10-15 01:32:51	CindyLinz	可聽起來的確是 xor 啊 XD
2013-10-15 01:33:38	CindyLinz	我是用 vim, 把想加 comment 的那幾行都 mark 起來, 然後 :s!^!//
2013-10-15 01:34:04	monochrom	haha
2013-10-15 01:39:18	CindyLinz	godfat: 公司現在主要還是在徵 php.. 然後徵進來再看志趣教 perl.. @@"
2013-10-15 01:40:19	godfat	...XD perl 我可以試，php 免了 -_-...
2013-10-15 01:40:48	CindyLinz	歐歐真的嗎!
2013-10-15 01:41:00	CindyLinz	主要沒徵 perl 是因為徵不到....
2013-10-15 01:41:11	godfat	是啊，我也一直很想知道 perl 好在哪裡 XD
2013-10-15 01:41:11	godfat	一直不知道從何下手
2013-10-15 01:41:39	godfat	老實講聽你講 perl 的事也讓我不懂 perl 好在哪... XD
2013-10-15 01:41:56	monochrom	我想, 你大可以加入, 反正加入後也派你用perl
2013-10-15 01:42:16	CindyLinz	php 還是常常得碰啦 orz
2013-10-15 01:42:22	godfat	不過我沒有任何 perl 經驗說
2013-10-15 01:43:14	CindyLinz	這樣就不知道要怎麼講了 orz
2013-10-15 01:43:52	godfat	XDDD
2013-10-15 01:43:52	godfat	我的 perl 經驗是 cpan ...
2013-10-15 01:43:52	godfat	然後用那個東西
2013-10-15 01:44:20	hashcat	看是誰設計的就知道是怎樣了
2013-10-15 01:44:21	CindyLinz	如果跟 ruby 對照.. 好處是可以不用想著物件?
2013-10-15 01:45:20	CindyLinz	不過如果硬是要想物件我也沒辦法...
2013-10-15 01:45:24	hashcat	C是系統hacker, perl是語言學家, python是數學家
2013-10-15 01:45:27	godfat	不過我很習慣物件耶 XD
2013-10-15 01:45:29	CindyLinz	有好幾個同事就這樣..... QQ
2013-10-15 01:45:38	monochrom	我反轉來看. ruby 跟 perl 對照, ruby好處是不用想著 dictionary
2013-10-15 01:46:23	godfat	perl 要大量處理 dictionary?
2013-10-15 01:46:46	CindyLinz	dictionary?
2013-10-15 01:47:01	CindyLinz	我的話是大量的 callback, closure 什麼的 ._.
2013-10-15 01:47:13	monochrom	兩害取其輕, "萬物皆object" 還是好過 "萬物皆 hash table"
2013-10-15 01:47:21	CindyLinz	大量 dictionary 我猜是 python 或 lua 的特色?
2013-10-15 01:47:44	CindyLinz	嗯, 如果還想著物件的話會拿 hash 來模擬物件
2013-10-15 01:47:55	godfat	callback... XD 做在 AnyEvent 上嗎？
2013-10-15 01:48:08	hashcat	看要做啥領域的東西, 在看那作者跟你領域有沒一樣就好了
2013-10-15 01:48:22	CindyLinz	摸到比較低階的話現在的確是 AnyEvent
2013-10-15 01:49:00	godfat	想想目前應該是比較怕符號，其他應該還好
2013-10-15 01:49:01	godfat	倒是符號也應該是熟悉問題
2013-10-15 01:49:18	CindyLinz	但是像遊戲裡, 某玩家向另一個玩家邀請入組之類的, 寫成抽象一點的函數, 還是有 callback, 但是就看不到 AnyEvent 了
2013-10-15 01:49:45	monochrom	不只物件哩! 其實我只想要record, 在perl也變成dictionary, 真覺得很低階.
2013-10-15 01:49:47	godfat	讓我想到前幾天在改遊戲的程式（作弊），
2013-10-15 01:49:47	godfat	裡面的 lua 有好多 callback
2013-10-15 01:51:14	CindyLinz	XD
2013-10-15 01:51:36	godfat	不過老實講我真的覺得 lua 好難用...
2013-10-15 01:51:42	CindyLinz	我也不喜歡..
2013-10-15 01:51:47	CindyLinz	monochrom: 看你要不要包..
2013-10-15 01:52:09	godfat	我目前大概是 lua > php > javascript
2013-10-15 01:52:14	CindyLinz	monochrom: 如果整個 project 蠻複雜的, 那就會在底部舖一層讓自己看得舒服順眼一點
2013-10-15 01:52:45	godfat	主流是 perl 5.8 嗎？一般會用 perlbrew?
2013-10-15 01:53:12	CindyLinz	有時候偶爾會寫 { keepAlive(); sleep 1; redo } 這種程式.. 應該就不用再物件了吧.... /_\
2013-10-15 01:53:29	CindyLinz	godfat: 我們公司現在主流是 5.14~5.16
2013-10-15 01:53:56	godfat	原來我電腦上也是 5.14, 我記憶停留在太久之前了 XD
2013-10-15 01:54:05	CindyLinz	godfat: 我覺得一般應該是開發許多外包專案, 或是專門測試各種 perl 相容性的才會用 perlbrew
2013-10-15 01:55:02	CindyLinz	自己用的話, 當然是戳 MIS 要盡量讓環境一致啊... 搞多個版本都不一樣的作法, 這成本......wwww
2013-10-15 01:55:14	godfat	寫成一般 script 時自然不會包在物件裡，我 ruby 也是直白地寫
2013-10-15 01:55:14	godfat	不過要重用的就都會寫成物件了
2013-10-15 01:55:14	godfat	嗯嗯，同感，我也覺得 rvm 是沒必要的
2013-10-15 01:56:30	CindyLinz	唉, 只是覺得同事有時候為物件而物件, member method 不知道要往哪個 class 塞, 結果把一個動作拆成兩個 class 都放一點...
2013-10-15 01:57:04	CindyLinz	後來發現原來的作法太簡單不夠需求, 而加進來的 code 又是兩邊都要塞.. 而且變成 N pass 來來回回好幾次....
2013-10-15 01:57:38	CindyLinz	其中一個 class 是玩家, 一個 class 是一個遊戲場
2013-10-15 01:57:47	godfat	XDDDDDD 原來是這樣
2013-10-15 01:57:47	godfat	那我倒也是很習慣只用一個 module 加上一堆 module_function 這樣
2013-10-15 01:57:47	godfat	有些工具真的不用多拆成好幾塊
2013-10-15 01:57:47	godfat	暫離 @@
2013-10-15 01:58:44	CindyLinz	field 分類容易.. 反正可依個人積分和場地狀態來分開
2013-10-15 01:59:07	CindyLinz	method 就很難搞了.... 幾乎每一個動作都是兩邊都要動到
2013-10-15 01:59:31	CindyLinz	寫著寫著, 玩家class對場地class全知, 場地class也對玩家class全知...
2013-10-15 01:59:47	CindyLinz	這 class 只剩下 namespace 的意義了....
2013-10-15 02:00:46	CindyLinz	然後又想要去守住: 由玩家method來改玩家field, 場地method改場地field..
2013-10-15 02:01:27	CindyLinz	又難以找出除了對單個 field 的 getter/setter 以外的獨立操作單位...
2013-10-15 02:01:43	<--	hashcat (~hashcat@27.243.84.126) has quit (Quit: Leaving)
2013-10-15 02:01:53	CindyLinz	好像抱怨太多, 負面能量積了起來... 先休息好了 XD
2013-10-15 02:10:49	godfat	XDD 聽起來情況滿複雜的..
2013-10-15 02:10:50	godfat	也先睡了
2013-10-15 02:11:22	<--	godfat (~Adium@114-45-185-71.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-15 02:11:47	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 02:27:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-15 02:39:12	monochrom	https://twitter.com/fijall/status/389782873269497856
2013-10-15 02:46:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-15 04:13:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-15 06:17:57	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-15 09:10:19	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 248 seconds)
2013-10-15 09:50:34	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 10:04:58	--	irc: disconnected from server
2013-10-15 11:12:39	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-15 11:12:39	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-15 11:12:39	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-15 11:12:39	--	Nicks #haskell.tw: [b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia gko godfat hychen kanru lambdabot letoh logfat_ lwhsu miaout17 miaout17__ mno2 monochrom petercommand shik superbil]
2013-10-15 11:12:39	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-10-15 11:12:39	***	Buffer Playback...
2013-10-15 11:12:39	CindyLinz	[00:25:09] letoh: 港星... 其實講得有比較好懂了說
2013-10-15 11:12:39	suhorng	[13:10:39] 昨天想到stack machine..我突然想到最明顯的例子就是 JVM XDDD
2013-10-15 11:12:39	suhorng	[13:11:54] 至少看一些bytecode的感覺是(汗" http://en.wikipedia.org/wiki/Java_bytecode#Example
2013-10-15 11:12:39	CindyLinz	[13:37:27] 突然開始讀一堆組語... (汗)
2013-10-15 11:12:39	godfat	[14:53:13] 呃 XD 我太不熟了，所以我的意思是能不能用 push/pop
2013-10-15 11:12:39	godfat	[14:53:13] 現在看起來 llvm 中是沒有類似的指令，所以得用 register
2013-10-15 11:12:39	godfat	[14:53:13] 比方說最後 double 那個 function 是長這樣：
2013-10-15 11:12:39	godfat	[14:53:14]   %val.addr = alloca i32
2013-10-15 11:12:39	godfat	[14:53:15]   store i32 %arg, i32* %val.addr
2013-10-15 11:12:39	godfat	[14:53:15]   %0 = load i32* %val.addr
2013-10-15 11:12:39	godfat	[14:53:15]   store i32 %arg, i32* %val.addr
2013-10-15 11:12:39	godfat	[14:53:15]   %1 = load i32* %val.addr
2013-10-15 11:12:39	godfat	[14:53:15]   %2 = add nsw i32 %0, %1
2013-10-15 11:12:39	godfat	[14:53:15]   store i32 %2, i32* %val.addr
2013-10-15 11:12:39	godfat	[14:53:16]   %val = load i32* %val.addr
2013-10-15 11:12:39	godfat	[14:53:16]   ret i32 %val
2013-10-15 11:12:39	godfat	[14:54:03] 我本來也想重複利用 register, 不過後來發現不行...
2013-10-15 11:12:39	godfat	[14:54:03] 但是名稱可以重複，所以就變成用 %0, %1, %2 去遞增...
2013-10-15 11:12:39	godfat	[14:54:26] 然後這好像也是 llvm 標準手法 ~.~ 他甚至會去檢查你的數字遞增對不對
2013-10-15 11:12:39	godfat	[14:55:00] 中間我沒打 label 時，他會自動給 label 名字，導致我的數字少了
2013-10-15 11:12:39	godfat	[14:55:00] 這一點我也是查好久才找到原因的...
2013-10-15 11:12:39	suhorng	[15:22:04] 不能重複assign
2013-10-15 11:12:39	suhorng	[15:22:47] 如果有什麼分支的 需要把東西並起來的話好像用 Φ (phi)
2013-10-15 11:12:39	suhorng	[15:22:58] 完全是SSA的樣子...
2013-10-15 11:12:39	CindyLinz	[15:26:04] 所以如果想用 stack, 就是去找一段記憶體, 然後自己找一個固定的 address 來保存 SP 這樣?
2013-10-15 11:12:39	suhorng	[15:27:41] 大概是吧..
2013-10-15 11:12:39	petercommand	[17:55:28] CindyLinz: 我記得日本人說的中文也很難懂
2013-10-15 11:12:39	petercommand	[17:56:40] 之前有日本的交換學校來 他們代表上台致詞的時候聽的很辛苦
2013-10-15 11:12:39	petercommand	[17:56:47] 之前有日本的交換學校來 他們的代表上台致詞的時候聽的很辛苦
2013-10-15 11:12:39	CindyLinz	[18:01:45] 我沒聽過日本人說中文 ._.
2013-10-15 11:12:39	letoh	[18:03:13] 我常常聽XD
2013-10-15 11:12:39	letoh	[18:05:56] petercommand: 像瀬上剛講中文那種感覺?
2013-10-15 11:12:39	petercommand	[18:06:52] 不知道他是誰= =
2013-10-15 11:12:39	petercommand	[18:07:20] 有聲音可以聽聽看嗎?
2013-10-15 11:12:39	letoh	[18:07:31] 日本牙技師，有主持台灣的旅遊節目
2013-10-15 11:12:39	letoh	[18:07:55] petercommand: 算蠻有名的，你 youtube 找一下就有
2013-10-15 11:12:39	petercommand	[18:08:09] ok
2013-10-15 11:12:39	letoh	[18:09:23] 我還蠻喜歡看的，可以學一下怎麼用日文介紹台灣XD
2013-10-15 11:12:39	petercommand	[18:09:30] letoh: 他是講日文阿
2013-10-15 11:12:39	letoh	[18:09:44] 他跟台灣人說話就是講中文  自言自語時是日文沒錯
2013-10-15 11:12:39	petercommand	[18:10:06] XD
2013-10-15 11:12:39	letoh	[18:10:44] petercommand: https://www.youtube.com/watch?v=drzMmX8Jmjc#t=3m30s  隨便找的
2013-10-15 11:12:39	letoh	[18:11:07] 我的老師也超愛講中文  明明是我要去學日文，結果都在聽中文XD
2013-10-15 11:12:39	petercommand	[18:11:53] letoh: 他中文講的很好阿XD
2013-10-15 11:12:39	letoh	[18:12:39] 他在台灣也很久了啦  像我的老師來台灣不到一年  講中文沒那麼標準，但也是聽得懂的程度
2013-10-15 11:12:39	letoh	[18:12:55] 聽得出是外國人就是
2013-10-15 11:12:39	b4283	[18:14:09] letoh: 他沒用很多「就是」，肯定不是台灣人！
2013-10-15 11:12:39	letoh	[18:14:18] XDXD
2013-10-15 11:12:39	letoh	[18:14:53] 就是說啊  (這樣有像台灣人嗎?XD
2013-10-15 11:12:39	petercommand	[18:15:15] XD
2013-10-15 11:12:39	CindyLinz	[18:15:15] well...
2013-10-15 11:12:39	hychen	[16:53:34] 在mac踩到haskell地雷
2013-10-15 11:12:39	hychen	[16:53:44] https://github.com/haskell/cabal/issues/1496
2013-10-15 11:12:39	CindyLinz	[16:57:47] ticket 可以這樣, 開了又關, 關了又開嗎~
2013-10-15 11:12:39	petercommand	[17:00:22] 應該可以吧
2013-10-15 11:12:39	godfat	[17:03:37] XDDD
2013-10-15 11:12:39	godfat	[17:03:38] 我個人覺得比較禮貌的方式還是請事主關
2013-10-15 11:12:39	godfat	[17:03:38] 是說看了那篇才發現我 mac 很久沒更新了...
2013-10-15 11:12:39	godfat	[17:03:38] 10.8.2 => 10.8.4
2013-10-15 11:12:39	godfat	[17:03:38] 難怪我沒問題 -_-
2013-10-15 11:12:39	godfat	[17:03:38] 以前不都會自動更新嗎？怎麼現在還要我自己去確認...
2013-10-15 11:12:39	godfat	[17:08:15] 算了，我還是要更新，祝我好運 XD
2013-10-15 11:12:39	godfat	[17:25:15] 直接跳 10.8.5 了 @_@
2013-10-15 11:12:39	mno2	[17:48:10] http://www.rustforrubyists.com/book/index.html
2013-10-15 11:12:39	petercommand	[22:08:20] 以前常看到書名叫how to teach yourself blah blah in XX days, 現在直接放fuxnum了XD http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html
2013-10-15 11:12:39	CindyLinz	[13:01:57] suhorng 上任 ptt #PLT 板主了 :D
2013-10-15 11:12:39	letoh	[13:25:49] 賀!!
2013-10-15 11:12:39	CindyLinz	[15:19:50] 問問.....
2013-10-15 11:12:39	CindyLinz	[15:20:03] GADT 可以用 syntax sugar 作到嗎?
2013-10-15 11:12:39	CindyLinz	[15:20:32] 用 class / instance 和 existential type 去作出跟 GADT 一樣的效果?
2013-10-15 11:12:39	CindyLinz	[15:22:32] 我也有一點在懷疑 GHC 7.6(?) 的某個 extension, 可以讓 type level 的計算不再只有 * 的(像是 * -> *), 而是可以加上限制為某些特定 type 的
2013-10-15 11:12:39	CindyLinz	[15:22:40] 是不是也可以用 class / instance 作出來
2013-10-15 11:12:39	CindyLinz	[15:23:32] 只是看起來會是: 如果滿足某 class 的話, 就會符合要求的效果, 而不符合要求的 data 雖然造得出來, 但是就不會符合該 class 的 instance
2013-10-15 11:12:39	CindyLinz	[15:24:22] 而由 GADT 和這個 extension 作出來的會像是連造都造不出來.
2013-10-15 11:12:39	CindyLinz	[15:24:58] 另外一點差異是, class 的 instance 可以隨別人亂加, 一旦被亂加了, 就會破壞(放寬)原始的限制
2013-10-15 11:12:39	CindyLinz	[15:25:25] 所以由 class / instance 的實作作出來的保證, 有個前提是使用的人沒有去亂加
2013-10-15 11:12:39	CindyLinz	[15:25:37] (是這樣嗎? @@)
2013-10-15 11:12:39	favonia	[20:10:27] 執行 .ghci 下的檔案的安全性問題 xD # http://ghc.haskell.org/trac/ghc/ticket/6017
2013-10-15 11:12:39	suhorng	[22:25:08] ghci...
2013-10-15 11:12:39	petercommand	[22:26:15] rvm也會，不過他會先警告
2013-10-15 11:12:39	hashcat	[23:03:42] rvm是啥
2013-10-15 11:12:39	petercommand	[23:11:57] 管理ruby版本的工具
2013-10-15 11:12:39	hashcat	[23:14:40] 看上去像是r語言虛擬機
2013-10-15 11:12:39	petercommand	[23:14:48] XD
2013-10-15 11:12:39	letoh	[23:30:37] 這樣看好像不太準，就像 prolog 的 vm 也沒叫 pvm 或 provm 啊XD
2013-10-15 11:12:39	petercommand	[23:35:53] 除了java外，有其他是這樣叫的嘛?
2013-10-15 11:12:39	letoh	[23:36:10] llvm (誤
2013-10-15 11:12:39	CindyLinz	[23:36:15] nvm (誤
2013-10-15 11:12:39	petercommand	[23:36:17] ...
2013-10-15 11:12:39	petercommand	[23:36:21] XDD
2013-10-15 11:12:39	godfat	[23:36:32] nvm XD
2013-10-15 11:12:39	petercommand	[23:36:39] 連nvm都出現了XD
2013-10-15 11:12:39	CindyLinz	[23:38:47] GHC 的叫 RTS
2013-10-15 11:12:39	petercommand	[23:39:18] real time strategy (誤
2013-10-15 11:12:39	hashcat	[23:53:19] pvm 是 parallel virtual machine
2013-10-15 11:12:39	hashcat	[23:53:47] 已經被佔用了
2013-10-15 11:12:39	suhorng	[23:54:03] 只好叫 lvm, logical virtual machine 了?
2013-10-15 11:12:39	hashcat	[23:55:15] lvm好像是磁碟管理的東西
2013-10-15 11:12:39	suhorng	[23:55:43] 糟了w
2013-10-15 11:12:39	hashcat	[23:56:31] prolog虛擬機有兩種叫法
2013-10-15 11:12:39	hashcat	[23:57:02] 上面都沒p字母
2013-10-15 11:12:39	hashcat	[23:58:07] wam跟vam, 連全稱也都沒半個p
2013-10-15 11:12:39	suhorng	[23:59:17] 那是人名吧...XD
2013-10-15 11:12:39	hashcat	[00:04:14] 一個是地名
2013-10-15 11:12:39	CindyLinz	[01:14:48] 用 llvm 寫的東西, 是不是通常可以跨 architecture, 但是不能跨 OS?
2013-10-15 11:12:39	CindyLinz	[01:15:10] machine code / assembly 層面的東西可以跨, 但是系統服務跨不了這樣?
2013-10-15 11:12:39	hashcat	[01:29:12] 是說直接寫ir嗎
2013-10-15 11:12:39	godfat	[01:31:44] 系統服務是指什麼？
2013-10-15 11:12:39	CindyLinz	[01:31:48] 對
2013-10-15 11:12:39	CindyLinz	[01:32:03] 像是 int 0x80 的 OS 系統呼叫
2013-10-15 11:12:39	letoh	[01:32:06] 類似呼叫 dos int 那種感覺?
2013-10-15 11:12:39	CindyLinz	[01:32:09] 對
2013-10-15 11:12:39	CindyLinz	[01:32:15] dos 是 21h, linux 是 80h
2013-10-15 11:12:39	godfat	[01:32:41] 我不知道這是啥..... XD
2013-10-15 11:12:39	CindyLinz	[01:32:41] 我在想如果我用 haskell (ghc) 寫了個東西
2013-10-15 11:12:39	CindyLinz	[01:32:54] 要給沒在用 haskell, 也沒有 ghc 環境的人用
2013-10-15 11:12:39	CindyLinz	[01:33:15] 如果直接給他 haskell source, 可能有點太粗暴...
2013-10-15 11:12:39	CindyLinz	[01:33:31] 所以想如果退而求其次, 給編出來的 llvm
2013-10-15 11:12:39	CindyLinz	[01:33:56] 有考慮過一下包 package, 不過我還不會包 package.. XD
2013-10-15 11:12:39	CindyLinz	[01:34:06] 我是說 .deb 或 .rpm 這種的
2013-10-15 11:12:39	 *	letoh [01:34:32] <- 死不裝 ghc 的人XD
2013-10-15 11:12:39	CindyLinz	[01:35:06] 如果只是吃 stdin, 然後輸出 stdout 的程式.. 不知道是不是比較容易闖過 OS 不同這一關 :Q
2013-10-15 11:12:39	hashcat	[01:36:35] 通常來說llvm沒法直接跨平台
2013-10-15 11:12:39	CindyLinz	[01:37:34] 卡在哪邊啊?
2013-10-15 11:12:39	hashcat	[01:37:38] 看編譯器怎設計
2013-10-15 11:12:39	hashcat	[01:37:53] 有些編譯器會在ir嵌入組合語言
2013-10-15 11:12:39	hashcat	[01:39:37] 就算沒那個, 還有些IR是平台限定的
2013-10-15 11:12:39	CindyLinz	[01:40:07] 你說的平台是 OS 嗎?
2013-10-15 11:12:39	CindyLinz	[01:40:17] 還是硬體也限制?
2013-10-15 11:12:39	hashcat	[01:40:39] 硬體限制
2013-10-15 11:12:39	hashcat	[01:40:55] 光是能嵌入組合語言就很難搞了吧
2013-10-15 11:12:39	CindyLinz	[01:41:29] 看能不能運氣好點要求 compiler 不要塞特製的組語啊 ._.
2013-10-15 11:12:39	hashcat	[01:41:33] 像是會依照架構可能產生i32或者i64這種東西
2013-10-15 11:12:39	hashcat	[01:41:47] 完全避開也是可以
2013-10-15 11:12:39	CindyLinz	[01:42:00] 所以還是包 package 比較實際嗎? @@"
2013-10-15 11:12:39	hashcat	[01:42:00] 要看編譯器有沒這個心
2013-10-15 11:12:39	hashcat	[01:42:22] 推廣haskell比較實際
2013-10-15 11:12:39	hashcat	[01:42:43] 不要用haskell最實際哈哈
2013-10-15 11:12:39	CindyLinz	[01:43:01] 推廣了 haskell 還是 letoh 這種人會卡在 ghc 啊 XD
2013-10-15 11:12:39	CindyLinz	[01:43:32] letoh: 看看你 /_\
2013-10-15 11:12:39	monochrom	[01:43:37] 用 hugs 也不錯 XD
2013-10-15 11:12:39	letoh	[01:43:52] XDXD
2013-10-15 11:12:39	CindyLinz	[01:43:59] 如果整個程式從頭到尾都是自己刻出來的, 用 hugs 比較沒問題...
2013-10-15 11:12:39	CindyLinz	[01:44:08] 可是想用別人的 library 啊.... /_\
2013-10-15 11:12:39	letoh	[01:44:32] 我在 rpi 上有裝比較舊的 ghc 啦，只是 ghc 在 arm 上使用起來實在很不好用XD
2013-10-15 11:12:39	godfat	[01:44:37] 趕快幫 hugs 加東西趕上 ghc 才是正解？ XD
2013-10-15 11:12:39	CindyLinz	[01:45:19] 我想做 language level 的 embedded haskell... ([非常]遠目)
2013-10-15 11:12:39	hashcat	[01:45:20] 如果沒用上ghc上的一堆擴展
2013-10-15 11:12:39	hashcat	[01:45:22] http://www.cs.uu.nl/wiki/UHC
2013-10-15 11:12:39	hashcat	[01:45:28] 看這個能不能編過
2013-10-15 11:12:39	letoh	[01:45:31] 連 interactive shell 都沒有
2013-10-15 11:12:39	letoh	[01:46:00] 然後編譯出來的程式又超級肥大
2013-10-15 11:12:39	CindyLinz	[01:46:02] 是還沒寫啦.. 所以不能試編 XD..   只是我沒去用不夠啊, 要底下的 library 都沒有去用... orz
2013-10-15 11:12:39	CindyLinz	[01:46:17] ghc 編出來真的大.... extreme inline....
2013-10-15 11:12:39	hashcat	[01:46:23] 能產生c
2013-10-15 11:12:39	letoh	[01:46:26] language level 是指像 livescript 那種語法?
2013-10-15 11:12:39	hashcat	[01:46:32] 支持cabal
2013-10-15 11:12:39	hashcat	[01:47:00] 說反了
2013-10-15 11:12:39	CindyLinz	[01:47:02] 我那次練習 compiler, 順便用 haskell 寫了一個 test script
2013-10-15 11:12:39	hashcat	[01:47:07] cabal支持
2013-10-15 11:12:39	CindyLinz	[01:47:08] 編出來的執行檔 12MB....
2013-10-15 11:12:39	CindyLinz	[01:47:51] letoh: 語法是 haskell.. 只是可以編成指定的目標語言, 然後把它塞在目標語言寫的程式裡面
2013-10-15 11:12:39	CindyLinz	[01:48:19] hashcat: 給別人 ghc 生出來的 c 程式碼, 然後讓使用的人自行 gcc?
2013-10-15 11:12:39	letoh	[01:48:27] 就像上次有人提到可以用在 cortex m4 的 haskell compiler ?
2013-10-15 11:12:39	CindyLinz	[01:48:45] letoh: 那個是 ajhc 生出 c 程式
2013-10-15 11:12:39	hashcat	[01:49:02] 是UHC
2013-10-15 11:12:39	letoh	[01:49:21] 是啊  c 不就是目標語言的一種嗎?  我是指類似那種用法?
2013-10-15 11:12:39	hashcat	[01:50:05] 用ghc產生的c貌似很麻煩
2013-10-15 11:12:39	letoh	[01:50:18] 像 vala 也是產生 c
2013-10-15 11:12:39	hashcat	[01:50:31] 要把ghc重新編譯
2013-10-15 11:12:39	hashcat	[01:50:57] chapel也是生成c
2013-10-15 11:12:39	CindyLinz	[01:51:06] letoh: 其實我最想要的是在 perl 和 javascript 裡面用 XD
2013-10-15 11:12:39	hashcat	[01:51:27] uhc可以產生javascript
2013-10-15 11:12:39	CindyLinz	[01:51:29] 平常 perl 用比較多, 所以二擇一的話選 perl XD
2013-10-15 11:12:39	CindyLinz	[01:52:08] 不過.. embedded haskell 再說啦, 覺得好遙遠.. orz
2013-10-15 11:12:39	hashcat	[01:52:13] 推廣chapel
2013-10-15 11:12:39	hashcat	[01:53:15] chapel chapel
2013-10-15 11:12:39	hashcat	[01:53:34] 離題..
2013-10-15 11:12:39	CindyLinz	[01:54:19] XD
2013-10-15 11:12:39	CindyLinz	[01:54:35] chapel google 第一筆看起來像什麼地名景點 XD
2013-10-15 11:12:39	hashcat	[01:54:45] 如果要跨平台加小巧貌似uhc比ghc容易多了
2013-10-15 11:12:39	hashcat	[01:54:56] http://chapel.cray.com/
2013-10-15 11:12:39	CindyLinz	[01:55:21] 離了 ghc 這舒適圈, 就放棄一堆 library 的感覺 orz
2013-10-15 11:12:39	CindyLinz	[01:55:36] 可以看一下是不是剛好可以避開
2013-10-15 11:12:39	hashcat	[01:55:37] cabal有支持uhc
2013-10-15 11:12:39	hashcat	[01:56:09] chapel 感覺就是強大加簡潔
2013-10-15 11:12:39	CindyLinz	[01:56:11] uhc 另有一個類似 hackage 的地方?
2013-10-15 11:12:39	hashcat	[01:56:19] 沒有
2013-10-15 11:12:39	hashcat	[01:56:37] 只是可以賭賭看hackage上的包能不編譯過
2013-10-15 11:12:39	CindyLinz	[01:56:37] 直接用 hackage 裡面的東西, 然後, 運氣好就能動這樣?
2013-10-15 11:12:39	letoh	[01:56:54] 有龐大 package 支援真是惡魔，像我就很難丟掉 python XD
2013-10-15 11:12:39	hashcat	[01:56:59] HLearn就不行了
2013-10-15 11:12:39	hashcat	[01:57:49] 本來有貢獻那專案 跟作者抗議ghc擴展用太多無效後就不鳥了
2013-10-15 11:12:39	hashcat	[01:58:36] uhc也是支持不少擴展, 編譯過得機會應該不低
2013-10-15 11:12:39	hashcat	[01:59:14] HLearn那狀況是ghc少一個版本號就編不過
2013-10-15 11:12:39	hashcat	[02:02:25] letoh: hackage是唬爛的
2013-10-15 11:12:39	hashcat	[02:02:41] 就算是用ghc也是一堆編不過
2013-10-15 11:12:39	letoh	[02:02:58] 聽起來很慘XD
2013-10-15 11:12:39	hashcat	[02:05:38] 有很多看起來很厲害的
2013-10-15 11:12:39	hashcat	[02:05:45] 都是當年勇
2013-10-15 11:12:39	CindyLinz	[02:11:16] 需要一個 hackage-worked 列表 XD
2013-10-15 11:12:39	hashcat	[02:12:32] stackage
2013-10-15 11:12:39	hashcat	[02:13:23] 還有hackage二代
2013-10-15 11:12:39	CindyLinz	[02:13:45] stackage? XD
2013-10-15 11:12:39	hashcat	[02:14:24] 額剛剛看了hackage發現已經換成2代了
2013-10-15 11:12:39	hashcat	[02:16:47] 找不到stackage
2013-10-15 11:12:39	CindyLinz	[02:18:23] stackage 是 2代的開發代號?
2013-10-15 11:12:39	hashcat	[02:18:37] 以前明明看過有列表, 現在莫名其妙變成沒發布過
2013-10-15 11:12:39	hashcat	[02:18:42] 不同的東西
2013-10-15 11:12:39	hashcat	[02:18:54] stackage是fpcomplete把關
2013-10-15 11:12:39	CindyLinz	[02:19:02] 喔, stackage 就是確認能用的白名單?
2013-10-15 11:12:39	CindyLinz	[02:19:05] 嗯嗯嗯
2013-10-15 11:12:39	hashcat	[02:19:10] hackage 2是正牌
2013-10-15 11:12:39	hashcat	[02:19:21] 嫡系
2013-10-15 11:12:39	CindyLinz	[02:19:24] 嗯嗯
2013-10-15 11:12:39	hashcat	[02:23:04] 結果是stackage還沒發布
2013-10-15 11:12:39	hashcat	[02:23:24] 很久以前我好像還有看到列表
2013-10-15 11:12:39	hashcat	[02:30:01] 台灣有沒人買過cray
2013-10-15 11:12:39	hashcat	[02:30:42] 在台灣有分公司噗噗
2013-10-15 11:12:39	CindyLinz	[11:43:25] 原來 Happy 就 Simon Marlow 做的喔.... ._.
2013-10-15 11:12:39	CindyLinz	[11:43:53] 那, notHappyAtAll 就是他的梗嘍 XD
2013-10-15 11:12:39	mno2	[15:00:20] https://www.youtube.com/watch?v=_gZK0tW8EhQ
2013-10-15 11:12:39	CindyLinz	[16:17:00] 這個我能怎麼寫, 讓它看起來更「順眼」呢? \x -> isAlpha x || isDigit x || '-' == x
2013-10-15 11:12:39	CindyLinz	[16:17:44] 希望能寫成類似: (isAlpha || isDigit || ('-'==)) 的感覺的東西
2013-10-15 11:12:39	CindyLinz	[16:18:14] 看起來有一點點像某種 Applicative?
2013-10-15 11:12:39	CindyLinz	[16:23:54] Applicative ((->) a)
2013-10-15 11:12:39	mno2	[16:30:16] CindyLinz: liftA3 ?  可是好像沒有內建的三元 or ?
2013-10-15 11:12:39	mno2	[16:31:03] 要不然 sequence 然後 fold 好了 xD
2013-10-15 11:12:39	CindyLinz	[16:31:39] 在想 N 元的 XD
2013-10-15 11:12:39	CindyLinz	[16:32:07] 再配一個 traversable?
2013-10-15 11:12:39	mno2	[16:35:09] 用 sequence 應該就假設 Traversable 了吧？
2013-10-15 11:12:39	CindyLinz	[16:38:50] data Seq a ?
2013-10-15 11:12:39	CindyLinz	[16:43:06] 這問題先暫時丟一邊 ._.
2013-10-15 11:12:39	CindyLinz	[18:48:37] 為什麼 Haskell 的 if..then..else 的設計需要去對 indent 啊? @@"
2013-10-15 11:12:39	hashcat	[19:04:40] \x -> or $ map (\f -> f x) [isAlpha, isDigit, ('-' ==)]
2013-10-15 11:12:39	hashcat	[19:09:32] 貌似catamorphism也可以
2013-10-15 11:12:39	hashcat	[19:09:40] 只不過反而更長
2013-10-15 11:12:39	hashcat	[19:19:51] \x -> foldl (||) False $ map (\f -> f x) [isAlpha, isDigit, ('-' ==)]
2013-10-15 11:12:39	hashcat	[19:20:01] 差不多難看
2013-10-15 11:12:39	hashcat	[19:23:52] 如果是想要抽象歡樂世界的話就我來說catamorphism最順眼
2013-10-15 11:12:39	CindyLinz	[20:41:03] 咦, or 有吃 [Bool] 的版本?
2013-10-15 11:12:39	CindyLinz	[20:41:15] 真的耶 :p
2013-10-15 11:12:39	CindyLinz	[20:42:18] 以前聽 perl6 可以把一堆函數作 disjunction 變成另一個函數, 會把參數 apply 到它裡面的各函數, 然後結果 or 起來
2013-10-15 11:12:39	suhorng	[20:45:32] 縮code乾脆把 \f -> f x 換成 ($ x) XD (誤
2013-10-15 11:12:39	favonia	[20:47:08] @pl \x -> or $ map (\f -> f x) [isAlpha, isDigit, ('-' ==)]
2013-10-15 11:12:39	lambdabot	[20:47:11] (or $) . flip (map . flip id) [isAlpha, isDigit, ('-' ==)]
2013-10-15 11:12:39	lambdabot	[20:47:11] optimization suspended, use @pl-resume to continue.
2013-10-15 11:12:39	favonia	[20:47:53] CindyLinz: 因為很多人把 else 和 if 寫到同一行....
2013-10-15 11:12:39	suhorng	[20:48:01] :t or . flip map [('-' ==)] . flip ($)
2013-10-15 11:12:39	lambdabot	[20:48:02] Char -> Bool
2013-10-15 11:12:39	suhorng	[20:48:11] :&
2013-10-15 11:12:39	suhorng	[20:48:45] > or . flip map [isAlpha, isDigit, ('-' ==)] . flip ($)
2013-10-15 11:12:39	lambdabot	[20:48:46]   <Char -> Bool>
2013-10-15 11:12:39	suhorng	[20:49:02] 大驚 XDDD 竟然不會噴出 no instance for (Show ....)
2013-10-15 11:12:39	CindyLinz	[20:53:51] favonia: 同一... column?
2013-10-15 11:12:39	CindyLinz	[20:54:19] favonia: 我是想說, if..then..else 好像不需要靠 layout 來決定 parsing 才對 @@"
2013-10-15 11:12:39	favonia	[20:54:54] layout 是在那種 parsing 之前的
2013-10-15 11:12:39	CindyLinz	[20:55:50] 咦, 其實是只有在 do-notation 裡面才會有差是不是?
2013-10-15 11:12:39	CindyLinz	[20:56:27] 因為 do-notation 需要靠裡面的縮排來決定各獨立的 action 在哪裡?
2013-10-15 11:12:39	favonia	[21:09:02] 應該吧（沒有仔細想
2013-10-15 11:12:39	CindyLinz	[21:15:43] mmm..
2013-10-15 11:12:39	hashcat	[22:28:11] haskellwiki滿詳盡的
2013-10-15 11:12:39	hashcat	[22:28:18] 這裡面也有講
2013-10-15 11:12:39	hashcat	[22:43:13] http://en.wikibooks.org/wiki/Haskell/Indentation#The_golden_rule_of_indentation
2013-10-15 11:12:39	hashcat	[22:43:23] 黃金規則
2013-10-15 11:12:39	CindyLinz	[22:44:08] gold..golden rule... o_O
2013-10-15 11:12:39	CindyLinz	[22:44:25] 不過.. 這頁真是謝謝了 ^^
2013-10-15 11:12:39	hashcat	[22:48:14] 我知道有人看到這個會想到大便規則
2013-10-15 11:12:39	hashcat	[22:48:42] 因為我已經想到了
2013-10-15 11:12:39	hashcat	[22:49:31] 記得haskellwiki有套規則
2013-10-15 11:12:39	hashcat	[22:49:43] 這會找不到只找到那個
2013-10-15 11:12:39	CindyLinz	[22:49:52] hashcat ← witness
2013-10-15 11:12:39	CindyLinz	[00:29:51] 覺得 Data.ByteString 裡面一些像是 span :: (Word8 -> Bool) -> ByteString -> (ByteString -> ByteString) 這樣的函數
2013-10-15 11:12:39	CindyLinz	[00:29:57] 缺了 monadic 版本...
2013-10-15 11:12:39	CindyLinz	[00:30:38] 想要 spanM :: Monad m => (Word8 -> m Bool) -> ByteString -> m (ByteString, ByteString)
2013-10-15 11:12:39	CindyLinz	[00:30:52] (剛剛前面那個的 return type 寫錯了, 要寫成 pair 才對 :p)
2013-10-15 11:12:39	CindyLinz	[00:31:40] 沒有 monadic 版本, 也沒有可以額外 carry 自備 payload 的參數
2013-10-15 11:12:39	CindyLinz	[00:32:07] 不知道要怎麼寫一次拿兩個字來作判斷的作法
2013-10-15 11:12:39	CindyLinz	[00:32:20] 像是想要找 \r\n 來作為切斷點...
2013-10-15 11:12:39	godfat	[00:32:45] 我上次好像有在找類似的東西
2013-10-15 11:12:39	CindyLinz	[00:33:53] 現在看起來只能先用 foldl :: (a -> Char -> a) -> a -> ByteString -> a 爬一遍
2013-10-15 11:12:39	CindyLinz	[00:34:26] 算出位置, 然後再拿這個位置去 splitAt :: Int -> ByteString -> (ByteString, ByteString)
2013-10-15 11:12:39	CindyLinz	[00:34:45] 但這樣就不能 on-the-fly 做了
2013-10-15 11:12:39	CindyLinz	[00:35:26] godfat: 有找到嗎!
2013-10-15 11:12:39	godfat	[00:35:27] 覺得說來微妙，很多都做起來簡單，但 library 裡好像就沒有
2013-10-15 11:12:39	godfat	[00:35:27] 有時候會想乾脆把 ruby 裡的操作都實作一次算了..
2013-10-15 11:12:39	CindyLinz	[00:35:36] 聽起來沒有 QQ
2013-10-15 11:12:39	CindyLinz	[00:36:10] 可是這個用 foldl 爬一遍的作法, 如果 \r\n 之前的 ByteString 很長的話
2013-10-15 11:12:39	CindyLinz	[00:36:26] 這一段超長的 ByteString 就要整個都 keep 在記憶體裡面...
2013-10-15 11:12:39	godfat	[00:36:27] 我正在翻 source.. 印象中是沒有
2013-10-15 11:12:39	godfat	[00:36:27] String 跟 ByteString 又不一樣有時候也滿討厭的
2013-10-15 11:12:39	CindyLinz	[00:36:44] 因為拿 foldl 算位置的時候, 它是一口氣算完的 @@"
2013-10-15 11:12:39	godfat	[00:37:33] 用 foldr 呢？
2013-10-15 11:12:39	CindyLinz	[00:38:10] 我要它出來的結果是一個數字.... 它怎樣都會是一口氣出來吧?
2013-10-15 11:12:39	CindyLinz	[00:38:37] 因為我要嘛就是還用不到這個數字, 要嘛就是馬上要拿這數字做事了
2013-10-15 11:12:39	godfat	[00:38:41] 實際上要處理的問題是？
2013-10-15 11:12:39	CindyLinz	[00:39:08] 實際上我是要找 */ 來把 ByteString 切斷
2013-10-15 11:12:39	godfat	[00:39:46] 我可以想成把 comment 移除嗎？ XD
2013-10-15 11:12:39	CindyLinz	[00:39:50] 對
2013-10-15 11:12:39	CindyLinz	[00:40:21] 正在試圖 parse sass..
2013-10-15 11:12:39	godfat	[00:41:00] 話說如果用 parser 應該不用這樣處理？
2013-10-15 11:12:39	CindyLinz	[00:41:16] 在寫 lexer 的部分 XD
2013-10-15 11:12:39	CindyLinz	[00:41:29] 想用 lexer 就把註解吃掉
2013-10-15 11:12:39	godfat	[00:41:39] 找到了，我是用 split package...
2013-10-15 11:12:39	godfat	[00:41:39] http://hackage.haskell.org/package/split-0.2.1.1/docs/Data-List-Split.html
2013-10-15 11:12:39	godfat	[00:42:51] 用 parser combinator 的話不用特別做 lexer?
2013-10-15 11:12:39	godfat	[00:42:51] 或是說就是不想在語法裡處理 comment?
2013-10-15 11:12:39	CindyLinz	[00:43:31] 想說用 lexer 比較省啊 XD
2013-10-15 11:12:39	CindyLinz	[00:44:03] 直接用 parser (or parsec?) 的話, 就是用把 Char 當 token 用的 default lexer
2013-10-15 11:12:39	godfat	[00:44:15] 我想說搞不好 sass 有超肥的 XD
2013-10-15 11:12:39	CindyLinz	[00:46:11] 想.... :Q 如果把 [Char] 拿去給我們寫出來的 parser 吃, 應該每一個 Char 的 list node 都會依序被建出來, 不會被 fusion 吃掉..
2013-10-15 11:12:39	godfat	[00:46:38] 所以這樣反而超慢嗎？
2013-10-15 11:12:39	CindyLinz	[00:47:22] 一個 list node 有 1個ref到value, 1個ref到next, 1個constructor(:), 然後再這個 Char 本身, 共 5bytes
2013-10-15 11:12:39	CindyLinz	[00:48:07] 主要就慢在這 2.5 倍的記憶體, 還有 allocate 和 derefrence 的時間
2013-10-15 11:12:39	CindyLinz	[00:48:35] 應該不會同時都建出來吃光記憶體, 只是動作都會需要走過
2013-10-15 11:12:39	CindyLinz	[00:49:38] 那我想用 lexer 吃成比較大顆的 token, 內附一個 ByteString.UTF8
2013-10-15 11:12:39	CindyLinz	[00:50:10] 實用的時候常常會有像是 border-width 這樣子一整串的字
2013-10-15 11:12:39	CindyLinz	[00:50:24] 就省了 11 組 reference :p
2013-10-15 11:12:39	godfat	[00:50:37] cool~
2013-10-15 11:12:39	CindyLinz	[00:52:11] 然後.. 剛剛我前面說的如果 */ 之前的字太長.. 其實是我額外想的延伸問題, 我現在其實不打算把它丟掉 ^^|
2013-10-15 11:12:39	godfat	[00:52:39] 難怪要 span XD
2013-10-15 11:12:39	CindyLinz	[00:52:43] 我只是想說, 存在這樣的情境會是無法處理的....
2013-10-15 11:12:39	CindyLinz	[00:52:58] 嗯, 不然好像應該用 drop.. :p
2013-10-15 11:12:39	CindyLinz	[00:53:10] 但還是很想 on-the-fly 做呀 :|
2013-10-15 11:12:39	godfat	[00:53:36] 自己遞回？
2013-10-15 11:12:39	CindyLinz	[00:54:23] 不知道怎麼摸它的內部資料
2013-10-15 11:12:39	godfat	[00:54:46] ByteString?
2013-10-15 11:12:39	CindyLinz	[00:55:11] 我用 ByteString.UTF8...
2013-10-15 11:12:39	CindyLinz	[00:55:21] 欸... 突然覺得我應該直接回去用 ByteString 就好
2013-10-15 11:12:39	CindyLinz	[00:55:34] 因為所有有特別意義的字元都在 ascii 裡面..
2013-10-15 11:12:39	godfat	[00:55:52] 如果有人 variable 用 utf-8?
2013-10-15 11:12:39	CindyLinz	[00:56:08] sass 是說它支援任何 encoding.. 不過我想現在都 2013 了, 獨尊 UTF-8 就好了 XD
2013-10-15 11:12:39	CindyLinz	[00:56:37] 我想我可以只把我想認的那幾個符號字元列出來, 剩下就都當「字」
2013-10-15 11:12:39	godfat	[00:56:49] 除非他 variable 只准 ascii-7bit, 不然不能支援任何 encoding 吧？
2013-10-15 11:12:39	CindyLinz	[00:57:04] 然後 unicode 額外定的空白字元就給他 sorry 了 XD
2013-10-15 11:12:39	CindyLinz	[00:57:22] sass 規定可以在一開始寫 @charset XXXX 來指定
2013-10-15 11:12:39	godfat	[00:57:41] 可是我 @charset unknown 他要怎麼處理？
2013-10-15 11:12:39	CindyLinz	[00:57:55] 我打算 ignore 這一條, 直接當它 UTF-8, 想用別的 encoding 的人請自己先用 iconv 轉 ^^|
2013-10-15 11:12:39	godfat	[00:58:27] iconv 轉 big5 問題一堆 XD
2013-10-15 11:12:39	godfat	[00:58:27] 愛用 bsdconv @_@
2013-10-15 11:12:39	godfat	[00:58:27] https://github.com/buganini/bsdconv
2013-10-15 11:12:39	CindyLinz	[00:58:38] 沒試過, 應該就是丟 error, 或是出 warning 然後繼續當它 UTF-8
2013-10-15 11:12:39	CindyLinz	[00:58:44] 是喔 XD
2013-10-15 11:12:39	godfat	[00:58:45] XDDDDDD
2013-10-15 11:12:39	godfat	[00:59:19] 之前花過不少時間考證 iconv, 啊啊啊最後 blog post 沒寫出來 ><
2013-10-15 11:12:39	godfat	[00:59:19] 幾年前了 :o
2013-10-15 11:12:39	godfat	[00:59:19] 總之結論是不要用 iconv 轉 big5
2013-10-15 11:12:39	CindyLinz	[00:59:22] 那我翻一下 ByteString 的資料... 用 UTF-8 連要直接跳第 N 個字都沒法 constant time... orz
2013-10-15 11:12:39	CindyLinz	[00:59:31] 好! XD
2013-10-15 11:12:39	godfat	[01:00:12] utf8 好像本來就不能 constant time 抓第 n 個字？
2013-10-15 11:12:39	CindyLinz	[01:00:27] 對啊.. 所以你剛剛說 recursion 讓我也很苦惱 XD
2013-10-15 11:12:39	CindyLinz	[01:00:41] 起碼它得給我個什麼 iterator
2013-10-15 11:12:39	godfat	[01:00:44] 可能還是要照 char 去切..
2013-10-15 11:12:39	CindyLinz	[01:00:58] 而直接用它的 foldl 那些, 就還是不能自己遞迴了
2013-10-15 11:12:39	godfat	[01:01:18] 不然就要看 utf8 spec, 自己寫 parser 了 (?) XDDD
2013-10-15 11:12:39	godfat	[01:01:55] -- | Traverse a bytestring (left biased).
2013-10-15 11:12:39	godfat	[01:01:55] -- This fuction is strict in the acumulator.
2013-10-15 11:12:39	godfat	[01:01:55] foldl :: (a -> Char -> a) -> a -> B.ByteString -> a
2013-10-15 11:12:39	godfat	[01:01:55] foldl add acc cs  = case uncons cs of
2013-10-15 11:12:39	godfat	[01:01:55]                       Just (a,as) -> let v = add acc a
2013-10-15 11:12:39	godfat	[01:01:55]                                      in seq v (foldl add v as)
2013-10-15 11:12:39	godfat	[01:01:55]                       Nothing     -> acc
2013-10-15 11:12:39	godfat	[01:01:59] http://hackage.haskell.org/package/utf8-string-0.3/docs/src/Data-ByteString-UTF8.html#foldl
2013-10-15 11:12:39	godfat	[01:02:18] 用 uncons?
2013-10-15 11:12:39	CindyLinz	[01:04:19] 對喔 uncons..
2013-10-15 11:12:39	CindyLinz	[01:04:29] 就用它了!
2013-10-15 11:12:39	CindyLinz	[01:04:52] 不過還是換回沒有 UTF8 的 ByteString 好了
2013-10-15 11:12:39	CindyLinz	[01:06:10] 我有用到 uncons, 卻沒想到要拿來遞迴 ._.
2013-10-15 11:12:39	godfat	[01:07:33] XDD
2013-10-15 11:12:39	godfat	[01:07:34] 不過我覺得我沒很搞懂， foldl 應該也不會把整段 bytestring 抓住？
2013-10-15 11:12:39	CindyLinz	[01:08:44] 不會
2013-10-15 11:12:39	CindyLinz	[01:09:10] 但是我接下來會拿這個出來的位置再去 drop
2013-10-15 11:12:39	CindyLinz	[01:09:23] 為了讓 drop 能執行, 它就會把 bytestring keep 住
2013-10-15 11:12:39	godfat	[01:13:39] 直接把 drop/span 要做的事情放到 foldl 裡面？
2013-10-15 11:12:39	godfat	[01:13:39] 例如給他的 function 最後拿 (Int, (ByteString, ByteString))
2013-10-15 11:12:39	godfat	[01:13:54] 這樣兩件事一次做完？ @_@
2013-10-15 11:12:39	CindyLinz	[01:14:51] drop 的好像可以..
2013-10-15 11:12:39	CindyLinz	[01:15:08] 就把滿足條件那一次的 uncons 的結果輸出就好
2013-10-15 11:12:39	CindyLinz	[01:15:28] span 的話要把左邊接回來有點痛苦
2013-10-15 11:12:39	CindyLinz	[01:15:58] 所以說, 沒 monadic 版, 是因為真的用不到嗎 ._.
2013-10-15 11:12:39	godfat	[01:16:38] 唔唔，我猜 span 可能真的要自己寫 rec function 了
2013-10-15 11:12:39	godfat	[01:16:39] 用 foldl 看來真的會很痛苦 XD
2013-10-15 11:12:39	CindyLinz	[01:17:33] 可是把 ByteString 「接回來」這樣的動作, 會生出新的 ByteString, 不能直接把原始的那個 ByteString 「框出來」 @@"
2013-10-15 11:12:39	godfat	[01:17:42] monadic 版我不知道.. 感覺所有排列組合都做滿多的 :o
2013-10-15 11:12:39	godfat	[01:17:42] 有時候我覺得 haskell 裡可以很簡單自己寫的東西，
2013-10-15 11:12:39	godfat	[01:17:42] 都沒有提供 std function..
2013-10-15 11:12:39	godfat	[01:17:59] 自己遞迴應該就可以了？
2013-10-15 11:12:39	CindyLinz	[01:18:17] leave you as an exercise XD
2013-10-15 11:12:39	godfat	[01:18:25] XDDD....
2013-10-15 11:12:39	godfat	[01:18:42] Haskell the Tutor
2013-10-15 11:12:39	CindyLinz	[01:19:26] 好像要去摸 ByteString 的 internal 結構才行...?
2013-10-15 11:12:39	CindyLinz	[01:20:01] 我希望能夠不用 keep 住整個前段, 而又不用生出新的 ByteString 的話
2013-10-15 11:12:39	godfat	[01:20:03] 不知道能不能 chunk by chunk...?
2013-10-15 11:12:39	CindyLinz	[01:20:08] 我最好是能夠一次放一個 chunk
2013-10-15 11:12:39	CindyLinz	[01:20:16] 要跟原始的長得一樣
2013-10-15 11:12:39	CindyLinz	[01:20:44] 嗯嗯嗯
2013-10-15 11:12:39	godfat	[01:21:25] 乾脆試試 conduit (誤
2013-10-15 11:12:39	CindyLinz	[01:21:29] 不過... 把 UTF8 去掉以後, 我找到直接就是我要的函數了: breakSubstring :: ByteString -> ByteString -> (ByteString, ByteString)
2013-10-15 11:12:39	godfat	[01:21:51] ....=_=...
2013-10-15 11:12:39	CindyLinz	[01:22:30] 雖然我要找的只有兩個字, 包成 ByteString 稍嫌貴了點, 不過也就是 1 塊錢的影印費漲價成 4 塊錢這樣.. 漲幅大, 還是不太痛 :p
2013-10-15 11:12:39	godfat	[01:22:49] 看印多少.... XD
2013-10-15 11:12:39	CindyLinz	[01:23:17] 正常當然不會是一大堆空行吧 XD
2013-10-15 11:12:39	godfat	[01:23:43] 話說... 可以去神來也玩 haskell 嗎？ XDD
2013-10-15 11:12:39	CindyLinz	[01:23:45] 嗯, 我 //.....\n 要找的是一個字的 \n 不會有這問題; 而兩個字的 */ 應該正常不會一堆空的 XD
2013-10-15 11:12:39	CindyLinz	[01:24:10] 現在來還不會有能隨意寫 haskell 的地方 orz
2013-10-15 11:12:39	godfat	[01:24:11] 話說 nested comment 有處理嗎？
2013-10-15 11:12:39	CindyLinz	[01:24:25] sass 的說明沒看出來, 我也不打算處理
2013-10-15 11:12:39	godfat	[01:24:29] 有機會就不錯了 XD
2013-10-15 11:12:39	CindyLinz	[01:24:58] 如果需要處理 nested 的話.. 我這邊就白糾結了 XD
2013-10-15 11:12:39	godfat	[01:25:09] XDDDD
2013-10-15 11:12:39	godfat	[01:25:22] 我想不起來 ruby 有沒有，不過印象中好像沒問題
2013-10-15 11:12:39	CindyLinz	[01:25:22] 沒有講到, 那我猜應該是沒有..
2013-10-15 11:12:39	CindyLinz	[01:25:38] 有的話就不能用 lexer 找 comment 了呀
2013-10-15 11:12:39	CindyLinz	[01:26:01] 啊不對... 我這邊 lexer 根本有 turing complete 的 power.....||
2013-10-15 11:12:39	godfat	[01:26:08] 可以多 pass 到沒有 comment 為止？ XDD
2013-10-15 11:12:39	CindyLinz	[01:26:22] 真 lexer 沒辦法啦 XD
2013-10-15 11:12:39	CindyLinz	[01:26:30] 真．lexer XD
2013-10-15 11:12:39	monochrom	[01:27:27] 照計 sass 的作者不會自找麻煩, sass 的用者也不會那麼邪惡 :)
2013-10-15 11:12:39	godfat	[01:27:59] 用 comment 暫時拿掉程式時應該滿容易碰到的說
2013-10-15 11:12:39	CindyLinz	[01:28:00] sass 的用者應該主要是設計師..
2013-10-15 11:12:39	CindyLinz	[01:28:26] 嗯, 可是主流語言都會爆, 所以就養成習慣用整排 // 來拿掉 XD
2013-10-15 11:12:39	godfat	[01:29:05] editor 好像都是這樣做 :o
2013-10-15 11:12:39	CindyLinz	[01:29:43] 而且還可以作出巢狀的歷史效果 :D
2013-10-15 11:12:39	CindyLinz	[01:29:57] 最早被拿掉的部分, 前面積的 // 會比較厚 XD
2013-10-15 11:12:39	godfat	[01:30:32] 我沒記錯的話，textmate 用快鍵加 comment 會有 toggle 的效果
2013-10-15 11:12:39	godfat	[01:30:32] 所以已經被 comment 不是多一層，而是被 uncomment XD
2013-10-15 11:12:39	CindyLinz	[01:31:06] xor XD
2013-10-15 11:12:39	monochrom	[01:32:15] xor 會造成很趣怪的效果啊!
2013-10-15 11:12:39	CindyLinz	[01:32:51] 可聽起來的確是 xor 啊 XD
2013-10-15 11:12:39	CindyLinz	[01:33:38] 我是用 vim, 把想加 comment 的那幾行都 mark 起來, 然後 :s!^!//
2013-10-15 11:12:39	monochrom	[01:34:04] haha
2013-10-15 11:12:39	CindyLinz	[01:39:18] godfat: 公司現在主要還是在徵 php.. 然後徵進來再看志趣教 perl.. @@"
2013-10-15 11:12:39	godfat	[01:40:19] ...XD perl 我可以試，php 免了 -_-...
2013-10-15 11:12:39	CindyLinz	[01:40:48] 歐歐真的嗎!
2013-10-15 11:12:39	CindyLinz	[01:41:00] 主要沒徵 perl 是因為徵不到....
2013-10-15 11:12:39	godfat	[01:41:11] 是啊，我也一直很想知道 perl 好在哪裡 XD
2013-10-15 11:12:39	godfat	[01:41:11] 一直不知道從何下手
2013-10-15 11:12:39	godfat	[01:41:39] 老實講聽你講 perl 的事也讓我不懂 perl 好在哪... XD
2013-10-15 11:12:39	monochrom	[01:41:56] 我想, 你大可以加入, 反正加入後也派你用perl
2013-10-15 11:12:39	CindyLinz	[01:42:16] php 還是常常得碰啦 orz
2013-10-15 11:12:39	godfat	[01:42:22] 不過我沒有任何 perl 經驗說
2013-10-15 11:12:39	CindyLinz	[01:43:14] 這樣就不知道要怎麼講了 orz
2013-10-15 11:12:39	godfat	[01:43:52] XDDD
2013-10-15 11:12:39	godfat	[01:43:52] 我的 perl 經驗是 cpan ...
2013-10-15 11:12:39	godfat	[01:43:52] 然後用那個東西
2013-10-15 11:12:39	hashcat	[01:44:20] 看是誰設計的就知道是怎樣了
2013-10-15 11:12:39	CindyLinz	[01:44:21] 如果跟 ruby 對照.. 好處是可以不用想著物件?
2013-10-15 11:12:39	CindyLinz	[01:45:20] 不過如果硬是要想物件我也沒辦法...
2013-10-15 11:12:39	hashcat	[01:45:24] C是系統hacker, perl是語言學家, python是數學家
2013-10-15 11:12:39	godfat	[01:45:27] 不過我很習慣物件耶 XD
2013-10-15 11:12:39	CindyLinz	[01:45:29] 有好幾個同事就這樣..... QQ
2013-10-15 11:12:39	monochrom	[01:45:38] 我反轉來看. ruby 跟 perl 對照, ruby好處是不用想著 dictionary
2013-10-15 11:12:39	godfat	[01:46:23] perl 要大量處理 dictionary?
2013-10-15 11:12:39	CindyLinz	[01:46:46] dictionary?
2013-10-15 11:12:39	CindyLinz	[01:47:01] 我的話是大量的 callback, closure 什麼的 ._.
2013-10-15 11:12:39	monochrom	[01:47:13] 兩害取其輕, "萬物皆object" 還是好過 "萬物皆 hash table"
2013-10-15 11:12:39	CindyLinz	[01:47:21] 大量 dictionary 我猜是 python 或 lua 的特色?
2013-10-15 11:12:39	CindyLinz	[01:47:44] 嗯, 如果還想著物件的話會拿 hash 來模擬物件
2013-10-15 11:12:39	godfat	[01:47:55] callback... XD 做在 AnyEvent 上嗎？
2013-10-15 11:12:39	hashcat	[01:48:08] 看要做啥領域的東西, 在看那作者跟你領域有沒一樣就好了
2013-10-15 11:12:39	CindyLinz	[01:48:22] 摸到比較低階的話現在的確是 AnyEvent
2013-10-15 11:12:39	godfat	[01:49:00] 想想目前應該是比較怕符號，其他應該還好
2013-10-15 11:12:39	godfat	[01:49:01] 倒是符號也應該是熟悉問題
2013-10-15 11:12:39	CindyLinz	[01:49:18] 但是像遊戲裡, 某玩家向另一個玩家邀請入組之類的, 寫成抽象一點的函數, 還是有 callback, 但是就看不到 AnyEvent 了
2013-10-15 11:12:39	monochrom	[01:49:45] 不只物件哩! 其實我只想要record, 在perl也變成dictionary, 真覺得很低階.
2013-10-15 11:12:39	godfat	[01:49:47] 讓我想到前幾天在改遊戲的程式（作弊），
2013-10-15 11:12:39	godfat	[01:49:47] 裡面的 lua 有好多 callback
2013-10-15 11:12:39	CindyLinz	[01:51:14] XD
2013-10-15 11:12:39	godfat	[01:51:36] 不過老實講我真的覺得 lua 好難用...
2013-10-15 11:12:39	CindyLinz	[01:51:42] 我也不喜歡..
2013-10-15 11:12:39	CindyLinz	[01:51:47] monochrom: 看你要不要包..
2013-10-15 11:12:39	godfat	[01:52:09] 我目前大概是 lua > php > javascript
2013-10-15 11:12:39	CindyLinz	[01:52:14] monochrom: 如果整個 project 蠻複雜的, 那就會在底部舖一層讓自己看得舒服順眼一點
2013-10-15 11:12:39	godfat	[01:52:45] 主流是 perl 5.8 嗎？一般會用 perlbrew?
2013-10-15 11:12:39	CindyLinz	[01:53:12] 有時候偶爾會寫 { keepAlive(); sleep 1; redo } 這種程式.. 應該就不用再物件了吧.... /_\
2013-10-15 11:12:39	CindyLinz	[01:53:29] godfat: 我們公司現在主流是 5.14~5.16
2013-10-15 11:12:39	godfat	[01:53:56] 原來我電腦上也是 5.14, 我記憶停留在太久之前了 XD
2013-10-15 11:12:39	CindyLinz	[01:54:05] godfat: 我覺得一般應該是開發許多外包專案, 或是專門測試各種 perl 相容性的才會用 perlbrew
2013-10-15 11:12:39	CindyLinz	[01:55:02] 自己用的話, 當然是戳 MIS 要盡量讓環境一致啊... 搞多個版本都不一樣的作法, 這成本......wwww
2013-10-15 11:12:39	godfat	[01:55:14] 寫成一般 script 時自然不會包在物件裡，我 ruby 也是直白地寫
2013-10-15 11:12:39	godfat	[01:55:14] 不過要重用的就都會寫成物件了
2013-10-15 11:12:39	godfat	[01:55:14] 嗯嗯，同感，我也覺得 rvm 是沒必要的
2013-10-15 11:12:39	CindyLinz	[01:56:30] 唉, 只是覺得同事有時候為物件而物件, member method 不知道要往哪個 class 塞, 結果把一個動作拆成兩個 class 都放一點...
2013-10-15 11:12:39	CindyLinz	[01:57:04] 後來發現原來的作法太簡單不夠需求, 而加進來的 code 又是兩邊都要塞.. 而且變成 N pass 來來回回好幾次....
2013-10-15 11:12:39	CindyLinz	[01:57:38] 其中一個 class 是玩家, 一個 class 是一個遊戲場
2013-10-15 11:12:39	godfat	[01:57:47] XDDDDDD 原來是這樣
2013-10-15 11:12:39	godfat	[01:57:47] 那我倒也是很習慣只用一個 module 加上一堆 module_function 這樣
2013-10-15 11:12:39	godfat	[01:57:47] 有些工具真的不用多拆成好幾塊
2013-10-15 11:12:39	godfat	[01:57:47] 暫離 @@
2013-10-15 11:12:39	CindyLinz	[01:58:44] field 分類容易.. 反正可依個人積分和場地狀態來分開
2013-10-15 11:12:39	CindyLinz	[01:59:07] method 就很難搞了.... 幾乎每一個動作都是兩邊都要動到
2013-10-15 11:12:39	CindyLinz	[01:59:31] 寫著寫著, 玩家class對場地class全知, 場地class也對玩家class全知...
2013-10-15 11:12:39	CindyLinz	[01:59:47] 這 class 只剩下 namespace 的意義了....
2013-10-15 11:12:39	CindyLinz	[02:00:46] 然後又想要去守住: 由玩家method來改玩家field, 場地method改場地field..
2013-10-15 11:12:39	CindyLinz	[02:01:27] 又難以找出除了對單個 field 的 getter/setter 以外的獨立操作單位...
2013-10-15 11:12:39	CindyLinz	[02:01:53] 好像抱怨太多, 負面能量積了起來... 先休息好了 XD
2013-10-15 11:12:39	godfat	[02:10:49] XDD 聽起來情況滿複雜的..
2013-10-15 11:12:39	godfat	[02:10:50] 也先睡了
2013-10-15 11:12:39	monochrom	[02:39:12] https://twitter.com/fijall/status/389782873269497856
2013-10-15 11:12:39	mno2	[10:28:26] CindyLinz: 不是有 breakSubstring ?
2013-10-15 11:12:39	***	Playback Complete.
2013-10-15 11:12:56	--	Mode #haskell.tw [+cnt]
2013-10-15 11:12:56	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-15 11:13:42	hychen	CindyLinz: perl!
2013-10-15 11:14:00	hychen	CindyLinz: 想當年我那個bless一直搞不懂那是啥
2013-10-15 11:17:38	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-10-15 11:39:12	<--	darkx (~x4r@162.243.133.203) has quit (Quit: leaving)
2013-10-15 11:39:21	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-10-15 12:04:21	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 12:09:23	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-10-15 13:22:03	CindyLinz	mno2: 用啦 :p
2013-10-15 13:22:27	CindyLinz	mno2: 只是起先用 .UTF8 的沒有這功能
2013-10-15 13:24:46	mno2	CindyLinz: I see
2013-10-15 13:56:07	CindyLinz	hychen: 可能是你把它這個隨便的東西看得太認真了 ^^|
2013-10-15 14:09:28	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-10-15 14:10:19	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 14:18:55	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-15 14:20:24	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 15:44:27	-->	hashcat (~hashcat@114-47-126-13.dynamic.hinet.net) has joined #haskell.tw
2013-10-15 17:03:04	<--	hashcat (~hashcat@114-47-126-13.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-10-15 17:14:57	godfat	看起來 php 還是應該不列入考量..... -_-
2013-10-15 17:15:58	CindyLinz	考量...公司?
2013-10-15 17:16:22	godfat	不知道公司或是工作哪個比較貼切 XD
2013-10-15 17:16:48	CindyLinz	差不多啦, 你這樣回答就差不多聽懂了 XD
2013-10-15 17:17:10	godfat	XDDDD 剛剛聽到 php composer, 正在看做得如何
2013-10-15 17:20:32	godfat	總覺得好像看到簡化的 maven....
2013-10-15 17:28:05	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-10-15 17:31:42	CindyLinz	php 的 package store 有好幾個 orz
2013-10-15 17:36:28	godfat	composer 這個看起來以 git 為主
2013-10-15 17:38:04	godfat	嗯，看起來還是有個地方蒐集清單
2013-10-15 17:38:04	godfat	https://packagist.org/
2013-10-15 17:38:04	godfat	然後裡面再指向別的地方
2013-10-15 17:41:23	godfat	算了，我看 php 還是跳過好了 orz...
2013-10-15 17:41:24	godfat	反正其他地方也沒那麼吸引人 ~.~
2013-10-15 17:43:46	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-15 17:56:11	-->	hashcat (~hashcat@27.52.62.66) has joined #haskell.tw
2013-10-15 18:08:42	-->	delta4d (~delta@219.228.118.113) has joined #haskell.tw
2013-10-15 18:09:46	<--	delta4d (~delta@219.228.118.113) has quit (Client Quit)
2013-10-15 18:54:42	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-15 19:43:33	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 19:54:03	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-15 20:34:29	<--	hashcat (~hashcat@27.52.62.66) has quit (Ping timeout: 246 seconds)
2013-10-15 20:35:04	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-15 21:16:37	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-15 21:52:12	-->	hashcat (~hashcat@27.52.62.66) has joined #haskell.tw
2013-10-15 23:03:07	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-10-15 23:03:19	suhorng	@hoogle a -> Maybe b -> Either a b
2013-10-15 23:03:19	lambdabot	Text.Parsec.Prim runP :: Stream s Identity t => Parsec s u a -> u -> SourceName -> s -> Either ParseError a
2013-10-15 23:03:19	lambdabot	Text.Parsec.Prim runParser :: Stream s Identity t => Parsec s u a -> u -> SourceName -> s -> Either ParseError a
2013-10-15 23:03:19	lambdabot	Text.ParserCombinators.Parsec.Prim runParser :: GenParser tok st a -> st -> SourceName -> [tok] -> Either ParseError a
2013-10-15 23:03:23	suhorng	QQ
2013-10-15 23:09:01	CindyLinz	:t \a b -> maybe (Left a) Right b
2013-10-15 23:09:03	lambdabot	a -> Maybe b -> Either a b
2013-10-15 23:10:51	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 245 seconds)
2013-10-15 23:11:39	suhorng	嗯...!
2013-10-15 23:11:53	suhorng	@pl (\a b -> maybe (Left a) Right b)
2013-10-15 23:11:56	lambdabot	flip (maybe . Left) Right
2013-10-15 23:11:56	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-15 23:12:54	suhorng	是說看到同學用singleton = (:[]) 覺得超有道理 xDDDD
2013-10-15 23:13:05	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-15 23:13:39	CindyLinz	不好體會 orz
2013-10-15 23:13:56	CindyLinz	只覺得是個橫躺的機器人臉... :Q
2013-10-15 23:14:43	CindyLinz	如果遇到.. flip (maybe . Left) Right 還真要想一陣子 orz
2013-10-15 23:14:52	suhorng	XDD
2013-10-15 23:14:58	suhorng	:-&
2013-10-15 23:15:28	CindyLinz	不過 (:[]) 可以比較快看懂.. 因為跟 List 的原型很像..
2013-10-15 23:15:39	CindyLinz	根本就是 List 的原型 XD
2013-10-15 23:15:41	suhorng	也是
2013-10-15 23:15:44	suhorng	啊哈哈XD
2013-10-15 23:34:17	CindyLinz	每次要生一組 monad trans former 就要用小腦寫一堆 code... @@"
2013-10-15 23:34:29	-->	Yu_lin (24ec145d@gateway/web/freenode/ip.36.236.20.93) has joined #haskell.tw
2013-10-15 23:34:39	CindyLinz	而且還不完整.....
2013-10-15 23:34:54	CindyLinz	以後都直接套 StateT 好了.... ~_~
2013-10-15 23:36:41	CindyLinz	不完整是說, 可能我就沒去定義 MonadIO, MonadFix, 之類自己用不到, 但不知道別人會不會想用的東西 :Q
2013-10-15 23:43:48	Yu_lin	Perl 是我開始搞懂什麼叫寫程式的第一個語言XD
2013-10-15 23:44:10	letoh	為什麼這話聽起來蠻可怕的XD
2013-10-15 23:44:48	CindyLinz	Yu_lin ← Perl native speaker
2013-10-15 23:45:53	Yu_lin	不過我的第一個語言應該是 java，第二個語言是 perl，當年學 java 後讓我覺得寫程式好難懂好困難，就放棄了，直到跑去玩 perl
2013-10-15 23:47:21	letoh	說到這個  我那時候寫 c++ 寫到很煩  怒學 java 後發現世界真是美好.... 誰知道原來也是個可怕的東西XD
2013-10-15 23:47:29	Yu_lin	XD
2013-10-15 23:48:10	Yu_lin	不過從我開始接觸 haskell 之後，就沒寫過 Perl 了，不知道改變多大
2013-10-15 23:48:40	CindyLinz	Perl 沒什麼變化, 骨幹還是一樣, 只有加點新東西...
2013-10-15 23:50:03	Yu_lin	Perl6 的東西跟新 oo 工具嗎?
2013-10-15 23:51:03	CindyLinz	Perl6 不是 Perl 啦 XD
2013-10-15 23:51:26	letoh	1s變黑歷史?
2013-10-15 23:51:29	CindyLinz	> "Perl6" == "Perl"
2013-10-15 23:51:29	Yu_lin	我想說是不是加了 Perl6 的部分語法進去XD
2013-10-15 23:51:30	lambdabot	  False
2013-10-15 23:51:36	Yu_lin	XDDD
2013-10-15 23:51:39	CindyLinz	你看 lambdabot 也這樣說.. (逃)
2013-10-15 23:51:42	letoh	XDXD
2013-10-15 23:51:44	godfat	XDDDDD
2013-10-15 23:52:33	CindyLinz	Yu_lin: regex 變成 push down automata 應該是從 perl6 拿的
2013-10-15 23:53:20	CindyLinz	然後有一個設計壞掉的, 一點都不 smart 的 smart matching 應該也是從 perl6 拿的
2013-10-15 23:53:35	suhorng	Perl8呢..xDDD
2013-10-15 23:54:59	suhorng	http://perl8.com/
2013-10-15 23:55:00	Yu_lin	用過 python 後，我深深體會到 perl 的 regex 是多麼巧妙又好用的東西Orz|||
2013-10-15 23:55:07	suhorng	上次喔哩貼過的XD
2013-10-15 23:55:32	letoh	Yu_lin: 沒幾個語言的 regex 可以比 perl 好用吧
2013-10-15 23:55:37	CindyLinz	這到底是什麼東西呢... (思)  http://www.soimort.org/posts/152/
2013-10-15 23:56:00	CindyLinz	Haskell 有人整理 regex lib 說: 全世界只有兩種 regex
2013-10-15 23:56:04	CindyLinz	Posix 和 Perl
2013-10-15 23:56:15	godfat	perl8 是怎麼回事...
2013-10-15 23:56:15	godfat	不過 perl 有什麼 regexp 怪招？ruby 能用的也滿誇張的
2013-10-15 23:56:26	CindyLinz	不過我不知道 vim 是哪一種....||
2013-10-15 23:57:00	CindyLinz	perl 的 regex 有 C lib 呀, 應該大家就拿去用了?
2013-10-15 23:57:10	CindyLinz	godfat: 這個... (?數字)
2013-10-15 23:57:22	CindyLinz	(?數字) (?+數字) (?-數字)
2013-10-15 23:57:35	CindyLinz	套用另一個 capture 的 regex
2013-10-15 23:58:23	CindyLinz	所以可以這樣寫: print <> =~ /^((\((?1)\))*)$/ ? "YES\n" : "NO\n"
2013-10-15 23:58:27	godfat	這是什麼意思？ XD
2013-10-15 23:58:27	godfat	ruby 的 regex 也可以 capture
2013-10-15 23:58:27	godfat	啊有個我想要的老是沒看到的是，
2013-10-15 23:58:27	godfat	類似 invert match..?
2013-10-15 23:58:27	godfat	像是 [^abc] 是不含 a 或 b 或 c
2013-10-15 23:58:27	godfat	我想要就是不要包含有 abc 這種的
2013-10-15 23:58:41	letoh	可以 recursive
2013-10-15 23:58:57	godfat	ruby 的也可以是 recursive
2013-10-15 23:58:58	CindyLinz	我寫的這一條可以看 input 的第一行, 是不是批配的小括號
2013-10-15 23:59:22	godfat	喔喔，這 ruby 應該也行，不過我要試試看 XD
2013-10-15 23:59:27	letoh	原來如此  我只用 ruby 寫過作業  不太熟XD
2013-10-16 00:01:20	b4283	back reference
2013-10-16 00:01:48	godfat	ruby 也可以
2013-10-16 00:01:52	b4283	regex 有好幾種，不只 posix 和 pcre，不過那應該是玩笑 XD
2013-10-16 00:01:53	Yu_lin	leton: 的確沒幾個語言的 regex 可以比 perl 好用XD
2013-10-16 00:02:17	CindyLinz	scala 是 perl8 的網路蟑螂嗎? orz
2013-10-16 00:02:25	b4283	以前有看過一張對照表..
2013-10-16 00:04:38	CindyLinz	然後我很喜歡這個... s(\d+){ '#' x $& }ge
2013-10-16 00:04:49	b4283	http://www.greenend.org.uk/rjk/tech/regexp.html
2013-10-16 00:04:58	CindyLinz	想像 {...} 這一區比較長, 跨很多行的時候
2013-10-16 00:05:19	CindyLinz	這個 delimiter 我很喜歡, 還可以縮排什麼的 :p
2013-10-16 00:05:23	godfat	之前看過有人在講別再說 regular expression 不能 parse html
2013-10-16 00:05:24	godfat	因為.....等等等
2013-10-16 00:05:24	godfat	但我想說，既然你知道有些 "regular" expression 已經不是 regular grammar,
2013-10-16 00:05:24	godfat	那為什麼又要聲稱那是 "regular" expression, 且 regex 可以 parse context free grammar?
2013-10-16 00:05:33	CindyLinz	這我不知道 :Q
2013-10-16 00:05:57	letoh	那是一個叫做 "regular expression" 的 mini parsing language
2013-10-16 00:06:03	godfat	我是覺得用字還是精確一點比較好...
2013-10-16 00:06:08	CindyLinz	只不過... 如果只是 parsing 而已, 其實用處不太大.. 畢竟我們平常常要靠 side effect 做事情, 而不是直接丟出結果說 accept 或 reject
2013-10-16 00:06:55	godfat	ruby 用 gsub 的話是可以拿到每一段 match 的部份，
2013-10-16 00:06:55	godfat	要以之建 parse tree 應該不是不行，雖然我沒試過 XD
2013-10-16 00:06:59	CindyLinz	所以另外可以配合 (?{ 程式碼 }), 這樣可以 regex 走到一半的時候跑去裡面跑
2013-10-16 00:07:12	CindyLinz	就可以建 parsing tree 了..  (贏!)
2013-10-16 00:07:13	godfat	@@ 這個就厲害了... XD
2013-10-16 00:07:14	lambdabot	 這個就厲害了... XD
2013-10-16 00:07:22	CindyLinz	lambdabot: ...
2013-10-16 00:07:23	godfat	哇回音
2013-10-16 00:07:23	letoh	XDXD
2013-10-16 00:07:35	letoh	應聲蟲 lambdabot
2013-10-16 00:08:08	suhorng	XDDD
2013-10-16 00:08:11	CindyLinz	然後還有 (??{ 程式碼 }) 拿程式碼當場生出 regex 塞在這邊繼續用
2013-10-16 00:08:21	godfat	.........
2013-10-16 00:08:38	petercommand	甚麼叫context free grammar呀?
2013-10-16 00:08:38	letoh	godfat: 你快認輸，不然會一直跑出來 (誤
2013-10-16 00:08:54	godfat	輸了輸了，ruby 這些都做不到 XDDDDDD
2013-10-16 00:08:59	Yu_lin	lambdaboy XDDDD
2013-10-16 00:09:26	b4283	lambdaboy 好像大友克洋的什麼作品
2013-10-16 00:09:38	CindyLinz	驚! 回去重讀 man perlre, 多了好幾項東西, 標示是從 perl6 拿過來的
2013-10-16 00:10:10	CindyLinz	可以在 regex 裡面標什麼 (*ACCEPT) (*REJECT) 之類的.. 還沒細看它們要幹嘛...
2013-10-16 00:10:34	letoh	因為 perl6 一直沒辦法扶正，只好一點一點搬過去嗎? XD (怎麼感覺像什麼冬蟲夏草XD
2013-10-16 00:10:59	godfat	petercommand, context free grammar 出自這
2013-10-16 00:11:00	godfat	http://en.wikipedia.org/wiki/Chomsky_hierarchy
2013-10-16 00:11:00	godfat	簡單地說大部分程式語言都是 context free 的，
2013-10-16 00:11:00	godfat	只是 regular grammar 是沒辦法分析 context free
2013-10-16 00:11:15	Yu_lin	letoh: 聽起來像 python3 對 python2.7 的策略XD
2013-10-16 00:11:21	letoh	godfat: 你是指 formal 的定義吧
2013-10-16 00:11:37	letoh	Yu_lin: py2.7 沒救了  很多東西弄不回去XD
2013-10-16 00:11:45	CindyLinz	快要死掉了, 趕快生一個小孩, 取他的臍帶血來用.... (抖)
2013-10-16 00:11:52	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-16 00:12:06	letoh	Yu_lin: 連 future 都看不到
2013-10-16 00:13:00	letoh	忘了上次在哪看到一個討論串  有人問 regex 能不能弄出 html parser
2013-10-16 00:13:24	godfat	letoh, 嗯，有民間定義嗎？ XD
2013-10-16 00:13:39	godfat	CindyLinz, 這比喻.... XD
2013-10-16 00:13:48	letoh	有人就回說 "chuck norris can parse html" 之類的
2013-10-16 00:14:41	letoh	godfat: 嗯  我是想說有些語言的 regex 根本就不是在講 regex grammer 那些理論了，只是為了方便好用而弄出來的東西
2013-10-16 00:14:49	CindyLinz	godfat: 不就拆人家身上的器官來用 XD
2013-10-16 00:14:53	<--	Yu_lin (24ec145d@gateway/web/freenode/ip.36.236.20.93) has quit (Quit: Page closed)
2013-10-16 00:15:31	letoh	http://stackoverflow.com/questions/590747/using-regular-expressions-to-parse-html-why-not
2013-10-16 00:15:40	letoh	忘了是不是這一串
2013-10-16 00:16:11	CindyLinz	這應該算是個... spec 後來被亂改的血淋淋例子 XD
2013-10-16 00:16:17	CindyLinz	想當年真的是 regex 啊 XD
2013-10-16 00:16:46	godfat	letoh, 是那串沒錯。不過我是想說，還是改個名字，不要讓人誤會比較好.. 不然這個問題會變成每個人定義不同造成溝通麻煩..
2013-10-16 00:16:53	CindyLinz	上 compiler 課的時候教授一直提: 我說的是這個 regex, 你不要拿奇奇怪怪語言裡面的 regex 來講!
2013-10-16 00:17:15	godfat	啊啊，不過我記得好像還有其他幾篇
2013-10-16 00:17:35	letoh	相關的那幾篇我應該都有看過  就隨便挑一篇出來XD
2013-10-16 00:18:11	godfat	不過 perl6 真的這麼慘嗎？ ~.~
2013-10-16 00:18:12	godfat	是說慢慢 backport 回去好像也是不錯啦..
2013-10-16 00:20:31	CindyLinz	沒有人用, 開發團隊也叫大家別用, 然後 perl5 開發團隊的人也幾乎不在裡面... 這.....||
2013-10-16 00:21:24	godfat	叫大家別用是因為覺得還沒做好？可是這樣沒有做好的一天..
2013-10-16 00:21:28	CindyLinz	反正 perl5 也是器捐(pcre)行之有年了嘛 XD
2013-10-16 00:21:45	letoh	糟糕我也用過XD
2013-10-16 00:22:34	godfat	不知道 pcre encoding 支援如何？
2013-10-16 00:22:34	godfat	ruby 是用個叫 oniguruma (鬼車) 的東西，
2013-10-16 00:22:34	godfat	用這個是因為裡面支援很多種 encoding
2013-10-16 00:23:13	CindyLinz	man pcre 看是有 byte / UTF-8 / UTF-16
2013-10-16 00:23:18	godfat	不過我上次看，這好像沒怎麼在開發了
2013-10-16 00:23:18	godfat	ruby 已經是 fork 自己的版本了..
2013-10-16 00:23:34	godfat	了解
2013-10-16 00:25:30	CindyLinz	好奇怪...
2013-10-16 00:25:42	CindyLinz	我在這篇裡面有看到 perl8 的介紹 http://www.soimort.org/posts/152/
2013-10-16 00:26:06	CindyLinz	可是它文末有個 link 是到 scala
2013-10-16 00:26:15	CindyLinz	噢, 有人留言說真的就是 scala...
2013-10-16 00:26:19	suhorng	....!?
2013-10-16 00:26:24	suhorng	哪招
2013-10-16 00:26:32	CindyLinz	我剛剛看了一點點介紹想說這邊 type 列一大堆, 跟 perl 中心思想差異也太大
2013-10-16 00:27:04	CindyLinz	還不知道是 scala 的時候就覺得這不知哪來的新語言, 根本只是想吃 perl 這名字的豆腐....zz
2013-10-16 00:28:13	godfat	哈？所以 scala 一開始就是故意取名成 perl8?
2013-10-16 00:28:33	CindyLinz	中間看到他 demo 怎麼作輾轉相除法.. 心中就在想, 怎麼寫得這麼冗啊...
2013-10-16 00:28:44	CindyLinz	覺得回到 C 的感覺 orz
2013-10-16 00:29:50	godfat	唔唔，看起來只是別人惡搞而已
2013-10-16 00:30:22	CindyLinz	low!
2013-10-16 00:39:46	CindyLinz	來寫個 perl on jvm.. 你到我家來, 我到你家去!
2013-10-16 00:40:13	CindyLinz	(設定於 schedule 置底..)
2013-10-16 00:40:13	godfat	對喔，perl 有其他實作嗎？
2013-10-16 00:40:24	CindyLinz	沒聽說.. (苦惱)
2013-10-16 00:40:32	godfat	@@" 有點意外
2013-10-16 00:41:02	CindyLinz	完整的 perl 沒有能印出來的 bytecode @@"
2013-10-16 00:41:10	CindyLinz	只有 in-memory 的資料結構
2013-10-16 00:41:28	CindyLinz	可能當年沒有這種觀念 @@"
2013-10-16 00:42:29	godfat	有人想要做 perl 的另外實作嗎？
2013-10-16 00:42:58	CindyLinz	有 ActivePerl, Strawberry Perl
2013-10-16 00:43:21	CindyLinz	不知道他們是怎樣做的
2013-10-16 00:43:37	godfat	我以為 Active 系列就是搬到 windows 上而已？
2013-10-16 00:44:08	CindyLinz	可是它好像有怎樣特殊的 cpan..
2013-10-16 00:44:34	godfat	好像跟我想像的差很多...
2013-10-16 00:44:34	godfat	http://en.wikipedia.org/wiki/ActivePerl
2013-10-16 00:46:48	CindyLinz	jaiyalas 分享的: Haskell ASCII 3D wireframe animator
2013-10-16 00:46:54	CindyLinz	https://www.youtube.com/watch?v=Cw4xtmMMbXc
2013-10-16 00:46:59	godfat	他說也能用在 jvm 上耶？
2013-10-16 00:47:00	godfat	http://en.wikipedia.org/wiki/Rakudo_Perl_6
2013-10-16 00:47:00	CindyLinz	這什麼東西啦... XDDD
2013-10-16 00:47:23	CindyLinz	> "Perl_6" == "Perl"
2013-10-16 00:47:24	lambdabot	  False
2013-10-16 00:47:35	godfat	XDDDDD
2013-10-16 00:47:38	CindyLinz	@@ 你看你又查錯頁了
2013-10-16 00:47:38	lambdabot	 你看你又查錯頁了
2013-10-16 00:48:00	godfat	@@ 太慘了，眼盲
2013-10-16 00:48:00	lambdabot	 太慘了，眼盲
2013-10-16 00:48:07	godfat	@@ 真好用 XD
2013-10-16 00:48:07	lambdabot	 真好用 XD
2013-10-16 00:48:29	CindyLinz	哎唷, 沒人用的 perl6 搬上 jvm... 還是沒人在 jvm 上面用啊 ._.
2013-10-16 00:50:07	CindyLinz	不過如果實作這 3D Animator, 適合拿到 Functional Meetup 講.. XD
2013-10-16 00:50:22	CindyLinz	不知為什麼就很有喜感 XD
2013-10-16 00:51:25	godfat	...XD 先要做 2d 投影，然後還要做 ascii 投影
2013-10-16 00:52:03	CindyLinz	不知道為什麼它的 term title 在執行的時候一直 Main 和 sh 對跳...
2013-10-16 00:52:16	CindyLinz	他是用 system "echo" 跑的嗎 @__@"
2013-10-16 00:52:27	godfat	......那不是慢死 = =
2013-10-16 00:52:47	CindyLinz	還有 sleep!
2013-10-16 00:52:59	CindyLinz	我開始相信我的懷疑了....wwww
2013-10-16 00:53:29	godfat	我想起來我小時候做的遊戲畫面會閃，因為我每次都洗掉重畫
2013-10-16 00:53:35	CindyLinz	(Y)
2013-10-16 00:53:57	CindyLinz	啟動的時候還要用 sleep 作載入進度條..
2013-10-16 00:54:29	godfat	..................這...
2013-10-16 01:13:20	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-16 01:43:55	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-16 01:46:06	CindyLinz	godfat: 啊想到一件事.. 你之前有問說 LR parser 是不是 bottom-up 做的.. (應該是你問的吧!?)
2013-10-16 01:46:21	godfat	對 XD
2013-10-16 01:46:25	CindyLinz	我現在又在練習寫 parser, 發現這是真的
2013-10-16 01:46:36	godfat	@_@ 是喔... XD
2013-10-16 01:46:36	CindyLinz	不過不是在它實作的部分, 是寫語法的部分...
2013-10-16 01:46:36	lambdabot	 是喔... XD
2013-10-16 01:46:41	CindyLinz	呃.....
2013-10-16 01:47:11	CindyLinz	就是在寫 .y 語法的時候如果由下往上寫, 覺得是順的, 沒有 ambiguity 解不開的
2013-10-16 01:47:11	godfat	是說語法要想成從後面開始解析嗎？
2013-10-16 01:47:22	CindyLinz	那麼 LR parser 生出來大概就不會有 conflict
2013-10-16 01:47:34	CindyLinz	而寫 LL parser 的時候, 要由上往下寫, 才不會有 conflict
2013-10-16 01:47:49	godfat	聽起來這樣的差別就只剩下左右相反了
2013-10-16 01:47:51	CindyLinz	如果由上往下寫, 丟給 LR parser, 常會跑出沒想到的 conflict
2013-10-16 01:48:22	CindyLinz	寫 LR parser 的時候, 要先想: 什麼是字元 -> 什麼是整數 -> 什麼是 expression
2013-10-16 01:48:22	godfat	conflict 是指 ambiguous?
2013-10-16 01:48:26	CindyLinz	對
2013-10-16 01:49:07	CindyLinz	LL 的話是: 程式可以拆成什麼組成 -> expression 可以拆成什麼 -> 數字可以拆成什麼 -> ...
2013-10-16 01:50:01	CindyLinz	因為 LR parser 在跑的時候是在決定什麼時候可以 reduce 起來, 也就是這一群小東西什麼時候要組成一個大東西
2013-10-16 01:50:26	CindyLinz	無法決定要現在就組, 還是再多收集一點小東西的時候就是 conflict
2013-10-16 01:50:51	CindyLinz	LL 象是從語法樹去看: 可以切了嗎, 要往哪個 branch (切法) 走
2013-10-16 01:54:37	godfat	覺得還沒有很容易可以想像 XD
2013-10-16 01:54:37	godfat	不過根據我用 LL parser 的印象，
2013-10-16 01:54:37	godfat	大概就是想辦法把要遞迴的東西往後丟就是了
2013-10-16 01:54:58	CindyLinz	QQ
2013-10-16 01:55:11	CindyLinz	往後丟是?
2013-10-16 01:55:43	godfat	我最早是用 boost spirit, 那是 c++ template 的 LL(k) parser
2013-10-16 01:55:43	letoh	避免 left recursion 吧
2013-10-16 01:55:44	godfat	後來在看別人介紹 ANTLR, 好像也是 LL(k)
2013-10-16 01:55:44	godfat	現在 parsec 好像也是
2013-10-16 01:56:14	godfat	例如這個，用 parsec:
2013-10-16 01:56:15	godfat	pTerm :: Parser Double
2013-10-16 01:56:15	godfat	pTerm = try (pFactor <&> (char '*' *> pTerm) `using` (*))
2013-10-16 01:56:15	godfat	    <|> try (pFactor <&> (char '/' *> pTerm) `using` (/))
2013-10-16 01:56:15	godfat	    <|> pFactor
2013-10-16 01:56:32	godfat	pTerm := pFactor * pTerm
2013-10-16 01:56:45	godfat	實際上會想寫 pTerm * pTerm, 但不能那樣寫
2013-10-16 01:57:09	CindyLinz	喔喔
2013-10-16 01:57:11	monochrom	我愛用 LL :)
2013-10-16 01:58:29	CindyLinz	left recursion 從 conflict 的角度看, 就是 parser 不知道要走遞迴的 branch 還是不遞迴的 branch
2013-10-16 01:58:51	CindyLinz	parsec 作法是都 try 一次, 不過在作成自動機這種的作法就會直接是 conflict
2013-10-16 02:00:28	CindyLinz	pTerm := pTerm * pTerm 的寫法是額外加 priority 可以作... 它就是跟 parser generator 說, 這邊遇到 conflict 的時候請依怎樣怎樣的順序
2013-10-16 02:00:44	CindyLinz	畢竟寫成 pTerm * pTerm 看起來比較對稱舒服? :p
2013-10-16 02:02:16	godfat	沒錯，不過寫成 priority 感覺就笨笨的 ><
2013-10-16 02:02:16	godfat	我也沒寫過 XD
2013-10-16 02:02:16	godfat	印象中在 parsec 中寫出 left recursion 就是直接得到無窮 recursion...
2013-10-16 02:03:01	CindyLinz	欸.. 那指數 operator 要怎麼定義? @@    a ^ b ^ c ^ d
2013-10-16 02:03:22	CindyLinz	a ^ b ^ c ^ d = ((a^b)^c)^d
2013-10-16 02:03:54	CindyLinz	啊不對, parsec 直接就是程式了, 沒有這種考量 ._.
2013-10-16 02:04:15	CindyLinz	我在寫什麼 orz
2013-10-16 02:04:29	CindyLinz	把 ^ 改成 - 好了....||
2013-10-16 02:04:40	CindyLinz	a-b-c-d = ((a-b)-c)-d
2013-10-16 02:04:51	monochrom	嘻嘻
2013-10-16 02:05:13	CindyLinz	pTerm := pTerm - pFactor
2013-10-16 02:06:09	CindyLinz	這要怎麼寫啊 orz
2013-10-16 02:06:20	godfat	+ 和 - 是這樣，簡單地說就是全部都是不同 rule:
2013-10-16 02:06:20	godfat	pExpression :: Parser Double
2013-10-16 02:06:20	godfat	pExpression = try (pTerm <&> (char '+' *> pExpression) `using` (+))
2013-10-16 02:06:20	godfat	          <|> try (pTerm <&> (char '-' *> pExpression) `using` (-))
2013-10-16 02:06:20	godfat	          <|> pTerm
2013-10-16 02:06:41	godfat	pFactor 則是：
2013-10-16 02:06:42	godfat	pFactor :: Parser Double
2013-10-16 02:06:42	godfat	pFactor = pGroup <|> pNum
2013-10-16 02:07:03	godfat	我不知道在 LR 是不是只要反過來就可以了..?
2013-10-16 02:07:21	monochrom	可參考 chainl
2013-10-16 02:07:30	CindyLinz	用 happy / yacc 就會直接用 %left 和 %right 定義 operator 組合的順序 ._.
2013-10-16 02:08:08	godfat	完整程式 https://github.com/godfat/sandbox/blob/master/haskell/parsing/calculator.lhs
2013-10-16 02:08:15	 *	monochrom 去看 chainl 裏面又怎樣做
2013-10-16 02:08:49	godfat	是這個嗎？
2013-10-16 02:08:49	godfat	http://hackage.haskell.org/package/base-4.6.0.1/docs/Text-ParserCombinators-ReadP.html#v:chainl
2013-10-16 02:09:13	CindyLinz	godfat: 你貼的這個「完整程式」怎麼好像 latex @@"
2013-10-16 02:09:36	godfat	literal haskell, github 的顯示有點問題..
2013-10-16 02:09:41	CindyLinz	喔..
2013-10-16 02:10:11	godfat	看 raw 好了.. XD
2013-10-16 02:10:12	godfat	https://raw.github.com/godfat/sandbox/master/haskell/parsing/calculator.lhs
2013-10-16 02:10:29	monochrom	\begin{code} ... \end{code} 之內是給電腦看, 之外是給人看
2013-10-16 02:10:41	godfat	寫成這樣是因為不想加一堆 >>>>> 好累
2013-10-16 02:10:50	CindyLinz	godfat: 欸你這個減號, 不會是 a - b - c 變成 a - ( b - c ) 嗎? @@"
2013-10-16 02:11:06	monochrom	以及獲得 latex 支援 :)
2013-10-16 02:12:33	godfat	好問題耶，我試試 orz
2013-10-16 02:14:11	godfat	真的耶 XD 居然現在才被你點出來 = =...
2013-10-16 02:14:11	godfat	這都不知道幾年前寫的了 XDDDD
2013-10-16 02:14:43	CindyLinz	嗯 因為剛剛在想... left assoc 看起來最自然的 tree 長得就是 left recursion @@"
2013-10-16 02:15:43	godfat	有理，糟糕 XD 我好多都這樣寫...
2013-10-16 02:15:43	godfat	錯了幾年 = =... 不過這樣一時還真不知道怎麼改
2013-10-16 02:16:01	monochrom	可參考 chainl
2013-10-16 02:16:02	CindyLinz	chainl XD
2013-10-16 02:16:28	CindyLinz	看起來它還是用 right recursion
2013-10-16 02:17:08	CindyLinz	可是把左邊這項捏著, 然後從右邊拿出來的第一個東西跟它 bind
2013-10-16 02:17:11	CindyLinz	bind op
2013-10-16 02:17:34	CindyLinz	bind op 之後的結果, 再捏著, 交給下一層的遞迴
2013-10-16 02:20:55	CindyLinz	LR parser 的話... left recursion 是天性, right recursion 的話, 會比較沒效率, 到最後一項以前都會先積著.. 有 look ahead 的話, 可以知道哪一個點是尾巴, 可以從這邊把整個 tree reduce 掉
2013-10-16 02:21:49	CindyLinz	嗯, 兩個方向的 tree 都可以做
2013-10-16 02:28:54	godfat	大概想睡了，還沒看懂 chainr/chainl 想做啥... ~.~
2013-10-16 02:29:36	CindyLinz	等 MP 回滿了再來看 XD
2013-10-16 02:29:58	godfat	真的... orz
2013-10-16 02:29:58	godfat	睡啦，大家晚安 XD
2013-10-16 02:30:01	CindyLinz	晚安 ^^
2013-10-16 03:07:31	<--	hashcat (~hashcat@27.52.62.66) has quit (Ping timeout: 246 seconds)
2013-10-16 03:21:33	CindyLinz	耶~ 知道怎麼設定 cabal 讓它在 cabal build 的時候先去跑 happy 把 .y 生成 .hs 了 ^^
2013-10-16 03:22:43	CindyLinz	正在寫的 Haskell-Hass 裡面已經 git push 了這個, 還寫得很簡陋, 什麼錯誤檢查都沒去看, 不過以後有需要應該足夠當參考了 ^^
2013-10-16 04:01:32	-->	hashcat (~hashcat@27.52.62.66) has joined #haskell.tw
2013-10-16 04:05:20	CindyLinz	應用在 happy 的 %token 裡面... ViewPatterns 真是救星... QQ
2013-10-16 04:08:27	<--	hashcat (~hashcat@27.52.62.66) has quit (Ping timeout: 260 seconds)
2013-10-16 04:12:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-10-16 04:57:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-16 06:25:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-16 06:27:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-16 09:50:17	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 10:13:24	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 10:14:12	MnO2	http://www.reddit.com/r/haskell/comments/1oj2u4/fsf_recognizing_an_inspiring_woman_for_ada/
2013-10-16 10:14:23	MnO2	https://www.fsf.org/blogs/community/recognizing-an-inspiring-woman-for-ada-lovelace-day-audrey-tang
2013-10-16 10:15:35	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 10:17:00	MnO2_	au 太厲害了，啟發了 edward kmett
2013-10-16 10:19:13	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-10-16 10:57:02	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 10:58:26	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-16 12:17:31	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-16 13:29:25	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 13:57:05	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-16 14:02:03	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-10-16 14:03:26	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-10-16 14:56:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-16 15:01:13	-->	hashcat (~hashcat@114-47-126-13.dynamic.hinet.net) has joined #haskell.tw
2013-10-16 15:22:10	-->	Yu_lin (24ec14c0@gateway/web/freenode/ip.36.236.20.192) has joined #haskell.tw
2013-10-16 15:41:51	Yu_lin	看著 PL 的討論區，總覺得很多人很喜歡比喻，接下來就會有人說比喻不當趴拉趴拉的，結果這些人講的東西都跟原本的討論主題不太有關係.....
2013-10-16 15:42:53	CindyLinz	orz
2013-10-16 16:10:37	hashcat	http://en.wikipedia.org/wiki/False_analogy
2013-10-16 16:11:02	hashcat	要不把這個貼到公告或注意事項
2013-10-16 16:13:03	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2013-10-16 16:17:06	Yu_lin	我是在說 courses 的 PL 課討論區啦XD
2013-10-16 16:18:13	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 16:24:00	hashcat	??
2013-10-16 16:24:35	hashcat	貌似能討論的地方都能貼一下
2013-10-16 16:27:02	CindyLinz	覺得這邊人夠少, 還不需要這種規定, 討論起來比較沒有心理負擔
2013-10-16 16:30:45	hashcat	是某個人很少的地方
2013-10-16 16:33:42	CindyLinz	畢竟我們台灣人是比較依賴社會共識和群體和諧運作的社群啊 XD (large scale 的時候似乎是個缺點就是...||)
2013-10-16 16:34:38	hashcat	昨天才看個部落格說這是缺點
2013-10-16 16:35:58	hashcat	洋媒體記者寫controversial被當作是空話一句, 但台灣媒體說有爭議的時候卻像是很需要強調的點
2013-10-16 16:36:27	CindyLinz	我覺得群體人數少的時候是優點
2013-10-16 16:37:42	CindyLinz	日本應該更嚴重? 可是他們的巨型公司好像運作起來還是很厲害.... QQ
2013-10-16 16:37:52	hashcat	其實我覺得人少的時候更是缺點
2013-10-16 16:38:03	CindyLinz	一個人的時候呢?
2013-10-16 16:38:06	hashcat	因為人少的團隊通常更需要變動模式
2013-10-16 16:38:25	hashcat	一個人就自我批判吧
2013-10-16 16:38:30	CindyLinz	人少的團隊很容易大家都同意要一起變動呀~
2013-10-16 16:39:09	hashcat	變動之前總需要有人意見不同吧
2013-10-16 16:39:09	CindyLinz	這種模式的向心力很強的
2013-10-16 16:39:09	CindyLinz	人少不太會...
2013-10-16 16:39:31	CindyLinz	大約六到七個人以下, 不太會有這種現象.
2013-10-16 16:39:46	hashcat	啥嚜現象
2013-10-16 16:39:57	CindyLinz	意見不同互不溝通
2013-10-16 16:40:56	hashcat	我想的是, 意見不同加充分溝通, 最後行動一致
2013-10-16 16:41:13	CindyLinz	六到七這個數字是假設每一個人都很 active 的情況, 通常也是組成營利公司的情況
2013-10-16 16:41:25	Yu_lin	我先出門一趟，看看 F# 的書
2013-10-16 16:41:54	CindyLinz	如果有二三十人, 不過大家都不太有意見 (不是被禁聲那種, 是真的覺得怎樣都好), 那人可以多一點 :p
2013-10-16 16:41:55	hashcat	團隊少的時候客戶跟營利模式都不大會固定
2013-10-16 16:42:25	CindyLinz	意見不同加充分溝通, 最後行動一致 ← 這是群體和諧的運作方式呀
2013-10-16 16:42:42	hashcat	唉沒看過
2013-10-16 16:43:16	CindyLinz	XD
2013-10-16 16:43:27	CindyLinz	我剛好正身處其中 ^^
2013-10-16 16:44:04	CindyLinz	所以感覺比較正面一點 :p
2013-10-16 16:44:04	CindyLinz	不過我相信這模式大不了....
2013-10-16 16:44:04	CindyLinz	但是可以用階層式地來作
2013-10-16 16:44:22	CindyLinz	我猜想日式巨型公司是這樣作出來的.. 但是反應速度隨著層數增加, 就越來越慢了
2013-10-16 16:44:44	hashcat	把人當actor選擇p2p或server-client
2013-10-16 16:44:55	hashcat	不當類比
2013-10-16 16:45:01	CindyLinz	p2p 的公司應該不存在啊 ._.
2013-10-16 16:45:18	CindyLinz	g0v 這種應該算是 p2p XD
2013-10-16 16:45:19	hashcat	混合的貌似生存最好
2013-10-16 16:45:38	Yu_lin	p2p 的公司XD
2013-10-16 16:45:40	hashcat	瑞士最高階有聯邦7人委員會這樣
2013-10-16 16:46:01	CindyLinz	台式的就有點混合.. 美式和日式之間, 可是常常就沒有原則什麼時候依哪一系, 反而很慘
2013-10-16 16:46:14	hashcat	或者共匪說得多重領導
2013-10-16 16:46:32	CindyLinz	他們是把多重領導當成優點在講嗎? @@"
2013-10-16 16:46:35	hashcat	台灣不能參考
2013-10-16 16:47:03	hashcat	他們表面尊毛, 其實死都不想重蹈覆轍
2013-10-16 16:47:31	hashcat	才把某些人弄倒之後, 弄出一套多重領導
2013-10-16 16:48:00	hashcat	跟毛本身無關
2013-10-16 16:48:06	CindyLinz	台式就.. 又希望共識制的大家氣氛好, 又希望有制度制的反應速度快.. 有時候就偏成獨裁集權制, 來決定什麼時候走哪一邊 orz
2013-10-16 16:48:09	hashcat	單點錯誤
2013-10-16 16:49:06	hashcat	貌似扯遠了
2013-10-16 16:49:06	CindyLinz	XD
2013-10-16 16:49:06	CindyLinz	反正現在沒別話題... :p
2013-10-16 16:49:06	hashcat	好吧
2013-10-16 16:49:06	CindyLinz	拉回來一點好了....
2013-10-16 16:49:17	hashcat	那些也不是我自己想到的類比法
2013-10-16 16:49:26	hashcat	有數個奇怪的研究中心專門在做這種
2013-10-16 16:50:01	CindyLinz	data ManagerGroup = Individual | Group Int [ManagerGroup]
2013-10-16 16:50:08	hashcat	用actor model模擬小至細胞分子, 大至國家組織的集群
2013-10-16 16:50:22	hashcat	Haskell在這裡沒啥優勢
2013-10-16 16:50:46	CindyLinz	我這兩天想到可以用 class / instance 來作 dependent type 耶
2013-10-16 16:50:51	CindyLinz	weak dependent type XD
2013-10-16 16:50:59	CindyLinz	因為沒有 totality check
2013-10-16 16:51:18	CindyLinz	然後就可以限制那邊那個我寫成 Int 的數量要在 1~7 之間
2013-10-16 16:51:58	hashcat	我指的是擴展方面的問題
2013-10-16 16:52:29	CindyLinz	哪一個擴展呀?
2013-10-16 16:52:57	hashcat	像是java有jppf可以擴展成集群, 不同管理者不同網域都可以加入其計算資源管理
2013-10-16 16:53:22	CindyLinz	(我想, 這 channel 的情況, 就是等到有人說: 厚, 你們都聊這個好煩喔~ 的時候開始作點收斂吧)
2013-10-16 16:54:40	CindyLinz	我沒有想到要去模擬到行為的部分 :|
2013-10-16 16:55:17	hashcat	通常actor規則只有數條就已經能充分描述社會行為
2013-10-16 16:55:48	hashcat	感覺已經有阿西莫夫虛構的心理史學樣子
2013-10-16 16:56:58	CindyLinz	不會 ^^|
2013-10-16 16:57:18	hashcat	Haskell少了reflection的機制
2013-10-16 16:58:03	hashcat	要把一個計算任務遷移過去就多了很多工作
2013-10-16 16:59:11	CindyLinz	你不覺得摸 reflection 的部分有像另一層語言?
2013-10-16 16:59:13	hashcat	有函數能自我指涉
2013-10-16 16:59:25	hashcat	是有這感覺
2013-10-16 16:59:27	CindyLinz	GHC parser 用 haskell 實作, 其實你寫程式的時候去跟 GHC 本身的程式 link 在一塊的話, 你就能摸到 reflection 了呀
2013-10-16 16:59:47	CindyLinz	就是, 把 GHC 當 library, 而不只是個 tool 來用
2013-10-16 16:59:51	hashcat	可以想成無窮層語言, 上層支配下層
2013-10-16 16:59:52	CindyLinz	你就可以寫 ghci
2013-10-16 17:00:23	hashcat	就是我說的多很多工作
2013-10-16 17:01:07	hashcat	作這個python跟java也就那樣而已
2013-10-16 17:01:50	hashcat	而且也找不到編輯器能具象Haskell的那種Reflection法
2013-10-16 17:03:27	CindyLinz	封裝得太嚴了, lib author 沒想讓你 inspect 你就不准摸 :Q
2013-10-16 17:04:07	hashcat	其實Haskell是假的通用語言
2013-10-16 17:06:12	hashcat	看template haskell有沒發展吧
2013-10-16 17:07:27	hashcat	這特性要是完備的話, 根本可以變出各種語言掩蓋各種東西
2013-10-16 17:08:26	CindyLinz	在 template 裡面呼叫 FFI 去 system()... XD
2013-10-16 17:09:10	CindyLinz	我是不知道 template 有沒有限制要 pure, 限制了就用 hack 的 XD
2013-10-16 17:09:29	hashcat	template現在還是不安全特性
2013-10-16 17:09:50	CindyLinz	我覺得 template 這麼惡掉的東西, 就別假腥腥作什麼安全了 XD
2013-10-16 17:09:54	CindyLinz	惡搞的東西 :p
2013-10-16 17:10:06	hashcat	可以跨模組, 跨型別
2013-10-16 17:10:10	hashcat	執行不安全程序
2013-10-16 17:10:23	hashcat	根本是超級大漏洞
2013-10-16 17:10:35	CindyLinz	對啊, 後門都已經開了, 就不要再裝模作樣了 XD
2013-10-16 17:10:45	hashcat	用了Haskell全毀
2013-10-16 17:11:36	hashcat	但要是這些搞定, 還有語法看起來跟Haskell原本的樣子一致的話
2013-10-16 17:11:42	CindyLinz	Haskell 原本就沒有保證安全啊~ 隨時都可以 halt
2013-10-16 17:12:17	CindyLinz	只是想搞安全的時候 compiler 做了很多事, 最後幾步還是人力眼睛去看
2013-10-16 17:13:12	hashcat	這也是很大的劣勢, 我想到的方法會有機會讓其他資源插入執行奇怪的代碼
2013-10-16 17:14:08	CindyLinz	它是安全和寫起來不要吐血之間的一個折衷點不是嗎? @@"
2013-10-16 17:14:33	hashcat	所以最近比較沒管haskell, 就當作是一個學習的過程
2013-10-16 17:14:42	hashcat	不實用
2013-10-16 17:15:21	hashcat	只能說這範式有潛質
2013-10-16 17:15:34	CindyLinz	我會改變這現象.. (立志中..)
2013-10-16 17:16:50	hashcat	haskell的那種抽象法, 還是我最看好的
2013-10-16 17:17:10	hashcat	一個概念駕馭數種不同的東西
2013-10-16 17:17:26	CindyLinz	你指哪一個概念啊? @@"
2013-10-16 17:17:27	hashcat	被scala大量抄走
2013-10-16 17:17:54	hashcat	那些幾種比較常用的typeclass吧
2013-10-16 17:18:25	CindyLinz	class 的部分喔?
2013-10-16 17:19:42	hashcat	在其他語言不一樣的東西, 到了haskell就變成各種同一個typeclass
2013-10-16 17:19:42	hashcat	雖說比較反直覺就是
2013-10-16 17:19:42	hashcat	就看monad就好了
2013-10-16 17:19:54	CindyLinz	我喜歡這樣.. 在功能一樣, 如果能不增加太多麻煩, idiom 越少越好
2013-10-16 17:20:02	hashcat	backtrack, 例外處理什麼都是monad, 只要搞懂monad剩下都一樣
2013-10-16 17:20:28	hashcat	其他語言比較難想像這種狀況
2013-10-16 17:20:39	hashcat	scala可以噗噗
2013-10-16 17:20:44	CindyLinz	只是搞懂了 monad 以後, 其實什麼都還沒懂.... (遠目)
2013-10-16 17:21:00	CindyLinz	不對, 表錯情.. 應該是 (淚目)
2013-10-16 17:21:15	hashcat	只是用scala不會被強迫用那種模式, 結果變成java
2013-10-16 17:22:06	CindyLinz	haskell 可以有非常 reuse 的 reuse.. XD
2013-10-16 17:22:24	hashcat	光搞定函數的名稱和函數該滿足的規則,就很大件
2013-10-16 17:22:31	hashcat	你有沒用過scala
2013-10-16 17:22:48	CindyLinz	沒用過.. 只有昨天被 perl8 騙進去看介紹.....||
2013-10-16 17:23:01	CindyLinz	感覺很差.....||
2013-10-16 17:23:13	hashcat	scala 的 trait 混合界面跟typeclass
2013-10-16 17:23:52	hashcat	那種語法貌似確實是不太會給人好印象
2013-10-16 17:24:40	hashcat	省略地說就是Haskell混合Java
2013-10-16 17:25:15	hashcat	函數式跟物件導向式可以結合的概念, 在scala就會混合在一起了
2013-10-16 17:26:07	hashcat	typeclass & interface => trait
2013-10-16 17:27:18	hashcat	還有啥一時說不上來了
2013-10-16 17:27:52	hashcat	有人用這種類比把Haskell的東西一個一個移植過去
2013-10-16 17:29:10	hashcat	但那種彷java語法會讓高階函數等東西變難看
2013-10-16 17:29:10	hashcat	tradeoff
2013-10-16 17:29:11	hashcat	先下了
2013-10-16 17:29:28	<--	hashcat (~hashcat@114-47-126-13.dynamic.hinet.net) has quit (Quit: Leaving)
2013-10-16 17:49:46	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-16 17:55:10	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-16 17:57:41	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-10-16 17:59:46	Yu_lin	back
2013-10-16 18:00:06	Yu_lin	我就算能接受 ocaml 了，還是無法接受 F#
2013-10-16 18:20:51	godfat	我原本也有點想把 haskell 的東西搬到 scala 上
2013-10-16 18:20:51	godfat	看到也有不少人這樣做
2013-10-16 18:20:51	godfat	不過最後我還是只有這樣的結論：
2013-10-16 18:20:51	godfat	如果語言不夠像 haskell, 想模仿最終只會做出很難用的東西
2013-10-16 18:26:58	CindyLinz	(Y)
2013-10-16 18:27:59	CindyLinz	不是只要拿了兩把劍就能一個人使出玉女素心劍的..
2013-10-16 18:28:11	CindyLinz	(OS: 要本來夠笨才行)
2013-10-16 18:29:19	godfat	XDDD 還要兩隻手
2013-10-16 18:32:50	CindyLinz	兩隻手? ^^|  我講本來夠笨指的是很多東西都沒有, 所以有些招使出來不會纏住自己..
2013-10-16 18:34:06	godfat	我以為在說要夠笨才能用左右互搏 XD
2013-10-16 18:34:06	godfat	所以想說斷臂人也是不能用的 XD
2013-10-16 18:35:55	CindyLinz	喔.. XD
2013-10-16 18:37:46	Yu_lin	剛剛也覺得是因為斷臂不能用的 +1 XD
2013-10-16 18:38:20	CindyLinz	QQ
2013-10-16 18:51:17	Yu_lin	https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-prn1/q71/s720x720/994617_10153371491790228_579794236_n.jpg   路跑月入 300k（m）
2013-10-16 18:52:52	CindyLinz	XD
2013-10-16 18:54:48	godfat	正在順手把東西搬到 bitbucket 上
2013-10-16 18:54:49	godfat	感覺又比上次試還多了很多新東西
2013-10-16 20:06:28	<--	Yu_lin (24ec14c0@gateway/web/freenode/ip.36.236.20.192) has quit (Quit: Page closed)
2013-10-16 20:57:08	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-16 21:17:43	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 21:52:59	--	a2n is now known as a2n--
2013-10-16 21:53:15	--	a2n-- is now known as a2n_afk
2013-10-16 22:04:26	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-10-16 22:07:50	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-16 22:14:10	--	a2n_afk is now known as a2n
2013-10-16 22:19:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-16 22:29:10	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-10-16 22:54:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-16 23:06:37	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-16 23:07:29	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-10-16 23:41:02	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-16 23:45:00	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-17 00:00:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-17 00:38:28	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-17 01:49:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-17 02:49:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-10-17 08:34:21	-->	Yu_lin (24ec1346@gateway/web/freenode/ip.36.236.19.70) has joined #haskell.tw
2013-10-17 08:47:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-17 09:12:43	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 09:27:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-17 09:42:59	<--	Yu_lin (24ec1346@gateway/web/freenode/ip.36.236.19.70) has quit (Quit: Page closed)
2013-10-17 09:49:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-17 10:00:34	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 10:36:14	--	a2n is now known as a2n_afk
2013-10-17 11:04:32	favonia	@@ 該不會 lambda bot 認這個...
2013-10-17 11:04:33	lambdabot	 該不會 lambda bot 認這個...
2013-10-17 11:29:28	kanru	@@ XD
2013-10-17 11:29:28	lambdabot	 XD
2013-10-17 11:30:37	b4283	@@
2013-10-17 12:30:04	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-17 13:15:07	-->	YuLin (24ec15ed@gateway/web/freenode/ip.36.236.21.237) has joined #haskell.tw
2013-10-17 13:24:27	<--	YuLin (24ec15ed@gateway/web/freenode/ip.36.236.21.237) has quit (Quit: Page closed)
2013-10-17 16:00:23	godfat	perl11...
2013-10-17 16:00:23	godfat	http://perl11.org/
2013-10-17 16:03:15	CindyLinz	未看先猜又是騙人的 ._.
2013-10-17 16:04:10	CindyLinz	怎麼好像猜錯了... ._.
2013-10-17 16:04:10	godfat	一半吧.... -_-
2013-10-17 16:05:06	godfat	對了，參考 chainl 後寫成這樣... 好像不是很好懂 orz
2013-10-17 16:05:06	godfat	pTerm :: Parser Double
2013-10-17 16:05:06	godfat	pTerm = pFactor >>= rest
2013-10-17 16:05:06	godfat	  where rest x = (op <*> pure x <*> pFactor >>= rest) <|> pure x
2013-10-17 16:05:06	godfat	        op     = char '*' *> pure (*) <|> char '/' *> pure (/)
2013-10-17 16:11:06	CindyLinz	嗯嗯嗯
2013-10-17 16:11:50	CindyLinz	不過看過 chainl 了, 就沒那麼難懂了 :p
2013-10-17 16:12:48	godfat	然後我發覺雖然很多人會說用 applicative 比較好，
2013-10-17 16:12:48	godfat	但這邊似乎不用 >>= 就沒辦法在有錯誤發生時終止
2013-10-17 16:12:48	godfat	單用 applicative 會無窮遞迴 @@
2013-10-17 16:12:48	godfat	是喔，那就好 XD
2013-10-17 16:15:25	CindyLinz	單用 applicative 應該是就失去了 short circuit 的效果, 每個 branch 都一定要去試一遍?
2013-10-17 16:16:23	godfat	根據運作效果，我是這樣猜的，只是我暫時沒有細看底層實作確認原因 @@
2013-10-17 16:16:51	godfat	概念不好，只能看 source 理解具體狀況，哭哭
2013-10-17 16:22:57	CindyLinz	欸.....
2013-10-17 16:23:09	CindyLinz	在想如果你依然是寫成 left recursion
2013-10-17 16:23:25	CindyLinz	只是先試沒有 recursion 的 branch
2013-10-17 16:24:06	CindyLinz	用 MonadPlus 而不是 Alternative
2013-10-17 16:24:30	CindyLinz	而且最後不能是 [] 這種 Monad.. :p
2013-10-17 16:25:02	CindyLinz	這樣如果輸入是正確的 expression, 就應該還是可以用
2013-10-17 16:25:17	CindyLinz	但如果輸入是壞的, 那就會無窮遞迴這樣
2013-10-17 16:29:46	godfat	你的意思是如果是寫成
2013-10-17 16:29:47	godfat	pTerm := pTerm * pFactor `mplus` pTerm / pFactor 這樣嗎？
2013-10-17 16:31:24	CindyLinz	不是
2013-10-17 16:32:14	CindyLinz	pTerm := pFactor `mplus` pTerm * pFactor `mplus` pTerm / pFactor
2013-10-17 16:32:27	CindyLinz	最前面一定要先放只有 pFactor, 沒有遞迴的版本
2013-10-17 16:32:43	CindyLinz	讓它先試不遞迴的作法, 如果不遞迴的會成功, 那就不要再去試遞迴的
2013-10-17 16:33:54	godfat	這樣不算 right recursion 嗎？
2013-10-17 16:36:38	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 16:39:07	CindyLinz	這不是啊
2013-10-17 16:39:24	CindyLinz	right recursion 是把 pTerm * pFactor 換成 pFactor * pTerm 吧
2013-10-17 16:39:59	CindyLinz	chainl 就是 right recursion
2013-10-17 16:40:17	CindyLinz	它一定讓 pFactor 去 match 左邊, 然後再用 rest 去 match 右邊
2013-10-17 16:40:46	CindyLinz	只是自己再去重組 match 出來的結果, 使得 chainl return 回去的結果看起來是 left recursion
2013-10-17 16:45:09	godfat	嗯嗯，不過這句話：
2013-10-17 16:45:09	godfat	: 在想如果你依然是寫成 left recursion
2013-10-17 16:45:09	godfat	: 只是先試沒有 recursion 的 branch
2013-10-17 16:45:09	godfat	那什麼情況下是 left recursion 但是先試 pFactor? @@
2013-10-17 16:45:37	CindyLinz	就 `mplus` 的實作呀
2013-10-17 16:45:54	CindyLinz	我想應該都會先試 `mplus` 左邊的吧
2013-10-17 16:46:12	CindyLinz	只是像 [] 這種 MonadPlus 應該試完左邊以後無論成功與否, 都還是會去試右邊的
2013-10-17 16:46:22	godfat	喔喔，所以是上面這行：
2013-10-17 16:46:22	godfat	: pTerm := pFactor `mplus` pTerm * pFactor `mplus` pTerm / pFactor
2013-10-17 16:46:25	CindyLinz	Maybe 的話應該只要遇到成功就停了
2013-10-17 16:49:41	godfat	我試試看好了 XD
2013-10-17 16:51:38	godfat	看了一下 Alternative
2013-10-17 16:51:38	godfat	不過我程式裡的 <|> 不是 applicative functor 的 Alternative,
2013-10-17 16:51:38	godfat	是 parsec 提供的，可能是 monadic 的
2013-10-17 17:13:12	godfat	試來試去，覺得最終其實還是看實作 :o
2013-10-17 17:13:13	godfat	parsec 的 mplus 好像就是 <|> 嘛...
2013-10-17 17:13:13	godfat	這樣右邊對了，左邊就不會做了...
2013-10-17 17:14:27	CindyLinz	最終的確是看實作
2013-10-17 17:14:47	CindyLinz	class 有提供一點點限制, 讓你可以去稍微預期一下可能的實作
2013-10-17 17:15:38	godfat	我左右講反... orz
2013-10-17 17:15:38	godfat	左邊對了，右邊就不會做了
2013-10-17 17:15:49	CindyLinz	例如說它是 Alternative 的話, 這 class 的限制會讓它右半沒辦法等拿到左半的結果來決定 binding 的形狀
2013-10-17 17:16:13	CindyLinz	因為左半的結果不會在它決定 binding 前就給他
2013-10-17 17:16:29	CindyLinz	monad 的話就可以, 但是他還是可能會選擇不用..
2013-10-17 17:16:54	godfat	嗯嗯.... 結果還是讀 source 才是王道（咦
2013-10-17 17:20:22	CindyLinz	godfat: 等等.. 我覺得我剛剛講的可能是錯的
2013-10-17 17:20:30	CindyLinz	先不要記住好了...
2013-10-17 17:20:52	godfat	XDDDDD ok
2013-10-17 17:20:56	CindyLinz	在 MonadPlus 和 Alternative, 還有 short circuit 與否的部分
2013-10-17 17:21:16	CindyLinz	我心中想的模型可能是在講 Arrow...
2013-10-17 17:22:27	CindyLinz	Alternative 的各 branch 之間應該可以透過 side-effect 溝通, 所以還是可以 short circuit.. (思考中..)
2013-10-17 17:22:29	godfat	老實說我現在想忘記 arrow XD
2013-10-17 17:22:29	godfat	或是僅僅把他當成裡面有一些方便的 function...
2013-10-17 17:22:29	godfat	像是我有時候會想要這種東西：
2013-10-17 17:22:29	godfat	<f, g> a b = (f a, f b)
2013-10-17 17:22:29	godfat	感覺 arrow 裡會有類似的東西
2013-10-17 17:23:02	godfat	Alternative 不是 applicative functor 的東西？還沒到 monad?
2013-10-17 17:23:02	CindyLinz	想忘記 Arrow 是怎樣... 很不好的回憶嗎 orz
2013-10-17 17:23:17	godfat	也不是，覺得那是一個平行世界的感覺 @@
2013-10-17 17:23:24	CindyLinz	對, Applicative-Alternative / Modad-MonadPlus
2013-10-17 17:24:10	godfat	這樣 Alt 會有 side-effect?
2013-10-17 17:24:10	CindyLinz	到底能不能用 side-effect 溝通呢... (混亂了)
2013-10-17 17:24:36	CindyLinz	應該是這樣:
2013-10-17 17:24:49	CindyLinz	看底下實作的人怎麼給你, 它想給你你就可以有
2013-10-17 17:25:04	CindyLinz	可以這樣想: MonadPlus 都可以拿來當 Alternative 用
2013-10-17 17:26:00	CindyLinz	呃.. 好像也不用先看 MonadPlus XD
2013-10-17 17:26:20	CindyLinz	這樣說好了, 底下的實作者可以拿到你每一串 branch 的結果
2013-10-17 17:26:30	CindyLinz	他可以依此決定要不要去別的 branch 跑
2013-10-17 17:26:36	CindyLinz	而如果是 Monad 的話
2013-10-17 17:26:47	CindyLinz	就算他沒有拿 branch 的結果來作決定
2013-10-17 17:27:17	CindyLinz	你總是可以用 Monad action 天生就有的 a -> m b 的這個 a 作為內線溝通的手段
2013-10-17 17:27:54	CindyLinz	而如果是 Alternative 的話, 你就只能全依賴底層了
2013-10-17 17:28:55	godfat	聽起來就是自己實作 MonadPlus 跟 Alternative 的差別
2013-10-17 17:28:55	godfat	玩 MonadPlus 因為本身就保證有 Monad 了，所以可以惡搞
2013-10-17 17:28:55	godfat	但 Alternative 只保證 Applicative, 所以能惡搞的程度就有限了
2013-10-17 17:29:16	CindyLinz	對, Alternative 給實作者的自由度比較大, 給使用者的限制比較大
2013-10-17 17:30:06	godfat	感覺最後還是實作者要自由心證..... XD
2013-10-17 17:30:44	godfat	我之前有寫個 monad, 用 quickcheck 檢查 monad law 和 functor law
2013-10-17 17:30:44	godfat	都有過，不過檢查很慢... XD
2013-10-17 17:30:51	CindyLinz	那前面講 left recursion 那些, 其實不用強調要是 MonadPlus 而不是 Alternative, 因為我們其實沒有拿那個 \a 作判斷, 所以其實也只有用到 alternative 的部分
2013-10-17 17:31:09	CindyLinz	quickcheck... 那不是 test case 給少一點就快了 :p
2013-10-17 17:32:23	CindyLinz	利用 MonadPlus 的作法應該是, 先拿出左半的結果, 然後發現它已經成功了, 就讓右半直接 pass.. ^^
2013-10-17 17:34:08	godfat	不過名字上有 Plus 卻可能忽略右邊的效果，感覺好怪呀 @_@
2013-10-17 17:34:08	godfat	我的想像會是假設 a `mplus` b $ c 的話，
2013-10-17 17:34:08	godfat	應該給我 [c >>= a, c >>= b]
2013-10-17 17:34:08	godfat	test case 給少...... XD
2013-10-17 17:35:00	godfat	嘛，不過也有用 + 表示 sum 表示 |
2013-10-17 17:35:00	godfat	好像也不用那麼在意名字|||
2013-10-17 17:36:17	CindyLinz	如果是 MonadPlus Maybe, 最後也只能有一個結果啊
2013-10-17 17:36:46	godfat	啊啊，說得也是，我想錯層次了
2013-10-17 17:37:11	CindyLinz	然後它根本就是 pure 的, 右半執行過以後的結果如果不給出來... side effect 也不會有, 好空虛的一生 XD
2013-10-17 17:37:34	godfat	XD
2013-10-17 18:22:14	-->	caasih (~caasiHuan@42.79.111.209) has joined #haskell.tw
2013-10-17 18:49:28	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-17 18:51:44	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-17 19:24:39	-->	hashcat (~hashcat@27.247.26.242) has joined #haskell.tw
2013-10-17 19:52:30	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-10-17 19:58:54	mno2	看了 godfat 的新文章，突然覺得會在意 PL 好像跟在意耳機有點像 xD
2013-10-17 20:13:32	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-17 20:40:39	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-17 20:54:02	<--	caasih (~caasiHuan@42.79.111.209) has quit (Quit: leaving)
2013-10-17 20:57:06	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-10-17 21:30:20	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 21:56:14	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-17 21:57:09	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-10-17 22:16:12	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-17 22:16:45	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 22:21:32	--	a2n_afk is now known as a2n
2013-10-17 22:24:36	--	a2n is now known as a2n_afk
2013-10-17 22:36:59	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 23:19:12	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-17 23:19:12	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-17 23:26:53	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-17 23:40:43	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-18 00:11:26	-->	caasih (~caasiHuan@114-46-141-34.dynamic.hinet.net) has joined #haskell.tw
2013-10-18 00:43:10	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-18 01:16:30	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-18 01:36:29	godfat	XDDD 我好久沒動我的耳機系統了 @@
2013-10-18 01:53:53	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-18 01:54:14	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 264 seconds)
2013-10-18 02:55:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-18 03:01:18	<--	caasih (~caasiHuan@114-46-141-34.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-18 03:29:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-18 03:33:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-18 04:07:21	<--	hashcat (~hashcat@27.247.26.242) has quit (Ping timeout: 268 seconds)
2013-10-18 07:10:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-18 09:52:47	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 10:40:30	--	a2n_afk is now known as a2n
2013-10-18 10:44:53	-->	Yu_lin (24ec1381@gateway/web/freenode/ip.36.236.19.129) has joined #haskell.tw
2013-10-18 10:46:01	Yu_lin	https://gist.github.com/miyagawa/290978
2013-10-18 10:46:18	Yu_lin	在看 evolution of a ??? programmer
2013-10-18 10:46:41	Yu_lin	Perl 的 Regex 版.....Orz||| 看不懂
2013-10-18 10:48:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-18 10:52:07	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 11:29:40	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-18 13:09:40	-->	caasih (~caasiHuan@114-46-141-34.dynamic.hinet.net) has joined #haskell.tw
2013-10-18 13:42:55	<--	caasih (~caasiHuan@114-46-141-34.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-18 14:04:10	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-10-18 14:06:58	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 14:23:17	<--	Yu_lin (24ec1381@gateway/web/freenode/ip.36.236.19.129) has quit (Ping timeout: 250 seconds)
2013-10-18 14:43:32	CindyLinz	結果那天找了半天要搜尋 ByteString 裡面的 */ 的功能
2013-10-18 14:43:40	CindyLinz	要丟掉了 orz
2013-10-18 14:44:36	CindyLinz	因為 sass 裡面 字串 (".." / '..') 裡面可以有 interpolation #{..}, 然後 interpolation 裡面可以有任意 expression
2013-10-18 14:45:08	CindyLinz	所以字串還是丟到 parser 裡面認比較方便
2013-10-18 14:45:16	CindyLinz	不是 regular language 了
2013-10-18 14:45:39	CindyLinz	然後, 字串裡面有可能出現長得像 /* ... */ 的東西, 得被視為字串的一部分
2013-10-18 14:45:55	CindyLinz	所以也就不能直接用 regular language 把註解抓出來了
2013-10-18 14:46:42	CindyLinz	它們通通要丟到 parser 裡處理了 = 3=
2013-10-18 14:47:54	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 15:11:51	-->	hashcat (~hashcat@27.247.26.242) has joined #haskell.tw
2013-10-18 15:46:39	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 16:32:16	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-ywtyifpbylietman) has quit (Ping timeout: 245 seconds)
2013-10-18 17:08:26	CindyLinz	不過.. 用 context free grammar 寫這種: 除了 * 以外的所有符號.. 真是惡夢 orz
2013-10-18 17:10:02	CindyLinz	有時候要「除了 * 以外所有符號」, 寫一遍已經很不開心了.. 然後馬上又要「除了 / 以外所有符號」.... orz
2013-10-18 17:11:08	CindyLinz	如果能讓 lexer 來做... 然後我 parser 一邊走, 一邊可以去開關 lexer 的狀態, 跟它說, 現在開始進入註解模式, 現在開始進入字串模式 就好了 @@"
2013-10-18 17:11:34	CindyLinz	Happy 有 Monad 模式的 lexer, 可以跟 parser 串起來用
2013-10-18 17:12:30	CindyLinz	可是, 這種用法它的設計會黏死 parser 使用 lexer 的方式
2013-10-18 17:13:17	CindyLinz	而我想在這個 .y 裡面同時寫兩三個不同的 parser, 只有其中一種要去直接使用 lexer, 其他的想直接吃 token list, 不要使用這一個 lexer.. @@
2013-10-18 17:15:04	CindyLinz	拆成兩三個 .y 檔的話, 可以用自己的方式黏 parser+lexer, 不過有很多根本一模一樣的 token 描述就要重貼一遍....
2013-10-18 17:18:05	CindyLinz	不過.. 反正 .y 是用來產生 .hs 的東西... 我也可以弄一個用來產生 .y 的東西.... ww
2013-10-18 17:44:26	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-18 18:29:08	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-ccjkrtaujqcgbycg) has joined #haskell.tw
2013-10-18 18:51:13	mno2	http://www.haskellcast.com/episode/001-edward-kmett-on-lenses/    edward kmett 有提到他想設計他自己的語言，結果越寫越被說像 perl 6，結果就跑去看 perl 6，當時僅有的實作是 pugs，然後 pugs 是 haskell 寫的，因此就認識了 Haskell
2013-10-18 18:54:19	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-18 19:26:37	<--	hashcat (~hashcat@27.247.26.242) has quit (Ping timeout: 293 seconds)
2013-10-18 19:41:52	CindyLinz	(Y)
2013-10-18 19:42:19	CindyLinz	那他的語言後來如何了咧?
2013-10-18 19:46:09	-->	hashcat (~hashcat@27.247.26.242) has joined #haskell.tw
2013-10-18 21:26:08	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 260 seconds)
2013-10-18 21:26:49	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 21:33:21	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-10-18 21:34:13	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 21:39:08	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-10-18 21:39:32	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-18 21:40:35	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Client Quit)
2013-10-18 21:48:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-18 22:13:06	-->	suhorng (~suhorng@118-166-51-19.dynamic.hinet.net) has joined #haskell.tw
2013-10-18 22:19:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-18 23:16:09	-->	YU_LIN (24ec1381@gateway/web/freenode/ip.36.236.19.129) has joined #haskell.tw
2013-10-18 23:34:08	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-18 23:43:57	<--	YU_LIN (24ec1381@gateway/web/freenode/ip.36.236.19.129) has quit (Quit: Page closed)
2013-10-18 23:57:32	suhorng	racket的debian安裝檔是個 77MB 的 .sh 檔(可執行!), 這到底是什麼樣的概念....XD
2013-10-18 23:58:10	suhorng	把 .tar.gz 接在後面到底是怎樣啦XDDDDD
2013-10-18 23:59:30	letoh	很常見啊
2013-10-19 00:00:08	letoh	例如.. nvidia driver 的 installer 也是類似的東西  還有遇過幾個商業軟體也是這種裝法
2013-10-19 00:01:58	suhorng	真是神秘XD shell script 裡面到底可以塞什麼東西......... exit 之後東西就隨便你放!
2013-10-19 00:02:51	letoh	類似 sfx 檔? http://en.wikipedia.org/wiki/Self-extracting_archive
2013-10-19 00:03:05	suhorng	算是
2013-10-19 00:03:21	CindyLinz	77MB 的 .sh 檔!
2013-10-19 00:03:24	letoh	嗯  習慣就好XD
2013-10-19 00:03:38	suhorng	但如果用 python 這類的 shell 就不算能這樣了吧...XD
2013-10-19 00:04:13	letoh	什麼意思  應該可以吧?
2013-10-19 00:04:13	letoh	也許要用 data="""...""" 之類的
2013-10-19 00:04:13	suhorng	這樣不是變成要把檔案編碼嗎?
2013-10-19 00:04:13	suhorng	喔喔
2013-10-19 00:04:28	CindyLinz	重點是.. 如果那 77MB 意義上都是紮紮實實的程式碼, 不是多媒體資料的話, 真的是很恐怖啊 @@"
2013-10-19 00:04:47	letoh	我遇過壓縮檔將近 200MB 的
2013-10-19 00:04:55	suhorng	letoh: 什麼魔術...
2013-10-19 00:04:56	letoh	不過其實編譯完才幾十 MB...
2013-10-19 00:05:18	letoh	那個 build system 可以客製一堆功能  我還沒試過全部編譯進來
2013-10-19 00:07:25	CindyLinz	perl 檔在 __DATA__ 之後也是可以隨便放東西, 然後在前面的程式裡面可以用 open my $file, <DATA>; 來讀取後面這一塊的內容 @@"
2013-10-19 00:07:39	letoh	很實用的設計XD
2013-10-19 00:08:13	letoh	根本就 linker script XD
2013-10-19 00:08:58	CindyLinz	Inline::CPP 的使用法, 有一種就是把程式碼寫在最後面 __CPP__ 裡面, 如果整個程式幾乎都是 C 的話, 可以把 vim syntax 設成 c.. XD
2013-10-19 00:09:07	suhorng	CindyLinz: 不愧是perl
2013-10-19 00:09:26	hashcat	http://megastep.org/makeself/
2013-10-19 00:10:15	CindyLinz	hashcat: 教學文! XD
2013-10-19 00:10:51	hashcat	不算是吧
2013-10-19 00:11:27	hashcat	不過就我所知是無數.sh的幕後首腦
2013-10-19 00:11:42	letoh	XDXD
2013-10-19 00:13:21	letoh	遇過一些都是取名 xxx.bin  其實裡面就是這種東西
2013-10-19 00:15:30	suhorng	www
2013-10-19 00:15:54	suhorng	說到壓縮 讓我想到解壓縮以後還是自己的壓縮檔
2013-10-19 00:16:05	suhorng	#1HZT1a_u (LPH66) [ptt2.cc]
2013-10-19 00:16:10	suhorng	http://research.swtch.com/zip
2013-10-19 00:17:14	letoh	壓縮 quine ? XD
2013-10-19 00:17:18	monochrom	真可怕 XD
2013-10-19 00:17:22	letoh	zip quine ?
2013-10-19 00:18:25	suhorng	zip quine, tgz quine, .gz quine XD
2013-10-19 00:18:36	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-19 00:18:46	hashcat	不動點
2013-10-19 00:18:53	suhorng	:p
2013-10-19 00:19:13	hashcat	解壓算法的不動點
2013-10-19 00:19:38	hashcat	quine自身產生自身
2013-10-19 00:20:18	hashcat	跟得要經過解壓算法的輸出意義差有點遠
2013-10-19 00:20:40	suhorng	也是啦...w
2013-10-19 00:21:10	suhorng	就像今天看到一個"程式" http://mamememo.blogspot.no/2010/09/qlobe.html
2013-10-19 00:21:21	suhorng	跑八次後會回來 (地球儀轉一圈)
2013-10-19 00:21:43	suhorng	就..自己可以跑的比較有趣(?)
2013-10-19 00:21:53	monochrom	太可怕了 XD
2013-10-19 00:26:25	hashcat	好邪惡的東西
2013-10-19 00:26:43	CindyLinz	解不開的 r.gz (Y) # http://swtch.com/r.gz
2013-10-19 00:31:02	suhorng	The nice thing about r.gz is that even broken web browsers that ......" Orz
2013-10-19 00:31:51	CindyLinz	!
2013-10-19 00:32:00	CindyLinz	還好我是用 wget 下載下來 gunzip?
2013-10-19 00:32:25	suhorng	hashcat: 其實我在想, 壓縮檔勉強也算是某種程式語言XD? 那解壓縮程式就是interpreter了
2013-10-19 00:33:35	monochrom	壓縮檔未算程式. 但不動點始終是有趣的.
2013-10-19 00:33:55	suhorng	um, 不知道真的有什麼browser會去自動解壓 .gz 嗎...@@
2013-10-19 00:33:58	CindyLinz	不動點始終是有趣的.... wwww
2013-10-19 00:34:01	hashcat	壓縮檔語言應該是寫不出無窮迴圈吧
2013-10-19 00:34:44	hashcat	也沒有輸出入之類
2013-10-19 00:34:52	suhorng	對喔
2013-10-19 00:34:56	suhorng	不動點!
2013-10-19 00:35:36	CindyLinz	解壓縮應該就是 iterate 一次..
2013-10-19 00:47:52	<--	suhorng (~suhorng@118-166-51-19.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-19 01:11:41	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-19 02:13:39	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-19 08:10:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-10-19 08:13:06	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-19 08:32:03	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-19 08:39:26	-->	b4283 (~b4283@36.238.226.58) has joined #haskell.tw
2013-10-19 09:42:51	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-19 10:58:19	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-19 12:04:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-10-19 12:10:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-19 12:31:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-10-19 12:38:37	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-19 12:42:33	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Client Quit)
2013-10-19 13:13:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-19 13:18:32	-->	suhorng (~suhorng@118-166-51-19.dynamic.hinet.net) has joined #haskell.tw
2013-10-19 13:19:18	suhorng	Scheme的append這種不定參數的程式要怎麼實作阿？
2013-10-19 13:19:46	suhorng	該不會是 (define append (lambda (xs . xss) ..... (apply append xss)) 這樣直接用apply吧...
2013-10-19 13:22:08	suhorng	嗚 好像真的是這樣
2013-10-19 13:22:22	letoh	http://srfi.schemers.org/srfi-16/srfi-16.html  ?
2013-10-19 13:23:02	suhorng	case-lambda?
2013-10-19 13:24:11	suhorng	我原本是想說有沒有 (function x1 x2 . xs) 這種語法XD
2013-10-19 13:24:31	letoh	你要的可能是 rest 這種東西?
2013-10-19 13:26:17	suhorng	喔喔XD MIT Scheme有這個extension!
2013-10-19 13:26:51	letoh	有的會有類似 rest 或是 optional 之類的東西可以用  實作起來應該簡單一點
2013-10-19 13:34:13	suhorng	感覺比apply開心多了 XDD
2013-10-19 14:56:07	<--	suhorng (~suhorng@118-166-51-19.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-19 15:10:21	CindyLinz	haskell 應該是用 class 生出一整排這種函數..
2013-10-19 15:10:43	CindyLinz	不過呼叫的時候要手動放結尾
2013-10-19 15:16:11	<--	hashcat (~hashcat@27.247.26.242) has quit (Ping timeout: 248 seconds)
2013-10-19 16:13:59	CindyLinz	練習了一下 https://github.com/CindyLinz/CodeSnippet/blob/master/haskell/VarArg.hs
2013-10-19 16:14:13	CindyLinz	prt $ 3 <$> 4 <$> 'a' <$> Endl
2013-10-19 16:14:24	CindyLinz	如果能把夾在中間的 <$> 去掉就更好了 @@"
2013-10-19 16:54:24	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-19 17:07:56	-->	hashcat (~hashcat@27.247.26.242) has joined #haskell.tw
2013-10-19 17:13:08	-->	Yu_lin (24ec1646@gateway/web/freenode/ip.36.236.22.70) has joined #haskell.tw
2013-10-19 17:13:12	Yu_lin	http://helloworldquiz.com/#/game
2013-10-19 17:13:20	Yu_lin	從 hello world 猜程式語言
2013-10-19 17:13:45	Yu_lin	只要這程式語言有 class 的我都錯Orz|||
2013-10-19 17:14:13	MnO2	http://www.reddit.com/r/programming/comments/1oi8wd/ruby_is_a_dying_language/ccs8yr8  這戰文還蠻有條有理的~ 雖然標題殺人。
2013-10-19 17:14:54	letoh	Yu_lin: 剛好看到正在玩XD
2013-10-19 17:15:25	Yu_lin	XD
2013-10-19 17:16:08	petercommand	Yu_lin: 好多冷門語言= =
2013-10-19 17:16:12	letoh	有些題目超賊...
2013-10-19 17:17:02	Yu_lin	真的，有些題目（看向某題）
2013-10-19 17:17:05	hashcat	一下就死了
2013-10-19 17:17:30	petercommand	連Shakespear都出來了...
2013-10-19 17:17:53	letoh	錯一題了XD
2013-10-19 17:18:04	CindyLinz	MnO2: ruby 再次被 rails 拉下水了.. XD
2013-10-19 17:19:13	MnO2	讓我想起 yinwang 說的戴帽子程式結果卻碰到有人沒有頭
2013-10-19 17:21:09	MnO2	那遊戲好多語言聽都沒聽過...
2013-10-19 17:21:27	petercommand	有一個好多lol就選lolcode結果錯了XD
2013-10-19 17:21:34	Yu_lin	只要不是物件導向的語言，其實都蠻好分辨的XD
2013-10-19 17:21:39	letoh	1600 XD
2013-10-19 17:21:59	letoh	petercommand: 那題我也被騙XD
2013-10-19 17:22:10	MnO2	還有 lolcode 這種語言 xD
2013-10-19 17:22:29	petercommand	XD
2013-10-19 17:23:44	MnO2	跟 CindyLinz 介紹的 happy 有異曲同工之妙。所以 error function 會寫成 GG 嗎？ xD
2013-10-19 17:24:04	CindyLinz	XD
2013-10-19 17:24:30	CindyLinz	以前好像 clkao 寫了個 XD library
2013-10-19 17:24:35	CindyLinz	後來就無法維護了....
2013-10-19 17:24:45	CindyLinz	因為檔案開起來就會開始狂笑.......
2013-10-19 17:24:47	petercommand	XDXDXD
2013-10-19 17:25:03	Yu_lin	XDDDDD
2013-10-19 17:25:26	petercommand	XXXXXXXD
2013-10-19 17:26:41	CindyLinz	隱隱覺得這是個重要特性... # 17:21 < Yu_lin> 只要不是物件導向的語言，其實都蠻好分辨的XD
2013-10-19 17:27:09	<--	b4283 (~b4283@36.238.226.58) has quit (Quit: Leaving)
2013-10-19 17:34:22	letoh	第二次又遇到一堆不認識的語言，不過這次猜到 2300 了
2013-10-19 17:35:45	letoh	languages count 70 是說裡面只整理了 70 種嗎?
2013-10-19 17:37:58	Yu_lin	最高有人玩到 7k，這是全猜對嗎？XD
2013-10-19 17:39:15	letoh	不 google 可以玩到 7k ?
2013-10-19 17:40:05	Yu_lin	我不 google 只能玩到 3k，不知道那個 7k 的到底是怎麼玩
2013-10-19 17:44:04	hashcat	可能是用編譯器玩的
2013-10-19 17:44:14	CindyLinz	準備70種 compiler 嗎? @_@"
2013-10-19 17:45:02	hashcat	有些有線上的解釋器
2013-10-19 17:46:01	Yu_lin	我放棄了，那些有 class 的語言都太像了，我無法分辨....Orz|||
2013-10-19 17:46:04	hashcat	可能有人已經寫自動下載編譯的機器人
2013-10-19 17:46:21	hashcat	也不用全準備
2013-10-19 17:46:42	hashcat	選擇題當然要用刪去法
2013-10-19 17:47:58	hashcat	然後就滿分了
2013-10-19 17:58:37	<--	Yu_lin (24ec1646@gateway/web/freenode/ip.36.236.22.70) has quit (Quit: Page closed)
2013-10-19 21:05:38	<--	miaout17__ (~miaout17@miaout17.net) has quit (Ping timeout: 264 seconds)
2013-10-19 21:56:36	-->	miaout17__ (~miaout17@miaout17.net) has joined #haskell.tw
2013-10-19 23:01:38	-->	suhorng (~suhorng@118-166-51-19.dynamic.hinet.net) has joined #haskell.tw
2013-10-19 23:02:49	suhorng	CindyLinz: 上次看到 Text.Printf 是用 typeclass. 我記得很久以前這裡出現過 Haskell 的 variadic function 各種作法XD
2013-10-19 23:41:39	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-20 00:02:15	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-20 00:05:52	<--	suhorng (~suhorng@118-166-51-19.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-20 01:47:12	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-20 02:31:39	CindyLinz	一直沒想到要用兩種 class
2013-10-20 03:24:01	<--	hashcat (~hashcat@27.247.26.242) has quit (Ping timeout: 265 seconds)
2013-10-20 05:58:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-10-20 06:13:35	-->	hashcat (~hashcat@27.247.26.242) has joined #haskell.tw
2013-10-20 06:56:54	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-20 09:34:25	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-20 12:15:52	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Remote host closed the connection)
2013-10-20 12:16:04	-->	b4283 (~b4283@218-164-208-171.dynamic.hinet.net) has joined #haskell.tw
2013-10-20 12:20:13	<--	b4283 (~b4283@218-164-208-171.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-10-20 12:26:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-20 12:54:56	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-20 13:00:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-20 13:44:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-20 13:54:20	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-20 19:35:06	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-10-20 21:21:02	<--	b4283 (~b4283@118.150.141.110) has quit (Read error: Connection reset by peer)
2013-10-20 21:48:55	-->	odie2630463 (1b33327a@gateway/web/freenode/ip.27.51.50.122) has joined #haskell.tw
2013-10-20 22:35:29	<--	odie2630463 (1b33327a@gateway/web/freenode/ip.27.51.50.122) has quit (Ping timeout: 250 seconds)
2013-10-20 23:36:20	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-10-21 02:23:01	<--	hashcat (~hashcat@27.247.26.242) has quit (Ping timeout: 248 seconds)
2013-10-21 03:27:59	-->	hashcat (~hashcat@27.52.54.18) has joined #haskell.tw
2013-10-21 03:51:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-10-21 08:53:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-21 09:45:21	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 09:48:20	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 09:48:44	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-10-21 10:24:52	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 10:25:15	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-21 10:26:08	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 10:32:26	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-21 10:32:51	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-10-21 10:33:05	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-21 12:16:35	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-21 13:30:05	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 13:30:22	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-21 13:31:05	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 14:55:58	mno2	https://www.youtube.com/watch?v=gKWNjFagR9k
2013-10-21 14:56:15	mno2	影片來了 : CUFP 2013: Julien Verlaguet, Facebook: Analyzing PHP statically
2013-10-21 14:56:44	CindyLinz	(Y)
2013-10-21 14:58:17	b4283	(Y) 是向上的大姆指嗎
2013-10-21 14:58:36	CindyLinz	對啊
2013-10-21 14:58:41	CindyLinz	MSN / Facebook 的符號
2013-10-21 15:22:29	CindyLinz	覺得 Haskell 裡面用 where 定義東西, 我常常會造成 syntax error @@"
2013-10-21 15:22:39	CindyLinz	好像 where 能適用的地方比 let..in 少很多
2013-10-21 15:22:50	CindyLinz	像是塞在一個 case..of 的 branch 裡面就不行 @@"
2013-10-21 15:23:20	CindyLinz	用 where 是想說可以讓主線程式不用多一層縮排, 用 let..in 的話就會多一層
2013-10-21 15:36:58	CindyLinz	用 ghc 7.6 的 multi-way-if 以後, 就可以不再用 else if 了耶~ ^^
2013-10-21 16:47:42	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-10-21 16:51:13	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 16:51:37	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-21 16:52:21	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 17:05:08	-->	kanru` (~kanru@89.202.203.51) has joined #haskell.tw
2013-10-21 17:06:17	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-10-21 17:12:55	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-21 17:24:14	CindyLinz	娃~ multi way if 的 syntax 有 ambiguity...
2013-10-21 17:25:00	CindyLinz	if | cond1 -> expr1 | cond2 -> if | cond3 -> expr3 | cond4 -> expr4
2013-10-21 17:25:13	CindyLinz	cond4 會歸屬後面的 if
2013-10-21 17:30:16	CindyLinz	加括號好醜, 還是用 case () of { _| cond1 -> expr1 ; _| cond2 -> expr2 } 好了
2013-10-21 18:06:19	-->	petercommand (~peter@122-117-200-18.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 18:06:23	--	petercommand is now known as Guest84027
2013-10-21 18:10:07	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-10-21 18:57:31	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-21 19:05:33	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-21 19:07:30	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 20:24:12	-->	suhorng (~suhorng@118-166-51-38.dynamic.hinet.net) has joined #haskell.tw
2013-10-21 21:00:48	hashcat	https://github.com/GaloisInc/HaLVM
2013-10-21 21:02:48	hashcat	從ghc 6沒動靜許久突然有了
2013-10-21 21:07:34	-->	Yu_lin (24ec14a7@gateway/web/freenode/ip.36.236.20.167) has joined #haskell.tw
2013-10-21 21:09:07	Yu_lin	running on xen?
2013-10-21 21:10:53	hashcat	嗯嗯
2013-10-21 21:11:16	hashcat	應該是可以做成雲端
2013-10-21 21:11:27	hashcat	或者說他本來就是打算作雲端
2013-10-21 21:12:11	CindyLinz	birst memory 要夠大.. (咦)
2013-10-21 21:12:39	Yu_lin	http://www.slideshare.net/xen_com_mgr/the-halvm-a-simple-platform-for-simple-platforms 只看這張圖會讓我覺得這是在寫一個作業系統吧XD
2013-10-21 21:12:39	CindyLinz	奇怪沒這個字 XD
2013-10-21 21:12:58	CindyLinz	啊.. burst :p
2013-10-21 21:14:15	mno2	Yu_lin: 其實我覺得寫 OS 跟寫 compiler 其實是同一件事耶 xD
2013-10-21 21:14:45	letoh	不太懂
2013-10-21 21:14:48	Guest84027	mno2: why? XD
2013-10-21 21:14:50	Yu_lin	mno2：我一直以為只有寫 forth 時才是同一件事情XD
2013-10-21 21:15:15	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-21 21:15:34	Guest84027	變guest了 XD
2013-10-21 21:15:40	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 21:15:54	<--	Guest84027 (~peter@122-117-200-18.HINET-IP.hinet.net) has quit (Changing host)
2013-10-21 21:15:54	-->	Guest84027 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-21 21:16:00	--	Guest84027 is now known as petercommand
2013-10-21 21:16:40	mno2	1. runtime service: 其實看一些 runtime service 跟 OS 很像啊，ghc runtime 要調度 thread,  rust 也有 scheduler
2013-10-21 21:17:00	CindyLinz	OS 是只剩下 runtime 的 compiler?
2013-10-21 21:17:01	mno2	不過 service 的概念比較是 micro kernel 的感覺
2013-10-21 21:17:12	Yu_lin	gc 就等於 OS 的 memery manager 這樣嗎？XD
2013-10-21 21:17:20	letoh	有點怪  如果只講 runtime 的話，還算 compiler 嗎?
2013-10-21 21:17:21	mno2	可以這麼說
2013-10-21 21:17:47	mno2	要看你怎麼定義啦，我的認定是包含在裡面
2013-10-21 21:18:15	letoh	compile 完以後，compiler 的工作就算結束了吧?
2013-10-21 21:18:47	letoh	runtime service 是 runtime 的事，應該沒有 compile 介入?  不過 dynamic compiler 不曉得該怎麼算XD
2013-10-21 21:18:59	hashcat	來裝Xen
2013-10-21 21:19:01	CindyLinz	letoh: 只是有些 compiler 的實作是連 runtime 也考慮進去的, 所以說寫 compiler 也是在設計 runtime, 不過不一定是說 compiler === runtime (我想是這樣?)
2013-10-21 21:19:51	letoh	我覺得比較像是語言的設計就會需要那些 runtime ?
2013-10-21 21:19:57	hashcat	compiler -> lexer + parser + code generator
2013-10-21 21:20:08	hashcat	貌似linker並不算在裡面
2013-10-21 21:20:19	mno2	因為如果要把 python, ruby 包含進來的話，好像就分不開 runtime，或許我應該用「設計語言」詞彙會比較精準？
2013-10-21 21:20:25	letoh	我是覺得翻譯的工作做完就算結束了
2013-10-21 21:20:49	hashcat	Python, Ruby沒有Compiler的概念吧
2013-10-21 21:21:03	letoh	python, ruby 都是說 interpreter 吧?
2013-10-21 21:21:14	mno2	還是要翻譯成他們 VM 的 bytecode 啊
2013-10-21 21:21:15	letoh	好像沒聽說有人用 compiler 這種說法
2013-10-21 21:21:50	letoh	python -c 可以看成 compiler ?
2013-10-21 21:22:04	hashcat	Nuitka算是translator
2013-10-21 21:22:08	letoh	不是 -c  忘了是哪個XD
2013-10-21 21:22:19	mno2	那可能我不應該用 compiler 這個詞吧，不過我也不知道該怎麼形容
2013-10-21 21:22:33	CindyLinz	google translate 可以算是一個 compiler 嗎?
2013-10-21 21:22:45	hashcat	Interpretor是走一片執行一片
2013-10-21 21:23:00	mno2	總之我覺得設計語言的 runtime，還有操作方式。都跟設計 OS 很像
2013-10-21 21:23:03	letoh	compiler 跟 translator 的分界在哪?
2013-10-21 21:23:10	CindyLinz	mno2: 有感覺~
2013-10-21 21:23:21	hashcat	compiler是全部轉成機器碼, 跟執行無關
2013-10-21 21:23:29	letoh	mno2: 這說法我也同意
2013-10-21 21:23:45	letoh	不過 compiler 的部份我覺得很難接受XD
2013-10-21 21:23:53	mno2	那就是我用詞錯誤
2013-10-21 21:24:04	hashcat	出去溜躂
2013-10-21 21:24:21	mno2	我真正的意思是前面那句
2013-10-21 21:24:32	letoh	嗯，瞭解
2013-10-21 21:24:35	petercommand	google translate這種應該算interpreter?
2013-10-21 21:25:10	letoh	像 gcc 其實也是把很多 stage 整合在一起，所以不能只看前端工具?
2013-10-21 21:26:01	letoh	python/ruby 的話，當然翻譯成 bytecode 那一段我覺得是 compiler 的工作，但後面 interpreter/runtime 在執行的部份就很難說了
2013-10-21 21:26:39	mno2	petercommand: 假如說，今天 AI 可以完全成立的話， google translate 是可以算成 interpreter 的啊。那時候自然語言的知識表達可能是完全自由的
2013-10-21 21:26:58	petercommand	嗯
2013-10-21 21:27:01	CindyLinz	petercommand: 我只是來亂的 可以不要理我 XD
2013-10-21 21:28:05	mno2	那時候自然語言就是 programming language
2013-10-21 21:28:18	mno2	甚至任何手勢，眼神
2013-10-21 21:29:12	mno2	我認為 CS 整個領域就是符號操作與實作的 trade-off
2013-10-21 21:29:19	CindyLinz	那可能不一定是好事... orz
2013-10-21 21:29:24	mno2	所有 CS 的知識都是在解決這個問題
2013-10-21 21:29:28	letoh	萬一有 bug ...
2013-10-21 21:29:36	CindyLinz	魔鬼終結者的時代就來了...
2013-10-21 21:29:51	mno2	Machine Learning, AI. 都是為了達到自然語言符號可以拿來使用的終極目標
2013-10-21 21:31:32	mno2	現在的實作受限於某些條件，所以現今的 PL 可能要受限於某種典範。
2013-10-21 21:39:43	hashcat	程序語言這種形式語言跟自然語言都會一直有區別
2013-10-21 21:41:15	hashcat	自然語言隨聲符跟圖像產生, 依照時間跟文化的交流變化
2013-10-21 21:41:37	hashcat	人工語言是先嚴格定義才使用
2013-10-21 21:42:33	hashcat	數學符號就是從自然語言分離的
2013-10-21 21:42:48	mno2	用形式語言去 model 自然語言的研究也是有人做的 :p    我印象中 ccshan 的研究就是這方面
2013-10-21 21:43:11	mno2	結果據說很少人看得懂他的東西 xD
2013-10-21 21:43:18	hashcat	應該是沒有放棄人工語言把數學概念塞回自然語言的趨勢
2013-10-21 21:44:00	hashcat	啥嚜東西
2013-10-21 21:44:33	hashcat	自然語言沒多久就變成火星文去了
2013-10-21 21:44:44	petercommand	在自然語言最大的問題就是很多時候並無法清楚呈現自己的需求
2013-10-21 21:45:56	hashcat	我阿公就聽不懂我在講什麼了
2013-10-21 21:46:02	petercommand	ambiguous
2013-10-21 21:46:49	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-21 21:46:51	hashcat	形式語言規則講究極簡跟強健
2013-10-21 21:47:23	hashcat	反正就是自然語言當程序語言這種事難想像
2013-10-21 21:48:36	hashcat	貌似剛有人問translator跟compiler啥差別
2013-10-21 21:49:01	mno2	我認為糢糊在 AI 完全成立的情況下不是很重要。因為系統會回饋問你，你的意思是什麼意思。就像跟老闆下命令給屬下一樣，還是會去執行。
2013-10-21 21:49:04	hashcat	translator跑出的東西處理器看不懂
2013-10-21 21:49:25	hashcat	要再用別的compiler
2013-10-21 21:49:45	letoh	為什麼不能把 tanslation target 就設定為處理器呢?
2013-10-21 21:49:58	hashcat	自然語言是地獄, 形式語言是天堂
2013-10-21 21:50:16	hashcat	是天堂與地獄的差距
2013-10-21 21:50:32	favonia	hashcat: 有人造自然語言 (逃)
2013-10-21 21:50:42	hashcat	那就變成compiler了吧
2013-10-21 21:50:50	mno2	klingon?
2013-10-21 21:51:04	letoh	所以其實兩個動作是一樣的  只是 target 不一樣?
2013-10-21 21:51:20	suhorng	推人造自然語言 XDD
2013-10-21 21:51:24	hashcat	是code generator換掉了
2013-10-21 21:51:48	Yu_lin	以前的人造自然語言 -> 日本語
2013-10-21 21:51:52	hashcat	Pypy的RPython就是產生其他語言的
2013-10-21 21:52:08	hashcat	人造自然語言就是人工地獄
2013-10-21 21:52:11	letoh	那是因為有 translator 啊
2013-10-21 21:52:19	letoh	那是因為 rpython 有 translator 啊
2013-10-21 21:53:03	hashcat	這樣區分, translator沒有compiler就沒用
2013-10-21 21:53:45	favonia	我目前看過最誇張的還是 lojban
2013-10-21 21:54:23	hashcat	人工地獄比較沒那麼水深火熱
2013-10-21 21:54:29	petercommand	hashcat: 我記得像翻人造語言的話，google translate的品質就極佳(ex: esperanto)
2013-10-21 21:55:53	hashcat	人造語言互翻?
2013-10-21 21:57:39	letoh	看了 wikipedia 上的介紹說是文化中立  語言有辦法做到這樣嗎?
2013-10-21 21:57:50	petercommand	翻成自然語言啦XD
2013-10-21 21:57:57	letoh	我以為語言都是跟著文化發展的
2013-10-21 21:59:27	petercommand	letoh: 做的時候是文化中立，有人用之後就不是啦
2013-10-21 21:59:56	petercommand	"It is *designed* to be as culturally neutral as possible"
2013-10-21 22:02:05	b4283	在說 Ido 嗎
2013-10-21 22:02:34	petercommand	Ido?
2013-10-21 22:03:10	b4283	類似世界語的人造語言
2013-10-21 22:03:55	petercommand	上那句是lojban的wikipedia頁寫的
2013-10-21 22:04:47	b4283	oh
2013-10-21 22:05:06	petercommand	s/上/上面
2013-10-21 22:13:10	hashcat	Haskell貌似還是沒發展SPMD的跡象
2013-10-21 22:15:52	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-10-21 22:16:08	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-21 22:17:45	CindyLinz	這個? https://github.com/PatrickMaier/HdpH
2013-10-21 22:18:00	CindyLinz	Haskell Distributed Parallel Haskell
2013-10-21 22:18:22	hashcat	那個是monadic
2013-10-21 22:18:48	hashcat	在想的是不用monadic的
2013-10-21 22:19:10	hashcat	換掉runtime的那種平行化
2013-10-21 22:19:57	hashcat	http://www.mathematik.uni-marburg.de/~eden/
2013-10-21 22:20:14	hashcat	就裝不上去
2013-10-21 22:20:30	hashcat	問了沒人鳥
2013-10-21 22:21:04	CindyLinz	XD
2013-10-21 22:21:11	hashcat	還是關注x10好了
2013-10-21 22:21:25	hashcat	這個連dependent type都用了
2013-10-21 22:21:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-10-21 22:22:27	hashcat	http://x10-lang.org/
2013-10-21 22:23:19	hashcat	還能在gpu跟cpu混合的集群上跑
2013-10-21 22:25:06	hashcat	也一直沒有發表完就垂死的跡象
2013-10-21 22:32:47	CindyLinz	context free grammar 好像不能認 fibonacci 長度的字串?
2013-10-21 22:35:58	suhorng	不能 (by pumping lemma for CFL)
2013-10-21 22:36:20	CindyLinz	hmm..
2013-10-21 22:36:31	suhorng	http://en.wikipedia.org/wiki/Pumping_lemma_for_context-free_languages 從第三點可以直接看到
2013-10-21 22:36:53	CindyLinz	perl regex 如果不去動用塞程式碼進去的功能, 好像還是被 context free language 限制住..
2013-10-21 22:37:20	CindyLinz	不過它可以寫得很像不能傳參數的 scheme 喔 XD
2013-10-21 22:37:22	suhorng	我記得是這個是直接用deriving tree + 鴿洞去證 @@
2013-10-21 22:37:24	suhorng	XDDD
2013-10-21 22:38:20	Yu_lin	聽起來真親切XD
2013-10-21 22:44:12	CindyLinz	https://gist.github.com/CindyLinz/62de8f8f030cc180223f
2013-10-21 22:44:34	CindyLinz	找不到方法傳參數, 真是太可惜了 :|
2013-10-21 22:45:16	hashcat	perl真難看
2013-10-21 22:46:30	CindyLinz	hashcat: 也許你比較喜歡把 (?&ab) 改寫成 (?P>ab)
2013-10-21 22:47:25	hashcat	我都看不懂
2013-10-21 22:47:31	hashcat	只覺得很難看
2013-10-21 22:47:42	CindyLinz	那就會像 python 了 XD
2013-10-21 22:48:11	hashcat	perl是在做啥的
2013-10-21 22:48:26	CindyLinz	然後把 (?<a> a+) 改成 (?P<a> a+)
2013-10-21 22:49:10	CindyLinz	看你想做啥~
2013-10-21 22:50:01	CindyLinz	沒什麼特定領域, general purpose, 強項是字串處理
2013-10-21 22:51:29	hashcat	看下數值跟統計怎樣
2013-10-21 22:55:48	hashcat	貌似沒有
2013-10-21 22:56:35	hashcat	跟這語言無緣
2013-10-21 22:57:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-21 23:00:01	CindyLinz	可以拿 lambda bot 的 @pl 功能當成程式碼混淆器來用嗎..... = 3=
2013-10-21 23:01:02	suhorng	@pl \a b c d e f g -> g a c e d f b
2013-10-21 23:01:02	lambdabot	flip . ((flip . ((flip . ((flip . (flip .) . flip) .)) .) . flip . (flip .) . flip) .) . flip . flip id
2013-10-21 23:04:09	hashcat	沒用吧
2013-10-21 23:04:52	hashcat	haskell看型別就可以猜到是在做啥的
2013-10-21 23:05:06	CindyLinz	@pl cfold' f z x:xs = f x z (\y -> cfold' f y xs)
2013-10-21 23:05:09	lambdabot	cfold' = id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) . (flip .)) head) tail))
2013-10-21 23:05:09	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-21 23:05:25	suhorng	@@ optimization suspended XDDDDDDD
2013-10-21 23:05:25	lambdabot	 optimization suspended XDDDDDDD
2013-10-21 23:05:42	CindyLinz	@pl-resume
2013-10-21 23:05:48	lambdabot	cfold' = id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) . (flip .)) head) tail))
2013-10-21 23:05:48	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-21 23:05:53	suhorng	CindyLinz: 好像弄錯了欸
2013-10-21 23:06:04	suhorng	噢沒事我看錯
2013-10-21 23:06:16	CindyLinz	不知道是不是 @pl 遇到 QQ 了.. XDD
2013-10-21 23:06:19	CindyLinz	@pl-resume
2013-10-21 23:06:31	lambdabot	cfold' = id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) . (flip .)) head) tail))
2013-10-21 23:06:31	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-21 23:06:45	hashcat	怎u;4混淆型別都一樣
2013-10-21 23:06:47	CindyLinz	都一樣嘛 :p  我去 yet another haskell tutorial 抄 cfold.. XD
2013-10-21 23:07:09	CindyLinz	@t cfold' f z x:xs = f x z (\y -> cfold' f y xs)
2013-10-21 23:07:10	lambdabot	Maybe you meant: tell thank you thanks thesaurus thx tic-tac-toe ticker time todo todo-add todo-delete type v @ ? .
2013-10-21 23:07:19	CindyLinz	這啥情況 XD
2013-10-21 23:07:23	suhorng	啥鬼 XDDD
2013-10-21 23:08:16	suhorng	@tell thank you
2013-10-21 23:08:16	lambdabot	Consider it noted.
2013-10-21 23:08:20	CindyLinz	@type cfold' f z x:xs = f x z (\y -> cfold' f y xs)
2013-10-21 23:08:21	lambdabot	parse error on input `='
2013-10-21 23:08:37	CindyLinz	@type id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) .  (flip .)) head) tail))
2013-10-21 23:08:38	suhorng	@pl cfold' f z (x:xs) = f x z (\y -> cfold' f y xs)
2013-10-21 23:08:38	lambdabot	(b -> a -> (a -> c) -> c) -> a -> [b] -> c
2013-10-21 23:08:41	lambdabot	cfold' = id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) . (flip .)) head) tail))
2013-10-21 23:08:42	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-21 23:09:02	CindyLinz	對耶我剛剛漏括號
2013-10-21 23:09:39	CindyLinz	@type id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) . (flip .)) head) tail))
2013-10-21 23:09:40	lambdabot	(b -> a -> (a -> c) -> c) -> a -> [b] -> c
2013-10-21 23:10:40	CindyLinz	@unpl id (fix (flip (flip . (flip .) . ((ap .) .) . flip (flip . (flip .) . (((.) .) .) . ap (flip . (flip .) . (((.) .) .) . flip) . (flip .)) head) tail))
2013-10-21 23:10:40	lambdabot	(fix (\ d g j h -> (tail >>= \ bf -> return ((\ z -> return ((\ cf ad ae ah al -> cf ah ae (ad al)) g ((\ dp at au -> d dp au at) g)) g j (head z)) h bf)) h))
2013-10-21 23:10:52	CindyLinz	這個 unpl.... orz
2013-10-21 23:11:14	suhorng	要用 fix 來寫果然不簡單
2013-10-21 23:15:38	CindyLinz	@pl (fix (\ d g j h -> (tail >>= \ bf -> return ((\ z -> return ((\ cf ad ae ah al -> cf ah ae (ad al)) g ((\ dp at au -> d dp au at) g)) g j (head z)) h bf)) h))
2013-10-21 23:15:42	lambdabot	fix (flip (flip . (flip .) . ((ap .) .) . ((((tail >>=) .) .) .) . ((((return .) .) .) .) . flip (flip . (flip .) . (((.) .) .) . flip (ap . (return .) . ap (flip . (flip .) . (((.) .) .) . flip) . (
2013-10-21 23:15:42	lambdabot	flip .)) id) head) id)
2013-10-21 23:15:42	lambdabot	optimization suspended, use @pl-resume to continue.
2013-10-21 23:15:53	CindyLinz	會越來越大耶 :p
2013-10-21 23:16:22	CindyLinz	(其實是看到隔壁 #haskell 在玩, 忍不住也玩起來 :p)
2013-10-21 23:20:08	CindyLinz	今天晚上多讀了一點 perl 的 regex.. 讓我覺得好像弄一個完全只由這種 regex-like 字串處理作成的 turing complete language 好像也很好玩 :p
2013-10-21 23:23:48	hashcat	一直沒法理解fix是作啥的
2013-10-21 23:24:04	hashcat	>  (fix $ ap $ return . (1:)) [1,2,3,4]
2013-10-21 23:24:05	lambdabot	  [1,1,2,3,4]
2013-10-21 23:24:06	suhorng	hashcat: 那 Y combinator 呢？無論哪一版
2013-10-21 23:24:17	suhorng	喔 不太一樣XD
2013-10-21 23:24:26	hashcat	y能理解
2013-10-21 23:25:08	suhorng	fix :: (a -> a) -> a
2013-10-21 23:25:09	suhorng	fix f = f (fix f) --最普通就跟 Y 一樣
2013-10-21 23:25:14	CindyLinz	hashcat: 你是說功用嗎? 還是它為什麼會動?
2013-10-21 23:25:45	suhorng	對喔XD
2013-10-21 23:25:54	hashcat	不知道是做啥的
2013-10-21 23:26:30	CindyLinz	我覺得用它是讓我們比較專注在 iteration 之間的變化
2013-10-21 23:26:48	suhorng	不是很確定 可能有些用法open recursion可以把不同東西接起來, fix最後收回來?
2013-10-21 23:28:02	hashcat	> fix (1:)
2013-10-21 23:28:03	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-10-21 23:28:21	suhorng	直接找到不動點
2013-10-21 23:28:48	hashcat	> fix id
2013-10-21 23:28:55	lambdabot	  mueval-core: Time limit exceeded
2013-10-21 23:29:01	CindyLinz	不過平常要應用的話, 找不動點真的不知道能幹嘛 XD
2013-10-21 23:29:14	CindyLinz	就像那個 r.gz... XD
2013-10-21 23:29:34	hashcat	> fix (0+)
2013-10-21 23:29:41	lambdabot	  mueval-core: Time limit exceeded
2013-10-21 23:29:48	hashcat	根本找不到
2013-10-21 23:31:22	hashcat	> fix (\rec n -> if n == 0 then 1 else n * rec (n-1)) 10
2013-10-21 23:31:23	lambdabot	  3628800
2013-10-21 23:31:43	hashcat	貌似勉強有點感覺了
2013-10-21 23:31:46	hashcat	找到那個
2013-10-21 23:31:56	CindyLinz	....不動點
2013-10-21 23:32:09	suhorng	但是要說
2013-10-21 23:32:09	suhorng	> fix (1 : )
2013-10-21 23:32:10	suhorng	有「找到」也是很難說阿 XD
2013-10-21 23:32:10	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-10-21 23:32:32	hashcat	哦~原來貌似是這樣
2013-10-21 23:32:33	CindyLinz	反正我們也宣稱找到根號2了..ww
2013-10-21 23:32:47	suhorng	data Nat = Zero | Suc Nat 比對 fix (1+) 跟 fix Suc
2013-10-21 23:32:59	hashcat	((a->b)->(a->b)) -> a -> b
2013-10-21 23:33:00	suhorng	這個倒是會變 Suc (Suc (Suc (Suc (Suc ....
2013-10-21 23:33:10	hashcat	這種樣子的貌似有作用
2013-10-21 23:33:41	hashcat	是泛函的不動點!
2013-10-21 23:33:58	hashcat	函數的不動點沒作用
2013-10-21 23:35:16	hashcat	終於知道除了把記憶體弄爆的用途了
2013-10-21 23:35:28	suhorng	當成 stream 也有可能？ constant stream (1:)
2013-10-21 23:35:30	suhorng	xDD
2013-10-21 23:35:49	hashcat	@type (1:)
2013-10-21 23:35:49	lambdabot	Num a => [a] -> [a]
2013-10-21 23:36:46	hashcat	@type fix (1:)
2013-10-21 23:36:47	lambdabot	Num a => [a]
2013-10-21 23:37:21	hashcat	好像又不全是
2013-10-21 23:38:03	hashcat	其實 (1:) 也可以當作某方面把記憶體弄爆的東西
2013-10-21 23:38:14	hashcat	只是他沒作完
2013-10-21 23:39:54	hashcat	> fix (\rec n -> (n: rec (n+1))) 1
2013-10-21 23:39:55	lambdabot	  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28...
2013-10-21 23:40:44	hashcat	感覺對 [a] 這種狀況可以使用會有合理的解釋
2013-10-21 23:42:55	suhorng	沒作完 : 達不到的無窮 XD
2013-10-21 23:42:55	hashcat	當作是惰性計算的超能力好了
2013-10-21 23:42:55	suhorng	只能乖乖逼近, 1:_|_,　1:1:_|_,　1:1:1:_|_, ...
2013-10-21 23:43:10	hashcat	> fix (\rec n -> (n: rec (1/n))) 100.0
2013-10-21 23:43:11	lambdabot	  [100.0,1.0e-2,100.0,1.0e-2,100.0,1.0e-2,100.0,1.0e-2,100.0,1.0e-2,100.0,1.0...
2013-10-21 23:44:25	hashcat	> fix (\rec n -> (n: rec (1/(n+1)))) 1.0
2013-10-21 23:44:26	lambdabot	  [1.0,0.5,0.6666666666666666,0.6000000000000001,0.625,0.6153846153846154,0.6...
2013-10-21 23:45:06	hashcat	> fix (\rec n -> (1/n: rec (1/n))) 1.0
2013-10-21 23:45:08	lambdabot	  [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1....
2013-10-21 23:45:22	hashcat	> fix (\rec n -> (1/n: rec (1/(n+1)))) 1.0
2013-10-21 23:45:23	lambdabot	  [1.0,2.0,1.5,1.6666666666666665,1.6,1.625,1.6153846153846154,1.619047619047...
2013-10-21 23:47:34	suhorng	> fix (\ xs -> 0 : map (1+) xs)
2013-10-21 23:47:36	lambdabot	  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,...
2013-10-21 23:47:38	hashcat	> fix (\rec n -> (1/n: rec (n+1)))) 1.0
2013-10-21 23:47:39	lambdabot	  <hint>:1:33: parse error on input `)'
2013-10-21 23:47:51	hashcat	> fix (\rec n -> (1/n: rec (n+1))) 1.0
2013-10-21 23:47:52	lambdabot	  [1.0,0.5,0.3333333333333333,0.25,0.2,0.16666666666666666,0.1428571428571428...
2013-10-21 23:48:51	hashcat	不錯用
2013-10-21 23:49:19	hashcat	不用吃到自己就有迭代
2013-10-21 23:50:06	petercommand	這個bot的time limit是多久呀
2013-10-21 23:51:31	hashcat	是遞歸, 貌似都可以
2013-10-21 23:55:27	hashcat	＠help
2013-10-21 23:55:40	hashcat	@?
2013-10-21 23:56:55	petercommand	@tell help
2013-10-21 23:56:55	lambdabot	What should I tell help?
2013-10-21 23:57:06	petercommand	@tell ?
2013-10-21 23:57:06	lambdabot	What should I tell ??
2013-10-21 23:58:26	hashcat	找不到欸
2013-10-21 23:58:45	hashcat	想說應該是有預設值在原始碼
2013-10-22 00:02:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-22 00:04:31	<--	Yu_lin (24ec14a7@gateway/web/freenode/ip.36.236.20.167) has quit (Quit: Page closed)
2013-10-22 00:08:27	<--	suhorng (~suhorng@118-166-51-38.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-22 00:26:45	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-22 00:49:38	<--	kanru` (~kanru@89.202.203.51) has quit (Ping timeout: 272 seconds)
2013-10-22 01:42:44	-->	buck_ (~buck@220-136-187-232.dynamic.hinet.net) has joined #haskell.tw
2013-10-22 02:02:01	monochrom	哲理: 永動就是不動 XD
2013-10-22 02:04:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-22 02:05:08	monochrom	以前香港某電視劇主題曲曰: 知否世事常變, 變幻原是永恆
2013-10-22 02:06:02	<--	buck_ (~buck@220-136-187-232.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-10-22 02:16:03	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-22 03:04:45	favonia	hashcat: 不動點可以有很多個。
2013-10-22 03:26:07	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-22 03:28:30	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-10-22 03:31:49	-->	godfat (~Adium@114-24-5-55.dynamic.hinet.net) has joined #haskell.tw
2013-10-22 05:02:26	-->	kanru` (~kanru@m6645-0145234085.pck.nerim.net) has joined #haskell.tw
2013-10-22 05:54:53	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2013-10-22 06:08:47	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-22 06:28:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-22 07:45:45	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-22 09:38:29	MnO2	https://plus.google.com/101555949501667191720/posts/Armn9rcrK8g  看到 unsafePerformIO 整個大笑 xD
2013-10-22 09:41:00	MnO2	http://stackoverflow.com/questions/6364409/why-does-haskells-head-crash-on-an-empty-list-or-why-doesnt-it-return-an/6364990#6364990
2013-10-22 09:43:17	monochrom	hahahaha
2013-10-22 09:48:48	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-22 09:49:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-22 09:58:15	MnO2	http://www.wall.org/~lewis/2013/10/15/asm-monad.html ASM Monad
2013-10-22 12:07:11	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-10-22 12:11:16	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-22 13:10:39	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 260 seconds)
2013-10-22 13:27:04	-->	cades (76a6f965@gateway/web/freenode/ip.118.166.249.101) has joined #haskell.tw
2013-10-22 13:29:09	<--	cades (76a6f965@gateway/web/freenode/ip.118.166.249.101) has quit (Client Quit)
2013-10-22 14:05:02	-->	snowXman (~snowXman@2001:250:1001:1850:5d34:cdd3:8b52:671) has joined #haskell.tw
2013-10-22 14:11:16	<--	snowXman (~snowXman@2001:250:1001:1850:5d34:cdd3:8b52:671) has left #haskell.tw ("离开")
2013-10-22 14:43:43	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-22 14:55:40	<--	kanru` (~kanru@m6645-0145234085.pck.nerim.net) has quit (Ping timeout: 246 seconds)
2013-10-22 15:46:47	-->	kanru` (~kanru@89.202.203.51) has joined #haskell.tw
2013-10-22 16:19:19	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-22 17:53:59	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 272 seconds)
2013-10-22 17:54:05	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-22 17:54:54	<--	godfat (~Adium@114-24-5-55.dynamic.hinet.net) has quit (Ping timeout: 256 seconds)
2013-10-22 17:55:58	-->	petercommand (~peter@122-117-200-18.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-22 17:56:19	-->	godfat (~Adium@114-24-5-55.dynamic.hinet.net) has joined #haskell.tw
2013-10-22 17:56:29	--	petercommand is now known as Guest14848
2013-10-22 18:06:24	<--	Guest14848 (~peter@122-117-200-18.HINET-IP.hinet.net) has quit (Changing host)
2013-10-22 18:06:24	-->	Guest14848 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-22 18:06:51	--	Guest14848 is now known as petercommand
2013-10-22 18:39:02	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-22 18:55:58	letoh	asm monad 好像蠻有趣的
2013-10-22 20:08:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-22 20:18:33	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-22 21:12:48	-->	Yu_LIN (24ec1458@gateway/web/freenode/ip.36.236.20.88) has joined #haskell.tw
2013-10-22 21:20:11	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 260 seconds)
2013-10-22 21:32:31	-->	suhorng (~suhorng@118-166-51-38.dynamic.hinet.net) has joined #haskell.tw
2013-10-22 21:45:23	suhorng	新更新 http://ro-che.info/ccc/23
2013-10-22 21:45:28	suhorng	http://this-plt-life.tumblr.com/post/64150676855/when-i-try-to-find-out-something-about-urbit
2013-10-22 21:48:20	suhorng	ASM monad中 MonadFix 很自然的出現了耶 XDD
2013-10-22 21:48:56	suhorng	語法真有趣
2013-10-22 21:49:16	letoh	我好像比較能接受這個  跟 forth 一樣的XD
2013-10-22 21:50:51	suhorng	Urbit? 奇怪的stack..語言?
2013-10-22 21:53:33	letoh	唔  好像是個奇怪的東西
2013-10-22 21:59:28	Yu_LIN	好神奇的 asm monad
2013-10-22 22:05:34	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 268 seconds)
2013-10-22 22:36:09	-->	b4283 (~b4283@218-164-127-159.dynamic.hinet.net) has joined #haskell.tw
2013-10-22 22:49:46	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-22 22:50:12	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-22 23:25:32	<--	Yu_LIN (24ec1458@gateway/web/freenode/ip.36.236.20.88) has quit (Quit: Page closed)
2013-10-22 23:41:19	<--	suhorng (~suhorng@118-166-51-38.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-23 00:18:14	<--	b4283 (~b4283@218-164-127-159.dynamic.hinet.net) has quit (Quit: 暫離)
2013-10-23 00:21:01	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-23 00:21:51	<--	kanru` (~kanru@89.202.203.51) has quit (Ping timeout: 268 seconds)
2013-10-23 00:45:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-10-23 01:06:16	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-23 01:20:08	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-23 01:58:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-23 02:04:34	<--	hashcat (~hashcat@27.52.54.18) has quit (Ping timeout: 272 seconds)
2013-10-23 02:57:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-23 03:24:54	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-23 03:30:43	-->	hashcat (~hashcat@27.247.125.78) has joined #haskell.tw
2013-10-23 04:06:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-23 04:36:09	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-23 04:39:21	<--	godfat (~Adium@114-24-5-55.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-23 05:03:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-23 07:00:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-23 07:34:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-23 07:39:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-23 07:51:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-23 08:03:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2013-10-23 09:51:14	-->	Yu_lin (24ec13df@gateway/web/freenode/ip.36.236.19.223) has joined #haskell.tw
2013-10-23 09:58:28	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-23 11:14:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-23 11:34:51	<--	Yu_lin (24ec13df@gateway/web/freenode/ip.36.236.19.223) has quit (Quit: Page closed)
2013-10-23 12:08:44	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-10-23 12:11:08	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-10-23 12:59:19	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-10-23 15:32:04	-->	kanru (~kanru@89.202.203.51) has joined #haskell.tw
2013-10-23 15:48:40	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-23 15:50:05	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-10-23 18:53:23	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-23 20:16:41	<--	kanru (~kanru@89.202.203.51) has quit (Ping timeout: 272 seconds)
2013-10-23 20:19:50	-->	kanru (~kanru@89.202.203.51) has joined #haskell.tw
2013-10-23 20:36:16	-->	suhorng (~suhorng@118-166-51-38.dynamic.hinet.net) has joined #haskell.tw
2013-10-23 20:43:14	-->	b4283 (~b4283@218-164-127-159.dynamic.hinet.net) has joined #haskell.tw
2013-10-23 22:35:57	--	irc: disconnected from server
2013-10-27 13:38:37	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-27 13:38:37	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-27 13:38:37	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-27 13:38:37	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean flter gko godfat1 hychen lambdabot letoh logfat miaout17 miaout17__ MnO2 monochrom petercommand shik superbil]
2013-10-27 13:38:37	--	Channel #haskell.tw: 24 nicks (0 ops, 0 halfops, 0 voices, 24 normals)
2013-10-27 13:38:55	--	Mode #haskell.tw [+cnt]
2013-10-27 13:38:55	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-27 14:32:52	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-27 15:12:42	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-27 15:38:56	MnO2	https://twitter.com/kmett/status/394362885381431296
2013-10-27 15:58:32	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-10-27 17:22:35	-->	caasih (~caasiHuan@114-46-114-54.dynamic.hinet.net) has joined #haskell.tw
2013-10-27 19:14:56	-->	b4284 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-27 19:57:03	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-27 20:38:33	-->	suhorng (~suhorng@118-166-53-15.dynamic.hinet.net) has joined #haskell.tw
2013-10-27 21:13:47	<--	caasih (~caasiHuan@114-46-114-54.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-27 23:26:28	<--	b4283 (~b4283@218-164-204-132.dynamic.hinet.net) has quit (Quit: 暫離)
2013-10-28 00:20:31	<--	suhorng (~suhorng@118-166-53-15.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-28 00:35:57	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-28 01:22:02	<--	b4284 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-28 03:16:26	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 245 seconds)
2013-10-28 05:07:52	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Ping timeout: 252 seconds)
2013-10-28 05:10:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-28 05:12:46	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-28 05:30:00	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 245 seconds)
2013-10-28 05:45:09	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-10-28 08:24:55	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 272 seconds)
2013-10-28 08:25:18	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-10-28 08:46:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-28 09:48:58	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-28 09:50:12	MnO2	https://gist.github.com/acfoltzer/7188179
2013-10-28 09:50:39	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-28 10:29:56	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-28 10:30:02	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-10-28 10:30:14	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-28 11:40:01	-->	caasih (~caasiHuan@114-46-113-52.dynamic.hinet.net) has joined #haskell.tw
2013-10-28 11:51:14	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-10-28 11:53:11	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-28 13:24:00	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Read error: Connection reset by peer)
2013-10-28 13:24:17	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-28 13:29:00	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Ping timeout: 248 seconds)
2013-10-28 13:29:12	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-28 13:47:15	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-28 14:09:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-28 15:22:57	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-28 16:16:38	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Ping timeout: 246 seconds)
2013-10-28 18:42:56	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-28 19:34:55	<--	caasih (~caasiHuan@114-46-113-52.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-28 19:36:10	MnO2	https://github.com/analytics/analytics ekmett又要開發新作品了~ 看起來好像很厲害 (廢話)
2013-10-28 19:36:47	MnO2	https://github.com/analytics/analytics/blob/master/notes/papers.md 研究好齊全
2013-10-28 19:37:19	MnO2	好多沒聽過的東西
2013-10-28 19:38:05	-->	b4283 (~b4283@218-164-202-28.dynamic.hinet.net) has joined #haskell.tw
2013-10-28 21:41:18	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-28 21:42:15	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-28 21:50:58	<--	b4283 (~b4283@218-164-202-28.dynamic.hinet.net) has quit (Quit: 暫離)
2013-10-28 22:12:07	-->	suhorng (~suhorng@118-166-53-15.dynamic.hinet.net) has joined #haskell.tw
2013-10-28 22:19:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-10-28 22:40:17	<--	suhorng (~suhorng@118-166-53-15.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-28 22:52:54	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-10-28 23:07:49	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-wsyoendzhpcqdveh) has joined #haskell.tw
2013-10-28 23:21:54	-->	caasih (~caasiHuan@114-46-156-197.dynamic.hinet.net) has joined #haskell.tw
2013-10-29 00:03:27	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 240 seconds)
2013-10-29 00:05:04	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 272 seconds)
2013-10-29 00:11:39	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2013-10-29 00:16:08	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 246 seconds)
2013-10-29 00:24:50	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-10-29 00:35:11	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-10-29 00:53:42	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-29 01:01:16	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-10-29 01:02:11	-->	chihhsin (~starbops@140.113.121.170) has joined #haskell.tw
2013-10-29 01:03:25	-->	cades (~mac@61.70.191.50) has joined #haskell.tw
2013-10-29 01:09:23	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2013-10-29 01:12:00	<--	cades (~mac@61.70.191.50) has quit (Quit: This computer has gone to sleep)
2013-10-29 01:33:30	-->	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-29 01:33:45	<--	chihhsin (~starbops@140.113.121.170) has quit (Ping timeout: 272 seconds)
2013-10-29 01:33:52	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 256 seconds)
2013-10-29 02:03:59	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-29 02:23:37	<--	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-10-29 02:23:50	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-29 02:44:02	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 272 seconds)
2013-10-29 03:33:48	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-ccjkrtaujqcgbycg) has quit (Ping timeout: 272 seconds)
2013-10-29 03:36:32	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-yqltyppnkazbczli) has joined #haskell.tw
2013-10-29 05:02:26	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-29 05:39:47	<--	caasih (~caasiHuan@114-46-156-197.dynamic.hinet.net) has quit (Quit: leaving)
2013-10-29 06:18:57	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-wsyoendzhpcqdveh) has quit (Read error: Connection reset by peer)
2013-10-29 06:19:17	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-plryktuxsxcsoysv) has joined #haskell.tw
2013-10-29 07:19:47	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-10-29 07:59:17	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-10-29 09:50:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-29 09:57:09	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-29 10:13:44	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-10-29 10:13:58	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-29 10:45:28	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 240 seconds)
2013-10-29 10:50:59	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-29 11:11:54	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-29 11:15:05	MnO2	接下來這次 Functional Thursday 是在 11/7 ?
2013-10-29 14:13:26	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 240 seconds)
2013-10-29 14:23:14	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-29 14:28:24	<--	letoh (~stackvm@203.67.167.123) has quit (*.net *.split)
2013-10-29 14:31:19	-->	letoh (~stackvm@203.67.167.123) has joined #haskell.tw
2013-10-29 15:02:09	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-29 16:04:20	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-29 16:54:20	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-10-29 16:54:20	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-10-29 16:54:20	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-10-29 16:54:20	--	Nicks #haskell.tw: [a2n a2n_ b4283 caasih cataska cataska_ cibs CindyLinz cyt93cs darkx drbean favonia flter gko godfat1 hychen kanru lambdabot letoh logfat miaout17 miaout17__ MnO2 monochrom petercommand shik superbil]
2013-10-29 16:54:20	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-10-29 16:54:39	--	Mode #haskell.tw [+cnt]
2013-10-29 16:54:39	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-10-29 17:29:36	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-29 17:37:08	MnO2	我之後可能好一陣子沒辦法參加 Functional Thursday 了
2013-10-29 17:38:40	MnO2	最近找到一份 Haskell 的工作，不在台灣。
2013-10-29 17:46:13	b4283	very cool
2013-10-29 17:51:47	petercommand	MnO2: 線上視訊^^
2013-10-29 17:52:39	miaout17__	MnO2: 恭喜~~
2013-10-29 17:53:11	MnO2	除了錄影可以開 Hangout or Skype 嗎？ xD
2013-10-29 17:58:32	CindyLinz	MnO2: 恭喜!!
2013-10-29 18:08:56	godfat1	MnO2, 恭喜！
2013-10-29 18:09:01	--	godfat1 is now known as godfat
2013-10-29 18:09:16	MnO2	godfat1: 也恭喜你 :p
2013-10-29 18:09:28	godfat	謝謝 XDD
2013-10-29 18:11:03	MnO2	http://www.shellcheck.net/about.html 感覺不錯
2013-10-29 18:12:33	godfat	不要用 sh/bash 就好了... orz
2013-10-29 18:13:05	godfat	一堆毛都是用那語言的關係 :o 寫起 bash 真的超痛苦，更甚 js...
2013-10-29 18:14:22	MnO2	主要是要接手別人的東西 ...
2013-10-29 18:14:33	godfat	~.~
2013-10-29 18:16:25	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-29 18:38:15	caasih	MnO2: 恭喜！
2013-10-29 18:41:14	MnO2	thanks
2013-10-29 18:56:00	miaout17__	godfat: Will you work at TW or be relocated?
2013-10-29 18:56:27	MnO2	caasih: 原來 au 的外號是魔法生物 xD
2013-10-29 18:57:01	MnO2	他是兩邊都有辦公室嗎？
2013-10-29 18:57:02	godfat	would be in TW in foreseen future, no further plan for now
2013-10-29 18:57:06	godfat	work remotely
2013-10-29 18:57:14	miaout17__	Cool.
2013-10-29 18:58:16	caasih	MnO2: 記得是 ETBlue 取的XDD
2013-10-29 18:58:26	MnO2	godfat: 主要還是寫 ruby 嗎？
2013-10-29 18:58:39	MnO2	caasih: 好可愛的名字
2013-10-29 18:59:46	godfat	MnO2, 應該是 @@" 或是說至少目前現有的東西是 ruby, 其他要做什麼就再討論這樣
2013-10-29 19:00:10	caasih	godfat: 已到 codementor 排隊，哪天來消費，贊助 godfat XD
2013-10-29 19:00:14	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-29 19:01:11	godfat	XDDD 我兩邊都有註冊，不過 mentor 那邊又收到一封信要把資料補完，有點懶，就先放著了 @_@.... 目前還不清楚是什麼機制，還沒細看程式 XD
2013-10-29 19:01:35	MnO2	miaout17__: 對 start-up 要贊助 H1B 還是太貴了，我覺得 work remotely 很正常
2013-10-29 19:03:50	MnO2	codementor可以mentor Haskell耶
2013-10-29 19:05:35	MnO2	https://www.codementor.io/byvoid 大神 byvoid
2013-10-29 19:06:16	MnO2	https://www.codementor.io/ekmett 好像蠻受歡迎的 xD
2013-10-29 19:06:35	godfat	staging server 上也有 Edward Kmett... XD
2013-10-29 19:06:35	godfat	15min / $75!
2013-10-29 19:06:35	godfat	可惜 production server 上沒有他 @_@
2013-10-29 19:06:48	godfat	喔喔喔，出現了啊，我下午看時還沒有 @_@
2013-10-29 19:10:38	MnO2	godfat: 他填這個數字好高啊 xD,  4 * 75 * 8 * 20 * 12 = 576000
2013-10-29 19:10:45	MnO2	難不成他年薪可以到 50w USD
2013-10-29 19:11:41	petercommand	1min $5 XD
2013-10-29 19:35:20	-->	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-29 19:36:11	godfat	我後來轉念一想，大概意思也是無誠勿擾吧.... XD
2013-10-29 19:36:29	godfat	以後用 haskell 寫網站，然後吃自己狗食問他問題 @_@
2013-10-29 19:37:59	petercommand	價格太恐怖啦XDD
2013-10-29 19:41:24	-->	suhorng (~suhorng@118-166-53-15.dynamic.hinet.net) has joined #haskell.tw
2013-10-29 19:41:44	suhorng	mno2: 哇 恭喜~!
2013-10-29 19:48:11	suhorng	喔喔喔 http://www.yinwang.org/blog-cn/2013/10/29/pysonar2/ 「『PySonar2 开源』」 「经过 Google 的许可，我决定把 PySonar 第二版本开源，.......」
2013-10-29 19:48:38	<--	mno2_ (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2_)
2013-10-29 19:55:48	godfat	wow
2013-10-29 20:06:32	-->	b4283 (~b4283@36.238.227.4) has joined #haskell.tw
2013-10-29 21:13:32	favonia	godfat: bash 很好寫啊，不就兩行，第2行是 runhaskell xxx.hs $@ ?
2013-10-29 21:14:54	favonia	js 感覺寫起來就比較麻煩
2013-10-29 21:15:32	<--	suhorng (~suhorng@118-166-53-15.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-29 21:15:35	letoh	看兩次才看懂XDXD
2013-10-29 21:26:35	CindyLinz	...||
2013-10-29 22:26:24	<--	b4283 (~b4283@36.238.227.4) has quit (Quit: 暫離)
2013-10-29 22:33:15	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-29 23:02:55	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-30 01:10:24	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-10-30 03:01:36	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 256 seconds)
2013-10-30 04:25:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-10-30 04:28:17	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-10-30 05:02:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-30 06:35:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-30 07:01:15	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-30 07:01:17	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Client Quit)
2013-10-30 07:22:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-30 07:53:47	-->	petercom1and (~peter@122-117-200-18.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-30 07:58:10	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2013-10-30 08:04:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-10-30 08:30:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-30 08:50:59	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-30 10:04:49	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-30 10:29:21	-->	xoo (~liang-tin@host-78-151-174-221.as13285.net) has joined #haskell.tw
2013-10-30 10:33:18	<--	xoo (~liang-tin@host-78-151-174-221.as13285.net) has quit (Remote host closed the connection)
2013-10-30 10:36:02	-->	xoo (~liang-tin@host-78-151-174-221.as13285.net) has joined #haskell.tw
2013-10-30 11:09:01	<--	xoo (~liang-tin@host-78-151-174-221.as13285.net) has quit (Quit: xoo)
2013-10-30 11:18:42	mno2	http://www.infoq.com/presentations/data-types-issues
2013-10-30 11:19:49	-->	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-30 11:27:34	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 248 seconds)
2013-10-30 12:01:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-10-30 12:51:24	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-30 12:53:39	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-10-30 12:53:42	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-30 12:58:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-30 12:59:44	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 246 seconds)
2013-10-30 14:08:55	-->	hashcat (~hashcat@114-40-162-204.dynamic.hinet.net) has joined #haskell.tw
2013-10-30 15:32:51	CindyLinz	這就是當年王垠發跡(?)的文章啊? ^^ http://www.chinakaoyan.com/2435.html
2013-10-30 15:43:38	hashcat	真是懷念(?)
2013-10-30 15:47:13	mno2	CindyLinz: 懷舊時間 wwwww  （其實當年我就讀過了 <--- 愛亂看一些東西的人）
2013-10-30 15:54:20	kanru	tl;dr
2013-10-30 16:02:13	<--	hashcat (~hashcat@114-40-162-204.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-10-30 16:25:46	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-10-30 16:34:02	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-30 16:43:48	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-30 16:52:44	CindyLinz	看起來是 xdite 開始讀王垠的文章了 XD
2013-10-30 17:10:41	cataska	XXD
2013-10-30 17:11:15	cataska	應該很合胃口
2013-10-30 17:22:49	CindyLinz	XDD
2013-10-30 17:47:13	--	petercom1and is now known as petercommand
2013-10-30 17:47:45	--	petercommand is now known as Guest24642
2013-10-30 17:48:32	<--	Guest24642 (~peter@122-117-200-18.HINET-IP.hinet.net) has quit (Changing host)
2013-10-30 17:48:32	-->	Guest24642 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-10-30 17:48:36	--	Guest24642 is now known as petercommabnd
2013-10-30 17:48:59	--	petercommabnd is now known as petercommand
2013-10-30 18:31:14	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit
2013-10-30 18:57:22	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-30 19:21:28	-->	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-10-30 19:22:17	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-30 19:53:09	hychen	XD
2013-10-30 19:53:18	hychen	戰力好強的文章
2013-10-30 19:53:41	-->	xoo (~liang-tin@host-2-100-140-245.as13285.net) has joined #haskell.tw
2013-10-30 19:56:37	MnO2_	CindyLinz: 推坑成功？！
2013-10-30 20:01:08	-->	b4283 (~b4283@218-164-218-151.dynamic.hinet.net) has joined #haskell.tw
2013-10-30 20:09:24	CindyLinz	誰推的啊? ^^|
2013-10-30 20:11:12	MnO2_	CindyLinz: 我有推一個連結啊 xD
2013-10-30 20:11:36	MnO2_	就是那篇發跡文章
2013-10-30 20:25:24	CindyLinz	原來是你害的 XDD
2013-10-30 20:26:03	<--	xoo (~liang-tin@host-2-100-140-245.as13285.net) has quit (Quit: xoo)
2013-10-30 20:54:58	-->	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has joined #haskell.tw
2013-10-30 21:30:11	hashcat	沒法看懂
2013-10-30 21:36:16	suhorng	mno2: 想下載slide要登入 :Q
2013-10-30 21:57:52	-->	xoo (~liang-tin@147.188.254.137) has joined #haskell.tw
2013-10-30 22:00:07	<--	xoo (~liang-tin@147.188.254.137) has quit (Client Quit)
2013-10-30 22:01:18	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 252 seconds)
2013-10-30 22:03:02	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-30 22:05:35	godfat1	終於看完了 XD
2013-10-30 22:05:37	godfat1	在想如果我有他的實力的話，搞不好會有類似的想法或行動 XD
2013-10-30 22:05:39	--	godfat1 is now known as godfat
2013-10-30 22:06:35	-->	xoo (~liang-tin@147.188.254.137) has joined #haskell.tw
2013-10-30 22:06:39	<--	xoo (~liang-tin@147.188.254.137) has quit (Client Quit)
2013-10-30 22:07:09	letoh	現在是發生什麼事? XD
2013-10-30 22:07:32	godfat	http://www.chinakaoyan.com/2435.html
2013-10-30 22:07:52	letoh	這好像是古文了
2013-10-30 22:08:09	godfat	XD
2013-10-30 22:08:26	-->	xoo (~liang-tin@147.188.254.137) has joined #haskell.tw
2013-10-30 22:09:42	<--	xoo (~liang-tin@147.188.254.137) has quit (Client Quit)
2013-10-30 22:18:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-10-30 22:27:45	-->	liang-ting (~liang-tin@147.188.254.137) has joined #haskell.tw
2013-10-30 22:30:30	<--	liang-ting (~liang-tin@147.188.254.137) has left #haskell.tw
2013-10-30 22:42:31	<--	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-10-30 22:52:56	-->	edpust (~edpust@173-167-90-193-ip-static.hfc.comcastbusiness.net) has joined #haskell.tw
2013-10-30 22:54:57	<--	edpust (~edpust@173-167-90-193-ip-static.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-10-30 23:21:00	-->	liuzhoou (~liuzhoou@180.171.145.144) has joined #haskell.tw
2013-10-30 23:33:01	<--	b4283 (~b4283@218-164-218-151.dynamic.hinet.net) has quit (Quit: 暫離)
2013-10-30 23:33:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-31 00:01:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-10-31 00:03:32	-->	westmvit (~westmvit@LLagny-156-34-36-225.w217-128.abo.wanadoo.fr) has joined #haskell.tw
2013-10-31 00:04:38	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (Ping timeout: 240 seconds)
2013-10-31 00:10:44	-->	shcherbinins (~shcherbin@200.37.217.23) has joined #haskell.tw
2013-10-31 00:10:44	<--	shcherbinins (~shcherbin@200.37.217.23) has quit (Excess Flood)
2013-10-31 00:29:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-31 01:01:25	-->	liang-ting (~liang-tin@147.188.254.241) has joined #haskell.tw
2013-10-31 01:03:12	<--	liuzhoou (~liuzhoou@180.171.145.144) has quit (Quit: Leaving...)
2013-10-31 01:03:55	<--	westmvit (~westmvit@LLagny-156-34-36-225.w217-128.abo.wanadoo.fr) has quit (Ping timeout: 240 seconds)
2013-10-31 01:06:27	-->	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-10-31 01:25:54	<--	MnO2_ (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-10-31 01:27:32	<--	liang-ting (~liang-tin@147.188.254.241) has quit (Quit: liang-ting)
2013-10-31 01:29:12	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 246 seconds)
2013-10-31 01:30:03	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 272 seconds)
2013-10-31 01:36:58	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-10-31 01:58:12	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 272 seconds)
2013-10-31 01:59:05	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-31 02:27:53	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-31 03:01:58	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 248 seconds)
2013-10-31 03:14:27	-->	liang-ting (~liang-tin@147.188.254.137) has joined #haskell.tw
2013-10-31 03:25:47	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-31 03:31:59	<--	liang-ting (~liang-tin@147.188.254.137) has quit (Quit: liang-ting)
2013-10-31 04:01:29	-->	liang-ting (~liang-tin@host-2-100-141-249.as13285.net) has joined #haskell.tw
2013-10-31 04:04:19	<--	liang-ting (~liang-tin@host-2-100-141-249.as13285.net) has quit (Client Quit)
2013-10-31 04:28:12	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-10-31 04:29:13	-->	schila (~schila@ppp-77-247-19-172.wildpark.net) has joined #haskell.tw
2013-10-31 04:29:14	<--	schila (~schila@ppp-77-247-19-172.wildpark.net) has quit (Excess Flood)
2013-10-31 04:31:55	-->	schila (~schila@31.40.33.24) has joined #haskell.tw
2013-10-31 04:46:24	<--	schila (~schila@31.40.33.24) has quit (Ping timeout: 272 seconds)
2013-10-31 05:17:51	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-31 05:25:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-31 05:56:40	<--	miaout17__ (~miaout17@miaout17.net) has quit (Ping timeout: 245 seconds)
2013-10-31 05:58:40	-->	miaout17__ (~miaout17@miaout17.net) has joined #haskell.tw
2013-10-31 06:09:13	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-10-31 07:13:10	-->	liang-ting (~liang-tin@host-2-100-141-249.as13285.net) has joined #haskell.tw
2013-10-31 07:13:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-31 07:24:34	<--	liang-ting (~liang-tin@host-2-100-141-249.as13285.net) has quit (Quit: liang-ting)
2013-10-31 08:01:27	-->	liang-ting (~liang-tin@host-2-100-141-249.as13285.net) has joined #haskell.tw
2013-10-31 09:17:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-10-31 09:17:59	<--	liang-ting (~liang-tin@host-2-100-141-249.as13285.net) has quit (Quit: liang-ting)
2013-10-31 09:39:06	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-31 09:56:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-10-31 09:59:35	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-31 13:29:14	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-31 14:21:46	CindyLinz	MnO2: 咦, 所以你接下來的工作就是寫那個 shell checker 嗎?
2013-10-31 14:22:53	-->	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-10-31 14:32:39	<--	mno2 (~mno2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: mno2)
2013-10-31 18:57:45	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-10-31 19:31:53	-->	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has joined #haskell.tw
2013-10-31 19:33:47	<--	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has quit (Client Quit)
2013-10-31 19:34:26	-->	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has joined #haskell.tw
2013-10-31 19:52:44	-->	b4283 (~b4283@1-175-232-250.dynamic.hinet.net) has joined #haskell.tw
2013-10-31 20:48:42	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-plryktuxsxcsoysv) has quit (Ping timeout: 246 seconds)
2013-10-31 20:48:50	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-htbdelwpotuukptl) has joined #haskell.tw
2013-10-31 21:28:45	<--	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-10-31 22:00:57	-->	b4284 (~b4283@118.150.141.110) has joined #haskell.tw
2013-10-31 22:51:15	<--	b4283 (~b4283@1-175-232-250.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-01 00:09:25	<--	b4284 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-11-01 01:49:43	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 245 seconds)
2013-11-01 02:21:40	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-11-01 02:25:20	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-htbdelwpotuukptl) has quit (*.net *.split)
2013-11-01 02:25:21	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-11-01 02:43:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-11-01 03:18:12	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-htbdelwpotuukptl) has joined #haskell.tw
2013-11-01 03:18:12	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-11-01 03:26:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-01 04:08:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2013-11-01 04:36:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-01 09:51:13	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-01 10:16:37	-->	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-01 10:18:31	MnO2	https://twitter.com/existentialtype/status/395951944227115008  戰神開砲了 xDD
2013-11-01 12:03:01	cataska	原來 Odersky 提到 SML 是講給 existentialtype 聽的
2013-11-01 12:26:03	favonia	cataska: xDDDD
2013-11-01 12:37:13	cataska	我也很好奇為甚麼 SML 沒有成功
2013-11-01 14:30:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-01 15:08:06	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-01 16:58:30	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-01 17:40:00	hashcat	cataska:那要看你對成功的定義
2013-11-01 18:39:17	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-01 21:18:38	CindyLinz	Agda 有 literal mode 嗎? 類似...  > 開頭的行才是 code, 沒有 > 開頭的是註解
2013-11-01 21:45:39	-->	liuzhoou (~liuzhoou@124.79.212.243) has joined #haskell.tw
2013-11-01 22:29:22	hashcat	http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.LiterateAgda
2013-11-01 22:33:44	hashcat	長得跟literate haskell不一樣
2013-11-01 22:47:13	CindyLinz	hmm.. 好, 謝謝~
2013-11-01 22:56:26	-->	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has joined #haskell.tw
2013-11-01 22:59:44	hashcat	用Agda做啥嚜?
2013-11-01 23:00:54	CindyLinz	在練習
2013-11-01 23:01:37	CindyLinz	目標是寫一個 Haskell 式的偽 Q-sort, 然後證明它排序完的元素就是原有的元素, 並且相鄰項有 <= 的關係
2013-11-01 23:02:05	CindyLinz	List 裡面都只用 Z+ 的 Nat 就好了
2013-11-01 23:03:06	hashcat	Z+是什麼
2013-11-01 23:03:14	CindyLinz	0,1,2,3,... XD
2013-11-01 23:03:24	hashcat	喔~
2013-11-01 23:03:30	CindyLinz	我還是沒習慣這些邏輯學家的正整數有包含0 XD
2013-11-01 23:03:41	CindyLinz	所以喜歡講 Z+ XD
2013-11-01 23:03:44	CindyLinz	或是 N0
2013-11-01 23:05:32	hashcat	正整數有0有個很好的理由
2013-11-01 23:06:17	CindyLinz	我不否認.. XD
2013-11-01 23:06:33	CindyLinz	只是我習慣稱它「非負整數」 XD
2013-11-01 23:07:05	hashcat	看模算術(Modular Arithmetic)就知道是啥回事了
2013-11-01 23:08:15	hashcat	不管模幾都有0, 推廣到模無限就是正整數
2013-11-01 23:08:27	hashcat	0亦正亦負
2013-11-01 23:08:52	CindyLinz	可是它叫非負整數集嘛 (扭)
2013-11-01 23:09:38	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-11-01 23:10:21	hashcat	計算機領域模算術用到不少, 從陣列就開始了
2013-11-01 23:11:47	hashcat	非負即正
2013-11-01 23:13:46	hashcat	貌似對計算機來說把零排除在外才是各種不方便
2013-11-01 23:15:56	petercommand	CindyLinz: Z+不就是正整數嗎?
2013-11-01 23:16:27	hashcat	正整數的說法是指啥要看上下文
2013-11-01 23:16:57	hashcat	數論通常就不會把0包含進去
2013-11-01 23:17:10	hashcat	因為0不會是因數的
2013-11-01 23:17:33	hashcat	幼稚園也是從1數起
2013-11-01 23:22:33	hychen	那天去mopcon的場地, 它的電梯從0開始算 XD
2013-11-01 23:23:54	hashcat	聽起來像是整棟樓都他們的
2013-11-01 23:24:27	hychen	沒, 它們只包一層
2013-11-01 23:24:31	hychen	但還滿大的
2013-11-01 23:25:51	hashcat	那是建商想到要從0開始
2013-11-01 23:26:11	hychen	其實只是電梯的code出包了...
2013-11-01 23:26:19	hychen	最上層是R
2013-11-01 23:26:22	hychen	0-R
2013-11-01 23:27:07	hashcat	???
2013-11-01 23:27:37	hychen	第一層0, 第二層1, 第三層R
2013-11-01 23:28:04	hashcat	哽在哪
2013-11-01 23:28:43	hychen	沒啥梗啊, 就電梯的樓層從0開始計算, 剛好那時在辦技術研討會. 軟體人的自然數都從0開始....
2013-11-01 23:29:43	hashcat	只是程序寫錯而已
2013-11-01 23:29:47	hashcat	這電梯還有人敢搭
2013-11-01 23:30:38	hashcat	會不突然上升
2013-11-01 23:32:36	hashcat	說是特別設計就算了
2013-11-01 23:33:28	hashcat	有bug的電梯前陣子才一個
2013-11-01 23:40:44	CindyLinz	我有問題 QQ
2013-11-01 23:41:15	CindyLinz	我有一個函數, 其中一個參數的 type 是 is-true (某個 return Bool 的 expression)
2013-11-01 23:41:54	CindyLinz	is-true 是 Bool -> Set, 吃 true 的時候會 return Top type (就是恰有一個 tt instance 的 type), 吃 false 的時候會 return Bot type (沒有 instance 的 type)
2013-11-01 23:42:16	CindyLinz	所以目的就是這個函數只有在這一個參數的 type 為 Top 的時候才需要考慮
2013-11-01 23:42:58	CindyLinz	我的問題是, 傳進來的這個參數當然一定會是 tt, 而我在寫這函數內容的時候, 能不能取出這個算出它是 Top type 的那個 Bool expression 的計算過程?
2013-11-01 23:44:56	hashcat	你打出每個函數的宣告再說要做啥可能會比較好懂
2013-11-01 23:45:37	CindyLinz	exclude : (n : Nat) -> (ms : List) -> is-true (in-set n ms) -> List
2013-11-01 23:46:00	CindyLinz	這是我講的正要寫的函數
2013-11-01 23:46:04	CindyLinz	in-set : Nat -> List -> Bool
2013-11-01 23:46:16	CindyLinz	這個是 test 第一個參數有沒有在第二個參數裡面
2013-11-01 23:46:30	CindyLinz	is-true : Bool -> Set
2013-11-01 23:46:37	CindyLinz	is-true true = Top
2013-11-01 23:46:41	CindyLinz	is-true false = Bot
2013-11-01 23:47:15	CindyLinz	我寫 exclude 內容的時候, 能不能 pattern matching in-set 走的 branch?
2013-11-01 23:48:55	suhorng	我想不行
2013-11-01 23:49:09	suhorng	所以一般才會用 data type 當證明吧?
2013-11-01 23:50:01	CindyLinz	嗯嗯
2013-11-01 23:51:26	CindyLinz	所以如果這樣寫, 如果運氣好, 直接在那邊打個 tt, 看 Agda 能不能很聰明地自動 unify 成功
2013-11-01 23:51:34	CindyLinz	如果不行的話, 這個方法就 GG 了?
2013-11-01 23:52:10	CindyLinz	也就是.. 對於別項參數的組合... 覺得合理該定義的就在這邊打 tt
2013-11-01 23:52:26	CindyLinz	覺得不合理應該跳過的就打 (), 剩下就是 Agda 的事這樣? XDD
2013-11-01 23:53:00	suhorng	應該吧XD
2013-11-01 23:53:23	CindyLinz	缺乏參與感... :|
2013-11-01 23:53:38	suhorng	不行的話搞不好對 ms 分case討論可以弄出來/o/
2013-11-01 23:54:25	suhorng	因為那個該 () 的時候, 通常就是 is-true (in-set n ms) 已經確定算出 bot 了 @@
2013-11-01 23:54:45	suhorng	s/確定算出/真的算出/g
2013-11-01 23:55:04	CindyLinz	把 ms 拆一拆, Agda 就有更高的機會直接判斷它是 tt or () 的意思?
2013-11-01 23:55:04	-->	liuzhoou_ (~liuzhoou@124.79.212.243) has joined #haskell.tw
2013-11-01 23:57:43	hashcat	唉我沒看懂
2013-11-01 23:57:48	hashcat	啥嚜是branch
2013-11-01 23:58:05	CindyLinz	hashcat: 像 is-true true 和 is-true false 這樣是 branch
2013-11-01 23:58:09	CindyLinz	我指的是這個
2013-11-01 23:58:18	CindyLinz	就是分成不同 case 的意思
2013-11-01 23:58:20	<--	liuzhoou (~liuzhoou@124.79.212.243) has quit (Ping timeout: 260 seconds)
2013-11-02 00:00:09	hashcat	你怎會想到這能pattern matching
2013-11-02 00:00:50	CindyLinz	我就是還想不到能怎麼 pattern matching 所以才問啊 XD
2013-11-02 00:02:23	hashcat	你想要這麼作的話
2013-11-02 00:02:33	suhorng	嗯...我覺得不太算"直接判斷"
2013-11-02 00:02:34	hashcat	要另外宣告一個型別
2013-11-02 00:02:51	suhorng	不過沒有去研究他的演算法...
2013-11-02 00:03:03	suhorng	應該是真的會下去跑吧..?
2013-11-02 00:03:04	hashcat	保存in-set的命題
2013-11-02 00:03:56	hashcat	把in-set變成建構子
2013-11-02 00:04:28	CindyLinz	所以就是用一個 data type 來表示 in-set 的效果.. 有 in-set 的例子, 會對應這個 type 裡的一組 instance?
2013-11-02 00:04:44	hashcat	嗯嗯
2013-11-02 00:04:58	hashcat	可能你講的就是我的意思
2013-11-02 00:05:50	CindyLinz	好
2013-11-02 00:05:57	hashcat	型別即命題
2013-11-02 00:06:24	suhorng	那其實就不用 in-set ... XD
2013-11-02 00:06:33	hashcat	貌似每種程序語言都有句話能點破天機
2013-11-02 00:06:35	CindyLinz	剛剛寫起來覺得.. 寫成 data type 的表示法, 比計算 Bool 的方式難寫.. 是真的比較難寫, 還是我還沒想到寫起來類似 Bool 函數的寫法?
2013-11-02 00:06:49	hashcat	程序即資料是lisp
2013-11-02 00:07:04	suhorng	CindyLinz: http://www.cse.chalmers.se/~ulfn/papers/afp08/tutorial.pdf
2013-11-02 00:07:34	suhorng	計算Bool..其實計算不就是一樣 in-set 算的?
2013-11-02 00:07:51	hashcat	Bool不是一個有保存你所需資訊的型別
2013-11-02 00:08:30	suhorng	CindyLinz: 2.5節的example
2013-11-02 00:08:50	suhorng	真的XD 這樣寫體會到 bool 不保存資訊那個論點
2013-11-02 00:09:26	hashcat	這種講法我是覺得怪怪啦
2013-11-02 00:09:39	hashcat	不過詞窮了
2013-11-02 00:09:41	CindyLinz	我也不知道, 不知道為什麼好像寫 return Bool 的函數, 就很順手 @_@"
2013-11-02 00:09:50	suhorng	那是個 proposition
2013-11-02 00:10:10	hashcat	對啦對啦換個講法
2013-11-02 00:10:18	suhorng	然後 bool 只是得到那個 proposition 被證為真還是被證偽 沒有保存proof
2013-11-02 00:10:21	CindyLinz	然後寫 data type 的時候有一種不太舒服的感覺...
2013-11-02 00:10:27	hashcat	Bool的true,false不是命題
2013-11-02 00:10:34	CindyLinz	就是我不知道我有沒有漏列該有的 case @@"
2013-11-02 00:10:50	CindyLinz	寫 Bool 函數的時候, Agda 會提醒我有沒有考慮過所有的 case
2013-11-02 00:11:28	hashcat	Idris :D
2013-11-02 00:11:47	hashcat	來看看idris最近怎樣
2013-11-02 00:13:36	hashcat	嗯沒怎樣
2013-11-02 00:14:12	hashcat	看到有沒考慮所有case就想到idris
2013-11-02 00:15:05	CindyLinz	Agda 在寫函數的時候會考慮啊
2013-11-02 00:15:05	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-11-02 00:15:38	CindyLinz	還是我定完 data type 以後, 再對我想考慮的目標寫一個函數
2013-11-02 00:15:58	CindyLinz	讓它在符合我希望的前提的時候會 return 這個 type...
2013-11-02 00:16:13	CindyLinz	這樣好像又回到要怎麼 extract 這個前提的計算過程的問題 orz
2013-11-02 00:17:40	hashcat	貌似我又看不懂了
2013-11-02 00:17:45	CindyLinz	XD
2013-11-02 00:18:01	CindyLinz	一邊在心中想一邊講的下場 XD
2013-11-02 00:18:04	hashcat	反正命題的真偽跟Bool不一樣
2013-11-02 00:18:12	CindyLinz	你看到的是我腦中的 IR.. XDD
2013-11-02 00:18:45	hashcat	最近比較關心 X10
2013-11-02 00:18:50	hashcat	要不看下
2013-11-02 00:19:09	hashcat	X10語法比較噁心噗噗
2013-11-02 00:19:17	CindyLinz	我正在練習 Agda 啊..
2013-11-02 00:19:53	hashcat	也有比較噁心的dependent type
2013-11-02 00:21:27	hashcat	他後端有集群+gpu
2013-11-02 00:21:53	hashcat	物件導向+dependent type
2013-11-02 00:23:03	hashcat	扯遠..加油吧
2013-11-02 00:23:24	CindyLinz	XD
2013-11-02 00:24:21	suhorng	就想到這個lol http://existentialtype.wordpress.com/2011/03/15/boolean-blindness/
2013-11-02 00:25:34	CindyLinz	那先來看一下 suhorng 大大提供的 tutorial 好了 ._.
2013-11-02 00:25:52	CindyLinz	咦 跟我看的是同一本 XD
2013-11-02 00:26:15	suhorng	XD
2013-11-02 00:26:29	CindyLinz	喔他是說可以這樣做, 沒有說它是唯一解啊.. 這情境怎麼跟在定義 data type 的時候一樣. 囧
2013-11-02 00:26:34	suhorng	我也是再看這本 做了一點習題 可是到 lambda calculus type checker 就卡住了
2013-11-02 00:26:44	suhorng	對阿 習題還給了一些不同定義
2013-11-02 00:26:52	suhorng	聽說 Agda 最難的(之一)就是定 data type
2013-11-02 00:27:02	CindyLinz	我要怎麼知道我沒有少定啊 orz
2013-11-02 00:27:21	CindyLinz	不然我證明了一個命題.. 但是不知道這個命題是不是我要的 orz
2013-11-02 00:29:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 241 seconds)
2013-11-02 00:31:23	<--	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-02 00:31:58	-->	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has joined #haskell.tw
2013-11-02 00:44:54	<--	suhorng (~suhorng@118-166-50-73.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-02 00:47:22	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 240 seconds)
2013-11-02 00:59:34	-->	tiglog (~tiglog@111.161.8.10) has joined #haskell.tw
2013-11-02 01:05:56	CindyLinz	unify 不出來 :(
2013-11-02 01:41:24	<--	MnO2 (~MnO2@218-161-2-92.HINET-IP.hinet.net) has quit (Quit: Leaving)
2013-11-02 01:42:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-02 01:53:56	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-11-02 02:04:45	<--	liuzhoou_ (~liuzhoou@124.79.212.243) has quit (Remote host closed the connection)
2013-11-02 02:55:41	monochrom	dependent variable 譯作「因變量」(是不是?). 可不可以把 dependent type 譯作「因型別」?
2013-11-02 03:32:23	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-11-02 03:38:25	CindyLinz	相依變數, 相依型別?
2013-11-02 03:38:46	CindyLinz	線性獨立 <-> 線性相依
2013-11-02 03:39:29	CindyLinz	我覺得我需要 Agda 推演的演算法才寫得下去.. trial-error 不是我的 style... orz
2013-11-02 03:51:48	<--	tiglog (~tiglog@111.161.8.10) has quit (Quit: Leaving)
2013-11-02 04:01:16	<--	hashcat (~hashcat@27.240.9.118) has quit (Quit: Leaving)
2013-11-02 05:14:29	monochrom	呀, 「相依」比較好 :)
2013-11-02 05:21:04	monochrom	"如果一定要給這個相依型別函數定下期限, 我會說是一萬萬年" :)
2013-11-02 05:54:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-11-02 08:01:58	-->	liang-ting (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-02 08:08:16	--	liang-ting is now known as xcycl
2013-11-02 08:19:38	xcycl	在 Agda 的命題的 type 是 Set
2013-11-02 08:19:50	xcycl	 寫成 Bool 是 decidable
2013-11-02 08:25:33	xcycl	不管怎樣, 都沒辦法對 Set 做 pattern matching 的 ...
2013-11-02 09:10:22	xcycl	不過這樣說不大對
2013-11-02 09:10:36	xcycl	in-set 可以寫成以下這樣：
2013-11-02 09:10:37	xcycl	in-set : {n : ℕ } → ℕ → Vec ℕ (suc n) → Set
2013-11-02 09:10:38	xcycl	in-set n (x ∷ []) = n ≡ x
2013-11-02 09:10:38	xcycl	in-set n (x ∷ y ∷ xs) = n ≡ x ⊎ in-set n (y ∷ xs)
2013-11-02 09:12:01	xcycl	直覺上說 若 n 在 (x : xs) 裡頭的話，要嘛 n = x 要嘛 n 在 xs, 可是這對 singleton 不成立要另外看
2013-11-02 09:12:17	xcycl	所以寫成上面那樣
2013-11-02 09:12:45	xcycl	所以要用以上的證明的時候，通常也要分成兩個 cases 討論
2013-11-02 09:13:27	xcycl	我可以定義 pos，只要有 in-set n xs 的證明，就去算那個 n 在 xs 的哪裡
2013-11-02 09:13:35	xcycl	pos : {m : ℕ} → (n : ℕ) → (xs : Vec ℕ (suc m)) → in-set n xs → ℕ
2013-11-02 09:13:36	xcycl	pos .x (x ∷ []) refl = 0
2013-11-02 09:13:37	xcycl	pos .x (x ∷ x₁ ∷ xs) (inj₁ refl) = 0
2013-11-02 09:13:38	xcycl	pos n (x ∷ x₁ ∷ xs) (inj₂ y) = 1 + pos n (x₁ ∷ xs) y
2013-11-02 09:15:52	-->	caasih (~caasiHuan@202.89.121.18) has joined #haskell.tw
2013-11-02 09:17:44	xcycl	這時候因為 Agda 可以 normalise 了，如果是 x :: [] 的話，in-set 的證明就是 x = n, 因為有 K rule (應該是?) 所以只有 refl 這個證明, 所以第三個 input 的 case 就都掃光了
2013-11-02 09:17:49	xcycl	剩下就差不多這樣 ...
2013-11-02 09:19:52	xcycl	至於把命題定成 data type 還是用現成的 sigma, pi type 去定, 就只是 externalism 跟 internalise 的差異，Josh 在做的東西就是這樣
2013-11-02 09:27:03	<--	caasih (~caasiHuan@202.89.121.18) has quit (Quit: leaving)
2013-11-02 10:02:39	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-02 10:09:59	-->	b4283 (~b4283@218-164-205-187.dynamic.hinet.net) has joined #haskell.tw
2013-11-02 10:13:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-02 11:10:09	CindyLinz	對耶! in-set 的 return 可以直接就是個 Set!
2013-11-02 11:20:55	CindyLinz	覺得在哪個參數打 . 真是很巧妙 ._.
2013-11-02 12:21:32	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-02 12:43:47	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-02 12:50:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-02 12:57:13	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-11-02 13:17:42	-->	mno2 (~mno2@111-241-186-211.dynamic.hinet.net) has joined #haskell.tw
2013-11-02 13:25:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-02 13:32:49	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 272 seconds)
2013-11-02 13:34:44	<--	mno2 (~mno2@111-241-186-211.dynamic.hinet.net) has quit (Quit: mno2)
2013-11-02 13:39:06	CindyLinz	唔我不知道用 data 定出一個 type 和用 function return 一個 Set 有什麼不一樣 orz
2013-11-02 13:39:29	CindyLinz	用 function return 一個 Set 就不能 pattern matching 嗎?
2013-11-02 14:32:46	-->	hashcat (~hashcat@114-47-121-145.dynamic.hinet.net) has joined #haskell.tw
2013-11-02 14:48:35	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-02 15:23:26	<--	hashcat (~hashcat@114-47-121-145.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-02 15:45:08	CindyLinz	我像在把 data Asc-Set : List -> Set where 的 instance 讀作: 對某一個 list 為遞增的證明...
2013-11-02 15:45:12	CindyLinz	我現在把 data Asc-Set : List -> Set where 的 instance 讀作: 對某一個 list 為遞增的證明...
2013-11-02 16:07:10	CindyLinz	咦.. Agda 沒有原生的 tuple 喔? QQ
2013-11-02 16:09:47	hychen	!!
2013-11-02 17:13:45	-->	hashcat (~hashcat@27.240.9.118) has joined #haskell.tw
2013-11-02 17:35:41	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-02 17:35:54	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-02 17:42:52	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-02 17:43:06	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-02 18:05:26	<--	hashcat (~hashcat@27.240.9.118) has quit (Ping timeout: 272 seconds)
2013-11-02 18:17:39	-->	hashcat (~hashcat@27.245.235.180) has joined #haskell.tw
2013-11-02 19:25:39	-->	liang-ting (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-02 19:29:20	liang-ting	Josh 解釋 type function  跟 inductive families (跟 vector 一起寫在 data type 裡頭)：
2013-11-02 19:29:25	liang-ting	用 type functions 有侷限 XD
2013-11-02 19:29:25	liang-ting	如果 index 變動像 vector 那樣很規矩可以，一亂動就爆了 XD
2013-11-02 19:29:27	liang-ting	就算寫 coinductively generated type
2013-11-02 19:29:29	liang-ting	這時就沒辦法保證 inhabitant 的大小有窮 XD
2013-11-02 19:29:29	liang-ting	inductive families 才有辦法在 index 隨著物件解構愈變愈大時還能保證物件有窮 XD
2013-11-02 19:29:30	--	liang-ting is now known as xcycl
2013-11-02 19:29:30	xcycl	這是 index-first datatypes 和 (coinductive) type functions 的決定性差異 XD
2013-11-02 19:31:10	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-02 19:41:33	-->	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-02 19:42:55	<--	hashcat (~hashcat@27.245.235.180) has quit (Ping timeout: 240 seconds)
2013-11-02 19:49:37	xcycl	tuple 是 pi 或是 sigma 的特例
2013-11-02 19:51:12	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-02 19:52:04	xcycl	btw, 請忽略掉  "跟 inductive families (跟 vector 一起寫在 data type 裡頭)" 這句後面的括號
2013-11-02 19:52:12	xcycl	我剛誤解了
2013-11-02 19:57:31	-->	hashcat (~hashcat@27.52.152.178) has joined #haskell.tw
2013-11-02 20:27:37	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-02 20:30:56	<--	hashcat (~hashcat@27.52.152.178) has quit (Ping timeout: 240 seconds)
2013-11-02 20:39:53	-->	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-02 20:44:27	-->	hashcat (~hashcat@27.52.54.170) has joined #haskell.tw
2013-11-02 21:08:13	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-02 21:23:36	-->	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has joined #haskell.tw
2013-11-02 21:25:21	-->	xcycl (~liang-tin@host-2-100-141-73.as13285.net) has joined #haskell.tw
2013-11-02 21:28:28	<--	hashcat (~hashcat@27.52.54.170) has quit (Ping timeout: 240 seconds)
2013-11-02 22:10:37	-->	tiglog (~tiglog@111.161.8.8) has joined #haskell.tw
2013-11-02 22:15:17	CindyLinz	xcycl: 我的程度還無法理解這種解釋... QQ  我再補課一會子教材好了 ._. (coinductively generated type, inhabitant 大小有窮.. orz)
2013-11-02 22:15:47	CindyLinz	我找到一份 71 頁的 PDF, 貌似不錯... 標題是 An Agda proof of the correctness of
2013-11-02 22:15:49	CindyLinz	Valiant’s algorithm for context free
2013-11-02 22:15:52	CindyLinz	parsing
2013-11-02 22:16:24	xcycl	可以看以下這個例子
2013-11-02 22:16:25	xcycl	data in-set' (n : ℕ) : {n : ℕ} → Vec ℕ (suc n) → Set where
2013-11-02 22:16:26	xcycl	  in-head   : {m : ℕ} {xs : Vec ℕ m} → in-set' n (n ∷ xs)
2013-11-02 22:16:27	xcycl	  somewhere : {x y m : ℕ} {xs : Vec ℕ m} →
2013-11-02 22:16:28	xcycl	              in-set' n (x ∷ xs) → in-set' n (y ∷ x ∷ xs)
2013-11-02 22:17:48	<--	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-02 22:18:04	xcycl	前面的做法沒辦法對 set 做 pattern matching, 是對 input 做 pattern matching
2013-11-02 22:20:40	CindyLinz	data ... : ... where 這邊, type 放在 : 的左邊和右邊的差異是什麼啊? 書上寫說左邊是 parameter, 右邊是 index, 然後實際上知道有時候寫在右邊會 compile 不過, 放左邊就會過.. 但還是不知道實際上的差異是什麼 @@
2013-11-02 22:21:33	xcycl	放在左邊的話，可以想成同時定義了 List ℕ, List Bool, ...  對所有 type
2013-11-02 22:22:04	CindyLinz	對左邊的 type 參數 是「total」的?
2013-11-02 22:22:08	CindyLinz	右邊的可以 partial
2013-11-02 22:22:11	CindyLinz	這樣?
2013-11-02 22:22:17	xcycl	不是
2013-11-02 22:22:21	xcycl	右邊是 function
2013-11-02 22:22:49	xcycl	Vec (A : Set) : ℕ -> Set
2013-11-02 22:22:57	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-yqltyppnkazbczli) has quit (Remote host closed the connection)
2013-11-02 22:22:57	<--	superbil (uid12362@gateway/web/irccloud.com/x-ynyrwlswwnlvdfga) has quit (Remote host closed the connection)
2013-11-02 22:22:58	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-yfjdpivkbhguipak) has quit (Remote host closed the connection)
2013-11-02 22:24:09	xcycl	定義一個 ℕ ->  Set 的函數
2013-11-02 22:24:35	xcycl	召喚 josh 進來好了 xD
2013-11-02 22:24:55	CindyLinz	如果把 data _<=_ : Nat -> Nat -> Set where 寫成 data _<=_ (a b : Nat) -> Set where 會怎麼樣?
2013-11-02 22:25:57	xcycl	constructor 的 return type 要跟定義的 type 一致喔
2013-11-02 22:26:37	CindyLinz	constructor 的 return type 是只要跟 : 右邊一致, 還是左邊+右邊一致?
2013-11-02 22:26:49	xcycl	左邊
2013-11-02 22:27:05	CindyLinz	咦?
2013-11-02 22:27:08	xcycl	像是 Vec
2013-11-02 22:27:49	xcycl	index 可以變動
2013-11-02 22:28:03	xcycl	但是元素的 index 要固定
2013-11-02 22:28:19	CindyLinz	你這個 index 指的是 Vec 的長度?
2013-11-02 22:28:39	xcycl	啊啊
2013-11-02 22:28:41	CindyLinz	元素指的是每一個 Vec 的實體, 而不是 Vec 實體裡面的元素?
2013-11-02 22:28:41	xcycl	講錯了
2013-11-02 22:28:57	xcycl	像是 Vec
2013-11-02 22:28:57	xcycl	index 可以變動
2013-11-02 22:28:59	xcycl	但是元素的 type 要固定
2013-11-02 22:29:44	-->	hashcat (~hashcat@27.52.54.170) has joined #haskell.tw
2013-11-02 22:30:07	CindyLinz	immutable 的 Vec 不是一寫下來就不會動了, 連 index 也固定了?
2013-11-02 22:30:48	xcycl	_∷_ 的 type 是 A -> Vec A n -> Vec A (suc n) 啊
2013-11-02 22:30:54	xcycl	index 可以變
2013-11-02 22:31:28	CindyLinz	在 constructor 裡面 refer 到這個 Vec 的時候, 後面都一定要跟同一個 A 的意思?
2013-11-02 22:31:42	xcycl	恩
2013-11-02 22:32:05	xcycl	最後的 return 要是同一個 A
2013-11-02 22:32:06	CindyLinz	不能寫 _::_ : {B : Set} -> A -> Vec B n -> Vec A (suc n) ?
2013-11-02 22:32:32	CindyLinz	喔喔 跟這無關
2013-11-02 22:33:34	<--	b4283 (~b4283@218-164-205-187.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-02 22:34:17	xcycl	恩恩 無關，可是這沒辦法在 Agda 上寫
2013-11-02 22:34:32	xcycl	因為 Set 比較大
2013-11-02 22:34:53	xcycl	Vec A (suc n) 在 Set 裏面
2013-11-02 22:35:02	xcycl	但是 Set 在 Set1
2013-11-02 22:35:45	xcycl	要換成 "data Vec' (A : Set) : ℕ → Set₁ where ..."
2013-11-02 22:37:46	CindyLinz	我想我可能還是先補教材好了 ._.
2013-11-02 22:40:18	CindyLinz	舊的怪物還沒處理好, 問一問不小心又引出新的怪物 XD
2013-11-02 22:40:29	xcycl	我記得 Ulf Norell 跟 James Chapman 寫的還不錯
2013-11-02 22:42:51	CindyLinz	那一本看了.. 記得他寫的是: 你可以這樣寫, 也可以這樣寫, 或是這樣寫就會更精簡歐~
2013-11-02 22:43:04	xcycl	XD
2013-11-02 22:43:15	CindyLinz	可是我開始練習以後, Agda compiler 才開始跟我說, 你不可以這樣寫, 因為 Error....
2013-11-02 22:43:29	hashcat	我覺得問題出在沒搞清楚 Curry-Howard isomorphism
2013-11-02 22:50:13	xcycl	乾脆一點從 type theory 開始學, 不過應該專業的可以推薦學習書單 xD
2013-11-02 22:50:18	-->	superbil (uid12362@gateway/web/irccloud.com/x-ygfkhsodsphqumjg) has joined #haskell.tw
2013-11-02 22:50:58	CindyLinz	真的有必要這麼乾脆嗎 XD
2013-11-02 22:51:02	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-nandzqbasqzlvgwv) has joined #haskell.tw
2013-11-02 22:51:03	hashcat	型別即命題, 型別的函數即命題的函數
2013-11-02 22:51:09	hashcat	命題的函數即謂詞
2013-11-02 22:51:29	xcycl	P(x) predicate
2013-11-02 22:51:50	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-odbyioinuaeqlywd) has joined #haskell.tw
2013-11-02 22:51:51	hashcat	dependent type可以把數值當作謂詞的參數
2013-11-02 22:52:20	xcycl	學 type theory 跟學 mathematical logic 幾乎是一樣的東西
2013-11-02 22:52:24	hashcat	找個有講到curry-howard isomorphism的dependent type教程吧
2013-11-02 22:53:07	hashcat	CindyLinz:不然你一直二百五的點都是一樣的概念
2013-11-02 22:53:59	hashcat	xcycl: 其實同構就是一樣了, 保持不同的名詞是方便
2013-11-02 22:54:33	hashcat	也不能說是方便, 那些名詞有數學以外的意義
2013-11-02 22:54:44	xcycl	傳統的 mathematical logic 還有其他東西，像是 Stone duality 之類的
2013-11-02 22:56:28	xcycl	但 representation 對學 type theory 幫助不大 xD
2013-11-02 22:56:43	CindyLinz	hashcat: 我以為我是知道那個觀念的, 而你講這些, 對我遇到的 Agda parse error 並沒有幫助
2013-11-02 22:56:55	hashcat	我type theory連看都沒看哈
2013-11-02 22:57:00	CindyLinz	我不知道這些觀念在 Agda 裡面要以怎樣的語法來表示
2013-11-02 22:57:06	hashcat	直接套數理邏輯
2013-11-02 22:57:52	xcycl	數理邏輯一般討論古典的東西，跟 Martin-Lof type theory 還是不大一樣
2013-11-02 22:58:37	xcycl	像是"選擇公設"在 Martin-Lof type theory 成立
2013-11-02 22:58:40	hashcat	我找找有沒同時搞定這幾種概念的教程
2013-11-02 22:58:54	xcycl	（雖然說選擇公設的意義不大一樣了 ..）
2013-11-02 22:59:26	hashcat	挖太深會喚醒古老的惡魔(?)
2013-11-02 23:00:41	hashcat	CindyLinz啥嚜剖析錯誤?
2013-11-02 23:01:55	CindyLinz	我有了 data Set-Eq : List -> List -> Set where
2013-11-02 23:02:05	CindyLinz	data Asc-Set : List -> Set where
2013-11-02 23:02:15	xcycl	(有問題可以在 PLT 上多問一下，Josh 說看到會回 xD)
2013-11-02 23:02:30	CindyLinz	Set-Eq 是兩個 List 當集合看的時候為同一個 Set
2013-11-02 23:02:32	CindyLinz	好 XD
2013-11-02 23:02:50	CindyLinz	Asc-Set (可能應該叫 Asc-List) 是指這個 List 為非降序列
2013-11-02 23:03:04	CindyLinz	然後我有 data _x_x_ (A B C : Set) : Set where
2013-11-02 23:03:10	CindyLinz	只是個 tuple
2013-11-02 23:03:49	CindyLinz	我想要寫一個這樣的東西
2013-11-02 23:03:50	CindyLinz	qsort : (as : List) -> _x_x_ (bs : List) (Asc-Set bs) (Set-Eq as bs)
2013-11-02 23:05:04	favonia	xcycl: 慫恿 josh 上 IRC 感覺比較快（逃
2013-11-02 23:05:09	hashcat	那個x該不會是字母吧
2013-11-02 23:05:18	CindyLinz	然後我不覺得 Curry-Howard correspondenc 和 Set 要分為 Set1 Set2 Set3 ... 有什麼相關..
2013-11-02 23:05:34	CindyLinz	x 是字母啊
2013-11-02 23:05:54	xcycl	沒辦法寫 cartesian product , 因為後面的 Asc-Set 跟 Set-Eq 是 depend on bs 的
2013-11-02 23:06:11	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-02 23:06:20	CindyLinz	啊對 Agda 說: Parse
2013-11-02 23:06:20	CindyLinz	error :<ERROR> List) (Asc-Set bs) (Set-Eq as...
2013-11-02 23:06:24	xcycl	_x_x_ 的話代表三個 type 沒有依賴
2013-11-02 23:07:11	xcycl	favonia: 他好像不大願意 xD
2013-11-02 23:08:52	CindyLinz	那這 parse error?
2013-11-02 23:09:34	hashcat	我只看到前半段
2013-11-02 23:09:57	xcycl	你換成 existential type (sigma type) 就知道了
2013-11-02 23:12:29	CindyLinz	可是 parse error 應該是語法上某個限制? 是 Agda 限制一個 type 的描述本身不可以有巢狀的描述?
2013-11-02 23:12:50	CindyLinz	一定要把 component 用到的, 先抽出來寫在左邊取名字, 然後再拿它的名字代進去?
2013-11-02 23:15:30	xcycl	看不大懂 xD
2013-11-02 23:17:06	xcycl	(bs : List) (Asc-Set bs) (Set-Eq as bs) 的第二跟第三個 type 是 Asc-Set(bs), Set-Eq(as, bs)
2013-11-02 23:18:23	CindyLinz	噢, 括號是加在這邊?
2013-11-02 23:18:56	xcycl	如果你要描述 "有一個 list 滿足 A 條件"
2013-11-02 23:19:17	CindyLinz	嗯, 不能直接用 cartesian product 大概知道意思..
2013-11-02 23:19:37	xcycl	要寫成 Σ (List Nat) A
2013-11-02 23:19:53	xcycl	A 的 type 是 List Nat -> Set
2013-11-02 23:20:04	CindyLinz	喔我 List 偷懶直接就寫死是 Nat 的 list XD
2013-11-02 23:20:16	xcycl	我也是偷懶，不過這個沒差啦
2013-11-02 23:22:03	hashcat	CindyLinz:他的關係是數理邏輯上不能構造的命題, Type也不能構造
2013-11-02 23:22:09	CindyLinz	用這個 sigma 來要求要存在 fst 塞到 snd 函數的證明?
2013-11-02 23:22:44	CindyLinz	如果只用 cartesian 的話, 可以給一個 List, 和一個要代別的 List 才會存在的證明, 就沒有限制到了?
2013-11-02 23:23:17	xcycl	cartesian product A x B 是 ΣA (\_ -> B)
2013-11-02 23:23:33	xcycl	cartesian product A x B 是 ΣA (\_ -> B )
2013-11-02 23:24:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-02 23:24:50	-->	b4283 (~b4283@118.150.141.110) has joined #haskell.tw
2013-11-02 23:25:32	hashcat	Set才要分Set1, 2, 3啥的, 不然就有悖論
2013-11-02 23:26:07	<--	miaout17__ (~miaout17@miaout17.net) has quit (Remote host closed the connection)
2013-11-02 23:26:22	xcycl	 set theory 也有分 set, class 喔
2013-11-02 23:26:42	hashcat	貌似NBG集合論
2013-11-02 23:27:15	hashcat	若是你要命題的運算, 像是且或啥的, 也要按照對應同構來作
2013-11-02 23:28:22	hashcat	http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence#General_formulation
2013-11-02 23:29:10	hashcat	先用數理邏輯的概念去思考命題, 再用那張表轉換
2013-11-02 23:29:43	CindyLinz	hashcat: 你解釋的時候啊, 如果用到像「對應」「同構」「相當於」這樣的描述方式, 要先確認聽的人對於你想類比的對象是熟悉的才行啊 @@"
2013-11-02 23:30:11	hashcat	有些集合論沒有class的概念, 我也是覺得有class比較快樂
2013-11-02 23:30:14	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-02 23:30:36	xcycl	如果只是 first-order 或是  second-order logic 的話, 對應的是 System T 或是 F 還用不到 dependent type theory
2013-11-02 23:32:09	hashcat	我的意思是先用謂詞邏輯的概念去規劃自己要的命題
2013-11-02 23:33:08	hashcat	再用那張表找出對應, 構造出來
2013-11-02 23:33:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-02 23:33:36	hashcat	遵循這種步驟, 應該就不會二百五了
2013-11-02 23:33:54	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-11-02 23:39:01	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-nandzqbasqzlvgwv) has quit (Read error: Connection reset by peer)
2013-11-02 23:39:19	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tuyewacwavnwxwts) has joined #haskell.tw
2013-11-02 23:39:48	<--	xcycl (~liang-tin@host-2-100-141-73.as13285.net) has quit (Quit: xcycl)
2013-11-02 23:40:09	hashcat	CindyLinz: 感覺你是混搖了不同領域的概念
2013-11-02 23:40:39	hashcat	在我看來是跟之前誤把Bool當命題真偽有點像
2013-11-02 23:45:05	hashcat	CindyLinz: 我解釋的怎樣?
2013-11-02 23:45:57	CindyLinz	hashcat: 你解釋了我不可能是對的, 但沒有說出我是哪裡錯... ._.
2013-11-02 23:46:02	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Quit: mno2)
2013-11-02 23:48:30	hashcat	_x_x_ 是一種謂詞, 不是對命題的運算
2013-11-02 23:50:03	hashcat	你每創造一種新的data的時候, 對應到邏輯中的命題或者謂詞
2013-11-02 23:50:55	CindyLinz	謂詞??
2013-11-02 23:51:27	hashcat	謂詞可以大略地當作產生命題的函數
2013-11-02 23:52:58	hashcat	思考怎樣可以一句解決中
2013-11-02 23:53:07	CindyLinz	欸, 還是不要一句解決吧 X
2013-11-02 23:53:08	CindyLinz	XD
2013-11-02 23:53:24	CindyLinz	你終於想出一句了, 解決掉的是我.. XD
2013-11-02 23:53:31	CindyLinz	不是問題...
2013-11-02 23:54:40	CindyLinz	只是我真的覺得我洞很多, 我後來一直在想阻止你們努力解釋出來 orz
2013-11-02 23:55:14	CindyLinz	等我再讀一些東西以後再回頭來看你們已經講的解釋就好
2013-11-02 23:56:09	hashcat	反正你不能把明明是命題邏輯(型別)系統外面的東西,  加進來之後期待他會有命題邏輯的功能
2013-11-02 23:56:18	-->	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has joined #haskell.tw
2013-11-02 23:56:43	suhorng	謂詞英文是predicate
2013-11-02 23:56:51	hashcat	之前的 Bool 跟現在的 _x_x_ 都是命題系統外面的東西
2013-11-02 23:57:57	hashcat	兩次都是你把他們硬是加進來, 然後期待他有命題的功能
2013-11-02 23:58:11	hashcat	請看此表 http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence#General_formulation
2013-11-02 23:58:31	hashcat	記得每定義一種data就是定義一種謂詞或者命題
2013-11-02 23:59:33	hashcat	請用命題邏輯的概念去規劃命題, 再用那表轉換成對應的型別
2013-11-03 00:01:41	hashcat	弄清楚那系統裡面有啥東西是啥作用, 不要再把不是命題邏輯裡的概念拿進來了
2013-11-03 00:01:48	hashcat	我有點鬼打牆了
2013-11-03 00:03:05	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-03 00:03:15	hashcat	最後一點是 Set : Set 是不折不扣的鬼打牆, 參閱羅素悖論
2013-11-03 00:05:18	CindyLinz	XD
2013-11-03 00:07:46	hashcat	suhorng: 現在想想, 是還滿多人看原文書看到中文不知道是啥的
2013-11-03 00:08:29	-->	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-03 00:10:58	hashcat	CindyLinz: 這樣有沒看懂 @@
2013-11-03 00:12:35	suhorng	hashcat: ._./ 而且我看到中文也不知道原文是啥...
2013-11-03 00:12:55	CindyLinz	我以為我在這邊就已經懂了? # 23:22 < CindyLinz> 用這個 sigma 來要求要存在 fst 塞到 snd 函數的證明?
2013-11-03 00:12:58	CindyLinz	23:22 < CindyLinz> 如果只用 cartesian 的話, 可以給一個 List, 和一個要代別的 List 才會存在的證明, 就沒有限制到了?
2013-11-03 00:13:07	xcycl	hashcat: ._./ 而且我看到中文也不知道原文是啥...
2013-11-03 00:13:37	suhorng	咦
2013-11-03 00:14:26	hashcat	http://zh-classical.wikipedia.org/wiki/%E9%9B%86%E8%AB%96
2013-11-03 00:14:27	suhorng	為什麼我上一句話暱稱變xcycl...
2013-11-03 00:14:38	<--	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has left #haskell.tw
2013-11-03 00:14:38	hashcat	貼個離題的東西
2013-11-03 00:14:43	-->	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has joined #haskell.tw
2013-11-03 00:14:46	xcycl	A x B x C 可以讀作 A 且 B 且 C, 而這樣的程式相等於證明 A, B, 跟 C
2013-11-03 00:14:59	xcycl	suhorng: 因為我剛剛重複你的話 xD
2013-11-03 00:15:07	suhorng	阿阿 嚇到XD
2013-11-03 00:15:15	xcycl	三個獨立分開的證明
2013-11-03 00:16:52	xcycl	sigma (x : List A) (A (x)) 想成 "存在 x 在 List A 滿足 A(x)" 雖然我覺得講 "在" 這的詞有 set theory 的味道 ...
2013-11-03 00:17:15	CindyLinz	嗯嗯嗯
2013-11-03 00:17:37	CindyLinz	就是 <_,_,_> 太 cheap 的意思 ^^|
2013-11-03 00:18:33	hashcat	logic side的conjunction對應到programming side的product type
2013-11-03 00:19:03	hashcat	https://github.com/liamoc/learn-you-an-agda/blob/master/pages/proofs.md
2013-11-03 00:19:29	hashcat	找 product type
2013-11-03 00:25:01	<--	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-03 00:36:05	xcycl	其實寫成 Bool 然後再轉成 Unit type 跟 Empty type 也不是不行, 但是證明就被丟掉了 ...像是 Agda 的 Data.Bool 有一個 T 函數
2013-11-03 00:36:53	hashcat	http://uf-ias-2012.wikispaces.com/file/view/agda.pdf/390147250/agda.pdf
2013-11-03 00:37:02	hashcat	好東西
2013-11-03 00:38:51	xcycl	把 P(x) 寫成 A -> Bool 的話，代表一個 decidable function, 我可以有限時間內算出 a : A 是 true 還是 false。那麼 T P = Unit 相當說 P 成立且有個證明但我丟掉了
2013-11-03 00:39:21	xcycl	T P = Empty 的話 就是 P 成立 但證明丟掉了
2013-11-03 00:41:59	hashcat	http://www1.eafit.edu.co/asicard/courses/automata-CB0081/slides/agda-introduction.pdf
2013-11-03 00:42:06	CindyLinz	嗯嗯, 你只能相信我它是對的, 但是請別問我過程...
2013-11-03 00:42:29	hashcat	那兩個是我能找到比較偏重兩者關係的
2013-11-03 00:44:45	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Quit: mno2)
2013-11-03 00:49:50	xcycl	像是 in-set 我可以寫成這樣：
2013-11-03 00:49:51	xcycl	dec-in-set : {n : ℕ} → ℕ → Vec ℕ (suc n) → Bool
2013-11-03 00:49:52	xcycl	dec-in-set n (x ∷ []) = dec-eq n x
2013-11-03 00:49:53	xcycl	dec-in-set n (x ∷ x₁ ∷ xs) = dec-eq n x ∨ dec-in-set n (x₁ ∷ xs)
2013-11-03 00:50:41	xcycl	那麼我可以直接用 Agda 的對 lambda term 的 normalisation, 直接算
2013-11-03 00:50:55	xcycl	prop : T (dec-in-set 3 (3 ∷ 2 ∷ 1 ∷ []))
2013-11-03 00:50:56	xcycl	prop = tt
2013-11-03 00:56:37	<--	tiglog (~tiglog@111.161.8.8) has quit (Quit: Leaving)
2013-11-03 01:00:18	hashcat	CindyLinz: 我是想說原則的問題要搞清楚, 不能只想著湊出解法
2013-11-03 01:03:51	hashcat	有些東西清楚了, 剩下都多說的, 不清楚則是多說無益
2013-11-03 01:15:31	xcycl	看一下 The HoTT Book 的第一章，已經寫很好了
2013-11-03 01:16:10	xcycl	第一章跟 HoTT 沒有直接關係，可以單獨看
2013-11-03 01:16:15	hashcat	關於對應到Agda的語法, 這篇的第24頁有個對照表 http://www1.eafit.edu.co/asicard/courses/automata-CB0081/slides/agda-introduction.pdf
2013-11-03 01:17:07	xcycl	universe （Set, Set1, .. ) 也有討論
2013-11-03 01:17:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-03 01:21:05	xcycl	decidable proposition 在第三章
2013-11-03 01:21:30	xcycl	哎，現在資源好多 QQ
2013-11-03 01:27:08	hashcat	為啥會又冒出一個HoTT
2013-11-03 01:28:22	xcycl	http://homotopytypetheory.org/book/
2013-11-03 01:28:48	hashcat	想問下要是另外三個結構都一樣的話, 多這一個Homotopy有啥嚜用
2013-11-03 01:29:58	xcycl	我只是說 HoTT book 的第一章有解釋
2013-11-03 01:30:59	hashcat	我是想問那個
2013-11-03 01:31:11	hashcat	為啥他要多弄出HoTT
2013-11-03 01:33:48	xcycl	喔, 先說這我不是專家, 他們的說法是 uniqueness of identity proof (K rule) 不盡然成立, a = b 的證明不唯一 (?)
2013-11-03 01:34:07	xcycl	a = b 的證明是從 a 到 b 的路徑
2013-11-03 01:35:16	hashcat	我知道怎處理了
2013-11-03 01:35:29	hashcat	暫且裝作沒看到
2013-11-03 01:37:15	hashcat	引用次數多了再看
2013-11-03 01:37:21	xcycl	不過這個還是很新的東西, 要怎麼計算上詮釋還沒解決
2013-11-03 01:37:47	xcycl	至於引用次數 ...這應該是這幾年來的當紅炸子雞了 @@
2013-11-03 01:41:20	hashcat	換個條件好了
2013-11-03 01:41:54	hashcat	在某些領域出現過n次再看
2013-11-03 01:46:14	<--	b4283 (~b4283@118.150.141.110) has quit (Remote host closed the connection)
2013-11-03 01:47:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-03 01:59:26	<--	hashcat (~hashcat@27.52.54.170) has quit (Ping timeout: 272 seconds)
2013-11-03 02:04:09	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-03 02:12:17	-->	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-03 02:18:39	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-03 02:55:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-03 07:24:30	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-03 07:57:01	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-03 08:21:46	-->	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has joined #haskell.tw
2013-11-03 08:38:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-03 08:38:24	<--	xcycl (~liang-tin@host-2-100-140-221.as13285.net) has quit (Quit: xcycl)
2013-11-03 09:09:50	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Quit: mno2)
2013-11-03 10:46:38	-->	b4283 (~b4283@114-39-253-75.dynamic.hinet.net) has joined #haskell.tw
2013-11-03 12:58:49	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 272 seconds)
2013-11-03 13:29:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-03 13:38:58	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-03 13:42:30	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-03 14:00:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-03 14:04:45	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-03 14:17:26	-->	snowXman (~snowXman@2001:250:1001:1850:d4ad:462e:9067:5582) has joined #haskell.tw
2013-11-03 14:19:13	<--	snowXman (~snowXman@2001:250:1001:1850:d4ad:462e:9067:5582) has left #haskell.tw
2013-11-03 14:20:50	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-03 14:23:51	<--	monochrom (monokrom@216.138.220.146) has quit (Ping timeout: 252 seconds)
2013-11-03 14:25:05	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-11-03 15:14:01	-->	hashcat (~hashcat@39.14.185.59) has joined #haskell.tw
2013-11-03 15:31:59	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-03 15:50:03	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-03 16:59:26	<--	hashcat (~hashcat@39.14.185.59) has quit (Ping timeout: 240 seconds)
2013-11-03 17:11:40	-->	hashcat (~hashcat@106.107.0.33) has joined #haskell.tw
2013-11-03 18:48:17	-->	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has joined #haskell.tw
2013-11-03 18:58:35	-->	suhorng1 (~suhorng@118.166.44.178) has joined #haskell.tw
2013-11-03 19:00:30	<--	suhorng (~suhorng@118-166-44-178.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-03 19:16:50	<--	suhorng1 (~suhorng@118.166.44.178) has left #haskell.tw
2013-11-03 19:17:03	-->	suhorng1 (~suhorng@118.166.44.178) has joined #haskell.tw
2013-11-03 19:42:05	petercommand	agda裡的箭頭代表甚麼意義呀
2013-11-03 19:44:51	petercommand	\->
2013-11-03 19:50:37	suhorng1	"\->" ?
2013-11-03 19:51:36	suhorng1	大概是用 agda input mode 的意思
2013-11-03 19:51:47	suhorng1	像 LaTeX 很多東西都是 "\" 開頭
2013-11-03 19:51:55	suhorng1	\-> 打出來變 →
2013-11-03 19:52:24	suhorng1	就跟 -> 一樣是 function
2013-11-03 19:52:33	petercommand	我是說那個箭頭的用處啦XD
2013-11-03 19:52:54	petercommand	像 _+_ : a → a → a
2013-11-03 19:53:13	petercommand	的那兩個箭頭
2013-11-03 19:53:51	petercommand	a : Set
2013-11-03 19:55:16	petercommand	不太了解這些箭頭所代表的東西是甚麼
2013-11-03 19:55:35	suhorng1	跟 (+) :: a -> a -> a 一樣意思
2013-11-03 19:55:38	suhorng1	function
2013-11-03 19:56:06	suhorng1	a -> b 是 a 到 b 的函數
2013-11-03 19:58:17	hashcat	我昨天發的最後一個slide, 有解釋常遇到的符號
2013-11-03 20:00:01	petercommand	"(+) ::" 和 "_+_ :" 是一樣的?
2013-11-03 20:04:32	suhorng1	Haskell裡用 "::" 標 type, Agda照常用(?)的用 ":" 標 type
2013-11-03 20:05:11	suhorng1	Haskell裡面把infix operator語法上變成函數用 ( _ ) 括起來, e.g. (+)
2013-11-03 20:05:19	suhorng1	而 Agda 是在參數的地方寫底線 "_"
2013-11-03 20:05:28	suhorng1	所以 _+_ 表示參數放在 + 的兩邊
2013-11-03 20:05:47	petercommand	喔喔
2013-11-03 20:10:39	petercommand	一個參數的時候是a -> b 兩個參數的時候可以寫a -> b嗎?
2013-11-03 20:11:48	suhorng1	不太懂@@
2013-11-03 20:12:12	suhorng1	那樣type不對吧?
2013-11-03 20:14:48	petercommand	@@
2013-11-03 20:17:25	hashcat	Agda可以用 if_then_else_ 來表示函數, 同時創造新語法, 底線處可以塞其他參數, 由左至右地對應函數要求的型別
2013-11-03 20:17:29	hashcat	http://code.haskell.org/Agda/examples/Introduction/Operators.agda
2013-11-03 20:17:53	hashcat	裡面有 if_then_else_
2013-11-03 20:18:13	hashcat	這語法自由度犧牲了一點小方便
2013-11-03 20:19:09	hashcat	1+2 關鍵字跟其他東西連在一起的表達式是不允許的
2013-11-03 20:19:37	hashcat	1 + 2 運算符號跟數字間要有空白
2013-11-03 20:23:50	petercommand	suhourng1: 像函數a(x,y)=x+y 給一組input x,y的話就會從x+y map 到 a(x+y)
2013-11-03 20:24:48	petercommand	suhorng1: 和一個variable的時候從x map 到 a(x)
2013-11-03 20:25:41	petercommand	suhorng1: 都是一個domain map 到一個codomain
2013-11-03 20:27:18	petercommand	所以兩個參數的時候我會覺得是寫a -> b @@
2013-11-03 20:33:35	hashcat	在說 ((( d -> e ) -> f ) -> g ) -> b 其實就是 a -> b ?
2013-11-03 20:36:16	-->	xcycl (~liang-tin@host-2-100-142-41.as13285.net) has joined #haskell.tw
2013-11-03 20:36:43	petercommand	我的想法是 (d,e) -> b 和 a -> b 一樣
2013-11-03 20:37:32	xcycl	不一樣啊
2013-11-03 20:37:32	suhorng1	不一樣
2013-11-03 20:37:38	hashcat	-> 符號是左結合的
2013-11-03 20:37:52	suhorng1	咦 右結合吧？
2013-11-03 20:38:00	xcycl	a -> b 是給一個 a 送到 b
2013-11-03 20:38:03	hashcat	搞錯
2013-11-03 20:38:27	suhorng1	a(x,y) = x + y 就是要給 x, y 才會map到x + y
2013-11-03 20:38:27	hashcat	右結合
2013-11-03 20:38:49	suhorng1	如果想要只給部份參數, a(x, _) 是另一個(不同的)函數
2013-11-03 20:39:17	hashcat	剛剛那個我也打錯了
2013-11-03 20:39:49	petercommand	右結合的意思是?
2013-11-03 20:40:15	hashcat	a -> b -> c = a -> (b -> c)
2013-11-03 20:40:47	petercommand	喔喔
2013-11-03 20:40:56	hashcat	表示該函數吃了a型別的數值, 會返回另一個 b -> c 型別的函數
2013-11-03 20:41:13	hashcat	不知道你想表達啥
2013-11-03 20:42:29	hashcat	a 若是個沒有任何限制的變數, 那他確實可以批配 (d,e)
2013-11-03 20:44:55	xcycl	兩個 type 一樣通常是兩者之間可以互相對應
2013-11-03 20:45:10	xcycl	例如 a -> (b -> c) 跟 (a, b) -> c
2013-11-03 20:45:42	xcycl	給 f : a -> (b -> c), 可以定義 f' (x, y) = f x y
2013-11-03 20:46:16	xcycl	反過來, f' : (a, b) -> c 可以定 f : a -> (b -> c)
2013-11-03 20:46:49	xcycl	但是 (d, e) -> b 是 a -> b 的特例
2013-11-03 20:47:54	hashcat	要不看吐嘈Haskell的影片
2013-11-03 20:48:33	xcycl	若 x, y : a , f (x, y) = x + y 的話, 型別是從一對 a 到 a, 在 Haskell 寫成 (a, a) -> a
2013-11-03 20:50:56	petercommand	我應該了解了
2013-11-03 20:51:55	petercommand	那像(a,a) -> a在agda裡怎麼寫呀
2013-11-03 20:52:19	CindyLinz	應該要先定義 (_,_) @@"
2013-11-03 20:52:43	xcycl	偷懶一點 import Data.Product
2013-11-03 20:52:47	CindyLinz	QQ
2013-11-03 20:53:01	xcycl	open import Data.Product
2013-11-03 20:53:22	xcycl	就可以寫成 A \times B,
2013-11-03 20:53:49	xcycl	在 Agde 設定好的 Emacs 中 \times 會被取代成 x
2013-11-03 20:54:12	CindyLinz	\times 不是真的存在檔案裡面的字哄? 只是在 emacs 裡面可以這樣按, 然後會被 emacs 換成 × ?
2013-11-03 20:54:19	xcycl	嗯嗯
2013-11-03 20:54:26	xcycl	會被 emacs 換
2013-11-03 20:54:47	CindyLinz	這是對 vimmer 的歧視... (哭)
2013-11-03 20:56:06	xcycl	http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.VIMEditing
2013-11-03 20:56:11	xcycl	有給 Vim 的說明
2013-11-03 20:56:18	CindyLinz	喔喔 XD
2013-11-03 20:56:23	xcycl	哎 以前都沒有耶 可惡!!!!
2013-11-03 20:56:30	xcycl	害我學了一陣子 emacs
2013-11-03 20:56:47	CindyLinz	imap <buffer> 這招真是簡單易懂 XD
2013-11-03 21:00:44	CindyLinz	寫寫看.... Haskell 的 f :: (a, a) -> a 在 Agda 應該是 f : {A : Set} -> ( A x A -> A ) ?
2013-11-03 21:01:32	xcycl	嗯嗯，不用最後的括號
2013-11-03 21:01:34	CindyLinz	Data.Product 就是這個哄? http://www.cse.chalmers.se/~nad/repos/lib/src/Data/Product.agda
2013-11-03 21:01:49	CindyLinz	喔 剛剛好是最右邊 ^^
2013-11-03 21:01:52	xcycl	Yes.
2013-11-03 21:03:10	xcycl	Agda 的 A 可以小寫或大寫 沒限制
2013-11-03 21:03:59	CindyLinz	因為 Set N 有無窮多層, 大寫小寫只有兩種變化, 乾脆就不要規定了?
2013-11-03 21:04:33	CindyLinz	欸.. 整個 Unicode 都進來了, 好像也太多字(符號)沒分大小寫了 :p
2013-11-03 21:04:33	xcycl	Set N  也是後來加入的
2013-11-03 21:05:28	CindyLinz	hmm
2013-11-03 21:05:47	xcycl	在 Agda 的 variable 都要說是什麼型別 光寫 A x A -> A 不知道 A 是什麼東西
2013-11-03 21:06:17	xcycl	因為 A 也可以是 Int 的
2013-11-03 21:06:33	xcycl	所以 variable 一律寫出來
2013-11-03 21:06:37	CindyLinz	嗯嗯嗯
2013-11-03 21:07:02	xcycl	Haskell 的話 variable 出現在 type 的可能性不多
2013-11-03 21:07:46	xcycl	去掉有的沒的 extensions, 用小寫字母代表 type variable 應該滿合理的
2013-11-03 21:08:37	CindyLinz	mmm
2013-11-03 21:10:16	xcycl	不過另外一方面, 所以我覺得 Agda 比較好入門 ...xD
2013-11-03 21:10:42	CindyLinz	@________@
2013-11-03 21:10:42	lambdabot	Unknown command, try @list
2013-11-03 21:10:54	CindyLinz	lambdabot: 謝謝..
2013-11-03 21:11:08	xcycl	<--  數學系畢業的 xD
2013-11-03 21:11:36	xcycl	Haskell 的一些小細節太多了
2013-11-03 21:11:58	hashcat	https://github.com/idris-hackers
2013-11-03 21:12:42	hashcat	idris實用前景貌似比較好
2013-11-03 21:13:26	xcycl	發展者只有一個人不看好 xD
2013-11-03 21:13:44	hashcat	一個人就有這麼多花樣所以很好
2013-11-03 21:14:44	xcycl	iris 出現時間比 Agda 晚這麼多, 有這麼多 features 也是正常的, 但是 dependently-typed programming 還有一段路要走
2013-11-03 21:15:01	xcycl	光是 effects 要怎麼做還是很頭大
2013-11-03 21:16:03	hashcat	我是從設計上看, 兩個語言設計者的心態不一樣
2013-11-03 21:16:16	xcycl	agda 一直都是實驗用的語言 xD
2013-11-03 21:16:17	CindyLinz	hashcat: idris 的目的是想要實用的?
2013-11-03 21:16:50	hashcat	Idris兼容Haskell比較多, 有種當初C++兼容C的態勢
2013-11-03 21:17:26	hashcat	另外是注重效率, Agda對這點隻字不提
2013-11-03 21:17:59	xcycl	C++ 是有名的大怪獸 ...
2013-11-03 21:18:03	CindyLinz	對了講到效率....
2013-11-03 21:18:18	CindyLinz	Agda 裡面可以這樣定義 if_then_else_
2013-11-03 21:18:23	hashcat	一開始C++沒這麼多東西
2013-11-03 21:18:27	CindyLinz	但其實兩個 branch 都會去執行對不對?
2013-11-03 21:18:39	CindyLinz	不管 if 後面的 condition 是哪一種
2013-11-03 21:18:47	xcycl	不會吧
2013-11-03 21:19:06	hashcat	惰性計算
2013-11-03 21:19:15	CindyLinz	咦 Agda 也是 lazy 的?
2013-11-03 21:19:26	hashcat	Agda裡 if_then_else_ 只是另一個函數
2013-11-03 21:19:32	CindyLinz	不過是不是一開始 pattern match 那個 condition 以後, 就只剩一邊可以走了?
2013-11-03 21:20:15	CindyLinz	也算是 pattern match 到哪裡才執行到哪裡的作法了?
2013-11-03 21:20:30	-->	b4284 (~b4283@118.150.141.110) has joined #haskell.tw
2013-11-03 21:21:44	xcycl	不清楚, 不過 Agda 裡面都是 total function, 除了效率上應該沒差
2013-11-03 21:21:58	xcycl	而且 Agda 也不是用來執行的 ... xD
2013-11-03 21:22:22	CindyLinz	所以是從這邊才開始講的啊.. XD # 21:18 < CindyLinz> 對了講到效率....
2013-11-03 21:22:48	CindyLinz	我原本也是用反正它不是用來執行的就塘塞過去了 XD
2013-11-03 21:23:45	CindyLinz	只是 Agda 還是要考慮效率啦, 不然遇到複雜的大定理, compile 階段跑不完, 變成另一種意義的無法構造的證明 XD
2013-11-03 21:23:52	xcycl	我記得可以讓他轉成 haskell 的程式
2013-11-03 21:23:53	xcycl	噢喔噢
2013-11-03 21:24:08	xcycl	type check 的話題
2013-11-03 21:24:11	xcycl	目前無解
2013-11-03 21:24:36	CindyLinz	._.
2013-11-03 21:25:14	xcycl	不過要弄到那麼複雜的情況不多
2013-11-03 21:25:42	CindyLinz	嗯
2013-11-03 21:26:37	xcycl	証過的定理可以用 abstract 蓋住
2013-11-03 21:26:51	xcycl	比 postulate 好一點點
2013-11-03 21:27:46	xcycl	這樣 Agda 就不會再去展開了
2013-11-03 21:28:45	CindyLinz	把 abstract 想成是 hint Agda 哪一條定理值得把結果 cache 起來?
2013-11-03 21:29:55	xcycl	不是耶
2013-11-03 21:30:55	xcycl	在 mailing-list 上有討論過一次
2013-11-03 21:31:21	xcycl	我忘記做什麼了
2013-11-03 21:34:32	xcycl	Abstract definitions are not unfolded when the type-checker decides
2013-11-03 21:34:32	xcycl	definitional equality (except in bodies in their own abstract block).
2013-11-03 21:34:33	xcycl	Compiler backends are free to inline abstract definitions.
2013-11-03 21:36:24	hashcat	Twelf或許可以看看
2013-11-03 21:36:52	hashcat	我有陣子瘋蒐集定理證明器
2013-11-03 21:37:21	petercommand	蒐集?
2013-11-03 21:37:31	CindyLinz	動辭. XD
2013-11-03 21:37:35	hashcat	http://twelf.org/wiki/Main_Page
2013-11-03 21:37:43	CindyLinz	瘋, 副辭
2013-11-03 21:38:05	petercommand	XDD
2013-11-03 21:38:41	hashcat	也可以瘋是動詞, 蒐集定理證明器是子句
2013-11-03 21:39:10	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-11-03 21:39:46	-->	godfat (~Adium@114-45-191-220.dynamic.hinet.net) has joined #haskell.tw
2013-11-03 21:41:30	CindyLinz	XDD
2013-11-03 21:56:23	petercommand	使役動詞
2013-11-03 22:07:42	<--	xcycl (~liang-tin@host-2-100-142-41.as13285.net) has quit (Quit: xcycl)
2013-11-03 22:16:09	<--	hashcat (~hashcat@106.107.0.33) has quit (Ping timeout: 272 seconds)
2013-11-03 22:25:14	<--	b4284 (~b4283@118.150.141.110) has quit (Read error: Connection reset by peer)
2013-11-03 22:45:33	petercommand	http://people.inf.elte.hu/divip/AgdaTutorial/Sets.Mutual.html#1
2013-11-03 22:45:49	petercommand	mutual definition有甚作用呀
2013-11-03 22:46:05	petercommand	s/甚/甚麼
2013-11-03 22:49:28	petercommand	看不懂他在做啥
2013-11-03 23:30:53	<--	suhorng1 (~suhorng@118.166.44.178) has quit (Ping timeout: 272 seconds)
2013-11-04 00:10:39	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2013-11-04 00:27:07	-->	hashcat (~hashcat@27.241.121.3) has joined #haskell.tw
2013-11-04 00:49:01	-->	caasih (~caasiHuan@114-46-150-84.dynamic.hinet.net) has joined #haskell.tw
2013-11-04 00:55:24	<--	b4283 (~b4283@114-39-253-75.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-04 02:25:08	<--	hashcat (~hashcat@27.241.121.3) has quit (Ping timeout: 240 seconds)
2013-11-04 03:35:14	<--	caasih (~caasiHuan@114-46-150-84.dynamic.hinet.net) has quit (Quit: leaving)
2013-11-04 04:28:54	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-04 04:28:54	<--	godfat (~Adium@114-45-191-220.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-11-04 06:52:16	-->	xcycl (~liang-tin@host-2-100-142-41.as13285.net) has joined #haskell.tw
2013-11-04 07:01:45	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-11-04 07:06:09	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-11-04 07:06:18	<--	xcycl (~liang-tin@host-2-100-142-41.as13285.net) has quit (Quit: xcycl)
2013-11-04 07:55:33	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-04 09:37:02	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 240 seconds)
2013-11-04 09:37:12	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-11-04 09:37:50	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 240 seconds)
2013-11-04 09:38:20	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-04 09:43:21	-->	junx1989 (~junx1989@116.231.102.42) has joined #haskell.tw
2013-11-04 09:49:26	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-04 09:51:08	-->	flter_ (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-04 09:51:21	<--	flter_ (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-04 10:18:36	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-11-04 10:47:20	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-04 10:48:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-04 11:41:42	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-11-04 11:45:08	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-04 11:55:14	CindyLinz	用 \begin{code} ... \end{code} 方式寫的 agda, 副檔名是 lagda
2013-11-04 11:55:20	CindyLinz	聽起就超慢的 XDD
2013-11-04 12:14:22	CindyLinz	agda 只能用前面定義過的 type 耶, 不能用後面定義的 type.. QQ
2013-11-04 12:16:20	CindyLinz	petercommand: 我想這就是 Mutually Recursive Sets 的語法有必要的地方了 :Q
2013-11-04 12:46:24	-->	hashcat (~hashcat@27.243.27.6) has joined #haskell.tw
2013-11-04 13:19:38	junx1989	在讲什么问题呢？
2013-11-04 13:21:02	CindyLinz	22:45 < petercommand> http://people.inf.elte.hu/divip/AgdaTutorial/Sets.Mutual.html#1
2013-11-04 13:21:05	CindyLinz	22:45 < petercommand> mutual definition有甚作用呀
2013-11-04 13:21:08	CindyLinz	22:46 < petercommand> s/甚/甚麼
2013-11-04 13:21:10	CindyLinz	22:49 < petercommand> 看不懂他在做啥
2013-11-04 13:21:19	CindyLinz	junx1989: 啊, 以後你也可以用對話記錄看 ^^ http://goo.gl/oFPLX
2013-11-04 13:43:38	-->	favonia (~favonia@pool-71-126-46-156.pitbpa.east.verizon.net) has joined #haskell.tw
2013-11-04 13:43:39	<--	favonia (~favonia@pool-71-126-46-156.pitbpa.east.verizon.net) has quit (Changing host)
2013-11-04 13:43:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-04 13:47:26	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Ping timeout: 272 seconds)
2013-11-04 13:54:38	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-11-04 13:55:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-04 14:07:24	junx1989	好的
2013-11-04 15:48:16	<--	junx1989 (~junx1989@116.231.102.42) has quit (Quit: Leaving)
2013-11-04 15:54:18	<--	hashcat (~hashcat@27.243.27.6) has quit (Ping timeout: 245 seconds)
2013-11-04 16:01:21	-->	junx1989 (~junx1989@116.231.102.42) has joined #haskell.tw
2013-11-04 16:03:52	<--	junx1989 (~junx1989@116.231.102.42) has quit (Client Quit)
2013-11-04 16:04:16	-->	junx1989 (~junx1989@116.231.102.42) has joined #haskell.tw
2013-11-04 16:10:53	<--	junx1989 (~junx1989@116.231.102.42) has quit (Quit: Leaving)
2013-11-04 16:11:45	-->	junx1989 (~junx1989@116.231.102.42) has joined #haskell.tw
2013-11-04 16:28:21	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-04 17:22:40	-->	hashcat (~hashcat@27.243.27.6) has joined #haskell.tw
2013-11-04 17:50:21	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-04 17:52:12	<--	letoh (~stackvm@203.67.167.123) has quit (Ping timeout: 265 seconds)
2013-11-04 18:21:34	petercommand	CindyLinz: 甚麼是mutually recursive sets呀?
2013-11-04 18:38:28	<--	junx1989 (~junx1989@116.231.102.42) has quit (Ping timeout: 245 seconds)
2013-11-04 18:50:12	CindyLinz	petercommand: 啊不就你貼的 link ^^|
2013-11-04 18:50:12	CindyLinz	就 A 定義用到 B 的定義, 而 B 的定義又用到 A 的定義呀
2013-11-04 18:58:42	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-04 19:25:42	petercommand	像昨天那個example, "_::_"是怎麼被套用的阿
2013-11-04 19:32:38	petercommand	像如果輸入blah :: blah , N -> M -> L 和 Bool -> L -> M 這兩個會做甚麼
2013-11-04 19:39:12	petercommand	CindyLinz: mutualy recursive sets應該知道意思了，不過那個example我還是不了解@@
2013-11-04 19:43:26	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-04 19:50:22	petercommand	我在看一下好了@@
2013-11-04 20:16:37	-->	b4283 (~b4283@218-164-214-82.dynamic.hinet.net) has joined #haskell.tw
2013-11-04 21:08:17	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-04 21:37:42	<--	hashcat (~hashcat@27.243.27.6) has quit (Ping timeout: 248 seconds)
2013-11-04 21:59:26	-->	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-04 22:39:56	-->	hashcat (~hashcat@27.243.27.6) has joined #haskell.tw
2013-11-04 22:46:59	-->	tiglog (~tiglog@124.202.190.192) has joined #haskell.tw
2013-11-04 23:25:57	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Ping timeout: 248 seconds)
2013-11-05 00:02:03	-->	liuzhoou_ (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-11-05 00:04:34	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Ping timeout: 272 seconds)
2013-11-05 00:14:10	<--	tiglog (~tiglog@124.202.190.192) has quit (Quit: Leaving)
2013-11-05 00:15:54	<--	b4283 (~b4283@218-164-214-82.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-05 02:33:49	<--	hashcat (~hashcat@27.243.27.6) has quit (Ping timeout: 240 seconds)
2013-11-05 03:10:03	-->	hashcat (~hashcat@39.14.62.33) has joined #haskell.tw
2013-11-05 05:10:30	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tuyewacwavnwxwts) has quit (Remote host closed the connection)
2013-11-05 05:10:30	<--	superbil (uid12362@gateway/web/irccloud.com/x-ygfkhsodsphqumjg) has quit (Remote host closed the connection)
2013-11-05 05:10:31	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-odbyioinuaeqlywd) has quit (Remote host closed the connection)
2013-11-05 05:19:03	<--	hychen (uid12518@gateway/web/irccloud.com/x-mwikaxkrxifxydia) has quit (Remote host closed the connection)
2013-11-05 05:22:47	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-htbdelwpotuukptl) has quit (Remote host closed the connection)
2013-11-05 06:16:03	-->	superbil (uid12362@gateway/web/irccloud.com/x-rimualvqdrluscgf) has joined #haskell.tw
2013-11-05 06:16:44	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-eqpbnazaowtqqius) has joined #haskell.tw
2013-11-05 06:17:34	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-mehjzhwyoxlinzbk) has joined #haskell.tw
2013-11-05 06:32:37	<--	hashcat (~hashcat@39.14.62.33) has quit (Ping timeout: 248 seconds)
2013-11-05 06:53:31	-->	hychen (uid12518@gateway/web/irccloud.com/x-gonadrklplbderow) has joined #haskell.tw
2013-11-05 07:11:56	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-mehjzhwyoxlinzbk) has quit (Read error: Connection reset by peer)
2013-11-05 07:12:16	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-guobamlrxxzzysaa) has joined #haskell.tw
2013-11-05 08:39:10	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-mqeepnwyitrckmqq) has joined #haskell.tw
2013-11-05 09:50:31	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-05 10:16:34	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-05 10:22:38	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Ping timeout: 240 seconds)
2013-11-05 10:23:38	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-11-05 11:34:17	<--	liuzhoou_ (~liuzhoou@125.215.44.36) has quit
2013-11-05 11:48:31	<--	logfat (~cinch@home.mno2.org) has quit (Ping timeout: 245 seconds)
2013-11-05 11:49:09	-->	logfat (~cinch@home.mno2.org) has joined #haskell.tw
2013-11-05 11:49:56	<--	darkx (~x4r@162.243.133.203) has quit (Ping timeout: 260 seconds)
2013-11-05 11:50:20	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-11-05 12:00:04	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-05 12:04:45	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-05 13:57:05	-->	hashcat (~hashcat@39.14.62.33) has joined #haskell.tw
2013-11-05 14:26:28	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-05 15:29:47	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-11-05 18:26:13	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit
2013-11-05 18:31:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-05 18:39:17	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-11-05 19:31:44	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has left #haskell.tw
2013-11-05 19:37:47	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-05 20:05:11	-->	b4283 (~b4283@218-164-218-203.dynamic.hinet.net) has joined #haskell.tw
2013-11-05 20:54:12	-->	suhorng (~suhorng@118-166-48-159.dynamic.hinet.net) has joined #haskell.tw
2013-11-05 21:33:06	-->	liuzhoou (~liuzhoou@124.79.212.167) has joined #haskell.tw
2013-11-05 21:33:26	suhorng	Racket這麼厲害..? http://yinwang0.wordpress.com/2013/11/04/scheme-benchmarking/
2013-11-05 21:34:12	suhorng	不過他啟動速度好慢 好像也沒辦法直接編成exe @@
2013-11-05 21:34:38	suhorng	s/exe/machine code/g
2013-11-05 21:35:38	letoh	唔  你是指 native compiler ?
2013-11-05 21:36:18	letoh	如果只要求 standalone 是可以.. native 的話要查一下
2013-11-05 21:36:54	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-05 21:37:25	suhorng	letoh: native. standalone好像每次開都會jit一下XD
2013-11-05 21:37:34	letoh	對啊XD
2013-11-05 21:37:39	suhorng	檔案比ghc弄出來的還大lol
2013-11-05 21:38:19	letoh	只記得不小  但不曉得跟 ghc 比怎樣... 我只有 arm 版本的 ghc，編譯出來超大
2013-11-05 21:40:09	suhorng	letoh: 對了, Racket會把每個算出來的算式都印出來, 有辦法避免這個嗎?
2013-11-05 21:40:44	letoh	沒有深入研究耶 你是希望不要 echo? 還是不要印出傳回值?
2013-11-05 21:42:37	suhorng	嗯..我不太知道這兩個差在哪XD
2013-11-05 21:43:11	letoh	你是指在 shell 裡輸入時會一直印出來? 還是直接執行時也會印?
2013-11-05 21:43:22	suhorng	執行時都一直印!
2013-11-05 21:43:28	letoh	印象中直接執行應該是不會.. shell 的話... 就 repl 嘛XD
2013-11-05 21:43:43	suhorng	噢,先假如我有個script,那執行時每個都會印出來
2013-11-05 21:43:50	letoh	有沒有測試檔? 我跑跑看?
2013-11-05 21:44:14	suhorng	弄成standalone executable也還會...
2013-11-05 21:44:15	suhorng	okok
2013-11-05 21:47:39	suhorng	letoh: http://ideone.com/Kljo49
2013-11-05 21:50:02	letoh	你這個... 會印出來好像蠻正常的XD
2013-11-05 21:50:25	suhorng	是這樣嗎QQ
2013-11-05 21:50:34	letoh	不過這個 script 有什麼作用?  只是測語法?
2013-11-05 21:50:47	suhorng	可是我也不是在REPL裡面跑呀, 弄成standalone也還是會印出來...
2013-11-05 21:51:04	suhorng	因為我不知道在Scheme這種語言裡面該怎麼寫 "main" 比較好 XD
2013-11-05 21:51:19	letoh	唔   (main)
2013-11-05 21:51:22	suhorng	所以就 (define main (lambda () ...)) 然後 (main)
2013-11-05 21:51:35	suhorng	於是(main)的值就被印出來了...
2013-11-05 21:52:13	suhorng	後來是用爛招啦, (define tt (main))
2013-11-05 21:52:52	letoh	你的好怪  我丟一個你跑跑看
2013-11-05 21:54:50	letoh	suhorng: http://ideone.com/loSJoW   就這樣啊  這樣會跑出什麼?
2013-11-05 21:55:19	letoh	suhorng: 阿我懂你的問題了
2013-11-05 21:55:26	suhorng	會很正常沒輸出, 但是我想那是因為 (newline) 最後是 (void)
2013-11-05 21:55:31	letoh	最後弄個 void 就好了XD
2013-11-05 21:55:37	letoh	嗯嗯
2013-11-05 21:55:50	suhorng	XDD
2013-11-05 21:56:27	letoh	這倒沒想過  因為我之前拿來算 project euler，最後都是 display XD
2013-11-05 21:56:38	letoh	所以沒遇到你這問題XD
2013-11-05 21:56:56	suhorng	嗚嗚QQ
2013-11-05 21:57:10	letoh	來查一下文件
2013-11-05 22:00:14	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Ping timeout: 246 seconds)
2013-11-05 22:04:40	letoh	suhorng: -m, --main : Call `main' with command-line arguments, print results
2013-11-05 22:04:58	letoh	racket 可以 (provide main) 後  透過 -m 直接呼叫 main
2013-11-05 22:05:16	letoh	不過好像還是會印出結果XD
2013-11-05 22:05:32	letoh	我試了其他的 scheme implementation 不會有這個行為XD
2013-11-05 22:06:27	letoh	suhorng: http://docs.racket-lang.org/guide/scripts.html  你看這個.. helloworld 直接放個字串就好，所以應該算是 racket 的設計XD
2013-11-05 22:10:08	<--	b4283 (~b4283@218-164-218-203.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-05 22:11:19	letoh	suhorng: r6rs 可以接受嗎? XD
2013-11-05 22:13:38	suhorng	大驚...
2013-11-05 22:14:26	suhorng	r6rs可阿XD
2013-11-05 22:14:26	letoh	跑 r6rs 模式好像就不會印出最後結果了.. 除非你需要 racket 特異功能@_@
2013-11-05 22:14:26	suhorng	喔喔~!XD
2013-11-05 22:14:44	letoh	最前面加兩行  #!r6rs\n(import (rnrs))\n
2013-11-05 22:14:51	letoh	拿掉 #lang 那一行
2013-11-05 22:16:25	letoh	racket mode 我再研究一下XD
2013-11-05 22:17:23	suhorng	真神秘
2013-11-05 22:17:27	suhorng	來研究下 XDD
2013-11-05 22:17:55	suhorng	不知道r6rs mode下會不會有些模組不能用w
2013-11-05 22:18:07	letoh	應該會@_@
2013-11-05 22:19:11	letoh	suhorng: http://docs.racket-lang.org/r6rs/Using_R6RS_with_DrRacket.html?q=r6rs
2013-11-05 22:19:11	suhorng	嗯..影響不大的話沒差
2013-11-05 22:19:27	letoh	suhorng: 或是直接執行 plt-r6rs  但裡面好像就不能有 racket 語法了(?
2013-11-05 22:19:54	-->	godfat (~Adium@114-45-181-169.dynamic.hinet.net) has joined #haskell.tw
2013-11-05 22:22:33	letoh	suhorng: http://docs.racket-lang.org/guide/Module_Syntax.html?q=top-level&q=main%20function&q=r6rs#%28part._main-and-test%29
2013-11-05 22:22:51	letoh	racket 的 main function 寫法...
2013-11-05 22:24:52	suhorng	喔喔 驚XD
2013-11-05 22:24:52	suhorng	module* !
2013-11-05 22:24:52	suhorng	突然有種 module Main where main = .... 的感覺
2013-11-05 22:24:52	suhorng	letoh: 太感謝啦XD!!!
2013-11-05 22:25:16	letoh	racket 應該算是獨立的語言  很多怪東西XD
2013-11-05 22:25:38	suhorng	包了很多語言的大語言 XD?
2013-11-05 22:26:22	letoh	應該算是 language framework ?
2013-11-05 22:26:27	suhorng	嗯嗯
2013-11-05 22:27:33	letoh	但找不到阻止 top-level result 被印出來的方法XD
2013-11-05 22:28:10	<--	liuzhoou (~liuzhoou@124.79.212.167) has quit (Read error: Connection reset by peer)
2013-11-05 22:29:08	letoh	rackt 5.3.6 不曉得改了什麼
2013-11-05 22:29:08	letoh	racket 5.3.6 不曉得改了什麼
2013-11-05 22:29:08	suhorng	唔 main那個也會
2013-11-05 22:29:27	letoh	suhorng: 認命加個 (void) 吧XD
2013-11-05 22:30:07	petercommand	suhorng: #lang racket/load
2013-11-05 22:30:10	suhorng	QQ好像只有這樣做了
2013-11-05 22:30:47	-->	liuzhoou (~liuzhoou@124.79.212.167) has joined #haskell.tw
2013-11-05 22:30:52	petercommand	把那行lang改掉
2013-11-05 22:30:57	suhorng	驚
2013-11-05 22:31:17	letoh	load 好像不行?
2013-11-05 22:31:37	letoh	用了 load 就不能用 module 語法了
2013-11-05 22:31:42	suhorng	http://docs.racket-lang.org/guide/load.html cool
2013-11-05 22:31:46	suhorng	嗯 不能用module
2013-11-05 22:32:01	petercommand	@@
2013-11-05 22:32:17	letoh	嗯  不過的確可以避免印出最後的計算結果
2013-11-05 22:32:21	letoh	petercommand: 厲害!!
2013-11-05 22:32:51	suhorng	"The load function runs a REPL script by reading S-expressions from a file, one by one, and passing them to eval." XDD
2013-11-05 22:33:14	letoh	文件說這個 load 也算是一個 language 耶
2013-11-05 22:34:35	suhorng	這...XD
2013-11-05 22:35:13	letoh	http://docs.racket-lang.org/reference/load-lang.html
2013-11-05 22:35:41	suhorng	嗯, racket處理modlue/scoping比Scheme好多了...
2013-11-05 22:35:46	suhorng	*module
2013-11-05 22:36:40	letoh	racket 給我的感覺比較像是工業版 scheme
2013-11-05 22:37:55	suhorng	實用XD
2013-11-05 22:43:13	petercommand	load也算language蠻奇特的XD
2013-11-05 22:44:06	letoh	應該是弄在 reader 那邊都算是 language
2013-11-05 23:25:40	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-05 23:26:15	b4283	王垠那個 benchmark 程式還真是天書，十幾層的 lambda ...
2013-11-05 23:29:40	suhorng	b4283: 那是一個 curried 的 CPS-style interpreter
2013-11-05 23:30:43	b4283	suhorng: 他有說明，可我連想看懂的欲望都沒有 :/
2013-11-05 23:34:17	b4283	喔喔... 因為是 curried 所以才那麼多層呀？
2013-11-05 23:34:29	suhorng	對
2013-11-05 23:34:39	petercommand	好吃的curry (大誤
2013-11-05 23:34:42	suhorng	外加 CPS- 再多一層
2013-11-05 23:34:43	suhorng	XD
2013-11-05 23:35:10	suhorng	喔..還有他沒有primitive遞迴
2013-11-05 23:35:45	suhorng	用 Y, 所以寫遞迴code會再多個一層, 變成 ((Y (lambda (self) ...)) arg)
2013-11-05 23:43:24	hashcat	前陣子用了clojure結果龜縮回scala
2013-11-05 23:45:08	suhorng	hashcat: 發生了什麼事?
2013-11-05 23:45:53	hashcat	消除不了的括號
2013-11-05 23:46:01	suhorng	XDD
2013-11-05 23:46:06	hashcat	不算啥好理由
2013-11-05 23:46:14	suhorng	(()(()((((())))()()))((())))()))))
2013-11-05 23:48:06	hashcat	大量括號應該可以算是冗餘
2013-11-05 23:49:47	hashcat	可能有某種規則, 可以識別其實有些括號不用出現這樣
2013-11-05 23:51:39	hashcat	用排縮取代括號?
2013-11-05 23:53:12	suhorng	不知道耶w
2013-11-05 23:53:16	suhorng	就另外定一套語法就好啦
2013-11-05 23:54:26	hashcat	感覺會變很好看, 我來提議一下
2013-11-06 00:04:14	<--	suhorng (~suhorng@118-166-48-159.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-06 00:35:59	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Quit: mno2)
2013-11-06 00:36:52	<--	liuzhoou (~liuzhoou@124.79.212.167) has quit (Quit: Leaving...)
2013-11-06 02:36:44	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-11-06 02:39:58	hashcat	http://srfi.schemers.org/srfi-49/srfi-49.html
2013-11-06 02:40:13	hashcat	http://readable.sourceforge.net/
2013-11-06 02:40:30	hashcat	還真不少
2013-11-06 02:52:45	<--	hashcat (~hashcat@39.14.62.33) has quit (Ping timeout: 252 seconds)
2013-11-06 03:32:54	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Ping timeout: 252 seconds)
2013-11-06 05:17:17	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-11-06 06:15:24	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Quit: #lesswrong)
2013-11-06 06:55:03	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-11-06 10:14:32	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-06 10:27:38	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-06 21:23:07	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-06 21:23:07	--	Mode #haskell.tw [+ns] by brooks.freenode.net
2013-11-06 21:23:07	--	Nicks #haskell.tw: [@drbean]
2013-11-06 21:23:07	--	Channel #haskell.tw: 1 nick (1 op, 0 halfops, 0 voices, 0 normals)
2013-11-06 21:23:24	--	Mode #haskell.tw [+t] by drbean
2013-11-06 21:23:27	--	Mode #haskell.tw [+nst]
2013-11-06 21:23:27	--	Channel created on Wed, 06 Nov 2013 21:23:07
2013-11-06 21:27:36	--	Mode #haskell.tw [-o drbean] by brooks.freenode.net
2013-11-06 21:27:36	--	Notice(brooks.freenode.net): *** Notice -- TS for #haskell.tw changed from 1383744187 to 1339383600
2013-11-06 21:27:36	--	Mode #haskell.tw [+c-s] by brooks.freenode.net
2013-11-06 21:27:36	-->	Yu_lin (24ec15ed@gateway/web/freenode/ip.36.236.21.237) has joined #haskell.tw
2013-11-06 21:27:36	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-06 21:27:36	-->	b4284 (~b4283@218-164-201-107.dynamic.hinet.net) has joined #haskell.tw
2013-11-06 21:27:36	-->	hashcat (~hashcat@27.245.248.0) has joined #haskell.tw
2013-11-06 21:27:36	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-06 21:27:36	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-11-06 21:27:36	-->	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-06 21:27:36	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-06 21:27:36	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell.tw
2013-11-06 21:27:36	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-06 21:27:36	-->	godfat (~Adium@114-45-181-169.dynamic.hinet.net) has joined #haskell.tw
2013-11-06 21:27:36	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-11-06 21:27:36	-->	logfat (~cinch@home.mno2.org) has joined #haskell.tw
2013-11-06 21:27:36	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell.tw
2013-11-06 21:27:36	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-mqeepnwyitrckmqq) has joined #haskell.tw
2013-11-06 21:27:36	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-guobamlrxxzzysaa) has joined #haskell.tw
2013-11-06 21:27:36	-->	hychen (uid12518@gateway/web/irccloud.com/x-gonadrklplbderow) has joined #haskell.tw
2013-11-06 21:27:36	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-eqpbnazaowtqqius) has joined #haskell.tw
2013-11-06 21:27:36	-->	superbil (uid12362@gateway/web/irccloud.com/x-rimualvqdrluscgf) has joined #haskell.tw
2013-11-06 21:27:36	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-06 21:27:36	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-06 21:27:36	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-06 21:27:36	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-11-06 21:27:36	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-11-06 21:27:36	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-06 21:27:36	-->	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-11-06 21:27:36	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-11-06 21:27:36	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-06 21:27:36	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-11-06 21:27:36	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-11-06 21:27:36	--	brooks.freenode.net has changed topic for #haskell.tw to "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-06 21:29:08	hashcat	還是不能理解, 改個語法少點括號會被噓一票
2013-11-06 21:29:09	Yu_lin	跟用 lisp 語法的 haskell 差不多感覺吧？
2013-11-06 21:29:09	Yu_lin	還是會有人比較喜歡或習慣原本的語法
2013-11-06 21:29:20	hashcat	罷了, 我喜歡就好
2013-11-06 21:31:46	Yu_lin	如果括號不要寫太多，我是偏向 lisp 語法，但如果括號太多，就覺得很煩
2013-11-06 21:35:47	petercommand	數括號XD
2013-11-06 21:39:17	CindyLinz	噓爆? @@"
2013-11-06 21:39:35	CindyLinz	是一個人非常嗆的爆, 還是被一堆人圍攻啊? @@"
2013-11-06 21:40:26	letoh	如果只有一個人的話，那應該就是 Li○us 了吧 (誤
2013-11-06 21:43:28	CindyLinz	只是個建議, 即使優點少於缺點.. 卻會被一堆人嗆爆的話, 這個社群.......
2013-11-06 21:43:53	Yu_lin	XDDDD
2013-11-06 21:44:04	Yu_lin	只有一個人這個實在XD
2013-11-06 22:22:08	<--	b4284 (~b4283@218-164-201-107.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-06 22:33:43	hashcat	Lin(_)us 那個是?
2013-11-06 22:34:01	hashcat	應該是u噗噗, 來查一下是啥回事
2013-11-06 22:43:11	-->	b4284 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-06 22:43:33	<--	b4283 (~b4283@118.150.134.51) has quit (Disconnected by services)
2013-11-06 22:43:39	--	b4284 is now known as b4283
2013-11-06 22:54:59	petercommand	我好像從來沒看過Linus戰語言XD
2013-11-06 22:55:45	letoh	petercommand: 誰說的 c++/c 之戰不是名戰役嗎? XD
2013-11-06 22:56:01	letoh	不過只有一方壓著打算是戰嗎? XD
2013-11-06 22:56:24	 *	letoh 應該算凌虐? (誤
2013-11-06 22:56:29	hashcat	我還以為是兩個u
2013-11-06 22:58:44	petercommand	letoh: XDDD
2013-11-06 22:59:01	petercommand	letoh: 想起來了
2013-11-06 22:59:55	b4283	他還有戰過 java 的樣子
2013-11-06 23:00:22	b4283	https://www.youtube.com/watch?v=Aa55RKWZxxI
2013-11-06 23:00:51	letoh	git/cvs 算嗎? 雖然這戰力很懸殊XD
2013-11-06 23:01:13	petercommand	原來是大戰神XD
2013-11-06 23:04:55	CindyLinz	無雙等級的....
2013-11-06 23:05:17	CindyLinz	如果多戰一的話, 要叫作霸凌?
2013-11-06 23:06:47	godfat	一對多 => 無雙
2013-11-06 23:06:47	godfat	多對一 => 罷凌
2013-11-06 23:09:40	<--	Yu_lin (24ec15ed@gateway/web/freenode/ip.36.236.21.237) has quit (Quit: Page closed)
2013-11-06 23:23:17	hashcat	打殭屍或被殭屍啃
2013-11-06 23:45:36	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 245 seconds)
2013-11-06 23:47:00	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-11-07 00:06:10	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-07 00:29:16	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Quit: mno2)
2013-11-07 01:34:40	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 260 seconds)
2013-11-07 01:35:26	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-11-07 01:37:45	hychen	大神還有戰nvidia...
2013-11-07 02:22:26	<--	superbil (uid12362@gateway/web/irccloud.com/x-rimualvqdrluscgf) has quit (Remote host closed the connection)
2013-11-07 02:22:26	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-guobamlrxxzzysaa) has quit (Remote host closed the connection)
2013-11-07 02:22:26	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-eqpbnazaowtqqius) has quit (Remote host closed the connection)
2013-11-07 02:25:37	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-mqeepnwyitrckmqq) has quit (Remote host closed the connection)
2013-11-07 02:28:30	<--	hychen (uid12518@gateway/web/irccloud.com/x-gonadrklplbderow) has quit (Remote host closed the connection)
2013-11-07 03:06:12	-->	superbil (uid12362@gateway/web/irccloud.com/x-aayejthevelgpxjy) has joined #haskell.tw
2013-11-07 03:08:00	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-plwmgpkgneufhtbc) has joined #haskell.tw
2013-11-07 03:09:49	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-ngjtpstzupwktpmd) has joined #haskell.tw
2013-11-07 03:12:26	-->	hychen (uid12518@gateway/web/irccloud.com/x-zfbkekxatpinlehk) has joined #haskell.tw
2013-11-07 03:13:23	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-mygfrmexiwbuprth) has joined #haskell.tw
2013-11-07 04:59:16	<--	hashcat (~hashcat@27.245.248.0) has quit (Ping timeout: 264 seconds)
2013-11-07 05:39:00	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-07 05:42:14	<--	godfat (~Adium@114-45-181-169.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-11-07 07:51:49	-->	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has joined #haskell.tw
2013-11-07 07:58:36	-->	xcycl (~liang-tin@host-92-19-62-35.as13285.net) has joined #haskell.tw
2013-11-07 08:00:25	xcycl	...
2013-11-07 08:00:52	xcycl	看了兩篇 yin wang 寫的東西好想吐
2013-11-07 08:03:09	xcycl	有人有同樣的感覺嗎 orz.
2013-11-07 08:25:32	monochrom	我的感想是"哈哈罵得真爽", 當然不是說一定罵得對
2013-11-07 08:29:02	<--	xcycl (~liang-tin@host-92-19-62-35.as13285.net) has quit (Quit: xcycl)
2013-11-07 08:33:31	-->	xcycl (~liang-tin@host-92-19-62-35.as13285.net) has joined #haskell.tw
2013-11-07 08:35:39	xcycl	他對可讀性這件事情真是異于常人，連吐槽的不知從何下手
2013-11-07 08:38:27	monochrom	"可讀性"本來就是主觀
2013-11-07 08:40:43	xcycl	主觀歸主觀, 但還是有些基本的元素
2013-11-07 08:41:11	xcycl	不然做 ui 的都在打高空了 ...
2013-11-07 08:42:09	xcycl	就像我們傾向於"結構化"的程式這樣
2013-11-07 08:42:31	xcycl	而不是一堆 GOTO 跳來跳去的
2013-11-07 08:43:59	monochrom	那麼, 王垠的可讀性是甚麼?
2013-11-07 08:50:15	xcycl	我觉得 Scheme （Lisp） 的基于“S表达式”（S-expression）的语法，是世界上最完美的设计。其实我希望它能更简单一点，但是在现存的语言中，我没有找到第二种能与它比美。也许在读过这篇文章之后，你会发现这种语法设计的合理性，已经接近理论允许的最大值。
2013-11-07 08:50:18	xcycl	.......
2013-11-07 08:52:25	xcycl	他的論點是 (+ 1 (* 2 3)) 比 1+2*3 還要好讀 嗯 .....
2013-11-07 08:54:52	monochrom	我喜歡 infix, 所以我喜歡 1+2*3. 但你知嗎, 那只是對童年所學的感情. 理性上, 我最想讀語法樹, 而不是文字
2013-11-07 08:55:06	xcycl	是
2013-11-07 08:55:22	xcycl	可讀性還要考慮個人的背景經驗
2013-11-07 08:56:40	monochrom	這樣說吧: 換作 1$2#3, $ 和 # 是新的運算子, 你看得出它指 1$(2#3) 抑或 (1$2)#3 嗎?
2013-11-07 08:57:29	xcycl	這實在不是問題耶
2013-11-07 08:57:47	xcycl	+- */ 這些 infix 之所以好讀, 就是因為絕大多數的人已經習慣了
2013-11-07 08:58:10	monochrom	最理想是給我一棵樹看, 退而求其次是 (# ($ 1 2) 3)
2013-11-07 08:59:47	xcycl	所以在其他語言像 Haskell 就寫成這樣啊
2013-11-07 09:00:21	xcycl	我不是要爭論 infix 比 prefix 好
2013-11-07 09:02:24	monochrom	你也許會喜歡 Dijkstra 的立場. 他說, 如果一個運算子是 associative, 那麼用 infix 就有好處. 否則, 反而混淆.
2013-11-07 09:03:49	xcycl	比 S-expr 完美論合理多了 ...
2013-11-07 09:05:13	<--	mno2 (~mno2@cm42.epsilon244.maxonline.com.sg) has quit (Quit: mno2)
2013-11-07 09:06:37	<--	xcycl (~liang-tin@host-92-19-62-35.as13285.net) has left #haskell.tw
2013-11-07 09:56:44	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-07 10:12:35	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-07 12:39:23	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-07 13:13:45	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-07 13:25:54	-->	hashcat (~hashcat@27.245.248.0) has joined #haskell.tw
2013-11-07 13:52:12	hychen	我還滿喜歡 s-exp
2013-11-07 13:52:29	hychen	在設計上, 我覺得他很漂亮
2013-11-07 13:57:34	b4283	你是說「她」吧
2013-11-07 16:47:38	petercommand	dijkstra講的蠻合理的
2013-11-07 16:50:16	petercommand	不過要搞priority就是了
2013-11-07 16:50:35	petercommand	operator
2013-11-07 17:29:42	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-11-07 18:29:54	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-07 18:55:32	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-07 19:06:01	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-11-07 19:38:07	-->	godfat (~Adium@101.8.121.19) has joined #haskell.tw
2013-11-07 19:52:04	-->	b4283 (~b4283@218-164-218-143.dynamic.hinet.net) has joined #haskell.tw
2013-11-07 20:11:42	<--	godfat (~Adium@101.8.121.19) has quit (Quit: Leaving.)
2013-11-07 20:14:57	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2013-11-07 20:21:45	<--	logfat (~cinch@home.mno2.org) has quit (*.net *.split)
2013-11-07 21:44:56	<--	b4283 (~b4283@218-164-218-143.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-07 22:00:28	-->	gko_ (~gko@208.69.41.42) has joined #haskell.tw
2013-11-07 22:08:00	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-07 22:26:06	-->	godfat (~Adium@114-24-0-146.dynamic.hinet.net) has joined #haskell.tw
2013-11-07 22:30:28	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-07 22:40:38	<--	gko_ (~gko@208.69.41.42) has quit (Ping timeout: 246 seconds)
2013-11-07 22:41:14	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-07 23:10:08	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 244 seconds)
2013-11-07 23:10:26	-->	gko_ (~gko@192.161.167.31) has joined #haskell.tw
2013-11-07 23:12:44	godfat	今天的投影片 http://www.godfat.org/slide/2013-11-07-variance/
2013-11-07 23:15:15	hashcat	scala !
2013-11-07 23:15:26	godfat	yep
2013-11-07 23:20:17	petercommand	這slide好精美呀
2013-11-07 23:24:40	godfat	謝謝 XDDD 這是沿用上次的樣式
2013-11-07 23:25:26	<--	gko_ (~gko@192.161.167.31) has quit (Ping timeout: 248 seconds)
2013-11-07 23:25:44	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-07 23:39:00	<--	superbil (uid12362@gateway/web/irccloud.com/x-aayejthevelgpxjy) has quit (Ping timeout: 260 seconds)
2013-11-07 23:39:48	-->	superbil (uid12362@gateway/web/irccloud.com/x-wvbzlrctvlmktvwh) has joined #haskell.tw
2013-11-07 23:46:52	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-07 23:54:33	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-11-07 23:55:21	-->	gko_ (~gko@192.161.167.37) has joined #haskell.tw
2013-11-08 01:10:00	<--	gko_ (~gko@192.161.167.37) has quit (Ping timeout: 244 seconds)
2013-11-08 01:11:37	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-08 03:14:24	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (Quit: requested)
2013-11-08 03:23:50	<--	hashcat (~hashcat@27.245.248.0) has quit (Ping timeout: 240 seconds)
2013-11-08 03:25:07	-->	hashcat (~hashcat@27.245.248.0) has joined #haskell.tw
2013-11-08 03:30:49	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-08 03:35:00	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Remote host closed the connection)
2013-11-08 03:36:45	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-08 03:45:50	<--	hashcat (~hashcat@27.245.248.0) has quit (Ping timeout: 240 seconds)
2013-11-08 03:47:06	-->	hashcat (~hashcat@27.245.248.0) has joined #haskell.tw
2013-11-08 09:59:11	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-08 10:45:49	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-08 13:10:34	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-08 14:00:32	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-08 18:09:50	<--	godfat (~Adium@114-24-0-146.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-08 18:52:09	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-08 19:35:50	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-08 19:56:42	-->	b4283 (~b4283@218-164-215-73.dynamic.hinet.net) has joined #haskell.tw
2013-11-08 20:22:26	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-08 20:55:00	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-08 22:02:51	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-08 22:22:02	-->	godfat (~Adium@114-24-0-146.dynamic.hinet.net) has joined #haskell.tw
2013-11-08 22:22:38	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-08 22:57:45	-->	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has joined #haskell.tw
2013-11-08 23:03:31	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-08 23:03:53	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-08 23:05:00	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-08 23:06:15	<--	b4283 (~b4283@218-164-215-73.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-08 23:16:13	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-08 23:17:45	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-08 23:19:51	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Client Quit)
2013-11-08 23:21:35	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-08 23:40:33	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-09 00:21:05	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-09 00:25:07	<--	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-09 01:00:51	-->	tiglog (~tiglog@124.202.190.203) has joined #haskell.tw
2013-11-09 01:02:56	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-09 01:48:54	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-09 02:34:21	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-11-09 03:01:09	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-11-09 03:03:41	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-11-09 03:16:18	<--	tiglog (~tiglog@124.202.190.203) has quit (Quit: Leaving)
2013-11-09 04:42:26	<--	hashcat (~hashcat@27.245.248.0) has quit (Ping timeout: 246 seconds)
2013-11-09 05:20:15	-->	hashcat (~hashcat@27.245.248.0) has joined #haskell.tw
2013-11-09 07:56:17	monochrom	http://www.vex.net/~trebla/haskell/prerequisite.xhtml  新出版
2013-11-09 07:58:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-09 08:08:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-09 08:34:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-09 09:17:55	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-09 09:24:22	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-09 09:36:06	<--	godfat (~Adium@114-24-0-146.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-11-09 09:38:03	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-09 09:38:55	-->	b4283 (~b4283@114-39-253-172.dynamic.hinet.net) has joined #haskell.tw
2013-11-09 09:42:16	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-09 09:54:57	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-09 10:21:14	<--	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has left #haskell.tw
2013-11-09 10:21:15	--	irc: disconnected from server
2013-11-09 10:21:47	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-11-09 10:21:47	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-09 10:21:47	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-11-09 10:21:47	--	Nicks #haskell.tw: [a2n a2n_ b4283 cades cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean flter gko gko_ hashcat hychen kanru lambdabot letoh logfat_ miaout17 miaout17_ monochrom petercommand shik superbil UncleHandsome]
2013-11-09 10:21:47	--	Channel #haskell.tw: 28 nicks (0 ops, 0 halfops, 0 voices, 28 normals)
2013-11-09 10:22:06	--	Mode #haskell.tw [+cnt]
2013-11-09 10:22:06	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-11-09 10:34:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-09 10:50:12	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-09 11:45:30	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-09 12:19:31	-->	godfat (~Adium@211-75-129-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-09 12:30:58	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-09 12:50:10	<--	godfat (~Adium@211-75-129-194.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-11-09 13:05:44	-->	godfat (~Adium@211-75-129-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-09 13:08:02	-->	a2n__ (~a2n@219.85.185.194) has joined #haskell.tw
2013-11-09 13:08:06	<--	godfat (~Adium@211-75-129-194.HINET-IP.hinet.net) has quit (Client Quit)
2013-11-09 13:11:30	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 248 seconds)
2013-11-09 13:11:32	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-11-09 13:29:21	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-09 14:02:04	--	a2n__ is now known as a2n
2013-11-09 14:49:28	-->	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-09 14:50:26	-->	godfat1 (~Adium@211-75-129-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-09 14:53:38	<--	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 240 seconds)
2013-11-09 15:00:53	<--	godfat1 (~Adium@211-75-129-194.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-11-09 15:13:30	-->	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-09 15:13:36	<--	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has quit (Client Quit)
2013-11-09 17:03:16	-->	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-09 17:30:46	<--	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has quit (Quit: Leaving.)
2013-11-09 17:31:31	-->	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-09 17:31:31	<--	godfat (~Adium@112-104-91-5.adsl.dynamic.seed.net.tw) has quit (Client Quit)
2013-11-09 18:25:08	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-09 18:58:55	-->	godfat (~Adium@114-24-0-146.dynamic.hinet.net) has joined #haskell.tw
2013-11-09 19:00:26	-->	yu_lin (24ec15d8@gateway/web/freenode/ip.36.236.21.216) has joined #haskell.tw
2013-11-09 19:03:32	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-09 19:03:49	<--	godfat (~Adium@114-24-0-146.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-09 19:58:29	yu_lin	入門書的 Functors, Applicative Functors 與 Monoids 那章，Applicative functors 那一段，
2013-11-09 19:58:41	yu_lin	對於 pure 比較好的書法是把一個普通值放到一個預設的 context 下，一個最小的 context 但仍然包含這個值。
2013-11-09 19:59:06	yu_lin	那個「書法」是不是「說法」？
2013-11-09 20:05:41	hashcat	 不用理隻字片語
2013-11-09 20:05:45	hashcat	看上下文
2013-11-09 20:07:15	hashcat	排除了各種可能之後剩下的就是真相了
2013-11-09 20:20:22	<--	hashcat (~hashcat@27.245.248.0) has quit (Ping timeout: 248 seconds)
2013-11-09 20:37:23	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-09 20:56:50	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-09 21:07:07	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-09 21:08:17	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-09 21:10:33	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-09 21:13:53	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-09 22:16:07	<--	b4283 (~b4283@114-39-253-172.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-09 22:23:06	<--	yu_lin (24ec15d8@gateway/web/freenode/ip.36.236.21.216) has quit (Quit: Page closed)
2013-11-09 22:29:59	-->	hashcat (~hashcat@27.52.104.98) has joined #haskell.tw
2013-11-09 22:42:56	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-09 22:44:16	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-09 22:57:25	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-09 22:58:09	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-09 23:22:53	-->	xcycl (~liang-tin@host-2-98-227-119.as13285.net) has joined #haskell.tw
2013-11-09 23:26:38	xcycl	原文是 A better way of thinking about pure would be to say that it takes a value and puts it in some sort of default (or pure) context—a minimal context that still yields that value.
2013-11-09 23:27:06	xcycl	貼近原意的翻譯應該是「想法」
2013-11-09 23:57:36	hashcat	與其說沒有狀態, 不如說那種寫法隨時提醒有狀態在這裡
2013-11-10 00:56:04	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-10 01:45:25	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-10 01:45:39	<--	xcycl (~liang-tin@host-2-98-227-119.as13285.net) has quit (Quit: xcycl)
2013-11-10 02:57:57	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2013-11-10 03:33:28	<--	hashcat (~hashcat@27.52.104.98) has quit (Ping timeout: 264 seconds)
2013-11-10 04:22:16	-->	hashcat (~hashcat@106.65.143.244) has joined #haskell.tw
2013-11-10 04:54:18	<--	hashcat (~hashcat@106.65.143.244) has quit (Read error: No route to host)
2013-11-10 09:46:47	-->	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has joined #haskell.tw
2013-11-10 09:47:12	suhorng	https://news.ycombinator.com/item?id=6701688 Racket creator's new PL?
2013-11-10 09:56:55	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-10 10:13:30	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-10 10:19:47	<--	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-10 10:49:46	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-10 10:56:50	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-10 11:41:21	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-10 13:18:03	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-10 13:44:32	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Ping timeout: 265 seconds)
2013-11-10 13:48:04	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-10 15:08:11	letoh	好多 end
2013-11-10 18:41:50	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-10 19:21:00	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-10 22:18:38	-->	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has joined #haskell.tw
2013-11-10 22:24:16	suhorng	MLton compile都那麼慢嗎? 還是啟動速度慢(像Racket)而已?
2013-11-10 22:27:49	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-11-10 22:28:20	suhorng	不過-verbose 2噴出來的編譯訊息看起來就好厲害 XDD
2013-11-10 22:28:49	-->	cibs (~cibs@219-87-142-18.static.tfn.net.tw) has joined #haskell.tw
2013-11-10 22:31:37	<--	cibs (~cibs@219-87-142-18.static.tfn.net.tw) has quit (Read error: Connection reset by peer)
2013-11-10 22:33:49	-->	cibs (~cibs@219-87-142-18.static.tfn.net.tw) has joined #haskell.tw
2013-11-10 22:38:52	-->	cibs_ (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-10 22:39:09	<--	cibs (~cibs@219-87-142-18.static.tfn.net.tw) has quit (Ping timeout: 256 seconds)
2013-11-10 23:13:26	<--	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-10 23:13:43	-->	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has joined #haskell.tw
2013-11-11 00:37:12	<--	suhorng (~suhorng@118-166-61-86.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-11 00:58:16	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-11 01:06:28	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-11-11 04:23:18	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-11 04:24:05	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-11 05:03:50	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-11 05:04:36	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-11 09:32:23	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-11 10:23:27	<--	cibs_ (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-11-11 10:23:51	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-11 11:05:04	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-11 11:09:57	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-11-11 11:35:38	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-11 11:36:25	cataska	http://www.iis.sinica.edu.tw/page/events/FILE/131111.pdf
2013-11-11 11:36:38	cataska	就是今天耶 (驚)
2013-11-11 11:46:06	CindyLinz	monochrom: 真棒 ^^ # prerequisite
2013-11-11 12:06:02	CindyLinz	覺得對於工程師背景, 或是想要作應用的人來說, 讀到「這是一個最小的xxx」這種描述 (像是前面看到的 minimal context that... 或是 fix f is the least fixed point of the function f)
2013-11-11 12:06:22	CindyLinz	以前看的時候, 會覺得你扯這幹嘛, 這是哪一國的幽默 XD
2013-11-11 12:08:21	CindyLinz	我們一點都不在意有沒有更小的存在, 能用就好了.. XD
2013-11-11 14:00:04	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-11 14:04:07	mno2	有人對於寫 Haskell 的工作有興趣嗎？ xD
2013-11-11 14:05:58	CindyLinz	mno2: 需要全職嗎?
2013-11-11 14:06:30	mno2	要啊，地點在新加坡，會幫你辦工作簽
2013-11-11 14:06:54	CindyLinz	(縮)
2013-11-11 14:07:09	mno2	薪水比台灣 Google  學士進去 Junior 要好一點
2013-11-11 14:08:47	mno2	另外英文要最好要有一定水平。
2013-11-11 14:08:59	mno2	新加坡是全部說英文的
2013-11-11 14:10:31	mno2	應該要在 Functional Thursday 廣告一下 xD
2013-11-11 14:11:47	CindyLinz	嗯, 你看是你能自己來講, 或是留一兩頁介紹影片給到時候講的人吧
2013-11-11 14:14:41	mno2	嗯嗯，不過下次就是一個月後了 Orz
2013-11-11 14:18:37	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-11-11 14:18:43	CindyLinz	下一次的 agenda 還沒出來, 不知道會有什麼主題 ^^
2013-11-11 15:01:55	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Ping timeout: 250 seconds)
2013-11-11 15:07:47	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-11-11 17:17:19	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit
2013-11-11 18:45:44	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-11 18:46:51	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-11 18:51:23	godfat1	可惜我有工作了 @@
2013-11-11 18:51:26	--	godfat1 is now known as godfat
2013-11-11 19:42:43	-->	yc1043 (~mros@140.112.211.18) has joined #haskell.tw
2013-11-11 19:44:47	<--	yc1043 (~mros@140.112.211.18) has quit (Client Quit)
2013-11-11 20:00:07	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-11 20:14:53	-->	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has joined #haskell.tw
2013-11-11 20:37:25	petercommand	c1
2013-11-11 20:37:43	petercommand	sorry打錯
2013-11-11 21:34:40	UncleHandsome	2
2013-11-11 21:46:03	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (Quit: Lost terminal)
2013-11-11 21:50:38	-->	hashcat (~kv2a@218-166-238-175.dynamic.hinet.net) has joined #haskell.tw
2013-11-11 22:39:43	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-11 23:09:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-11 23:14:41	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-11 23:36:21	-->	caasih (~caasiHuan@114-46-112-51.dynamic.hinet.net) has joined #haskell.tw
2013-11-11 23:37:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-12 00:06:10	<--	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-12 00:59:37	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-12 01:00:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-12 01:17:37	<--	caasih (~caasiHuan@114-46-112-51.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-12 01:36:51	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-11-12 01:46:15	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-12 03:45:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-12 03:51:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-12 03:57:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-12 04:04:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-12 04:05:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-12 04:48:08	-->	caasih (~caasiHuan@114-46-112-51.dynamic.hinet.net) has joined #haskell.tw
2013-11-12 06:06:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-11-12 06:46:47	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-12 06:53:49	<--	caasih (~caasiHuan@114-46-112-51.dynamic.hinet.net) has quit (Quit: leaving)
2013-11-12 06:54:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-11-12 09:56:39	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-12 10:05:16	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-ngjtpstzupwktpmd) has quit (Ping timeout: 264 seconds)
2013-11-12 10:05:27	<--	superbil (uid12362@gateway/web/irccloud.com/x-wvbzlrctvlmktvwh) has quit (Read error: Connection reset by peer)
2013-11-12 10:27:31	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-eazmymxswbwfdejq) has joined #haskell.tw
2013-11-12 10:35:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-12 10:41:10	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-12 11:58:12	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-11-12 12:42:08	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-12 12:57:30	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-12 13:35:25	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-12 13:44:22	<--	hychen (uid12518@gateway/web/irccloud.com/x-zfbkekxatpinlehk) has quit (Quit: Connection closed for inactivity)
2013-11-12 13:59:24	-->	hychen (uid12518@gateway/web/irccloud.com/x-krgfgyonerczajuh) has joined #haskell.tw
2013-11-12 16:34:41	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-eazmymxswbwfdejq) has quit (Read error: Connection reset by peer)
2013-11-12 16:35:01	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-jvcpkxhitrafniiz) has joined #haskell.tw
2013-11-12 16:44:58	CindyLinz	在 Agda 裡面, module ... where 之後打一個 mutual, 然後把之後所有的程式碼加一個縮排, 就可以讓前面的程式使用後面的定義了 :p
2013-11-12 17:34:18	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-mygfrmexiwbuprth) has quit (Quit: Connection closed for inactivity)
2013-11-12 18:01:50	-->	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-11-12 18:34:52	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-12 19:05:28	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-jvcpkxhitrafniiz) has quit (Quit: Connection closed for inactivity)
2013-11-12 19:24:45	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-12 19:48:08	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-12 20:11:39	-->	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has joined #haskell.tw
2013-11-12 20:26:38	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-parbodzrtaegqkco) has joined #haskell.tw
2013-11-12 20:51:38	-->	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has joined #haskell.tw
2013-11-12 21:22:30	<--	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-12 21:32:16	-->	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has joined #haskell.tw
2013-11-12 21:33:26	suhorng	Haskell的module name應該怎樣才正確阿?
2013-11-12 21:33:30	suhorng	假設是:
2013-11-12 21:33:44	suhorng	./  A.hs   -- import B.C
2013-11-12 21:33:51	suhorng	    B/C.hs
2013-11-12 21:34:04	suhorng	那麼 C.hs 應該寫 module C 還是 module B.C？
2013-11-12 21:34:16	suhorng	我原本直覺是前面不過好像後面才是對的QQQ
2013-11-12 21:40:38	suhorng	http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/syntax-extns.html#hierarchical-modules  .....原來有 "." 的是 GHC extension...
2013-11-12 21:45:15	suhorng	原來大家都寫後者 後者才是對的orz
2013-11-12 22:09:54	favonia	CindyLinz: 新版 agda 已經不用 mutual 了...
2013-11-12 22:10:06	favonia	CindyLinz: 你只要把宣告往前移動就好
2013-11-12 22:10:34	<--	hychen (uid12518@gateway/web/irccloud.com/x-krgfgyonerczajuh) has quit (Read error: Connection reset by peer)
2013-11-12 22:10:49	-->	hychen (uid12518@gateway/web/irccloud.com/x-cavrysenqhixlrdv) has joined #haskell.tw
2013-11-12 22:11:15	favonia	suhorng: Agda 也照抄... lol
2013-11-12 22:13:24	suhorng	原來 Agda 也是這樣!!!
2013-11-12 22:13:47	suhorng	沒想到 Haskell98 的模組竟然是平的orz
2013-11-12 22:14:32	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-12 22:30:59	CindyLinz	favonia: 可是用了 mutual 的話, declare 也不用往前放耶~
2013-11-12 22:31:19	favonia	CindyLinz: 現在 mutual 只是 syntax sugar lol
2013-11-12 22:31:32	CindyLinz	favonia: 在用 literate 的方式寫文章的話, 順序可以隨意比較好寫
2013-11-12 23:23:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-12 23:25:24	<--	hashcat (~kv2a@218-166-238-175.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2013-11-12 23:37:13	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2013-11-12 23:37:13	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-11-12 23:53:37	<--	darkx (~x4r@unaffiliated/darkx) has quit (Quit: leaving)
2013-11-12 23:54:00	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-11-12 23:54:01	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2013-11-12 23:54:01	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-11-13 00:25:00	<--	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-13 00:28:34	-->	liuzhoou (~liuzhoou@58.38.241.93) has joined #haskell.tw
2013-11-13 00:29:43	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-13 00:30:11	-->	gko_ (~gko@192.161.167.73) has joined #haskell.tw
2013-11-13 01:05:55	<--	liuzhoou (~liuzhoou@58.38.241.93) has quit (Quit: Leaving...)
2013-11-13 01:08:54	<--	gko_ (~gko@192.161.167.73) has quit (Ping timeout: 248 seconds)
2013-11-13 01:14:47	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-11-13 01:37:44	<--	mno2 (~mno2@bb116-15-41-192.singnet.com.sg) has quit (Quit: mno2)
2013-11-13 01:45:24	CindyLinz	我剛剛在小善學長的 FB 留的言 :p # 我覺得 Haskell 用的符號真的比 Perl 還多... 不過 Perl 是州官放火, Haskell 是百姓點燈..
2013-11-13 01:45:58	godfat	++
2013-11-13 01:50:45	CindyLinz	暫時不想討論 Agda 這種顏文字語言.. XD
2013-11-13 02:10:03	darkx	CindyLinz: 州官放火的譬喻是什麼意思?
2013-11-13 02:13:19	CindyLinz	darkx: Perl 是內建的一堆環境變數或運算子就用了一堆符號, 而 Haskell 裡面會有一堆符號主要來源只是 Haskell 允許我們使用符號來定義函數, 所以許多寫 lib 的人就用一堆符號來定義他們的函數
2013-11-13 02:14:12	darkx	你的意思是，符號的使用是語言本身(州官)定的，或是 user (百姓) 自訂？
2013-11-13 02:14:15	darkx	了解XD
2013-11-13 02:14:42	CindyLinz	不過 Perl 也有允許我們使用符號來做奇怪的事, 所以也是可以百姓點燈, 但我覺得實際上不太常見, 而且列進去文句就不有趣了 XD
2013-11-13 02:15:21	darkx	Haskell 我碰的不多不知道，不過 Perl 的話自己感覺是會特異拿符號來惡搞的人不多XD
2013-11-13 02:15:34	CindyLinz	對啊, 沒什麼印象 :Q
2013-11-13 02:15:58	darkx	況且 Perl 要寫乾淨的人就已經不多見了，何況是有本事拿 Perl 來惡搞的 QQ
2013-11-13 02:16:15	 *	darkx 認識好多人號稱會寫 Perl 結果寫出來的 code 實在是 ... orz
2013-11-13 02:16:36	CindyLinz	這句話怎麼聽起來動機有矛盾? @_@" 02:15 < darkx> 況且 Perl 要寫乾淨的人就已經不多見了，何況是有本事拿 Perl 來惡搞的 QQ
2013-11-13 02:16:47	CindyLinz	他到底是想寫乾淨, 還是想惡搞啊? ^^|
2013-11-13 02:17:04	letoh	乾淨的惡搞
2013-11-13 02:17:12	darkx	我的意思是，要寫的乾淨需要一些經驗，要駕馭 Perl 惡搞的話更難  lol
2013-11-13 02:17:15	darkx	letoh: yap
2013-11-13 02:18:08	CindyLinz	啊.. 最近又想來繼續惡搞我某個 perl lib 了.. XD
2013-11-13 02:19:21	darkx	https://github.com/CindyLinz/Perl-Combinator 這個嘛XD
2013-11-13 02:19:55	CindyLinz	對啊, 想加上一次跳出比較多層的 return
2013-11-13 02:20:09	CindyLinz	看同事在用, 還要用 flag 來一層一層跳出來實在好累 @@"
2013-11-13 02:20:34	letoh	不是放個 k 就好了? XD
2013-11-13 02:21:50	CindyLinz	他們的程式碼普遍有點長, 而且縮排不一定有好好縮.... (艸)
2013-11-13 02:22:13	CindyLinz	如果跳出來是放一個常數 k 的話, 程式後來加一加, 這個 k 就錯了 orz
2013-11-13 02:22:17	letoh	沒辦法用工作排版嗎?
2013-11-13 02:22:27	letoh	阿我是指 continuation XD
2013-11-13 02:22:27	CindyLinz	那啥? ^^|
2013-11-13 02:22:32	letoh	工具
2013-11-13 02:22:34	letoh	打錯字XD
2013-11-13 02:23:04	CindyLinz	我不知道有什麼比較穩定的工具 @@"  至少 vim 的 % 還蠻常失敗的 @@"
2013-11-13 02:23:35	darkx	gg=G ?
2013-11-13 02:23:45	CindyLinz	啊我講錯了, 是 = XD
2013-11-13 02:24:07	darkx	CindyLinz: 應該是想到 % 是 gg 到 G  lol
2013-11-13 02:24:10	CindyLinz	我是想用類似 perl 的 label block 的作法, 在想跳出的那一個 block 加個 label
2013-11-13 02:24:25	CindyLinz	然後跳出的時候指定 label
2013-11-13 02:24:32	darkx	不過這樣 label 要自己定位?
2013-11-13 02:24:43	CindyLinz	runtime search.. XD
2013-11-13 02:24:52	darkx	lol
2013-11-13 02:25:18	darkx	那這樣 user 一方不只可以跳出多層 return 還可以跳到想要的任意地方阿 (?
2013-11-13 02:25:40	CindyLinz	沒辦法啊, 實作也做不出來.. XD
2013-11-13 02:25:47	darkx	Hmm
2013-11-13 02:25:57	CindyLinz	應該就一層一層 return, 只是順便看一下 label 是不是指定的, 如果是就可以停了
2013-11-13 02:25:58	letoh	goto label ?
2013-11-13 02:26:02	darkx	Anyway, 期待惡搞成功 :P
2013-11-13 02:26:19	CindyLinz	如果 label 打錯... 那就會一路 return 到底這樣 ^^|
2013-11-13 02:26:50	darkx	直接跳到最外層，然後發生靈異現象XD
2013-11-13 02:27:06	darkx	這樣會超超超難 debug lol
2013-11-13 02:27:10	CindyLinz	letoh: perl 這種用法是在 block 上面加 label, 只能從 block 內說要跳出這個 block
2013-11-13 02:27:25	CindyLinz	可以 runtime warning 說你跳了一個不存在的 label
2013-11-13 02:27:28	letoh	嗯嗯
2013-11-13 02:27:41	letoh	就 try catch 的變形?
2013-11-13 02:27:50	darkx	不太像
2013-11-13 02:28:27	letoh	聽起來還蠻像的  語法可能不太一樣啦
2013-11-13 02:28:36	CindyLinz	letoh: 主要用在 deep block 的跳出. try catch 來模擬的話, 像是在最外層放一個 catch 特定的 exception, 然後要跳出的時候就 throw 那個特定的 exception
2013-11-13 02:28:48	CindyLinz	不過 exception 這樣用會有報應的....
2013-11-13 02:28:54	letoh	對啊  我就是說這樣XD
2013-11-13 02:29:18	darkx	喔喔，我懂了
2013-11-13 02:29:36	darkx	但是這樣的寫法我自己沒用過，也很少看到
2013-11-13 02:29:47	darkx	除了在某些髒髒的 C++ ...
2013-11-13 02:31:02	CindyLinz	exception 這樣用.. 就像拿安全網當跳墊彈簧床吧.. XD
2013-11-13 02:32:19	darkx	XDDDD
2013-11-13 02:34:24	letoh	雖然我覺得有點髒，不過既然沒限制就代表可以這樣用XD
2013-11-13 02:35:09	darkx	這是 Perl 合法的語法阿
2013-11-13 02:35:40	CindyLinz	可是 compiler 實作者會假設 exception 是罕用 branch, 所以會考慮大量犧牲 exception 的效能來換取一點點主線的效能 @@"
2013-11-13 02:35:49	CindyLinz	我以為是在說 try..catch ^^|
2013-11-13 02:36:00	letoh	其實我也以為在說 try catch XD
2013-11-13 02:36:08	darkx	Orz
2013-11-13 02:36:12	CindyLinz	Perl 的 last label 應該沒問題啦, 看起來就不像 exception :p
2013-11-13 02:36:19	darkx	對阿XD
2013-11-13 02:36:42	CindyLinz	eval { .. return } 看起來就慢, 應該也不會有誤會 XD
2013-11-13 02:36:56	letoh	唔  其實我覺得那只是某種 control flow   不管是 label 什麼的好像都差不多
2013-11-13 02:37:11	darkx	應該是 "看起來就髒" XD
2013-11-13 02:38:06	darkx	阿... 不知不覺兩點半了 o囧o
2013-11-13 02:38:08	CindyLinz	我們家的程式還蠻常包 eval 的... 沒想清楚的話, 就 eval 解決... zz
2013-11-13 02:38:26	darkx	CindyLinz: eval 造成的問題用 eval 解決XDDDDD
2013-11-13 02:39:20	CindyLinz	orz
2013-11-13 02:39:30	 *	darkx 逃走，明天還要上(期)課(中考)
2013-11-13 02:39:31	darkx	QQ
2013-11-13 02:39:36	CindyLinz	掰掰 XD
2013-11-13 02:39:39	darkx	._./
2013-11-13 02:39:45	CindyLinz	考試加油~
2013-11-13 03:10:24	monochrom	哈哈, 安全網和彈床, 還可以有甚麼分別呢?
2013-11-13 03:11:11	monochrom	http://www.drmaciver.com/2009/03/exceptions-for-control-flow-considered-perfectly-acceptable-thanks-very-much/ 完全認為是彈床 :)
2013-11-13 03:12:15	letoh	這題目很多年前就戰^H討論很大了XD
2013-11-13 03:22:54	monochrom	以前有位好教授跟我討論軟體規格, 但他從用者最後怎樣用來看. 他問: "電話留言機的規格是留言, 結果人們用它做甚麼?" 我知道, 我答: "結果人們用它來擋閒雜電話, 聽見是熟人才接". 這正是他要的答案, 他想我重新檢視規格的意義. 我笑說, "那麼, 微軟 Word 的用途豈不是接收及傳播病毒?" 他也肯首. XD
2013-11-13 03:24:08	CindyLinz	XD
2013-11-13 03:24:29	letoh	不過「接收及傳播病毒」的比例可能不高啊，而且這其實也不是一般使用者真正的用途XD
2013-11-13 03:25:08	letoh	留言機那個例子倒是很不錯
2013-11-13 03:25:28	monochrom	是好事者設計病毒的平台 :)
2013-11-13 03:25:31	CindyLinz	能說服實作者就可以了... ^^|
2013-11-13 03:26:17	CindyLinz	可樂糖漿 和 3M便利貼的膠, 應該也可以算是不錯的例子
2013-11-13 03:35:18	monochrom	嗯, 試把 Word 比作蘋果. 對你我和飛鳥來說, 蘋果的意義是好吃, 而且好吃跟種子的比例是 99% 對1%, 但對蘋果樹來說, 那 1% 才是真章
2013-11-13 03:38:56	monochrom	因此, 陰謀論地說, 為了做有效病毒平台, 才大費周章給你文書功能, 引你用. XD
2013-11-13 03:39:49	monochrom	(下回課題: Word 可以當飯吃嗎? XD )
2013-11-13 03:56:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-13 04:04:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-13 04:10:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-13 04:38:20	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: enable TupleSections)
2013-11-13 04:39:06	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-13 05:40:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-13 07:03:57	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-yqfwuaohlzvafyut) has joined #haskell.tw
2013-11-13 07:19:17	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-13 07:19:34	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-13 08:32:02	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-13 09:56:10	-->	b4283 (~b4283@60.249.196.111) has joined #haskell.tw
2013-11-13 10:42:32	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-13 11:10:39	-->	superbil (uid12362@gateway/web/irccloud.com/x-nfbnieevfdwaqbcq) has joined #haskell.tw
2013-11-13 12:22:51	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-13 12:25:40	CindyLinz	用手機看 Agda 介紹網頁蠻痛苦的, 字型不足會有一堆缺字... orz
2013-11-13 13:00:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-13 13:15:25	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-13 13:54:01	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-13 14:25:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-13 14:31:37	-->	hashcat (~kv2a@218-164-111-227.dynamic.hinet.net) has joined #haskell.tw
2013-11-13 14:44:49	UncleHandsome	強者我同事表示perl不是Context Free的呀
2013-11-13 14:45:56	UncleHandsome	如果寫的程式有bug並沒有standard可以參考到底是哪裡錯~
2013-11-13 14:49:59	godfat	什麼是有標準可以參考和沒標準可以參考啊？
2013-11-13 14:50:40	godfat	不過既然連 c++ 都不是 context free 了，我相信還有很多語言也都不是
2013-11-13 14:50:55	godfat	這跟有沒有標準好像也沒什麼關係..
2013-11-13 14:51:45	_13h	我很想問... forth 算不算 context free ? XD
2013-11-13 14:52:23	godfat	不會 forth ><
2013-11-13 14:53:16	UncleHandsome	XD 我想同事應該是認為C++錯惹至少還有標準可以查錯哪 perl的話就...? 還是其實有地方可以查XD？
2013-11-13 14:53:23	UncleHandsome	forth QQQQQ
2013-11-13 14:54:09	godfat	c++ 是有語言標準，不過我想大部分的語言都沒啥標準，實作就是標準
2013-11-13 14:54:09	godfat	不過這跟有沒有得查應該也是兩件事說，應該是文件的問題
2013-11-13 14:55:18	godfat	javascript 也有標準，讀起來很痛苦 XDD
2013-11-13 14:57:22	UncleHandsome	這lol
2013-11-13 14:57:25	_13h	遷就實作真的是很現實的問題... 之前遇到我們用的 c compiler 在最佳化時有問題，也只能自己改寫法XD
2013-11-13 14:59:43	godfat	這會超難 debug 的 @@
2013-11-13 15:01:59	_13h	不開最佳化沒問題  然後同一份程式在 pc 上跑也沒問題... 但換個 target 後只有開最佳化才有問題XD
2013-11-13 15:02:21	godfat	是廠商提供的 c compiler 嗎？
2013-11-13 15:03:37	_13h	算是吧，舊版的 rvds
2013-11-13 15:04:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-13 15:04:25	godfat	不知道那是啥 XD 不過我是聽說 gcc -O3 常常有 bug
2013-11-13 15:05:47	UncleHandsome	那後來有找到bug嘛？？
2013-11-13 15:06:04	_13h	arm 自己出的 compiler，不過出錯的那台電腦好像是用 4.0 版的XD  這東西太貴了，沒辦法每台電腦都裝最新版
2013-11-13 15:06:22	_13h	就改寫法，逼 compiler 產生不一樣的結果XD
2013-11-13 15:06:52	godfat	是喔 @@" 沒想到 arm 自己賣 compiler 還賣很貴... XD
2013-11-13 15:07:23	_13h	修改的細節我就不太清楚了，不是我自己遇到的
2013-11-13 15:07:51	UncleHandsome	ARM compiler超強的！！
2013-11-13 15:07:53	_13h	那是一整套的開發套件啦，包括 ICE 之類的... 不過 IDE 根本是 eclipse 改來的...
2013-11-13 15:08:01	-->	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-13 15:08:37	_13h	舊版還是用 code warrior，不曉得從哪一版開始改用 eclipse
2013-11-13 15:08:52	godfat	codewarrior! 好久沒聽到這個東西了
2013-11-13 15:09:26	_13h	真的很久了，本來好像是獨立產品，後來被 arm 買下來包進自己的開發套件裡
2013-11-13 15:10:38	_13h	聽說現在 arm 的網站上也提供 eclipse + gcc 的開發套件了
2013-11-13 15:11:15	_13h	之前有同事抓下來，發現裝起來還是 eclipse 有點崩潰XD (他是 vs.net 派的
2013-11-13 15:11:44	UncleHandsome	www Xilinx的也是用eclipse改的呀XDD
2013-11-13 15:12:54	_13h	eclipse 真的是蠻厲害的  不過線上更新不曉得為什麼常失敗XD
2013-11-13 15:15:10	 *	_13h 考慮更新手邊的 indigo，但想到要更新半天就有點懶XD
2013-11-13 15:16:35	<--	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit (Ping timeout: 250 seconds)
2013-11-13 15:17:42	UncleHandsome	我這幾天才剛學著用cdt trace 一些程式XD
2013-11-13 15:18:00	godfat	visual studio 只要 open source 就可以讓 arm 包了 XDDDD
2013-11-13 15:20:42	-->	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-13 15:23:00	CindyLinz	perldoc 還蠻詳細的呀.. 它只是名字不叫「標準」而已; 而 C++ 的雖然叫「標準」, 但是裡面列了一堆 undefined 和 unspecified.. XD
2013-11-13 15:25:41	suhorng	像Haskell就叫Haskell Report, Scheme也是 XD?
2013-11-13 15:30:23	CindyLinz	我兩年前吧(?) 曾試著讀 open document 的標準..
2013-11-13 15:30:49	CindyLinz	想說 MS Office 2007 的 docx xlsx 也列在裡面真好..
2013-11-13 15:31:08	CindyLinz	pdf 拿來好像五千還七千頁吧... 讀了半天找不到想看的部分... orz
2013-11-13 15:32:11	<--	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit (Ping timeout: 250 seconds)
2013-11-13 15:32:29	UncleHandsome	這... 我聽說M$還會把某些細節藏起來 那實作有困難？？
2013-11-13 15:33:41	-->	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-13 15:33:41	CindyLinz	那我就不知道了... 反正他沒打算藏的部分我也找不到啊 orz
2013-11-13 15:34:02	CindyLinz	spec 7k page, 這是大隱隱於市的硬道理.. (誤)
2013-11-13 15:34:18	suhorng	說不定是 spec 的 .tar.gz 有 7k (X
2013-11-13 15:35:25	suhorng	可是還有些我不太懂得 像是 Haskell 的 non-strict 怎麼個 non-strict 法
2013-11-13 15:36:52	CindyLinz	我是說 pdf, 正常字體, N千頁啊... orz
2013-11-13 15:37:02	CindyLinz	還分了四五個檔... @@"
2013-11-13 15:37:41	CindyLinz	suhorng: 你講 non-strict 是延續 spec 沒講清楚的話題嗎?
2013-11-13 15:38:08	suhorng	應該是說 我去翻了之後 實在不太懂到底是怎樣個 non-strict 化簡 XD
2013-11-13 15:38:35	suhorng	他列了很多, pattern matching 怎麼處理 _|_, if 怎麼處理 _|_, ... 各種狀況
2013-11-13 15:39:11	suhorng	不過實際上對於函數的部份他是直接講說就像 lambda calculus 那樣XDDD
2013-11-13 15:39:13	CindyLinz	haskell report? 這個嗎? http://www.haskell.org/onlinereport/
2013-11-13 15:39:28	suhorng	是
2013-11-13 15:40:37	suhorng	"Although the kernel is not formally specified, it is essentially a slightly sugared variant of the lambda calculus with a straightforward denotational semantics."
2013-11-13 15:40:56	CindyLinz	是這邊第一句嗎? XD # http://www.haskell.org/onlinereport/basic.html#sect6.2
2013-11-13 15:41:09	CindyLinz	# Function application in Haskell is non-strict; that is, a function argument is evaluated only when required
2013-11-13 15:41:20	suhorng	然後在其他一些地方提到 "since Haskell is non-strict..." "error is treated as _|_...."
2013-11-13 15:41:22	suhorng	對對XD 這裡有提到
2013-11-13 15:42:43	CindyLinz	這個「a function argument」裡的「function」不知道有沒有包含 data value constructor
2013-11-13 15:42:54	CindyLinz	如果包含的話, 就和我的理解一致了
2013-11-13 15:43:24	CindyLinz	然後就... 算是講清楚了? :p
2013-11-13 15:45:16	suhorng	是耶XD 好像就清楚了
2013-11-13 15:45:16	UncleHandsome	標準真的是微言大意的東西呀XD
2013-11-13 15:45:42	suhorng	constructor我不太確定, 好像不是用function來說, 而是用 pattern matching 怎麼做來定義的
2013-11-13 15:45:58	CindyLinz	看看 w3c 的 html / css / dom 標準們... (嘆)
2013-11-13 15:46:36	suhorng	XDD
2013-11-13 15:46:37	CindyLinz	還有被丟掉的 xhtml...
2013-11-13 15:46:44	suhorng	看看 IE 活得多自在!
2013-11-13 15:46:47	UncleHandsome	XDDDDD
2013-11-13 15:47:39	UncleHandsome	我之前才被M$的某個標準表過lol
2013-11-13 15:48:12	CindyLinz	唔, pattern matching 那段有 informal 和 formal 的 semantics
2013-11-13 15:48:19	CindyLinz	http://www.haskell.org/onlinereport/exps.html#sect3.17
2013-11-13 15:48:20	suhorng	嗯嗯
2013-11-13 15:51:22	-->	suhorng_ (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-13 15:52:33	<--	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit (Ping timeout: 250 seconds)
2013-11-13 16:41:20	<--	hashcat (~kv2a@218-164-111-227.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-13 17:28:38	-->	pengkh_ (~pengkh@42.120.74.214) has joined #haskell.tw
2013-11-13 17:36:11	<--	suhorng_ (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit
2013-11-13 17:44:12	-->	hashcat (~kv2a@218-164-111-227.dynamic.hinet.net) has joined #haskell.tw
2013-11-13 17:52:54	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-13 18:53:30	<--	b4283 (~b4283@60.249.196.111) has quit (Quit: 暫離)
2013-11-13 18:56:08	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-plwmgpkgneufhtbc) has quit (Quit: Connection closed for inactivity)
2013-11-13 19:32:04	-->	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-13 19:37:16	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-13 20:00:38	<--	pengkh_ (~pengkh@42.120.74.214) has quit (Ping timeout: 248 seconds)
2013-11-13 20:09:52	-->	b4283 (~b4283@36.238.131.72) has joined #haskell.tw
2013-11-13 20:28:08	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-yqfwuaohlzvafyut) has quit (Read error: Connection reset by peer)
2013-11-13 20:28:31	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-xyvcbpctvjkkokaw) has joined #haskell.tw
2013-11-13 20:46:25	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-11-13 21:27:35	-->	mno2 (~mno2@bb121-7-26-9.singnet.com.sg) has joined #haskell.tw
2013-11-13 22:13:40	<--	b4283 (~b4283@36.238.131.72) has quit (Quit: 暫離)
2013-11-13 22:15:55	-->	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has joined #haskell.tw
2013-11-13 22:17:32	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-13 22:17:58	-->	tiglog (~tiglog@111.161.79.28) has joined #haskell.tw
2013-11-13 22:37:59	hashcat	高性能haskell計算有解決方案, 若是可以屈居haskell98的話
2013-11-13 22:39:35	hashcat	用jhc輸出C代碼在parallella跑
2013-11-13 23:20:17	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-13 23:40:58	UncleHandsome	hashcat: 可以介紹下jhc嘛！！
2013-11-13 23:44:56	<--	superbil (uid12362@gateway/web/irccloud.com/x-nfbnieevfdwaqbcq) has quit (Quit: Connection closed for inactivity)
2013-11-13 23:50:07	hashcat	不行嘿嘿
2013-11-13 23:50:12	hashcat	我得睡覺啦
2013-11-13 23:50:55	hashcat	UncleHandsome: http://repetae.net/computer/jhc/
2013-11-13 23:51:02	hashcat	先看看吧
2013-11-13 23:52:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-13 23:53:46	<--	hashcat (~kv2a@218-164-111-227.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-13 23:59:05	<--	suhorng (~suhorng@118-166-50-70.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-14 00:45:07	<--	tiglog (~tiglog@111.161.79.28) has quit (Quit: Leaving)
2013-11-14 00:56:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-14 01:03:59	<--	mno2 (~mno2@bb121-7-26-9.singnet.com.sg) has quit (Quit: mno2)
2013-11-14 01:04:00	<--	gko_ (gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-14 01:13:42	<--	b4283 (~b4283@118.150.134.51) has quit (Ping timeout: 248 seconds)
2013-11-14 02:12:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-14 04:46:23	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 245 seconds)
2013-11-14 05:09:59	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-14 09:57:57	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-14 10:09:14	-->	pengkh_ (~pengkh@42.120.74.208) has joined #haskell.tw
2013-11-14 10:17:51	-->	superbil (uid12362@gateway/web/irccloud.com/x-wszuorgniobtiuie) has joined #haskell.tw
2013-11-14 10:20:02	--	superbil is now known as superbil_
2013-11-14 10:20:11	--	superbil_ is now known as superbil_c
2013-11-14 10:41:39	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-14 12:29:07	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-14 12:58:42	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-14 13:06:51	-->	hashcat (~kv2a@1-172-191-173.dynamic.hinet.net) has joined #haskell.tw
2013-11-14 13:07:00	UncleHandsome	hashcat: 感謝大大XD
2013-11-14 13:39:42	CindyLinz	UncleHandsome: 拿去欺負強者你同事啦 XD https://www.facebook.com/tienren.chen/posts/10202048092071406
2013-11-14 13:39:51	CindyLinz	先別給他看文章
2013-11-14 13:40:46	CindyLinz	請他回答 int haha() { while(1) { if(0) return 0; } return 1; } 這個函數會 return 什麼, 不清楚的話可以查「標準」... (逃)
2013-11-14 13:44:21	CindyLinz	是說, 我也蠻崇拜這位學弟的... >///<
2013-11-14 13:45:04	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 244 seconds)
2013-11-14 13:45:57	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-11-14 13:46:09	CindyLinz	想到有很多老遊戲都是用空迴圈來作 delay 的.....
2013-11-14 13:48:32	UncleHandsome	CindyLinz: 我想他對這些事情應該滿了解的XD
2013-11-14 13:49:05	kanru	guess.. return 1?
2013-11-14 13:50:19	CindyLinz	UncleHandsome: 不有趣 /_\
2013-11-14 13:50:19	kanru	..
2013-11-14 13:50:32	CindyLinz	kanru: 猜完以後可以點文章看答案 XD
2013-11-14 13:52:55	kanru	那要怎麼寫 safe 的 infinite loop XD
2013-11-14 13:53:17	CindyLinz	放 printf 在裡面啊 :p
2013-11-14 13:53:33	CindyLinz	改到 loop 外面的變數應該也可以
2013-11-14 13:54:31	CindyLinz	通常我寫 inf loop 都是在寫 server, daemon 性質的東西, 在 loop body 裡面都會去讀取資料, 寫出資料
2013-11-14 13:55:26	b4283	實際跑的結果是 doesn't return
2013-11-14 13:55:26	CindyLinz	只是原 po 講到如果是寫 low level 的 code.. 我就不知道了 :Q
2013-11-14 13:55:34	kanru	我是 follow if(0) 可以 optimize, while(1){} 可以拿掉的路想到是 1 的, 沒想到它是 infinite loop XD
2013-11-14 13:56:45	CindyLinz	我想這種定法應該是想把 for(int i=0; i<10000000; ++i){ assert(data[i]==0); } 在 release mode 的時候整個拿掉
2013-11-14 13:57:54	UncleHandsome	就我的認為compiler是不該把他優化掉啦 至少我知道clang不會XD...
2013-11-14 13:58:43	kanru	clang compile 出來的 binary 會 exit(232)
2013-11-14 13:59:16	UncleHandsome	我這邊的3.3不會ㄟ(?
2013-11-14 13:59:26	CindyLinz	從原 po 舉例的三種可能來看... 最接近的是 rm -fr / 了... XD
2013-11-14 13:59:36	kanru	XD
2013-11-14 14:02:20	kanru	http://lpaste.net/95637
2013-11-14 14:04:06	UncleHandsome	不能用優化呀
2013-11-14 14:04:27	CindyLinz	就是優化的時候的問題啊
2013-11-14 14:04:39	CindyLinz	而且優化真的常常會開啊 ^^|
2013-11-14 14:06:13	b4283	我的 gcc -O3 和 clang -O3 一樣是無窮迴圈
2013-11-14 14:06:15	kanru	gcc 則是把 while(1){} inline 了...
2013-11-14 14:06:33	UncleHandsome	優化本來就不能保證程式行為的正確
2013-11-14 14:06:41	kanru	main:
2013-11-14 14:06:41	kanru	.L4:
2013-11-14 14:06:41	kanru	     jmp .L4
2013-11-14 14:07:12	b4283	kanru: 一樣的, jmp .L4
2013-11-14 14:07:23	CindyLinz	UncleHandsome: 不不, 這邊無論怎樣做都是正確的... by spec
2013-11-14 14:09:04	CindyLinz	想到十年前我為了測試電腦速度, 用迴圈寫一個類似梯型加總的程式, 想說在 loop body 裡面做點事讓它不會整個被消掉
2013-11-14 14:09:29	CindyLinz	結果 Visual C++ 還是給我瞬間跑完, 數值還正確... OAO
2013-11-14 14:09:36	kanru	XDD
2013-11-14 14:09:54	CindyLinz	真是邪惡的商用 compiler, 一定有內建梯型公式..... www
2013-11-14 14:10:53	<--	pengkh_ (~pengkh@42.120.74.208) has quit (Quit: 离开)
2013-11-14 14:12:50	UncleHandsome	優化理論本身用數學證明就是對的 而且也經過很多驗證 也不能說他錯 但是用了優化之後的行為本來就是不能保證的
2013-11-14 14:15:43	CindyLinz	UncleHandsome: 所以你是說, 考慮 C 語言是否可信賴的時候我們只考慮不開優化的情況; 但是實際拿去給別人用的, 是開了優化的版本? orz
2013-11-14 14:16:08	CindyLinz	這樣的確是很棒的行銷手法啦 orz
2013-11-14 14:16:52	CindyLinz	你們的程式正確嗎? 行歐~ C語言是可靠可信賴的! 你們的程式快嗎? 快歐~ C語言可以開優化!
2013-11-14 14:19:05	CindyLinz	奇怪我講話怎麼這麼刺, 一定是還沒睡醒.... 算了不要理我好了... orz
2013-11-14 14:19:11	UncleHandsome	哈 不會啦
2013-11-14 14:19:43	CindyLinz	我是 YinWang (無誤)
2013-11-14 14:19:44	UncleHandsome	不過我想優化過後的程式不保證行為的一致應該是滿重要的概念
2013-11-14 14:20:01	UncleHandsome	linux kernel跟gcc關係會這麼密切我想也是這個原因
2013-11-14 14:20:11	CindyLinz	但我不能接受這個概念 orz
2013-11-14 14:20:25	CindyLinz	因為我們用的程式應該通常是優化過的程式
2013-11-14 14:20:28	b4283	無誤....
2013-11-14 14:20:36	CindyLinz	而開發者寫的時候是寫沒有優化的程式碼...
2013-11-14 14:23:40	UncleHandsome	QQ
2013-11-14 14:23:51	UncleHandsome	我的認知優化真的只有理論正確 會生出什麼東西真的難講QQ
2013-11-14 14:25:35	CindyLinz	你知道我才剛搭完由電腦程式控制的空中巴士嗎.... (抖)
2013-11-14 14:25:47	CindyLinz	雖然飛機程式可能是 Ada 寫的..
2013-11-14 14:26:04	UncleHandsome	喔 那可放心 嵌入式系統的開發
2013-11-14 14:27:49	UncleHandsome	尤其是軍用醫療飛航等等相關的 它們的spec還有開發人員都真的很強
2013-11-14 14:28:49	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2013-11-14 14:28:49	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (*.net *.split)
2013-11-14 14:28:49	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-11-14 14:30:48	UncleHandsome	以飛機當例子 程式可能經過上百上千人開發好幾年 在驗證好幾年
2013-11-14 14:31:02	UncleHandsome	最後一用就是十幾二十幾年以上
2013-11-14 14:32:10	UncleHandsome	某國軍機上的控制器也是用2x年前的intel CPU
2013-11-14 14:37:00	kanru	http://blog.regehr.org/archives/161 # while(1) {} 這個好像很容易把程式弄壞
2013-11-14 14:38:54	kanru	"The LLVM developers consider this behavior a bug and have since fixed it"
2013-11-14 14:39:06	godfat	我想如果理論正確，應該沒道理說結果不能保證吧... XD
2013-11-14 14:39:06	godfat	如果要把 bug 也考慮在內的話，那沒優化也一樣會有 bug,
2013-11-14 14:39:06	godfat	也不一定是照 spec 在跑，甚至 spec 寫出來也不一定照
2013-11-14 14:39:06	godfat	原本寫的人意思寫出來
2013-11-14 14:51:03	UncleHandsome	這本身就是很難的問題
2013-11-14 14:51:45	UncleHandsome	像是兩種優化AB A和B獨立都是正確 但AB VS BA卻可能產生不同的code 甚至會互相影響
2013-11-14 14:52:34	godfat	AB vs BA 是什麼意思？互相影響是什麼意思？ @@
2013-11-14 14:54:18	hashcat	是說無交換律吧
2013-11-14 14:54:37	UncleHandsome	先跑A再跑B 跑B在A
2013-11-14 14:54:39	UncleHandsome	恩恩
2013-11-14 14:56:28	godfat	怎麼說... 最佳化本來就必須考慮這些呀
2013-11-14 14:56:29	godfat	所以具有大量 side effect 的程式，最佳化才會傾向保守
2013-11-14 14:56:29	godfat	這也是為什麼有些情況下，java 之類跑 jit 是可以快過 c
2013-11-14 14:57:58	UncleHandsome	但真的不是independent的呀QQ
2013-11-14 14:58:20	hashcat	亂入一下, 數學有個東西叫算子Operator, 表示對空間的元素作操作, A B 就可以當作程序空間的算子
2013-11-14 14:59:22	hashcat	jvm最後跑的東西跟C的編譯結果差不多吧, 還有動態優化
2013-11-14 15:00:04	hashcat	jvm的其中一個未來計畫是動態opencl優化
2013-11-14 15:00:51	hashcat	只要寫普通的java code就把可以用gpu跑得部分丟給gpu跑
2013-11-14 15:01:03	godfat	喔我想到另一個東西是 c++ 的 reference 跟 pointer of pointer
2013-11-14 15:01:04	godfat	這些 alias 也會造成最佳化困難
2013-11-14 15:11:38	UncleHandsome	alias analysis現在還沒有人可以有效解決QQ
2013-11-14 15:12:08	UncleHandsome	光優化本身就有path sensitive等等的問題啦
2013-11-14 16:29:48	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-11-14 16:31:58	CindyLinz	Hi :p
2013-11-14 16:32:34	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-11-14 16:32:34	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2013-11-14 16:32:34	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-11-14 16:38:57	-->	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-14 16:38:59	-->	mno2_ (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-14 16:40:45	-->	UncleHan1some (~liyw@linux1.cs.nctu.edu.tw) has joined #haskell.tw
2013-11-14 16:40:55	<--	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-14 16:41:11	-->	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-14 16:42:59	<--	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-14 16:45:00	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-14 16:46:08	<--	mno2 (~mno2@49.128.60.52) has quit (*.net *.split)
2013-11-14 16:46:09	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (*.net *.split)
2013-11-14 16:46:09	<--	a2n (~a2n@219.85.185.194) has quit (*.net *.split)
2013-11-14 16:46:09	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2013-11-14 16:46:09	<--	miaout17_ (~miaout17@miaout17.net) has quit (*.net *.split)
2013-11-14 16:46:09	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-11-14 16:46:25	--	mno2_ is now known as mno2
2013-11-14 16:47:16	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-11-14 16:47:16	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-11-14 16:47:26	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-14 16:47:34	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-11-14 16:56:18	b4283	huh
2013-11-14 16:57:47	CindyLinz	b4283: 我剛只是想把 screen 換成 tmux, 所以就重連 irc
2013-11-14 16:57:57	CindyLinz	沒想到就上到大船來了 ^^
2013-11-14 16:58:20	b4283	:P
2013-11-14 16:58:52	CindyLinz	換過來才發現 tmux 沒有轉 charset 的功能 orz
2013-11-14 17:02:26	<--	hashcat (~kv2a@1-172-191-173.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2013-11-14 17:04:23	-->	hashcat (~kv2a@218-166-239-179.dynamic.hinet.net) has joined #haskell.tw
2013-11-14 17:09:26	cibs	CindyLinz: 只好 embed 一個 screen 在裡頭轉
2013-11-14 17:10:08	CindyLinz	是個方法 orz
2013-11-14 17:10:46	kanru	用 luit
2013-11-14 17:15:04	CindyLinz	FreeBSD ports 分類竟然是擺在 x11/ 下面 @@"
2013-11-14 17:15:13	kanru	or bug5 :P
2013-11-14 17:15:47	kanru	嗯, luit 是 xterm 的
2013-11-14 17:16:04	godfat	bug5! https://github.com/buganini/bug5
2013-11-14 17:17:17	CindyLinz	這樣在沒有螢幕的電腦上面裝, 是不是會裝一大票用不到的東西啊 orz
2013-11-14 17:18:00	CindyLinz	下 make 以後就開始裝 X11lib.. orz
2013-11-14 17:19:54	kanru	hmm... 我這 luit 的 dependency 只有 libfontenc, libz, libc
2013-11-14 17:54:42	--	UncleHan1some is now known as UncleHandsome
2013-11-14 19:01:48	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-14 19:30:10	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-14 19:32:31	-->	hashcat_ (~kv2a@1-172-236-82.dynamic.hinet.net) has joined #haskell.tw
2013-11-14 19:35:22	<--	hashcat (~kv2a@218-166-239-179.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2013-11-14 20:29:16	-->	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-14 20:33:20	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-14 20:34:53	-->	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has joined #haskell.tw
2013-11-14 20:40:01	<--	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-14 20:40:16	-->	mno2 (~mno2@bb121-7-26-9.singnet.com.sg) has joined #haskell.tw
2013-11-14 21:04:39	-->	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has joined #haskell.tw
2013-11-14 21:15:27	--	hashcat_ is now known as hashcat
2013-11-14 22:20:33	suhorng	CindyLinz: 你是怎麼debug Happy的錯誤訊息的阿orz
2013-11-14 22:34:23	CindyLinz	看哪一種... conflict 的話看 .info 檔, syntax error 的話看生出來的 .hs 檔
2013-11-14 22:35:38	suhorng	嗯 剛剛打開 .hs 發現我看得懂命名規則= =+　(return happy_var_2:happy_var_1)
2013-11-14 22:36:16	suhorng	原來 .info 這麼好用!
2013-11-14 22:47:49	suhorng	我們compiler課最近作業寫到 parser, 我同學用 Converge 寫
2013-11-14 22:48:11	suhorng	http://convergepl.org/documentation/2.0/ctmp/ 十分神奇XD 搜尋 "[|" 會發現熟悉的語法 (?)
2013-11-14 22:50:39	suhorng	他自己寫了一個 parser generator, 不同於 code generator (e.g. yacc), 是程式內的語法, 而且一樣是compile time生成XD
2013-11-14 22:51:40	letoh	不太懂  是說用 dsl 的方式寫?
2013-11-14 22:54:19	suhorng	對, Converge的特點不只是定dsl, 而且是 compile time 可以做各種計算
2013-11-14 22:54:38	suhorng	像 TemplateHaskell 是 compile time 執行那樣
2013-11-14 22:55:01	letoh	嗯嗯
2013-11-14 22:55:31	suhorng	這邊我在想他跟 Scheme 哪個比較像, macro 還是 quasi-quote..?
2013-11-14 22:55:54	suhorng	macro的話好像不能做計算 @@?
2013-11-14 22:56:09	letoh	不行嗎?
2013-11-14 22:56:42	suhorng	我不會用QQ
2013-11-14 22:56:42	letoh	我不太確定你是指什麼樣的計算，不過 macro 不是單純的展開取代而已
2013-11-14 22:57:09	suhorng	還可以像怎樣用阿XD
2013-11-14 22:58:10	suhorng	計算例如說 lexer generator 會讀了 spec 後建NFA => 轉DFA => 最佳化
2013-11-14 22:58:24	suhorng	類似這樣
2013-11-14 22:58:47	letoh	唔  雖然沒試過  但應該有機會做到  就配合 ' , @ 之類的
2013-11-14 22:59:04	suhorng	喔喔~!
2013-11-14 22:59:10	petercommand	這樣compile會要很久嗎?
2013-11-14 22:59:38	suhorng	我不知道他要怎麼停下來耶 還有(會不會)寫出無窮迴圈之類
2013-11-14 22:59:46	suhorng	` , @ 各種強大
2013-11-14 23:00:15	letoh	我只用 forth 寫過這種 macro，不過可以 eval 的話應該很多事都做得到吧
2013-11-14 23:00:45	letoh	只是得搞清楚哪些是要展開用的 (quote)  哪些是要先執行，哪些是展開後才執行
2013-11-14 23:00:56	suhorng	喔喔
2013-11-14 23:01:37	letoh	應該有人玩過吧  來找找看有沒有人討論過這種玩法
2013-11-14 23:02:01	letoh	我其實是開始練習 scheme macro 後才學會寫 forth macro 的
2013-11-14 23:02:20	letoh	(然後有被笑過為什麼繞那麼大一圈XD)
2013-11-14 23:03:23	suhorng	這XD
2013-11-14 23:04:38	letoh	forth macro 看的就是我剛剛講的那三個  compile time / interpret time / run time   可以控制任意程式碼在任意時期執行就可以了
2013-11-14 23:05:03	letoh	從 scheme 領悟到的XD
2013-11-14 23:06:23	suhorng	三個是 ' , @ 還是後面說的 compile time / interpret time / run time? (雖然不太懂 interpret time 跟 run time 差別在哪)
2013-11-14 23:06:59	letoh	interpret 時還可以再產生新的程式碼  然後再執行
2013-11-14 23:07:39	suhorng	意思是 run time 不行囉?
2013-11-14 23:07:42	suhorng	好像也是orz
2013-11-14 23:07:53	suhorng	用了 eval 就比較變 interpret 了?
2013-11-14 23:07:58	letoh	都要 run 了  除非你還有下一個 stage 吧  看你怎麼定義囉
2013-11-14 23:08:02	letoh	對  就是 eval
2013-11-14 23:08:24	letoh	講 eval 應該比較容易懂XD
2013-11-14 23:08:39	suhorng	XD
2013-11-14 23:13:41	petercommand	甚麼是interpret time呀?
2013-11-14 23:16:17	petercommand	compiler跑完->執行
2013-11-14 23:17:39	suhorng	我猜指把程式碼解釋執行的時候
2013-11-14 23:17:45	suhorng	例如 eval
2013-11-14 23:30:29	<--	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-15 00:18:05	<--	hashcat (~kv2a@1-172-236-82.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-15 00:31:44	<--	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-15 01:00:02	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Quit: Changing server)
2013-11-15 01:06:16	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-15 01:07:05	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-15 01:11:47	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-15 01:16:13	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-15 01:19:55	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-15 01:24:24	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-15 01:26:05	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-15 01:37:19	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-15 01:44:45	<--	mno2 (~mno2@bb121-7-26-9.singnet.com.sg) has quit (Quit: mno2)
2013-11-15 02:03:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-15 06:24:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-15 06:26:24	monochrom	(回舊文)
2013-11-15 06:27:59	monochrom	non-strict 只是很簡單地說, f ⊥ ≠ ⊥ 有可能. 舉例: const () ⊥ = () ≠ ⊥.
2013-11-15 06:28:38	monochrom	在 SML, const () ⊥ = ⊥
2013-11-15 06:29:57	monochrom	是不是 non-strict, 跟 error 是不是 ⊥, 無關.
2013-11-15 06:34:45	monochrom	你們又有沒有見過我的 https://plus.google.com/102208456519922110915/posts/DZsZ6mvA4T6 呢? :)
2013-11-15 06:37:45	monochrom	C 語言是可以信賴的, 優化亦是可以信賴的, 只要你先熟讀標準, 倒背如流.
2013-11-15 06:38:25	monochrom	(結論: 還是孫子兵法容易些 XD )
2013-11-15 07:27:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-15 09:14:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-15 10:05:42	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-15 10:56:17	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-15 11:51:47	-->	darkx_ (~x4r@162.243.133.203) has joined #haskell.tw
2013-11-15 11:52:38	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2013-11-15 12:02:55	<--	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 245 seconds)
2013-11-15 12:03:54	-->	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-15 12:44:24	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-15 13:33:58	-->	hashcat (~kv2a@218-173-236-108.dynamic.hinet.net) has joined #haskell.tw
2013-11-15 13:53:07	--	darkx_ is now known as darkx
2013-11-15 14:24:43	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-11-15 14:35:25	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-15 14:54:14	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-15 16:15:08	hashcat	IBM watson釋出api
2013-11-15 16:18:28	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 272 seconds)
2013-11-15 16:56:45	hashcat	http://gigaom.com/2013/11/14/have-at-it-programmers-ibm-makes-watson-available-via-api/
2013-11-15 17:00:22	CindyLinz	monochrom: cool.. 我用 gcc 2.7.3 也是一樣的結果...
2013-11-15 17:01:01	CindyLinz	只是標準說: 這邊沒有標準. 的時候, 我信了一個空集合啊 XD
2013-11-15 17:02:37	hashcat	優化器可以用prolog寫
2013-11-15 17:05:07	UncleHandsome	monochrom: 真的 我覺得最厲害的C/C++工程師不只要熟讀標準 還要懂compiler&系統 一整個很辛苦OTZ
2013-11-15 17:07:03	UncleHandsome	CindyLinz: 我後來想想應該寫spec人的知道有人會這樣寫 然後有人會這樣優化 但又不能禁止這樣的行為 只好寫個未知惹XD...
2013-11-15 17:09:38	CindyLinz	應該是想定進標準的時候, 既有的若干知名 compiler 已經各用各的作法了....
2013-11-15 17:10:16	hashcat	我只覺得C++會流行真是災難
2013-11-15 17:10:50	hashcat	不管對制定者, 維護還是使用者都是
2013-11-15 17:11:34	hashcat	耗費人力成本無數
2013-11-15 17:11:38	CindyLinz	XDDD
2013-11-15 17:11:57	CindyLinz	這說出... workaround 是很容易流行的作法..... zz
2013-11-15 17:13:39	CindyLinz	monochrom: 我可以轉貼在我 FB 嗎?
2013-11-15 17:15:18	hashcat	C++各種細節看到就討厭
2013-11-15 17:16:09	CindyLinz	初版 C++ 應該就只是 C, 然後額外加了一坨 macro 來模擬那些物件之類的特性
2013-11-15 17:17:04	CindyLinz	上課時聽來的, 可是隨手找找沒找到資料 orz
2013-11-15 17:17:13	hashcat	不科學, 因為科學傾向有普遍可用的原則
2013-11-15 17:18:10	hashcat	C++設計超多那種概念不能重用的特例
2013-11-15 17:19:04	hashcat	用符號方式也像是隨性塗鴉之作
2013-11-15 17:22:14	hashcat	星號同時當乘法和指標, 大於小於有時候被當成括號用
2013-11-15 17:22:34	hashcat	特性還會用詭異的方式互相干擾
2013-11-15 17:23:04	hashcat	打住好了
2013-11-15 17:23:06	CindyLinz	*a = *b/*c + *d;
2013-11-15 17:24:26	hashcat	暈
2013-11-15 17:25:14	hashcat	像這狀況教一個人還得花力氣解釋為啥星號會變成另一種意思
2013-11-15 17:25:20	CindyLinz	C/C++ 用的人多, 所以鬼故事也多很多 XD
2013-11-15 17:26:05	godfat	不過不知道 c 的替代品是什麼？難道是 go 嗎？ XD
2013-11-15 17:26:17	hashcat	之前還看過怎看都是大於小於的用法, 卻因為template的效果變成其他東西
2013-11-15 17:26:45	hashcat	有個寫C++說希望Rust能取代C++
2013-11-15 17:27:24	CindyLinz	godfat: 要先講應用的方向, 才能選替代品吧 ^^|
2013-11-15 17:27:30	godfat	感覺 rust 也還滿初期的
2013-11-15 17:27:30	godfat	正好在看這串討論
2013-11-15 17:27:30	godfat	https://mail.mozilla.org/pipermail/rust-dev/2013-November/006550.html
2013-11-15 17:27:46	godfat	例如實作 linux kernel 之類的 :P
2013-11-15 17:28:03	CindyLinz	godfat: 實作 linux kernel 的話, C 是無可取代的啊...
2013-11-15 17:28:21	godfat	XD
2013-11-15 17:28:26	CindyLinz	godfat: 至少有不用跟 Linus Trovalds 吵架的優勢...
2013-11-15 17:28:35	godfat	XDDDDDDDDDDDD
2013-11-15 17:37:49	hashcat	http://commons.ada.cx/Operating_Systems_written_in_Ada
2013-11-15 17:37:58	hashcat	找到啦
2013-11-15 17:38:05	hashcat	很久以前看到的
2013-11-15 17:39:05	hashcat	都快死光就是
2013-11-15 17:40:02	hashcat	有一個存活的還滿強的
2013-11-15 17:40:03	hashcat	http://marte.unican.es/index.htm
2013-11-15 17:40:11	godfat	之前看 ada 沒有很好的印象，寫起來很囉唆又麻煩
2013-11-15 17:40:52	CindyLinz	godfat: 很賺錢呢!
2013-11-15 17:41:53	CindyLinz	不知一般計算 language 流行程度是用哪個量度, 是人數? 公司數? 程式碼行數? project數? 還是總金額..
2013-11-15 17:42:08	CindyLinz	覺得 Ada 是那種人數公司數 project 數很少, 但是金額極大的語言...
2013-11-15 17:42:17	godfat	XDDDD.... 不過如果考慮賺錢總量的話，我想流行的語言應該更賺
2013-11-15 17:42:18	godfat	之前看比較有名的是用 search engine 的搜尋量
2013-11-15 17:42:53	godfat	因此短時間紅起來的平台 (i.e. objective-c) 就會忽然竄起來
2013-11-15 17:43:09	CindyLinz	我相信有一堆 Ada 的黑帳... 表面上用來蓋國防部某 building 的錢, 挪去用 Ada 開發秘密武器的系統.....
2013-11-15 17:44:08	godfat	...@_@ 記得聽說 jserv 做過跟武器有關的東西，也許他知道一些？ XD
2013-11-15 17:44:42	CindyLinz	可是他做的好底層欸 ^^|
2013-11-15 17:45:13	godfat	你的意思 ada 是拿來做 application 這樣嗎？
2013-11-15 17:46:18	hashcat	Ada可能因為過於囉唆不能適應瞬息萬變的IT
2013-11-15 17:46:24	CindyLinz	godfat: 對啊, F22 的控制系統不是嗎?
2013-11-15 17:47:24	-->	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-15 17:47:26	godfat	hashcat, 我想是這樣沒錯
2013-11-15 17:47:26	godfat	CindyLinz, 我不知道... XD
2013-11-15 17:48:59	CindyLinz	google F22 Ada 可以找到一些文章.. http://www.defensenews.com/article/20110519/DEFSECT05/105190304/F-22-Upgrade-Taking-Too-Much-Time-Money
2013-11-15 17:49:12	CindyLinz	Loren Thompson, an analyst at the Lexington Institute, said the F-22's software is written largely in Ada, a programming language that was once a DoD standard but whose use has waned in the past 15 years.
2013-11-15 17:50:13	godfat	曾聽過有人說 prolog 跟 ada 都是 DoD 花大錢沒做起來的東西 XD
2013-11-15 17:50:45	hashcat	Ada拿來玩的話可以DIY自動直昇機
2013-11-15 17:51:05	hashcat	是做起來就很低調的東西
2013-11-15 17:51:05	CindyLinz	沒做起來? @_@"
2013-11-15 17:51:24	CindyLinz	不是到處飛起來了嗎 @_@"
2013-11-15 17:51:40	godfat	XDD 我的意思是沒成為主流語言
2013-11-15 17:51:52	hashcat	你幾時看過忍者會四處炫耀自己發明的祕密武器
2013-11-15 17:52:11	b4283	「一個普遍的關於歐洲太空總署亞利安5號運載火箭失敗的說法是因為Ada語言在編譯過程的檢查失敗導致的。 將大的浮點數轉換成整數是一種常見的程序錯誤來源。1996年6月4日，對於亞利安5號運載火箭的初次航行來說，這樣一個錯誤產生了災難性的後果。發射後僅僅37秒，火箭偏離它的飛行路徑，解體並爆炸了。」
2013-11-15 17:52:26	godfat	怎麼說，他可以炫耀他用的金屬材料，看看有沒有人可以把那金屬變得更好 XD
2013-11-15 17:52:29	b4283	不是美國的就給他爆炸
2013-11-15 17:52:43	hashcat	有心發掘的話, 就會發現那些根本都是超級武器
2013-11-15 17:52:47	godfat	compile 時要給 secret code
2013-11-15 17:52:53	CindyLinz	我們這次去日本, 有個同事買了某個長得像忍者鏢的飾品..
2013-11-15 17:53:01	CindyLinz	飛機也順利搭了
2013-11-15 17:53:04	b4283	手裡劍
2013-11-15 17:53:16	CindyLinz	可是回來要進台灣海關的時候被沒收了.. ww
2013-11-15 17:53:26	godfat	.... orz
2013-11-15 17:53:32	b4283	XD
2013-11-15 17:53:42	godfat	飾品要好好收起來 XD
2013-11-15 17:53:45	cataska	謠傳 Jobs 也想帶一些回去...
2013-11-15 17:53:56	CindyLinz	收在行李箱啊, 被 X-ray 找出來...
2013-11-15 17:54:04	b4283	沒有開鋒也不行喔?
2013-11-15 17:54:11	godfat	這樣也行喔 = = 我以為是帶在身上
2013-11-15 17:54:20	CindyLinz	帶身上會不能上飛機 XD
2013-11-15 17:54:32	CindyLinz	刀子利器什麼的只能拖運
2013-11-15 17:54:46	godfat	我以為像是手機吊飾那樣
2013-11-15 17:55:28	CindyLinz	長得跟真的一樣, 只是其中一個刃上面有打一個洞, 可以穿線吊起來
2013-11-15 17:55:37	CindyLinz	我不知道真正的武器是不是其實也有那個洞 :p
2013-11-15 17:56:39	godfat	聽起來應該不便宜... XD 真可惜
2013-11-15 17:57:42	CindyLinz	然後另一個同事聽說了, 說.. 好奇怪喔, 我也有買, 沒被攔欸....
2013-11-15 17:58:11	b4283	哈哈
2013-11-15 17:58:13	godfat	@@" 果然是運氣問題呀？
2013-11-15 17:58:23	CindyLinz	嗯 XD
2013-11-15 18:02:23	CindyLinz	覺得浮點數真是可怕的東西..... 可靠性重要的地方完全不能用
2013-11-15 18:09:04	hashcat	可以估計誤差吧
2013-11-15 18:10:32	hashcat	可以把他當成是對區間作算術
2013-11-15 18:10:37	CindyLinz	很難用好 @@"
2013-11-15 18:10:56	CindyLinz	例如說, 我猜知道不能用高斯消去法的人不多.... @@"
2013-11-15 18:11:06	CindyLinz	高斯消去法的精確度不到 1 digit
2013-11-15 18:14:18	hashcat	只能事前證明了
2013-11-15 18:14:30	hashcat	又是prolog用得上的地方
2013-11-15 18:15:10	hashcat	我還真不知道不能用高斯消去法
2013-11-15 18:17:16	hashcat	還滿恐怖的唉
2013-11-15 18:17:22	hashcat	誤差會變動
2013-11-15 18:17:54	hashcat	http://possiblywrong.wordpress.com/2013/11/15/floating-point-equality-its-worse-than-you-think/
2013-11-15 18:18:05	hashcat	剛好reddit有一篇
2013-11-15 18:19:51	CindyLinz	hashcat: 可是.. prolog 證明出來.... 跟你說精確度不到一位以後, 怎麼辦啊... XD
2013-11-15 18:20:20	godfat	不要用浮點數？ XD
2013-11-15 18:20:48	hashcat	改用分數, 或者用符號計算出符號解, 再一次用數值解
2013-11-15 18:20:50	CindyLinz	嗯, 整數, 或是 Zp field 的高斯消去法就沒有問題了
2013-11-15 18:21:58	hashcat	或者改用克拉馬法
2013-11-15 18:23:30	hashcat	有機會造成大誤差的大都是除法
2013-11-15 18:24:33	hashcat	乘法是可能溢位
2013-11-15 18:39:19	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-15 18:56:25	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-15 18:57:55	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-11-15 19:43:26	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-15 19:51:04	CindyLinz	hashcat: 誤差不是來自除法
2013-11-15 19:51:09	CindyLinz	hashcat: 是兩個大數相減
2013-11-15 19:51:38	CindyLinz	兩個相近的大數相減時, 會把它們的精確位數對消掉
2013-11-15 19:52:17	CindyLinz	所以可能原本兩個數字精確度都7位, 減完以後全部都不精確了 ^^|
2013-11-15 20:22:50	-->	b4283 (~b4283@114-39-253-130.dynamic.hinet.net) has joined #haskell.tw
2013-11-15 20:47:41	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-15 21:06:54	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-15 21:40:36	<--	b4283 (~b4283@114-39-253-130.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-15 21:45:35	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-15 22:04:13	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-15 22:04:37	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-15 22:09:23	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Client Quit)
2013-11-15 22:11:51	hashcat	CindyLinz: 加法的誤差應該是跟減法差不多吧
2013-11-15 22:12:21	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-15 22:13:06	hashcat	兩個絕對值一樣的負數跟正數在浮點數只差一個位
2013-11-15 22:13:41	hashcat	換掉那一位再用加法, 應該沒除法不穩
2013-11-15 22:13:43	hashcat	猜測
2013-11-15 22:15:14	hashcat	除法的話光是3的倒數, 誤差就起飛了
2013-11-15 22:16:03	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Read error: Connection reset by peer)
2013-11-15 22:16:27	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-15 22:20:37	hashcat	溫哥華證券交易所曾開發了一項股票指數. 當其在1982年推出時，指數的值是1000.000。在後來的重新計算時多次運用舍入到小數點後三位的操作。22個月以後，指數的值是524.881，然而事實上應該是1009.811。
2013-11-15 22:20:45	hashcat	也差太多
2013-11-15 22:27:03	hashcat	不過貌似都是誤差累積
2013-11-15 22:27:43	hashcat	嚴格控制浮點數運算的次數應該就還好
2013-11-15 22:28:35	-->	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has joined #haskell.tw
2013-11-15 22:28:37	godfat	這想法滿好玩的，float 本身帶一個運算次數的整數
2013-11-15 22:28:38	godfat	某些運算可以要求最終運算結果的浮點數的運算次數不能過多 XD
2013-11-15 22:29:30	godfat	有點像是病毒感染.... 感染太多次就沒救了
2013-11-15 22:30:32	hashcat	小病不鳥變大病
2013-11-15 22:31:36	suhorng	monochrom: 感謝
2013-11-15 22:32:38	suhorng	我是有在想要是不用lazy而是每次都重複算, 有沒有可能讓副作用出事XD 但是沒仔細想會怎樣, 也許不會影響
2013-11-15 22:33:50	petercommand	之前好像看到一本書專門講這個
2013-11-15 22:37:30	CindyLinz	hashcat: 加法是啊, 當然我是指兩相近正數相減, 或是兩絕對值相近, 符號相反的數字相加... 那用前者的講法比較順嘛 XD
2013-11-15 22:37:49	CindyLinz	只是乘除對精確度的影響不大
2013-11-15 22:40:10	CindyLinz	hashcat: 考慮精確度的時候, 不是去看不精確的部分的位數越來越多, 而是看精確的位數是不是越來越少
2013-11-15 22:40:25	petercommand	CindyLinz: 還是不要用float的好^_^ (誤
2013-11-15 22:41:13	CindyLinz	petercommand: 可靠性不要求的地方很多啦, 那些地方還是繼續用, 很開心啊 XD
2013-11-15 22:42:06	godfat	貨幣還是不要有小數點比較好... XD
2013-11-15 22:42:21	CindyLinz	貨幣應該是用 fixed point 吧?
2013-11-15 22:43:02	CindyLinz	不過交易的時候有時候會出現「零頭不算!」這種對話.. 浮點數就出現了 XD
2013-11-15 22:43:22	godfat	fixed point 是保證精確位數？
2013-11-15 22:43:23	hashcat	不是看相對誤差喔
2013-11-15 22:43:32	hashcat	那是看是欠錢還是還錢
2013-11-15 22:43:58	hashcat	兩套標準可以暗扛不少
2013-11-15 22:44:19	petercommand	XDD
2013-11-15 22:44:54	godfat	原來還有貨幣專用的型別...
2013-11-15 22:44:55	godfat	http://www.postgresql.org/docs/9.3/static/datatype-money.html
2013-11-15 22:45:12	hashcat	fixed point就是跟整數差不多吧
2013-11-15 22:46:14	godfat	c 裡面有這個嗎？還是就是要自己做？
2013-11-15 22:46:26	hashcat	自己作
2013-11-15 22:47:11	godfat	嗯嗯，那大概就是要 8 位小數就整數加八個零之類的...
2013-11-15 22:47:26	godfat	為啥我輸入法的有「小樹」這個詞...
2013-11-15 22:48:10	CindyLinz	hashcat: 其實還是相對誤差啦, 你把誤差可能發生的最大範圍, 除以理論上的真實數值, 反應出來的就是看有效的位數有幾位呀
2013-11-15 22:48:18	petercommand	godfat: 他算一個詞阿XD
2013-11-15 22:48:30	CindyLinz	如果是看無效位數有幾位的話, 那比較像是在看絕對誤差
2013-11-15 22:48:48	godfat	petercommand, 我想我說小數的時候通常是指小數，不會是小樹... :s
2013-11-15 22:49:56	letoh	不曉得為什麼想到少年小樹之歌
2013-11-15 22:50:43	CindyLinz	平常計算, 我想大概只用到代數數 + 各種三角函數和 log, 尤拉常數能表示得出來的數吧?
2013-11-15 22:51:31	CindyLinz	只是這種「精確值」用起來可能每個數都要算一陣子, 而且算一陣子以後可能會變很大一坨 XDD
2013-11-15 22:53:47	suhorng	computable reals!
2013-11-15 22:54:02	suhorng	用柯西序列(誤)
2013-11-15 22:54:25	CindyLinz	suhorng: 我覺得只需要用到能用簡單 rule 描述的科西序列就夠了
2013-11-15 22:56:39	suhorng	嗯XD
2013-11-15 22:57:11	hashcat	就一般的實數來說, 沒有一般的算法能計算兩個實數是否相等
2013-11-15 22:57:19	hashcat	有理數就有了
2013-11-15 22:58:17	CindyLinz	可是有理數又太少了.. 我們還蠻常用到三角函數和指數對數的..
2013-11-15 22:58:27	CindyLinz	只是這些再加上去, 還是可數多個 :D
2013-11-15 23:01:29	hashcat	邏輯編程真是各種方便
2013-11-15 23:01:58	CindyLinz	XD
2013-11-15 23:02:55	CindyLinz	只是丟給我兩串用三角函數, 指數對數, 多項式加減乘除湊在一起的「數」
2013-11-15 23:03:06	CindyLinz	我還是不知道要怎麼比對它們兩個一樣 orz
2013-11-15 23:03:39	hashcat	用複數就好
2013-11-15 23:04:09	hashcat	三角函數就化成指數對數
2013-11-15 23:05:33	CindyLinz	有 deterministic 機械化的方法喔?
2013-11-15 23:05:46	CindyLinz	還是需要局部搜索一下? @@"
2013-11-15 23:06:13	hashcat	有三角函數不能用複數才需要搜索吧
2013-11-15 23:06:47	CindyLinz	那應該是我們可以先定一個「normal form」出來?
2013-11-15 23:07:00	hashcat	指數跟對數互為反函數的
2013-11-15 23:07:06	CindyLinz	嗯嗯
2013-11-15 23:07:14	hashcat	就消到不能消
2013-11-15 23:08:00	suhorng	有辦法有normal form?
2013-11-15 23:10:17	CindyLinz	從來沒有想過耶..
2013-11-15 23:10:28	CindyLinz	如果有 normal form, 就直接拿來定成資料結構了 ^^
2013-11-15 23:10:50	CindyLinz	解決了相等的問題, 接下來就是給了兩坨這種數字, 怎麼比較大小
2013-11-15 23:11:08	petercommand	normal form是?
2013-11-15 23:11:21	CindyLinz	petercommand: 約定好一個「標準的」表示法
2013-11-15 23:11:38	CindyLinz	例如說... 1+1+1, 4-1, 9/3, 3 都是同一個數
2013-11-15 23:11:49	CindyLinz	我們選其中一個當它的標準表示法
2013-11-15 23:11:51	hashcat	我喜歡形式講法
2013-11-15 23:11:55	petercommand	喔喔
2013-11-15 23:12:00	CindyLinz	能選得出來的話.... 有很多好處 XD
2013-11-15 23:12:34	hashcat	有一個演算法使得任意兩個等價的東西, 可以變成一樣的形式
2013-11-15 23:13:06	hashcat	那種形式通常是可以用遞歸比較每個細節, 確定是否相等
2013-11-15 23:15:59	hashcat	任何在exp的加號, 都變成兩個exp相乘, 在log的乘號變成兩個log相加
2013-11-15 23:17:57	hashcat	norm form更鳥的講法就是唯一的不動點
2013-11-15 23:19:08	hashcat	norm form繼續變換下去還是norm form而且不會有兩個長不一樣的這樣
2013-11-15 23:20:12	CindyLinz	normal form 的存在, 不代表存在 deterministic 的演算法來化簡對不對?
2013-11-15 23:20:35	CindyLinz	也許有的化簡路徑可以一直走下去轉不出來
2013-11-15 23:20:53	CindyLinz	像是... lambda 的 Y=QQ
2013-11-15 23:21:24	CindyLinz	欸不對 這個例子好像又不太對, 我根本不知道 Y=QQ 的 normal form 該長什麼樣 orz
2013-11-15 23:21:29	hashcat	那貌似叫週期點
2013-11-15 23:22:49	suhorng	CindyLinz: 沒有 normal form 啦XD
2013-11-15 23:23:53	CindyLinz	嗯 XD
2013-11-15 23:24:16	petercommand	why?
2013-11-15 23:24:27	CindyLinz	應該有: 明明就有 normal form, 只是你的演算法老是找不到它   的情況吧 XD
2013-11-15 23:24:52	CindyLinz	petercommand: 因為總是有函數, 還有預備好的參數給他, 等著他 apply
2013-11-15 23:25:37	CindyLinz	Q = \x -> x x,   Y = Q Q
2013-11-15 23:25:47	petercommand	@@
2013-11-15 23:26:35	CindyLinz	Y = (\x -> x x) (\x -> x x) = (\x -> x x) (\x -> x x) = ... 一直下去算不完
2013-11-15 23:27:38	suhorng	petercommand: lambda calculus 那個 normal form 最常見的定義是沒有 beta redex
2013-11-15 23:28:58	petercommand	對lambda calculus不太熟@@
2013-11-15 23:32:25	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2013-11-15 23:32:26	CindyLinz	petercommand: 不過你應該已經看完 lambda calculus 的所有運算能力的展示了... (Y)
2013-11-15 23:32:31	CindyLinz	哎呀 跑了 XD
2013-11-15 23:33:57	hashcat	combinator logic怎貌似沒動搖lambda calculus的樣子
2013-11-15 23:35:24	suhorng	(想到unlambda...XD)
2013-11-15 23:36:58	CindyLinz	想拿「紙包雞」訂成 lambda calculus 的語言啦 XD
2013-11-15 23:36:59	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-15 23:50:25	hashcat	紙包雞
2013-11-15 23:51:44	letoh	麥太嗎? XD
2013-11-15 23:54:18	hashcat	看不懂
2013-11-15 23:55:00	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-15 23:55:11	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-11-15 23:56:36	hashcat	亂入一下chapel
2013-11-15 23:57:01	hashcat	最新release支持HDFS檔案系統
2013-11-15 23:57:58	CindyLinz	letoh: 對啊.. 紙包雞 包 雞包紙 包 雞 :D
2013-11-16 00:04:49	godfat	好白癡 XDDDDD https://www.youtube.com/watch?v=u7Noxp6apN8
2013-11-16 00:06:18	CindyLinz	:p
2013-11-16 00:06:33	letoh	這東西好久了 為啥一轉過來就看到這個XD
2013-11-16 00:07:02	godfat	因為我沒聽過，有點好奇就查了一下 XD
2013-11-16 00:11:41	suhorng	let { 紙=S; 包=K; 雞=I }
2013-11-16 00:12:07	letoh	SKI XD
2013-11-16 00:13:39	godfat	然後 I 其實可以不用，所以程式就可以轉成紙包紙包紙紙包紙包包包紙
2013-11-16 00:14:35	letoh	I 是自己吃掉了嗎? XD
2013-11-16 00:14:56	godfat	雞在最裡面，要全部打開來才吃得到喔~
2013-11-16 00:16:47	CindyLinz	不一定有雞啊
2013-11-16 00:16:53	CindyLinz	第一段就沒雞 XD
2013-11-16 00:17:08	CindyLinz	他是「紙包雞」, 但是是翻面的「雞包紙」.......
2013-11-16 00:23:13	<--	hashcat (~kv2a@218-173-236-108.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-16 00:47:49	<--	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-16 00:59:47	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-16 01:18:26	<--	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 268 seconds)
2013-11-16 01:43:22	-->	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has joined #haskell.tw
2013-11-16 01:48:00	<--	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-11-16 01:50:14	-->	cades_ (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-16 01:51:58	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Ping timeout: 244 seconds)
2013-11-16 01:57:55	<--	cades_ (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-16 02:37:40	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-xyvcbpctvjkkokaw) has quit (Ping timeout: 244 seconds)
2013-11-16 02:39:43	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-hliaoqheiivnebvk) has joined #haskell.tw
2013-11-16 03:35:35	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2013-11-16 03:35:35	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (*.net *.split)
2013-11-16 03:35:35	<--	hychen (uid12518@gateway/web/irccloud.com/x-cavrysenqhixlrdv) has quit (*.net *.split)
2013-11-16 03:35:35	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2013-11-16 03:35:36	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2013-11-16 03:35:36	<--	b4283 (~b4283@118.150.134.51) has quit (*.net *.split)
2013-11-16 03:35:36	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2013-11-16 03:35:36	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-11-16 03:35:36	<--	miaout17_ (~miaout17@miaout17.net) has quit (*.net *.split)
2013-11-16 03:35:37	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-11-16 03:35:38	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-hliaoqheiivnebvk) has quit (*.net *.split)
2013-11-16 03:35:38	<--	darkx (~x4r@162.243.133.203) has quit (*.net *.split)
2013-11-16 03:35:38	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-11-16 03:35:39	<--	monochrom (monokrom@216.138.220.146) has quit (*.net *.split)
2013-11-16 03:35:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-11-16 03:35:40	<--	cataska (~cataska@210.64.6.233) has quit (*.net *.split)
2013-11-16 03:35:41	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2013-11-16 03:35:41	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2013-11-16 03:35:42	<--	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2013-11-16 03:35:43	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-wszuorgniobtiuie) has quit (*.net *.split)
2013-11-16 03:35:43	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (*.net *.split)
2013-11-16 03:35:43	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-parbodzrtaegqkco) has quit (*.net *.split)
2013-11-16 03:37:32	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-16 03:37:32	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-16 03:37:32	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-11-16 03:37:32	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean flter gko hychen kanru lambdabot letoh logfat_ miaout17_ monochrom shik superbil_c UncleHandsome]
2013-11-16 03:37:32	--	Channel #haskell.tw: 23 nicks (0 ops, 0 halfops, 0 voices, 23 normals)
2013-11-16 03:37:33	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-16 03:37:48	--	Mode #haskell.tw [+cnt]
2013-11-16 03:37:48	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-11-16 09:40:20	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-16 10:30:34	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-16 11:07:36	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-16 11:24:58	-->	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has joined #haskell.tw
2013-11-16 11:35:28	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-16 13:26:33	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 252 seconds)
2013-11-16 13:27:14	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-11-16 13:43:02	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Ping timeout: 240 seconds)
2013-11-16 14:14:19	suhorng	原來 ReaderT 可以拿來用全域變數 XDD
2013-11-16 14:15:31	-->	mno2 (~mno2@203.116.184.17) has joined #haskell.tw
2013-11-16 14:15:45	suhorng	大概是像, 假如用 IORef 開全域(而不用 StateT), 若想讓每個函式都看到就用 ReaderT 把 ref 塞進去
2013-11-16 14:15:56	suhorng	雖然開全域變數應該不是好作法 XD
2013-11-16 14:16:13	suhorng	類似的可能還有像讀 command line 參數後存設定？
2013-11-16 15:05:14	CindyLinz	這用法的確就是全域變數啊 :p
2013-11-16 15:09:14	suhorng	原本一直想不到 ReaderT 到底拿來做什麼w
2013-11-16 15:13:33	CindyLinz	你一定是拿來跟 StateT 比了.. XD
2013-11-16 15:13:51	CindyLinz	覺得 ReaderT 還有一個 local 的功能, 感覺還不錯
2013-11-16 15:13:56	CindyLinz	用下去就像開了一個副本
2013-11-16 15:14:47	CindyLinz	ReaderT 搭配濫用的 local 的話, 就變成 StateT 了... 不過可能會激怒讀你程式的人... ww
2013-11-16 15:15:07	CindyLinz	欸.. power 比 StateT 還大點 XD
2013-11-16 15:15:42	suhorng	比較強XD 有scope
2013-11-16 15:15:47	suhorng	local好用!
2013-11-16 15:16:09	CindyLinz	糟糕我幫你掀開潘朵拉的盒子了..... ww
2013-11-16 15:16:18	suhorng	XDDDDDDDD
2013-11-16 15:16:44	suhorng	可是ReaderT加上IORef就變IO裡面的StateT了! (完全無意義)
2013-11-16 15:18:41	suhorng	老實說, 我就真的不知道 IORef 能做什麼了XD 效能考量..?
2013-11-16 15:19:06	CindyLinz	如果要實作 Hash.. 你這資料結構會想怎麼維護啊?
2013-11-16 15:19:29	CindyLinz	喔你是說用 StateT 這種用法就好了?
2013-11-16 15:19:45	suhorng	嗯 用StateT外表也看不出來
2013-11-16 15:20:25	CindyLinz	假設用一個 immutable 的大陣列, 用一個 StateT 抓住它
2013-11-16 15:20:38	CindyLinz	每次修改一個 element 的時候都要複製整個陣列欸
2013-11-16 15:21:37	suhorng	那換成 mutable array 感覺也不錯阿XDDD
2013-11-16 15:22:00	CindyLinz	實作 mutable array 就要用 FFI 或 IORef 了吧?
2013-11-16 15:22:17	suhorng	嗯,也是
2013-11-16 15:23:04	suhorng	想想假如StateT裡面放mutable array終究是得在 IO 裡面...除非放棄 O(1) 存取用平衡樹...
2013-11-16 15:23:32	CindyLinz	嗯嗯
2013-11-16 15:24:05	suhorng	嗯..mutable array的instance有 IO[U]Array 跟 ST[U]Array 兩種 XDD
2013-11-16 15:59:09	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-11-16 15:59:10	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-16 16:20:55	<--	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-16 16:31:50	<--	mno2 (~mno2@203.116.184.17) has quit (Quit: mno2)
2013-11-16 17:43:32	CindyLinz	考慮.. 也許我先把 Agda 擺一邊, 先學 Coq 好了.. @@"
2013-11-16 19:14:05	-->	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-16 19:29:14	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-16 19:58:03	<--	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2013-11-16 20:08:11	-->	hashcat (~kv2a@118-171-195-125.dynamic.hinet.net) has joined #haskell.tw
2013-11-16 21:51:13	-->	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has joined #haskell.tw
2013-11-16 22:31:59	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-16 23:49:36	-->	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has joined #haskell.tw
2013-11-17 00:11:44	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-17 00:22:26	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-11-17 00:28:24	<--	suhorng (~suhorng@118-166-45-215.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-17 01:41:08	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-17 01:49:30	<--	cades (~mac@host-61-70-191-50.static.kbtelecom.net) has quit (Quit: This computer has gone to sleep)
2013-11-17 03:20:02	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-17 06:29:15	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-17 06:29:59	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-17 06:57:12	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: requested)
2013-11-17 06:57:55	-->	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has joined #haskell.tw
2013-11-17 07:08:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-17 08:45:09	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-17 09:20:49	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-11-17 09:21:06	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-17 09:36:34	<--	lambdabot (~lambdabot@static.88-198-179-137.clients.your-server.de) has quit (Quit: move to better server, be right back)
2013-11-17 09:37:45	-->	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has joined #haskell.tw
2013-11-17 09:44:04	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-17 09:44:34	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-17 09:48:28	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Client Quit)
2013-11-17 11:06:45	-->	b4283 (~b4283@218-164-124-251.dynamic.hinet.net) has joined #haskell.tw
2013-11-17 12:10:11	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 260 seconds)
2013-11-17 12:11:03	<--	monochrom (monokrom@216.138.220.146) has quit (Read error: Operation timed out)
2013-11-17 12:11:58	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-11-17 12:52:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-11-17 13:40:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-17 17:04:13	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-17 17:50:47	-->	hashcat_ (~kv2a@1-172-186-10.dynamic.hinet.net) has joined #haskell.tw
2013-11-17 17:53:28	<--	hashcat (~kv2a@118-171-195-125.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-17 20:02:16	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-11-17 20:31:27	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-17 20:38:45	<--	b4283 (~b4283@218-164-124-251.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-17 20:52:32	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-17 21:03:52	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-17 21:08:08	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Client Quit)
2013-11-17 21:12:03	-->	godfat (~Adium@114-24-2-253.dynamic.hinet.net) has joined #haskell.tw
2013-11-17 21:28:53	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 245 seconds)
2013-11-17 22:56:58	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-17 23:27:04	favonia	CindyLinz: UncleHandsome: 天啊我竟然漏掉這個 undefined behavior!!!
2013-11-17 23:30:23	CindyLinz	啊對.. 我直接去 G+ 問能不能轉貼好了 :p
2013-11-17 23:33:59	<--	hashcat_ (~kv2a@1-172-186-10.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-11-17 23:34:22	-->	hashcat_ (~kv2a@1-172-186-10.dynamic.hinet.net) has joined #haskell.tw
2013-11-17 23:34:33	favonia	等一下，在 C 根本不是 undefined 吧。。。。
2013-11-17 23:40:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-17 23:41:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-17 23:42:39	CindyLinz	你說的是哪一個啊? monochrom 的那一篇, 我試了結果跟他一樣...
2013-11-17 23:42:47	CindyLinz	-O -O2 的結果會不一樣
2013-11-17 23:42:50	CindyLinz	gcc
2013-11-17 23:44:46	favonia	我是說 loop
2013-11-17 23:53:25	<--	hashcat_ (~kv2a@1-172-186-10.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-17 23:58:37	CindyLinz	嗯??
2013-11-17 23:58:52	CindyLinz	你說我從 Tera 那邊貼的那篇喔?
2013-11-18 00:10:20	-->	tiglog (~tiglog@60.10.69.43) has joined #haskell.tw
2013-11-18 00:14:39	<--	b4283 (~b4283@118.150.134.51) has quit (Read error: Connection reset by peer)
2013-11-18 00:22:39	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-11-18 00:46:26	favonia	CindyLinz: 嗯
2013-11-18 00:53:35	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-18 03:01:51	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-parbodzrtaegqkco) has quit (Ping timeout: 240 seconds)
2013-11-18 03:02:32	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-gciwgktvytoxynrd) has joined #haskell.tw
2013-11-18 03:39:35	<--	tiglog (~tiglog@60.10.69.43) has quit (Ping timeout: 245 seconds)
2013-11-18 05:35:27	<--	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has quit (Ping timeout: 252 seconds)
2013-11-18 09:05:31	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-11-18 09:50:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-18 10:10:44	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-18 10:12:52	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-11-18 10:13:21	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-18 10:14:40	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-11-18 10:21:54	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-18 11:36:57	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 272 seconds)
2013-11-18 11:58:27	-->	mno2 (~mno2@42.61.215.9) has joined #haskell.tw
2013-11-18 12:49:31	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-11-18 12:49:32	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-18 12:56:52	<--	mno2 (~mno2@42.61.215.9) has quit (Quit: mno2)
2013-11-18 13:47:17	-->	hashcat (~kv2a@218-166-237-167.dynamic.hinet.net) has joined #haskell.tw
2013-11-18 14:03:21	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-18 16:32:17	CindyLinz	貼到 FB 以後有額外收獲...
2013-11-18 16:32:50	CindyLinz	獲得「C 語言常見誤解」一篇.. XD # https://docs.google.com/document/d/12cR0qb-kl7jB8RA_eHQu8OSmGKEOshwLeX4Mx5qBzUE
2013-11-18 16:33:24	letoh	favonia 弄的那個?
2013-11-18 16:33:46	CindyLinz	對耶
2013-11-18 16:33:52	CindyLinz	沒注意到作者名字 XD
2013-11-18 16:34:34	CindyLinz	為什麼要用這麼難認的字啦 XD
2013-11-18 16:34:40	letoh	XDXD
2013-11-18 16:35:22	letoh	反正作者也在，直接問他吧XD
2013-11-18 16:35:55	CindyLinz	這種小問題, 如果他沒注意到, 也不用麻煩他了啦 ^^|
2013-11-18 16:36:00	CindyLinz	就不用回答了 XD
2013-11-18 16:36:33	CindyLinz	另外, 我覺得 Tera 的說法讓我心裡舒服很多:
2013-11-18 16:36:57	CindyLinz	「當 compiler 看到 x*=2 這一行的時候, 已知 x>=0, 乘二之後數學上必然會維持 x>=0 (它不用考慮 overflow 的情形, 因為是 undefined behavior), 因此證明出這個迴圈會是 infinite loop.」
2013-11-18 16:37:21	CindyLinz	對比於這一個:
2013-11-18 16:37:26	CindyLinz	「標準說 overflow 是 undefined behavior，而這段 code 明顯會造成 overflow，所以造成 infinite loop 是符合標準的結果。」
2013-11-18 16:39:03	letoh	現在什麼話題@_@  才幾天沒追已經完全跟不上XD
2013-11-18 16:40:33	CindyLinz	letoh: monochrom 這一篇 https://plus.google.com/102208456519922110915/posts/DZsZ6mvA4T6
2013-11-18 16:40:56	letoh	thanks! 我研究一下
2013-11-18 16:43:55	letoh	int 在某些 model 好像會是 64bit
2013-11-18 16:44:30	letoh	一般比較常見的系統應該是可以先假設 32bit
2013-11-18 16:45:51	letoh	要準的話應該要改用 stdint.h 裡的 int32_t
2013-11-18 16:46:41	CindyLinz	letoh: 真的假的.................|||| # 16:43 < letoh> int 在某些 model 好像會是 64bit
2013-11-18 16:47:01	CindyLinz	是說如果重視 bit 數的話, 我的確會用 long 或 short 或 long long
2013-11-18 16:47:05	CindyLinz	不會直接用 int
2013-11-18 16:47:10	letoh	CindyLinz: http://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models
2013-11-18 16:47:45	letoh	我只記得 LP64 跟 LLP64  另外兩個忘了所以剛好查一下
2013-11-18 16:48:31	letoh	CindyLinz: 重視 bit 數的話應該用 stdint.h 才對啊XD
2013-11-18 16:52:26	CindyLinz	letoh: 我沒有聽過 stdint.h 嘛.. orz
2013-11-18 16:53:13	letoh	自己用 long 或 long long 的話，傳到人家手上硬塞進 int 還是有機會爆掉
2013-11-18 16:53:29	letoh	stdint.h 好像是 c99 才有的
2013-11-18 16:54:23	letoh	我覺得用這個可能方便一點  至少平台的差異應該會被處理掉@_@
2013-11-18 16:54:55	CindyLinz	以後會用 stdint.h 了... ._.
2013-11-18 16:56:10	letoh	還有一個 inttypes.h，不過我基本上都用 stdint.h 就夠了
2013-11-18 16:57:09	CindyLinz	mmm
2013-11-18 16:57:57	letoh	像我這邊的程式常常資料大小會直接對應到儲存媒體，就要很小心 bit 數
2013-11-18 16:58:20	CindyLinz	你的程式有需要跨平台或跨 compiler 嗎?
2013-11-18 16:58:33	CindyLinz	我以為每一支程式都是針對一個特定的 device
2013-11-18 16:58:50	letoh	算跨平台(?) 有時 pc client 會直接拿 firmware code 的 header file 來用
2013-11-18 16:59:44	letoh	然後開發的 pc 現在也有 64bit 環境了... 以前亂用 long, int 的就可能會出問題...
2013-11-18 16:59:47	CindyLinz	噢.. 真不妙....
2013-11-18 17:00:29	letoh	有些老程式遇過 pc 送進來的 packet size 不對，把其他資料覆寫掉了XD
2013-11-18 17:01:53	letoh	(firmware bsp 還沒提供 stdint.h... 只好自己弄一組出來XD)
2013-11-18 17:03:35	CindyLinz	我要從 jquery 的存在來想像.. XD
2013-11-18 17:51:54	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-18 18:35:40	-->	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has joined #haskell.tw
2013-11-18 18:56:56	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-18 18:57:35	hashcat	平板還能當筆電用
2013-11-18 18:59:09	hashcat	https://github.com/meefik/linuxdeploy
2013-11-18 19:18:15	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-18 20:56:29	CindyLinz	然後筆電能當砧板或烤盤用.. (逃) # https://www.youtube.com/watch?v=dGbjbad559M
2013-11-18 20:59:29	letoh	grandma proof XD
2013-11-18 21:00:02	hashcat	塑化劑pizza
2013-11-18 21:05:27	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-18 21:09:22	petercommand	恐怖pizza
2013-11-18 22:11:03	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-18 22:29:04	favonia	CindyLinz: long, short, long long 都不保證 bits 數量啊...
2013-11-18 22:30:28	-->	Yu_LIN (24ec16af@gateway/web/freenode/ip.36.236.22.175) has joined #haskell.tw
2013-11-18 22:32:40	hashcat	看要不率先改用新語言
2013-11-18 22:35:10	hashcat	chapel的型別系統看就知道用多少bit
2013-11-18 23:05:07	CindyLinz	只是閒聊而已啦.. 我現在生活中沒什麼在用 C 了 ^^|
2013-11-18 23:05:30	hashcat	都用啥麼了
2013-11-18 23:10:29	hashcat	取代C的
2013-11-18 23:34:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-18 23:37:38	<--	hashcat (~kv2a@218-166-237-167.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-11-18 23:37:50	-->	hashcat (~kv2a@218-166-237-167.dynamic.hinet.net) has joined #haskell.tw
2013-11-18 23:49:30	CindyLinz	我平常用 perl 啊 ^^|
2013-11-18 23:49:46	CindyLinz	應用領域還蠻有距離的 XD
2013-11-18 23:51:55	hashcat	沒應用的意思?
2013-11-18 23:58:56	hashcat	什麼是蠻有距離阿
2013-11-18 23:59:53	CindyLinz	我平常應用的地方和 C 擅長的方面不符呀
2013-11-19 00:02:37	hashcat	哦~
2013-11-19 00:04:45	<--	hashcat (~kv2a@218-166-237-167.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-19 00:30:58	-->	caasih (~caasiHuan@114-41-130-168.dynamic.hinet.net) has joined #haskell.tw
2013-11-19 00:51:25	<--	Yu_LIN (24ec16af@gateway/web/freenode/ip.36.236.22.175) has quit (Quit: Page closed)
2013-11-19 00:59:18	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-19 01:01:29	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-19 01:11:40	CindyLinz	好多人轉了「C語言常見誤解」XD
2013-11-19 01:22:22	letoh	我在公司也有聽說過XD
2013-11-19 04:03:05	<--	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has quit (Quit: brb)
2013-11-19 04:04:07	-->	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has joined #haskell.tw
2013-11-19 04:35:32	<--	caasih (~caasiHuan@114-41-130-168.dynamic.hinet.net) has quit (Quit: leaving)
2013-11-19 04:39:37	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-19 04:40:10	<--	godfat (~Adium@114-24-2-253.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-11-19 05:02:31	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-19 05:25:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-19 05:51:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-19 06:12:25	<--	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has quit (Quit: (lpaste url is .net, not .org))
2013-11-19 06:13:11	-->	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has joined #haskell.tw
2013-11-19 06:59:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-19 08:10:02	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-19 08:31:41	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-19 09:51:11	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-19 09:59:07	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-19 10:24:03	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-19 11:39:37	-->	hychen_ (~hychen@175.41.48.77) has joined #haskell.tw
2013-11-19 11:47:07	<--	hychen_ (~hychen@175.41.48.77) has quit (Quit: 暫離)
2013-11-19 12:21:21	<--	UncleHandsome (~liyw@linux1.cs.nctu.edu.tw) has quit (Quit: leaving)
2013-11-19 12:22:17	-->	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-11-19 12:30:33	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-19 12:48:58	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-19 13:42:11	cataska	https://github.com/quchen/articles/blob/master/loeb-moeb.md
2013-11-19 13:42:24	cataska	各位長輩解釋下 (拜)
2013-11-19 13:52:00	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-19 13:53:30	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-19 13:54:48	-->	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-11-19 13:58:33	CindyLinz	特點好好笑 XD
2013-11-19 14:12:50	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 264 seconds)
2013-11-19 14:55:34	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: Lost terminal)
2013-11-19 14:56:00	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-19 14:57:48	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-19 15:00:35	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-19 15:02:30	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-19 16:12:51	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-19 16:15:14	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-19 17:11:08	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-19 17:13:57	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-19 18:24:08	-->	hashcat (~kv2a@218-166-237-167.dynamic.hinet.net) has joined #haskell.tw
2013-11-19 18:24:21	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-11-19 18:39:09	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-11-19 18:55:10	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-19 19:10:11	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-11-19 19:12:52	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-19 19:22:38	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-19 19:32:44	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-19 21:11:32	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-19 22:14:46	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-19 22:21:33	-->	suhorng (~suhorng@118-166-56-219.dynamic.hinet.net) has joined #haskell.tw
2013-11-19 23:01:25	<--	hashcat (~kv2a@218-166-237-167.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-19 23:42:27	-->	godfat (~Adium@114-24-13-117.dynamic.hinet.net) has joined #haskell.tw
2013-11-19 23:42:58	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-11-20 00:07:47	<--	suhorng (~suhorng@118-166-56-219.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-20 00:43:18	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Read error: Connection reset by peer)
2013-11-20 00:43:51	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-20 00:44:22	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Client Quit)
2013-11-20 00:53:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-20 01:49:14	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-20 01:51:48	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 245 seconds)
2013-11-20 02:25:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-20 02:35:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-20 03:01:40	-->	tiglog (~tiglog@124.202.190.207) has joined #haskell.tw
2013-11-20 04:13:41	<--	tiglog (~tiglog@124.202.190.207) has quit (Quit: Leaving)
2013-11-20 05:21:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-20 07:06:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-11-20 08:36:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-20 09:01:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-20 09:49:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-20 09:59:21	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-20 10:06:09	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-20 11:13:58	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-20 11:44:05	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-11-20 11:57:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-20 12:33:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-20 12:49:03	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-20 13:23:21	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-20 13:23:21	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-20 13:23:21	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-11-20 13:23:21	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia flter gko godfat hychen kanru lambdabot letoh liuzhoou logfat_ miaout17_ monochrom petercommand shik superbil_c UncleHandsome]
2013-11-20 13:23:21	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-11-20 13:23:39	--	Mode #haskell.tw [+cnt]
2013-11-20 13:23:39	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-11-20 14:03:31	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-20 14:03:40	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-11-20 14:09:32	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-20 15:48:33	CindyLinz	cataska: 這篇的解說你讀過了嗎? # 13:42 < cataska> https://github.com/quchen/articles/blob/master/loeb-moeb.md
2013-11-20 15:48:48	CindyLinz	我才剛看完 XD
2013-11-20 16:54:19	-->	hashcat (~kv2a@218-164-109-249.dynamic.hinet.net) has joined #haskell.tw
2013-11-20 17:40:25	cataska	CindyLinz: 看不太懂呀，所以才要各位長輩解惑 orz
2013-11-20 17:46:05	CindyLinz	cataska: 你講一下你已經懂到哪邊, 然後還有哪邊讓你覺得「不夠懂」? 我覺得每個人對「懂」的 threshold 不一樣, 可能我其實了解的比你還少, 但我已經覺得我很懂了 XD
2013-11-20 17:51:17	CindyLinz	你是對原 po 舉的 list 的例子為什麼會動沒有看懂嗎? 或是對 為什麼它 rs 的定義裡面是吃 rs 的 return 值當參數覺得很詭異?
2013-11-20 18:08:58	hashcat	遞歸有三寶: 樹圖, 代換, 不動點
2013-11-20 18:10:10	CindyLinz	最後一個要押韻啦! XD
2013-11-20 18:10:22	CindyLinz	推不倒?
2013-11-20 18:11:14	hashcat	代換是把自引用或者無窮下去的部分, 換成能中止的點, 或者看起來很普通的沒有遞歸的方程式
2013-11-20 18:11:14	hashcat	什麼推不倒
2013-11-20 18:11:14	CindyLinz	不動點推不倒 XD
2013-11-20 18:11:14	cataska	看了一兩段都看不懂就卡住求救了 XD
2013-11-20 18:11:26	cataska	我再來體會一下好了 (嗯)
2013-11-20 18:11:26	CindyLinz	cataska: 那你先接著看下去好了, 前面是嚇人的, 後面比較親切 XD
2013-11-20 18:12:06	hashcat	會搞這麼複雜還有一個原因
2013-11-20 18:12:06	hashcat	因為多態特性
2013-11-20 18:12:06	CindyLinz	cataska: 看到實例的時候可能心中會有亮起來的感覺 ^^
2013-11-20 18:12:55	hashcat	其實有時候一個名稱一樣函數, 根本不能算是同一種東西
2013-11-20 18:19:30	CindyLinz	hashcat: 有一點好奇, 你專有名辭的中文版是怎樣學起來的?
2013-11-20 18:19:58	CindyLinz	我覺得我也很常用中文版的專有名辭, 可是好像跟你用的是不同套 @@"
2013-11-20 18:20:11	hashcat	當然是特別去查的
2013-11-20 18:20:27	CindyLinz	我習慣的是 遞迴, 多型.. 不過你用的是 遞歸, 多態
2013-11-20 18:20:55	hashcat	我承認我是共匪好了
2013-11-20 18:21:08	CindyLinz	不是這意思啊 囧
2013-11-20 18:21:23	hashcat	因為覺得台灣常翻譯得莫名其妙
2013-11-20 18:22:27	CindyLinz	所以是故意避開台版中文喔?
2013-11-20 18:22:37	hashcat	嗯嗯
2013-11-20 18:23:13	hashcat	還有避開音譯這樣
2013-11-20 18:23:29	CindyLinz	魯棒 ← 這個嗎? XD
2013-11-20 18:23:49	hashcat	音譯就算了還翻成這樣
2013-11-20 18:23:55	CindyLinz	XDDD
2013-11-20 18:25:36	cataska	一開始還以為魯棒是水滸傳裡的人物
2013-11-20 18:26:37	CindyLinz	以前剛開始接觸大陸人的時候, 覺得他們把一連串中文專有名辭接在一起講很有趣.. :p
2013-11-20 18:27:20	CindyLinz	那時在看機房的建置: 我們有魯棒的冗餘雙線迴路
2013-11-20 18:30:25	hashcat	冗餘聽起來有負面的意思, 感覺也不是很好, 強健抗變換的多重備用雙線迴路
2013-11-20 18:31:02	CindyLinz	我這是原汁原味 XD
2013-11-20 18:31:26	hashcat	我是不要跟通用的差太多就好
2013-11-20 18:31:59	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-20 18:32:46	cataska	原來 hashcat 不是這位啊 https://twitter.com/hSATAC
2013-11-20 18:32:48	hashcat	cataska: 你有沒在用ghci debugger
2013-11-20 18:33:17	hashcat	他是誰阿
2013-11-20 18:33:34	cataska	hashcat: 就台灣同胞...
2013-11-20 18:34:24	hashcat	這哽在哪
2013-11-20 18:34:38	cataska	hashcat: id 很像
2013-11-20 18:35:50	cataska	沒在用 ghci debugger...
2013-11-20 18:37:56	hashcat	用ghci debugger看看, 看資料一步一步長大
2013-11-20 18:39:38	cataska	hashcat: 好的
2013-11-20 18:40:07	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-20 18:42:12	hashcat	順便說下我 Ruby, Golang, PHP, ios一概不懂
2013-11-20 18:47:33	hashcat	http://felsin9.de/nnis/ghc-vis/
2013-11-20 18:47:42	hashcat	這個有視覺化
2013-11-20 19:05:46	-->	mno2 (~mno2@bb119-74-181-107.singnet.com.sg) has joined #haskell.tw
2013-11-20 19:12:22	<--	mno2 (~mno2@bb119-74-181-107.singnet.com.sg) has quit (Quit: mno2)
2013-11-20 19:19:44	-->	mno2 (~mno2@bb119-74-181-107.singnet.com.sg) has joined #haskell.tw
2013-11-20 20:06:32	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit
2013-11-20 20:15:17	<--	mno2 (~mno2@bb119-74-181-107.singnet.com.sg) has quit (Quit: mno2)
2013-11-20 21:11:29	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-20 21:38:09	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-20 22:00:28	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-20 23:15:44	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Reconnecting)
2013-11-20 23:20:37	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-11-20 23:21:34	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-20 23:43:49	<--	hashcat (~kv2a@218-164-109-249.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-20 23:53:46	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 00:23:40	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-21 01:01:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-21 01:08:57	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 01:18:53	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-21 02:28:59	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-21 02:47:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 02:53:02	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-11-21 03:43:04	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-11-21 03:59:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 05:06:02	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-21 05:22:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-21 05:37:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 07:19:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-21 10:00:21	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-21 10:24:14	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-21 10:47:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 11:04:51	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-21 12:33:35	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-21 12:59:32	-->	Yu_lin (24ec1367@gateway/web/freenode/ip.36.236.19.103) has joined #haskell.tw
2013-11-21 13:02:10	Yu_lin	http://learnyousomeerlang.com/static/img/worm.png
2013-11-21 13:02:30	Yu_lin	learn you some erlang 教 patterm match 時放的圖
2013-11-21 13:06:45	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-11-21 13:43:38	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-21 13:58:04	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-11-21 14:09:34	CindyLinz	還 蠻 噁 的 .....||
2013-11-21 14:31:24	-->	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-21 14:34:24	suhorng	functional thursday this month XD https://kktix.com/events/bef47a (@taipei)
2013-11-21 14:38:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-21 14:39:58	CindyLinz	這次走冰冷風?
2013-11-21 14:40:40	suhorng	這樣很冰冷 :-o?
2013-11-21 14:43:03	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 245 seconds)
2013-11-21 14:43:43	<--	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 260 seconds)
2013-11-21 14:43:45	CindyLinz	對照一下... https://www.google.com.tw/search?q=%E5%86%B7%E8%89%B2%E7%B3%BB&client=ubuntu&hs=Ou4&channel=cs&tbm=isch&tbo=u&source=univ&sa=X&ei=j6uNUobIDoakkgXrroCwAg&ved=0CDgQsAQ&biw=1280&bih=669
2013-11-21 14:43:53	CindyLinz	嗯, 相似度 90%.. (逃)
2013-11-21 14:46:09	suhorng	馬上加熱
2013-11-21 14:46:15	suhorng	應該比較溫暖了(咦)
2013-11-21 14:55:05	<--	suhorng (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit (Ping timeout: 250 seconds)
2013-11-21 14:55:43	-->	suhorng_ (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-21 14:57:42	CindyLinz	好啦.. 雖然怎樣還是輸上上次中式喜宴風.... XD
2013-11-21 15:17:24	<--	Yu_lin (24ec1367@gateway/web/freenode/ip.36.236.19.103) has quit (Quit: Page closed)
2013-11-21 15:28:01	<--	suhorng_ (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit (Ping timeout: 250 seconds)
2013-11-21 15:40:52	-->	suhorng_ (8c701087@gateway/web/freenode/ip.140.112.16.135) has joined #haskell.tw
2013-11-21 15:54:00	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-21 15:54:40	kanru	ommmmmmmm~
2013-11-21 16:03:14	-->	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-11-21 16:35:11	<--	suhorng_ (8c701087@gateway/web/freenode/ip.140.112.16.135) has quit (Ping timeout: 250 seconds)
2013-11-21 17:54:22	-->	hashcat (~kv2a@36.238.35.242) has joined #haskell.tw
2013-11-21 18:10:35	godfat	所以 list 其實是一種 medusa, 砍掉一個頭會再長一個出來 XD
2013-11-21 18:11:15	CindyLinz	infinite list 才有啊.. 不然砍一砍就砍光了 XD
2013-11-21 18:11:33	godfat	XDDDD medusa 也是會死的 (?)
2013-11-21 18:23:46	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-21 18:23:50	hashcat	要不砍讓他一直長才會死
2013-11-21 18:26:20	godfat	length . cycle
2013-11-21 18:35:01	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-21 18:35:55	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-21 18:46:35	caasih	hashcat: http://www.giantitp.com/comics/oots0326.html XDDDDD
2013-11-21 18:48:35	godfat	XDDD
2013-11-21 18:50:20	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-11-21 19:04:57	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-21 19:14:57	hashcat	http://www.youtube.com/watch?v=DlkMs4ZHHr8
2013-11-21 19:44:34	hashcat	cassih: 拿來當創業教材
2013-11-21 20:20:03	-->	caasih (~caasiHuan@61-223-77-114.dynamic.hinet.net) has joined #haskell.tw
2013-11-21 20:26:58	-->	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-21 21:04:29	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-21 21:14:40	letoh	CindyLinz: 個人認為 learn you some erlang 從頭到尾就是本噁書... 你看那封面...
2013-11-21 21:16:08	letoh	然後裡面那些插圖  不曉得為什麼就是給人可怕的感覺
2013-11-21 21:20:08	letoh	http://learnyousomeerlang.com/static/img/tail-recursion.png  看這是什麼詛咒人偶嗎
2013-11-21 22:03:49	<--	b4283 (~b4283@118.150.134.51) has quit (Ping timeout: 248 seconds)
2013-11-21 22:13:08	<--	caasih (~caasiHuan@61-223-77-114.dynamic.hinet.net) has quit (Quit: leaving)
2013-11-21 22:49:02	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-21 22:52:55	petercommand	letoh: 小豬耶^^
2013-11-21 22:53:52	petercommand	letoh: 用動物插圖來描述語言很棒呀XD
2013-11-21 22:54:27	letoh	唔  其實你自己翻一下就知道了  裡面奇怪的圖很多
2013-11-21 22:55:43	letoh	http://learnyousomeerlang.com/static/img/black-knight.png  # 18x 自重
2013-11-21 23:04:19	petercommand	XDD
2013-11-21 23:04:27	-->	jiajunwong (~jiajunwon@218.64.17.180) has joined #haskell.tw
2013-11-21 23:09:46	jiajunwong	请问为什么模式匹配函数时ca :: String -> String 不能写成 ca :: (String a) => a -> a 呢？
2013-11-21 23:11:01	letoh	可以用 [a] -> [a] 嗎?
2013-11-21 23:12:08	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-21 23:15:01	hashcat	正牌匪區人民
2013-11-21 23:15:14	jiajunwong	可以吧。。我定义了一个验证一下成功导入了
2013-11-21 23:15:33	hashcat	jiajunwong: String是型別不是typeclass
2013-11-21 23:16:12	hashcat	=> 左邊是用來限制型別變數所屬的typeclass
2013-11-21 23:16:38	hashcat	我是冒牌的
2013-11-21 23:17:58	jiajunwong	哦，谢谢 :-)
2013-11-21 23:17:58	hashcat	你只能說一個型別變數應該屬於某個typeclass, 而不能說一個型別變數屬於某個型別
2013-11-21 23:19:13	hashcat	typeclass 的意義是type的class, 包含一票type的class
2013-11-21 23:19:21	hashcat	我廢話真多
2013-11-21 23:19:56	jiajunwong	不会啦～ ;-)
2013-11-21 23:20:30	hashcat	這東西跟模式批配沒關係
2013-11-21 23:20:32	jiajunwong	我一直在看，只是不知道怎么回答，因为我初学haskell :)
2013-11-21 23:21:23	hashcat	類比集合論, 把型別當集合, 型別類就是集合的集合
2013-11-21 23:22:13	jiajunwong	:-) get it~
2013-11-21 23:25:05	hashcat	讓我想到有一個haskell-cn本來還有兩個人, 後來剩一個
2013-11-21 23:26:20	jiajunwong	→_→那我岂不是稀有品种
2013-11-21 23:26:51	jiajunwong	对了，我输入简体中文你看起来有困难吗？
2013-11-21 23:27:47	letoh	一般都猜得到吧  遇到不懂的再問一下就好
2013-11-21 23:27:47	hashcat	沒有
2013-11-21 23:28:42	jiajunwong	(⊙o⊙)哦，我以为看惯了繁体字看简体字会很不习惯呢
2013-11-21 23:28:46	jiajunwong	;)
2013-11-21 23:28:55	hashcat	haskell-cn那一個獨守空閨很久, 想佩服一下噗噗
2013-11-21 23:29:21	jiajunwong	我去拜访一下→_→
2013-11-21 23:33:39	jiajunwong	在频道列表里没有看到。。。
2013-11-21 23:34:03	hashcat	很多軟件預設少於5人不會顯示
2013-11-21 23:35:26	jiajunwong	原来如此。。。
2013-11-21 23:36:22	jiajunwong	在大陆高校知道xchatIRC的人很少，所以应该比较正常的。。大陆一般都用QQ。。
2013-11-21 23:36:57	hashcat	在qq你聽過hellcat嗎
2013-11-21 23:38:02	jiajunwong	没有╮(╯_╰)╭
2013-11-21 23:38:30	hashcat	那沒事 :)
2013-11-21 23:40:35	jiajunwong	额。。
2013-11-21 23:42:12	jiajunwong	我们马上断网了，睡觉去了(～﹃～)~zZ  再见～
2013-11-21 23:46:44	hashcat	jiajunwong: byebye
2013-11-21 23:47:04	<--	jiajunwong (~jiajunwon@218.64.17.180) has quit (Quit: Leaving)
2013-11-21 23:53:08	suhorng	應該以前有出現過, 不過還是看一次笑一次 http://james-iry.blogspot.tw/2009/05/brief-incomplete-and-mostly-wrong.html
2013-11-21 23:53:29	suhorng	「1990 - A committee formed by Simon Peyton-Jones, Paul Hudak, Philip Wadler, Ashton Kutcher, and People for the Ethical Treatment of Animals creates Haskell, a pure, non-strict, functional language. Haskell gets some resistance due to the complexity of using monads to control side effects. Wadler tries to appease critics by explaining that "a monad is a monoid in the category of endofunctors, what's the problem?"」
2013-11-21 23:54:38	suhorng	「1936 - Alonzo Church also invents every language that will ever be but does it better. His lambda calculus is ignored because it is insufficiently C-like. This criticism occurs in spite of the fact that C has not yet been invented.」
2013-11-22 00:14:36	godfat	看一次笑一次+1
2013-11-22 00:23:24	<--	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-22 01:27:53	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-22 01:35:27	<--	hashcat (~kv2a@36.238.35.242) has quit (Ping timeout: 272 seconds)
2013-11-22 01:38:34	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-22 02:33:38	favonia	"People for the Ethical Treatment of Animals" lol
2013-11-22 02:44:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-22 03:14:09	monochrom	"1801 - ... Redditers of the time ..." 哈哈
2013-11-22 04:51:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-22 05:16:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-22 05:19:01	<--	monochrom (monokrom@216.138.220.146) has quit (Ping timeout: 252 seconds)
2013-11-22 05:19:58	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-11-22 05:57:38	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 245 seconds)
2013-11-22 06:00:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-22 06:30:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-22 07:25:25	<--	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has quit (Quit: wee! restarting!)
2013-11-22 07:26:13	-->	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has joined #haskell.tw
2013-11-22 07:54:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-22 08:15:44	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-22 10:30:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-22 10:30:35	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-22 12:01:41	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 248 seconds)
2013-11-22 12:02:35	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-11-22 12:22:08	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-22 13:13:42	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-22 13:42:28	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-22 13:42:57	-->	caasih (~caasiHuan@114-46-145-102.dynamic.hinet.net) has joined #haskell.tw
2013-11-22 15:46:49	<--	caasih (~caasiHuan@114-46-145-102.dynamic.hinet.net) has quit (Quit: leaving)
2013-11-22 16:57:53	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-22 16:59:20	-->	hashcat (~kv2a@36.238.35.242) has joined #haskell.tw
2013-11-22 17:13:08	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-22 18:44:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-22 18:44:55	-->	mros (~quassel@140.112.211.18) has joined #haskell.tw
2013-11-22 18:44:59	<--	mros (~quassel@140.112.211.18) has quit (Remote host closed the connection)
2013-11-22 18:46:50	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-22 20:36:24	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-22 21:26:23	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-22 21:48:27	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-22 22:00:06	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-22 22:16:26	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 272 seconds)
2013-11-22 22:16:36	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-11-22 22:17:12	-->	b4283 (~b4283@118.150.134.51) has joined #haskell.tw
2013-11-22 22:30:09	<--	hashcat (~kv2a@36.238.35.242) has quit (Ping timeout: 246 seconds)
2013-11-22 22:32:20	-->	hashcat (~kv2a@36.238.35.242) has joined #haskell.tw
2013-11-22 22:33:29	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2013-11-22 22:34:08	-->	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-22 22:54:38	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-22 23:18:47	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-22 23:22:12	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-23 00:13:27	<--	hashcat (~kv2a@36.238.35.242) has quit (Quit: Konversation terminated!)
2013-11-23 00:30:15	mno2	最近都沒空聊天。
2013-11-23 00:30:37	mno2	來更新一則消息好了
2013-11-23 00:30:48	mno2	我同事最近訪問 Simon Marlow
2013-11-23 00:31:07	mno2	聽說他們 team 都沒空測試的 xD
2013-11-23 00:31:11	mno2	都只靠 type system
2013-11-23 00:31:27	mno2	因為一天要 push 超多次
2013-11-23 00:31:42	mno2	那個專案就是要不斷更新規則
2013-11-23 00:31:48	mno2	根本沒時間測試
2013-11-23 00:31:52	mno2	就是寫了就上
2013-11-23 00:33:25	mno2	還有 Simon Marlow 最近在著手 ghc runtime 的 stack trace 了
2013-11-23 00:33:31	mno2	也許過不久會更好 debug
2013-11-23 00:38:40	suhorng	靠 type system 是哪招啦XDDDD
2013-11-23 00:52:54	favonia	xDDDDD
2013-11-23 00:53:38	letoh	這可以當作不想做測試的藉口嗎? XD
2013-11-23 01:11:19	<--	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-23 01:25:45	<--	b4283 (~b4283@118.150.134.51) has quit (Remote host closed the connection)
2013-11-23 02:01:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-23 02:48:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-23 03:25:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-23 04:05:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-23 04:33:05	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-23 05:29:45	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-23 05:32:39	<--	godfat (~Adium@114-24-13-117.dynamic.hinet.net) has quit (Ping timeout: 265 seconds)
2013-11-23 05:46:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-23 06:38:15	<--	lambdabot (~lambdabot@2a00:d880:3:1::623f:813d) has quit (Quit: bye, bye, numberwang)
2013-11-23 06:38:58	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-11-23 09:59:24	-->	b4283 (~b4283@1-175-61-170.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 15:54:22	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-23 17:14:42	-->	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 17:31:49	-->	hashcat (~kv2a@218-164-109-2.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 18:03:50	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-23 18:09:14	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-23 18:13:23	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Client Quit)
2013-11-23 19:04:30	suhorng	我在想, 把 state monad 定成 s -> (a, s) 好像不是必須的
2013-11-23 19:06:55	suhorng	最近在看這個 http://okmij.org/ftp/Haskell/extensible/ 他選擇用不同於 monad transformers 的方式來結合不同副作用
2013-11-23 19:08:50	suhorng	但是他最後的選擇我也是不太懂為什麼結尾要用 (w, s) 這種 type... runState :: Typeable s => Eff (State s :> r) w -> s -> Eff r (w,s)
2013-11-23 19:11:01	suhorng	若我們有個mutable state, 則把包裝拆掉後能獲得執行完的最終state v.s. 包裝拆掉後最終state會被丟掉, 不知道哪個比較好
2013-11-23 19:11:09	suhorng	雖然前者涵蓋後者啦..
2013-11-23 19:13:57	hashcat	那當然是保留
2013-11-23 19:14:19	hashcat	後者就等同前者, 加一個捨棄動作
2013-11-23 19:14:52	suhorng	對
2013-11-23 19:14:57	hashcat	前者可以轉變成後者, 後者沒辦法轉回來
2013-11-23 19:15:47	suhorng	只是在想說, 把 state 包在裡面的話, 拆掉包裝把 state 丟掉(隱藏起來), 不讓使用者看到好像也沒錯...
2013-11-23 19:15:52	hashcat	假如想到要接下去的話, 直接丟棄的哪個還得改代碼
2013-11-23 19:15:59	suhorng	嗯..
2013-11-23 19:16:15	hashcat	保留的話就能保持程序的可擴展性
2013-11-23 19:18:33	suhorng	可擴展性好像還不是那麼有必要的感覺
2013-11-23 19:19:55	hashcat	這要看是開放還是封閉風格吧
2013-11-23 19:20:36	hashcat	開放, 用不到等同於以後可能用到. 封閉, 用不到等同永遠用不到
2013-11-23 19:22:13	hashcat	前者是可能會累積一堆無用之學, 後者是會書到用時方恨少
2013-11-23 19:22:20	suhorng	XDDDD
2013-11-23 19:23:50	suhorng	:r
2013-11-23 19:23:57	suhorng	弄錯視窗orzzz
2013-11-23 19:24:12	hashcat	:D
2013-11-23 19:29:21	hashcat	這兩難的決策方式是機會成本. 保持開放在這狀況不耗任何成本, 也沒放棄掉什麼可能的機會, 而封閉則放棄了擴展的機會, 所以保持開放比較好
2013-11-23 19:29:42	hashcat	再說他的論題也有用到extensible這字眼
2013-11-23 19:31:18	suhorng	那個extensible不是指這個 XDDD
2013-11-23 19:31:37	suhorng	會想到這問題就是因為在他的實作中, 選 (a, s) 跟選 s 沒有差別
2013-11-23 19:31:48	suhorng	不像原本 State 跟 StateT 中很自然就會是 (a, s)
2013-11-23 19:32:37	suhorng	當然一個最簡單的方法是 (a, s) 跟 s 兩個都順便提供啦..反正後者只是多個丟掉
2013-11-23 19:32:45	hashcat	我說的是他風格是開放的
2013-11-23 19:33:16	hashcat	嗯嗯
2013-11-23 19:33:27	suhorng	應該說 那個開放不是只風格
2013-11-23 19:33:40	suhorng	是很專門針對他的 monad 的
2013-11-23 19:33:51	hashcat	省得使用者打電話進來抱怨要求改代碼
2013-11-23 19:34:36	suhorng	XDD
2013-11-23 19:35:00	suhorng	請使用者自己送 pull request
2013-11-23 19:35:28	hashcat	不知道你對我的話是不有啥誤解
2013-11-23 19:36:25	suhorng	唔 不知道 ._.
2013-11-23 19:37:38	hashcat	他提到要支持更多特性, 可擴展的作用啥的, 保留最終狀態也就不奇怪了
2013-11-23 19:39:01	-->	godfat (~Adium@114-24-0-90.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 19:39:33	<--	godfat (~Adium@114-24-0-90.dynamic.hinet.net) has quit (Client Quit)
2013-11-23 19:39:47	-->	godfat (~Adium@114-24-0-90.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 19:41:00	hashcat	再說他是要開放給未知使用者用的
2013-11-23 19:42:21	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-23 19:42:22	suhorng	喔~
2013-11-23 19:43:44	hashcat	想到醫生不能擅自割盲腸的狀況
2013-11-23 19:44:13	suhorng	XD
2013-11-23 19:47:30	suhorng	其實仔細想想就算丟掉了 要拿回來也不難
2013-11-23 19:47:45	suhorng	可以寫個 preserve :: Eff s a -> Eff s (a, s)
2013-11-23 19:48:00	suhorng	就回來了
2013-11-23 19:48:28	hashcat	結果代碼多兩步驟這樣
2013-11-23 19:48:45	suhorng	丟掉也一樣呀XD
2013-11-23 19:55:26	hashcat	我腦袋轉不過來
2013-11-23 19:55:32	hashcat	為啥可以找回來
2013-11-23 19:56:58	suhorng	假使原本 runState 是 m a -> s -> m (a, s)，那麼從保有的來丟掉是 fmap fst (runState m s)
2013-11-23 19:56:59	suhorng	另一方面 假使原本是 runState' :: m a -> s -> a，那麼若要保有就是 runState' (m >>= preserve)
2013-11-23 19:57:23	<--	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-11-23 19:58:17	-->	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 19:59:12	suhorng	其中 preserve :: MonadState s m => m a -> m (a, s)
2013-11-23 20:01:12	suhorng	打錯了... runState 應該是 m a -> s -> (a, s) 才對
2013-11-23 20:02:57	hashcat	runState :: Typeable s => Eff (State s :> r) w -> s -> Eff r (w,s)
2013-11-23 20:03:20	suhorng	嗯嗯
2013-11-23 20:03:36	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-23 20:03:57	hashcat	若只是 Eff r w 的話怎能知道s
2013-11-23 20:08:31	hashcat	我看型別是只有限定 s 得是 Typeable, 剩下r和w變數都沒限制, 也就是沒有說一定有函數或界面能還原出s
2013-11-23 20:08:41	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-23 20:09:43	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-23 20:10:02	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-23 20:10:44	suhorng	那是在 runState 之前. 假設限在 runState' :: Typeable s => Eff (State s :> r) w -> s -> Eff r w
2013-11-23 20:10:52	suhorng	也就是 runState' 是丟掉狀態的
2013-11-23 20:11:21	suhorng	那麼就有 runState' m s = fmap fst (runState m s)
2013-11-23 20:12:06	suhorng	反過來說, 也可以有 runState m s = runState' (do { a <- m; s' <- get; return (a, s) }) s
2013-11-23 20:12:35	suhorng	一個是在拆掉後 再丟掉, 一個是在拆開前 先保留
2013-11-23 20:14:11	hashcat	那個get為啥一定會是原來的s
2013-11-23 20:14:50	suhorng	喔 又打錯了 裡面應該是 a <- m; s' <- get; return (a, s')
2013-11-23 20:15:01	suhorng	這樣就是保存最終狀態了
2013-11-23 20:16:07	hashcat	get 得到的結果跟 runState 的輸出有啥關聯
2013-11-23 20:16:35	suhorng	get就是去得到 State monad 的 state
2013-11-23 20:16:57	hashcat	???
2013-11-23 20:17:00	suhorng	這裡的 get :: (Typeable s, Member s r) => Eff r s
2013-11-23 20:17:05	suhorng	就是去獲得那個 mutable state
2013-11-23 20:17:47	suhorng	也就是說 在 m 跑完後, 先把最終狀態用 get 保存下來, 然後跟 m 的結果一起輸出
2013-11-23 20:18:21	suhorng	這樣把那一層 State s 拆掉之後也就會留著 m 跑完的最終狀態了, 跟 runState 一樣
2013-11-23 20:21:52	hashcat	我在想是啥保證 get :: (Typeable s, Member s r) => Eff r s 跟 runState :: Typeable s => Eff (State s :> r) w -> s -> Eff r (w,s) 的最後輸出的s型別的值會是一樣的東西
2013-11-23 20:22:31	suhorng	喔 這算是不一樣的問題
2013-11-23 20:23:01	hashcat	怎能原來找回丟棄的數值
2013-11-23 20:23:12	suhorng	以這個 framework 要注記好 get 的型別
2013-11-23 20:23:25	suhorng	這樣就可以確定找到的是 runState 的那個 s
2013-11-23 20:24:30	hashcat	有型別就有值了?
2013-11-23 20:26:05	suhorng	唔
2013-11-23 20:26:12	suhorng	因為那是 runState 的意思呀?
2013-11-23 20:26:45	suhorng	runState 最後跑出來的 (a,s) 的 s 就是 m 跑完後的那個狀態
2013-11-23 20:27:06	suhorng	get依照型別找到對的那一個 State s，回傳那個狀態
2013-11-23 20:30:03	hashcat	理解不能
2013-11-23 20:30:41	suhorng	QQ
2013-11-23 20:32:24	suhorng	最原始的 State monad 只是一個 s -> (a, s) 型別的函數
2013-11-23 20:32:35	hashcat	嗯嗯
2013-11-23 20:33:52	hashcat	(fst . f )的話就是 s -> a
2013-11-23 20:34:24	suhorng	然後, 假如有兩個函數都會共用到某一個 mutable state, 我們想把他們串起來變成單一一個函數的話, 就是 let (a, s') = f s in g a s'
2013-11-23 20:34:25	suhorng	嗯
2013-11-23 20:34:45	hashcat	我想到的是(snd . f)的資訊就消失了
2013-11-23 20:35:00	suhorng	對 不過不是那樣呀
2013-11-23 20:35:07	suhorng	get 就只是 \s -> (s, s)
2013-11-23 20:35:14	suhorng	不去改變狀態, 把狀態回傳
2013-11-23 20:38:00	hashcat	怎想都是找回的狀態不會是原來那個
2013-11-23 20:38:27	suhorng	跟原來那個沒有關係呀
2013-11-23 20:38:38	suhorng	State monad 是 s -> (a, s)
2013-11-23 20:38:49	suhorng	最後輸出的本來就是跑完後的最終狀態
2013-11-23 20:39:17	hashcat	最終狀態只有一個?
2013-11-23 20:39:44	suhorng	要原來那個狀態, 在 runState 時直接加回去就好了...還更簡單： runState m s = runState' m s >>= \a -> return (a, s)
2013-11-23 20:39:55	suhorng	因為 state 原本就是 s -> (a, s)
2013-11-23 20:40:03	suhorng	給一個初始狀態, 輸出計算結果跟最終狀態
2013-11-23 20:40:14	suhorng	有最終狀態才能再串起下一個要用狀態的函數
2013-11-23 20:42:51	hashcat	想不出為啥get能找回最終狀態值
2013-11-23 20:43:45	suhorng	我們是把 get 接在 m 後面
2013-11-23 20:44:39	suhorng	跑完 m 之後跑 get, 然後傳回去： do { a <- m; s <- get; return (a, s) }
2013-11-23 20:49:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-23 20:58:08	hashcat	意思是在同一個monad下狀態沒變過這樣?
2013-11-23 21:05:02	hashcat	我貌似想通了
2013-11-23 21:16:01	hashcat	我知道點在哪了唉
2013-11-23 21:16:34	hashcat	我跳脫monad了
2013-11-23 21:27:25	<--	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-23 21:40:14	hashcat	suhorng: 你說的是在runState之前狀態還在可以補上去, 我想的是要是runState之後沒保留的資訊是要怎樣找回來
2013-11-23 21:47:10	CindyLinz	好長的討論串!
2013-11-23 21:47:14	CindyLinz	來讀.... ._.
2013-11-23 21:48:28	hashcat	別讀了
2013-11-23 21:48:50	hashcat	讀到我發言就可以停了
2013-11-23 21:49:41	CindyLinz	那才看到前五行怎麼行.. XD
2013-11-23 21:49:56	CindyLinz	至少讀完你的最後一句 XD
2013-11-23 21:58:48	hashcat	我一直想成他在講state monad跑完之後, 怎麼樣才可以得到原來的狀態, 然後開始胡言亂語
2013-11-23 22:00:11	CindyLinz	我的進度還在 prerequisite -- 讀 http://okmij.org/ftp/Haskell/extensible/
2013-11-23 22:02:31	hashcat	討論串跟那個沒啥關係 XD
2013-11-23 22:03:43	-->	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 22:04:55	CindyLinz	呃.. ^^|
2013-11-23 22:08:24	hashcat	結論就是 runState :: Typeable s => Eff (State s :> r) w -> s -> Eff r (w,s) 有三個部分, 我想的是 Eff r (w,s) 要是不保留s的值只剩下 Eff r w怎會知道原來的 s 是啥, 他說的是在那種狀況下可以從  Eff (State s :> r) w  找到最終狀態, 型別中的 w 變成是原來的 (w,s)
2013-11-23 22:09:19	suhorng	hashcat: 對XDD
2013-11-23 22:09:25	suhorng	原來有如此誤會orz
2013-11-23 22:09:46	hashcat	我想run完monad後, 原來的狀態還是用得上這樣
2013-11-23 22:09:48	suhorng	他這個實作不好懂..
2013-11-23 22:09:52	hashcat	可能用得上
2013-11-23 22:10:01	hashcat	我想好久暈
2013-11-23 22:33:54	<--	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-11-23 22:47:28	-->	suhorng1 (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-23 23:10:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-23 23:29:12	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-23 23:35:19	<--	suhorng1 (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-11-24 00:10:44	-->	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has joined #haskell.tw
2013-11-24 00:17:25	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2013-11-24 00:17:26	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-11-24 00:51:40	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-24 01:06:54	<--	hashcat (~kv2a@218-164-109-2.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-24 01:08:52	<--	b4283 (~b4283@1-175-61-170.dynamic.hinet.net) has quit (Quit: 暫離)
2013-11-24 01:12:00	<--	suhorng (~suhorng@118-166-48-47.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-24 01:53:49	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2013-11-24 02:18:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-24 02:19:24	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-24 02:40:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-24 02:54:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-24 05:15:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-24 09:31:14	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-24 09:55:16	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-24 10:36:00	-->	b4283 (~b4283@218-164-202-174.dynamic.hinet.net) has joined #haskell.tw
2013-11-24 12:56:13	-->	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has joined #haskell.tw
2013-11-24 13:42:02	suhorng	functional dependency該不會是從資料庫借來的名字吧
2013-11-24 13:47:03	suhorng	不過寫錯的話, 在用到的時候才會報錯 XD http://stackoverflow.com/questions/7436109/haskell-functional-dependency-conflict　順便介紹type families...http://stackoverflow.com/questions/20040224/functional-dependencies-in-haskell
2013-11-24 14:33:44	<--	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-24 15:54:07	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-24 15:54:19	-->	sora_ (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-11-24 15:54:32	--	sora_ is now known as UncleHandsome
2013-11-24 16:44:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-24 17:16:07	-->	hashcat (~kv2a@118-171-194-44.dynamic.hinet.net) has joined #haskell.tw
2013-11-24 17:21:11	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-24 17:47:57	<--	b4283 (~b4283@218-164-202-174.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-11-24 17:59:52	-->	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has joined #haskell.tw
2013-11-24 18:00:00	suhorng	http://byorgey.wordpress.com/2010/06/29/typed-type-level-programming-in-haskell-part-i-functional-dependencies/ nice introduction
2013-11-24 19:25:28	<--	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-24 22:33:17	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-24 22:38:11	<--	godfat (~Adium@114-24-0-90.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-24 22:38:26	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-24 23:10:13	-->	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has joined #haskell.tw
2013-11-24 23:12:08	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-25 00:16:06	<--	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-25 00:39:42	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-25 00:49:12	<--	hashcat (~kv2a@118-171-194-44.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-25 09:44:32	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-25 09:46:31	<--	miaout17_ (~miaout17@miaout17.net) has quit (Ping timeout: 272 seconds)
2013-11-25 09:48:58	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-25 09:51:11	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-25 12:14:03	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-11-25 12:30:44	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-25 13:53:46	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-25 18:58:15	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-25 19:12:47	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-25 19:18:54	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-11-25 19:19:17	suhorng	一個古早的(unmaintained)的 c-repl http://neugierig.org/software/c-repl/
2013-11-25 19:19:29	suhorng	有沒有這 repl 竟然是用 Haskell 寫的八卦 XDDD
2013-11-25 19:24:03	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Ping timeout: 250 seconds)
2013-11-25 19:24:33	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-11-25 19:28:36	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Client Quit)
2013-11-25 20:27:50	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-25 20:53:05	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-25 21:38:12	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-25 23:15:14	-->	b4283 (~b4283@118.150.135.82) has joined #haskell.tw
2013-11-25 23:23:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-25 23:56:11	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2013-11-25 23:56:20	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-11-25 23:56:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-26 00:00:14	-->	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has joined #haskell.tw
2013-11-26 00:34:41	<--	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-26 00:58:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-26 01:03:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-26 01:10:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-26 01:40:03	<--	b4283 (~b4283@118.150.135.82) has quit (Ping timeout: 272 seconds)
2013-11-26 02:07:37	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-26 02:22:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-26 03:49:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-26 05:34:23	monochrom	我就說過: 在另一平行世界, Haskell 是低階語言, C 被編譯成 Haskell. 在那個樂土, 人們常問: "為甚麼 C 比 Haskell 慢數倍呢?" 然後人們就答: "因為把 C 編譯成 Haskell 後, 要用七重 monad transformers"
2013-11-26 06:01:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-26 07:00:05	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2013-11-26 07:12:37	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Ping timeout: 246 seconds)
2013-11-26 07:15:12	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-11-26 07:51:01	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Ping timeout: 248 seconds)
2013-11-26 07:53:15	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-11-26 09:58:25	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-26 10:10:34	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-26 10:20:12	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-26 10:22:14	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-26 10:57:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-26 10:57:59	darkx	lol
2013-11-26 12:05:37	mno2	聽起來好像武功很高強的樣子~
2013-11-26 12:10:18	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-11-26 12:16:45	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Ping timeout: 250 seconds)
2013-11-26 12:31:46	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-26 12:31:46	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-26 12:31:46	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-11-26 12:31:46	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia flter gko godfat hychen kanru lambdabot letoh logfat_ mno2 monochrom petercommand shik superbil_c UncleHandsome]
2013-11-26 12:31:46	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-11-26 12:32:05	--	Mode #haskell.tw [+cnt]
2013-11-26 12:32:05	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-11-26 12:32:15	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-26 13:17:45	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-26 13:24:28	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 264 seconds)
2013-11-26 13:37:50	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-26 15:05:08	<--	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has left #haskell.tw
2013-11-26 15:05:09	--	irc: disconnected from server
2013-11-26 15:05:40	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-26 15:05:40	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-26 15:05:40	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-11-26 15:05:40	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia flter gko godfat hychen kanru lambdabot letoh logfat_ mno2 monochrom petercommand shik superbil_c UncleHandsome]
2013-11-26 15:05:40	--	Channel #haskell.tw: 26 nicks (0 ops, 0 halfops, 0 voices, 26 normals)
2013-11-26 15:06:01	--	Mode #haskell.tw [+cnt]
2013-11-26 15:06:01	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-11-26 15:19:04	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 264 seconds)
2013-11-26 15:19:26	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-11-26 18:33:13	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-26 18:48:00	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-26 18:54:00	-->	hashcat (~kv2a@36.238.37.212) has joined #haskell.tw
2013-11-26 19:23:21	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-11-26 19:42:31	UncleHandsome	monochrom: 太GJ惹XDD
2013-11-26 19:49:37	-->	b4283 (~b4283@36.238.229.52) has joined #haskell.tw
2013-11-26 19:51:53	-->	godfat (~Adium@101.15.30.114) has joined #haskell.tw
2013-11-26 19:55:25	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-26 21:34:06	<--	godfat (~Adium@101.15.30.114) has quit (Ping timeout: 246 seconds)
2013-11-26 22:01:51	-->	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has joined #haskell.tw
2013-11-26 22:14:07	CindyLinz	想到幾天前 mno2 分享 Simon Marlow 的事情
2013-11-26 22:14:43	mno2	http://www.haskellcast.com/episode/004-simon-marlow-on-parallelism-and-concurrency/
2013-11-26 22:14:50	CindyLinz	聯想到小時候聽到「清香油」的廣告: 用清香油炒菜, 不必放肉絲
2013-11-26 22:15:02	CindyLinz	那麼..... 用 Haskell 寫程式, 不必測試!
2013-11-26 22:15:04	mno2	Cast 出來了，可以自己看。不過我還沒看不確定到底有沒有那段
2013-11-26 22:16:22	CindyLinz	剛剛在 g0v.tw channel 看到有人講: 「沒測多少case ..可能有很大問題 XD」的時候就想到了 XD
2013-11-26 22:16:43	CindyLinz	可是不敢講出去 XD
2013-11-26 22:17:24	mno2	能夠理解的人都跟邪教有接觸過吧 xD
2013-11-26 22:17:52	mno2	http://www.haskell.sg/   我 haskell.tw 沒買到，買到 sg  ...
2013-11-26 22:18:01	CindyLinz	可是真的理解的人, 會知道這句不是真的啊.... XDD
2013-11-26 22:19:05	CindyLinz	A: 用 Haskell 寫程式, 不必測試! B: 你又不是 Simon Marlow..
2013-11-26 22:19:23	CindyLinz	.sg... XD
2013-11-26 22:19:31	mno2	其實前提是因為他是 Simon Marlow   xDDD
2013-11-26 22:19:50	mno2	還有 Facebook 那群妖怪工程師 xD
2013-11-26 22:20:04	CindyLinz	haskell.tw 會不會是因為本 channel 的名字... 所以就被自動蟑螂註冊了? @_@"
2013-11-26 22:20:05	mno2	感覺就可以搞成 meme  xDD
2013-11-26 22:20:24	mno2	應該是我查過價錢，所以就被蟑螂註冊掉了
2013-11-26 22:20:28	CindyLinz	haskell.tw created on 2013-04-05... QQ
2013-11-26 22:20:52	mno2	不知道蟑螂有沒有釋放機制
2013-11-26 22:21:00	letoh	發現賣不掉會放出來嗎?
2013-11-26 22:21:03	CindyLinz	有吧.. 不然他是賠本生意啊
2013-11-26 22:21:12	CindyLinz	他就是要賣的啊
2013-11-26 22:23:07	letoh	我是說蟑螂啦  應該會發現沒什麼用就不再續了?
2013-11-26 22:23:08	mno2	但 tw 域名也不貴，所以也不知道會不會就養著
2013-11-26 22:23:16	suhorng	那我去瘋狂查的話, 會不會讓他一直買?
2013-11-26 22:23:23	letoh	XDXD
2013-11-26 22:23:36	mno2	也許喔，如果機器蟑螂不夠聰明的話
2013-11-26 22:26:01	letoh	剛剛聽到電視在廣告紙包雞XD
2013-11-26 22:26:08	CindyLinz	KFC.. XD
2013-11-26 22:26:30	letoh	怎麼沒有請麥太代言XD
2013-11-26 22:28:52	CindyLinz	請他代言是要吃翻面的紙嗎..... www
2013-11-26 22:29:00	letoh	XDXD
2013-11-26 22:29:09	letoh	看可以包成什麼樣子XD
2013-11-26 22:29:30	CindyLinz	把雞包上面的紙, 小心地撕下來, 然後翻面!
2013-11-26 22:29:38	CindyLinz	我是不想吃 XD
2013-11-26 22:30:11	suhorng	:t flip
2013-11-26 22:30:11	lambdabot	(a -> b -> c) -> b -> a -> c
2013-11-26 22:35:44	mno2	我最近覺得 Haskell 的 library 除了有稍嫌不足的問題外，也有跟 C++ STL 類似的問題
2013-11-26 22:36:05	mno2	就是很少人改得動 xD
2013-11-26 22:36:46	mno2	尤其是用到 edward kmett 的 lib，最好祈禱你有用的 feature 他都有寫到
2013-11-26 22:37:03	mno2	不然要加東西，你可能會需要個 PhD...
2013-11-26 22:38:38	CindyLinz	不喜歡這樣.. QQ
2013-11-26 22:38:53	hashcat	沒有reflection就是問題
2013-11-26 22:39:43	CindyLinz	還好有 open source, 稍微好一點 :p
2013-11-26 22:39:55	suhorng	還有個很麻煩的是有些 library 戳下去想找說明 連結是paper |||
2013-11-26 22:40:40	CindyLinz	而且是 pdf 格式... XD
2013-11-26 22:43:14	mno2	paper 是還好，只要寫得能讓人懂就好…
2013-11-26 22:43:34	mno2	如果是一大堆證明，就 GG 了
2013-11-26 22:44:03	CindyLinz	像是這樣的描述? # A monad is just a monoid in the category of endofunctors, what's the problem?
2013-11-26 22:44:11	suhorng	撇除掉證明, paper為了塞進12頁, 裡面的表達(程式 etc)實在有點難懂
2013-11-26 22:44:16	CindyLinz	下面詳列所用到的 reference...zz
2013-11-26 22:44:22	<--	b4283 (~b4283@36.238.229.52) has quit (Quit: 暫離)
2013-11-26 22:44:26	suhorng	一般tutorial或說明文件通常好讀多了
2013-11-26 22:44:40	hashcat	paper -> abstract -> sample and figure
2013-11-26 22:45:28	hashcat	證明不用讀吧, 給同行評議看的
2013-11-26 22:46:10	hashcat	要看就輪到定理證明機出場了
2013-11-26 22:47:23	CindyLinz	對剛剛那一句, 這個推文真不錯 XD "hopefully one that can be understood by someone who doesn't have much haskell experience" Whether or not someone can understand this quote has little to do with his Haskell experience and a lot with his maths experience/knowledge about category theory. Also understanding this quote will tell you nothing about how monads in Haskell work and how to use them. So if that's your intention, you shou
2013-11-26 22:47:34	CindyLinz	就是 A monad is just .... 那句
2013-11-26 22:48:20	-->	b4283 (~b4283@118.150.135.82) has joined #haskell.tw
2013-11-26 22:49:12	petercommand	紙包雞到底是甚麼呀@@
2013-11-26 22:49:35	CindyLinz	KFC 的餐
2013-11-26 22:49:55	petercommand	XD
2013-11-26 22:50:06	b4283	petercommand: 吳君如...
2013-11-26 22:51:28	hashcat	 A monad is just a monoid in the category of endofunctors, what's the problem? 這是在描述跟外界的關係, 一個東西之所以為東西在於他跟他外部的東西有關系或聯繫
2013-11-26 22:51:52	b4283	petercommand: https://www.youtube.com/watch?v=m3lzdVJHIXc
2013-11-26 22:53:28	petercommand	b4283: 這...XD
2013-11-26 22:53:42	hashcat	如果有一種物質跟我們沒有任何物理上的關係, 看不見聽不到摸不著也沒有任何物理手段可偵測, 他存在與否貌似對我們來說也沒啥意義
2013-11-26 22:55:08	hashcat	數學也有了這種轉向, 探討本身內部是啥不如看他跟外界是啥關係, 能牽起越多跟外部東西的關係, 他是怎樣的存在就愈明朗
2013-11-26 23:03:50	hashcat	那句話比較麻煩的是對不少人來說兩種都不能算很熟悉的東西, 先讓他們兩種概念各自建立各自的關係網再兩者聯繫, 就能搞定這互解釋怪圈了
2013-11-26 23:04:48	hashcat	雖說追根究底整個世界的概念都會陷入互解釋怪圈
2013-11-26 23:20:20	favonia	hashcat: 寫下 X 所有性質，定義為 X', 然後說 X = free X' 就好啦（逃
2013-11-26 23:21:03	suhorng	X = free X' XDDDDD
2013-11-26 23:23:32	CindyLinz	寫下 X 所有性質 ← 這是一個不會 terminate 的程序... ww
2013-11-26 23:24:22	favonia	好吧我的意思是說寫下「重要」的性質
2013-11-26 23:24:40	favonia	然後加個 final/initial/free 之類的就可以變出你要的東西了！耶！
2013-11-26 23:24:56	 *	favonia is away
2013-11-26 23:25:02	CindyLinz	XD
2013-11-26 23:28:24	-->	godfat (~Adium@114-45-184-130.dynamic.hinet.net) has joined #haskell.tw
2013-11-26 23:28:39	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-26 23:29:02	hashcat	通常討論到在大家都能接受的地方就終結了
2013-11-26 23:29:22	hashcat	數學公設作的比較徹底
2013-11-26 23:30:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-26 23:38:50	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-26 23:49:08	-->	xcycl (~liang-tin@host-78-151-175-137.as13285.net) has joined #haskell.tw
2013-11-26 23:51:24	xcycl	不過 Haskell 的 data declaration 就是 free X' 啊 ...
2013-11-26 23:59:00	<--	hashcat (~kv2a@36.238.37.212) has quit (Quit: Konversation terminated!)
2013-11-27 00:07:45	<--	suhorng (~suhorng@118-166-52-229.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-27 00:15:15	<--	xcycl (~liang-tin@host-78-151-175-137.as13285.net) has left #haskell.tw
2013-11-27 00:31:10	-->	yu_lin (24ec12af@gateway/web/freenode/ip.36.236.18.175) has joined #haskell.tw
2013-11-27 00:33:46	<--	b4283 (~b4283@118.150.135.82) has quit (Remote host closed the connection)
2013-11-27 00:59:04	<--	yu_lin (24ec12af@gateway/web/freenode/ip.36.236.18.175) has quit (Quit: Page closed)
2013-11-27 01:26:46	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-27 03:27:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-27 04:51:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-11-27 05:58:31	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-27 07:17:52	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-27 08:42:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-27 08:53:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-27 09:33:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-27 10:04:55	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-27 10:09:36	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-27 10:11:13	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-11-27 10:19:37	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-27 13:13:50	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-27 14:14:58	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-27 14:53:10	-->	yu_lin (24ec1639@gateway/web/freenode/ip.36.236.22.57) has joined #haskell.tw
2013-11-27 14:56:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-11-27 15:00:28	-->	ieshi (~ieshi@183.64.1.94) has joined #haskell.tw
2013-11-27 15:15:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-27 15:24:46	-->	hashcat (~kv2a@218-173-239-207.dynamic.hinet.net) has joined #haskell.tw
2013-11-27 15:30:22	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-11-27 15:57:28	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit
2013-11-27 16:26:18	<--	ieshi (~ieshi@183.64.1.94) has quit (Quit: 离开)
2013-11-27 16:31:00	<--	yu_lin (24ec1639@gateway/web/freenode/ip.36.236.22.57) has quit (Quit: Page closed)
2013-11-27 17:14:34	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-11-27 17:24:18	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-27 17:26:19	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-11-27 17:27:21	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-11-27 18:36:55	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-27 18:58:05	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-27 20:20:05	-->	suhorng (~suhorng@118-166-45-100.dynamic.hinet.net) has joined #haskell.tw
2013-11-27 20:27:21	-->	b4283 (~b4283@118.150.135.82) has joined #haskell.tw
2013-11-27 20:32:12	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-27 20:46:54	suhorng	CindyLinz: http://stackoverflow.com/questions/7768536/space-leaks-in-haskell 跟你遇到一樣的問題耶
2013-11-27 20:47:38	suhorng	用 IO 也要隨時注意 lazy/strict 也是滿費神的 ~"~
2013-11-27 21:11:46	CindyLinz	改名叫 Simon Marlow 比較快... QQ
2013-11-27 21:13:13	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-gciwgktvytoxynrd) has quit (Remote host closed the connection)
2013-11-27 21:13:14	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-wszuorgniobtiuie) has quit (Remote host closed the connection)
2013-11-27 21:13:29	<--	hychen (uid12518@gateway/web/irccloud.com/x-cavrysenqhixlrdv) has quit (Remote host closed the connection)
2013-11-27 21:14:04	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-hliaoqheiivnebvk) has quit (Remote host closed the connection)
2013-11-27 21:15:58	-->	caasih (~caasiHuan@114-46-78-183.dynamic.hinet.net) has joined #haskell.tw
2013-11-27 21:17:08	<--	caasih (~caasiHuan@114-46-78-183.dynamic.hinet.net) has quit (Client Quit)
2013-11-27 21:25:22	CindyLinz	suhorng: 不過也不用為此而對 Haskell 感到絕望..
2013-11-27 21:25:51	CindyLinz	平常常在寫應用程式的話, 其實每個語言都有外人看的致命傷
2013-11-27 21:26:09	CindyLinz	但是在其中用多了習慣了, 其實感覺還好...
2013-11-27 21:26:39	CindyLinz	例如說.. 在 perl 就是 circular reference 不會自動被解開來 GC, 所以我們寫程式的人就要一直去小心處理環狀連結
2013-11-27 21:26:57	CindyLinz	(其實有時候甚至是正面利用環狀連結來達到效果 :p)
2013-11-27 21:27:14	CindyLinz	而在 java.. 至少有一個是要時時小心 null ref
2013-11-27 21:27:31	CindyLinz	C 最恐怖的應該是把記憶體寫穿...
2013-11-27 21:28:00	CindyLinz	嗯, 我最近玩裝了很多 mod 的 minecraft, server 偶爾就會丟 exception 而 crash
2013-11-27 21:28:12	CindyLinz	最常遇到的就是 null exception... 各 mod 都會出.. XD
2013-11-27 21:28:55	CindyLinz	C++ 我猜 constructor / destructor 再配上 implicit convertion 所出的故事也是非常精彩
2013-11-27 21:29:25	CindyLinz	Haskell 應該就是 lazy eval 帶來的特性吧 :p
2013-11-27 21:32:12	suhorng	null ref xDD
2013-11-27 21:32:26	suhorng	記憶體寫穿是write through吧 (誤)
2013-11-27 21:32:35	CindyLinz	寫穿我指的是 array 出界之類的
2013-11-27 21:32:38	suhorng	XD
2013-11-27 21:32:55	CindyLinz	寫到不知道是哪裡.. 到時候出的 core dump 裡面的 stack trace 都不會指出出錯的位置
2013-11-27 21:33:09	CindyLinz	有特性可以看出來是記憶體寫穿....
2013-11-27 21:33:20	CindyLinz	就是每次都 core dump 在不同地方, 非常分散
2013-11-27 21:33:40	CindyLinz	但還是不知道在哪 XD
2013-11-27 21:33:47	suhorng	XDD
2013-11-27 21:34:06	mno2	我覺得 lazy 是其中一項，對於只要寫一次的程式，Haskell 就很煩。常常要為 type 轉來轉去煩惱
2013-11-27 21:34:14	CindyLinz	Java 的 null ref 和 Haskell 的 bottom 相比.. Haskell 的好處是不會有正常的程式利用 bottom 來 carry 資訊
2013-11-27 21:34:32	suhorng	假如用monad transformer的話有時候type不標出來還不給你過 XD
2013-11-27 21:34:33	CindyLinz	Java 的話就很有可能會拿 var==null 來代表某種事情
2013-11-27 21:34:58	suhorng	bottom無法辨認吧...
2013-11-27 21:35:12	mno2	但對於要看別人的程式的話，Haskell 的優勢就出來了。改別人的程式（前提不是 Edward Kmett 寫的）很容易
2013-11-27 21:35:14	CindyLinz	正常來說就是因為這樣所以比較沒這種問題
2013-11-27 21:35:24	CindyLinz	但其實 GHC 現在的實作還是可以辨認吧? XD
2013-11-27 21:35:34	CindyLinz	如果是 undefined 那種.. 可以用 catch XD
2013-11-27 21:35:43	suhorng	像是 catch exception?
2013-11-27 21:35:44	suhorng	嗯嗯
2013-11-27 21:36:13	CindyLinz	但我想會這樣子來利用的程式不多... 會少用這樣就很夠了.
2013-11-27 21:36:51	suhorng	然後感覺 java throw 要寫出來跟 monad 要寫出會有什麼 exception 超像的
2013-11-27 21:37:00	suhorng	或說有哪些副作用 (IO除外)
2013-11-27 21:37:21	suhorng	mno2: XDD
2013-11-27 21:37:26	CindyLinz	mno2: compile error 真的是很煩. XD 不過覺得跟那種執行下去會死得不明不白的感覺不太一樣...
2013-11-27 21:37:30	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-enntnozsntfsrukr) has joined #haskell.tw
2013-11-27 21:37:44	CindyLinz	compile 的時候就死得不明不白了.... (默)
2013-11-27 21:37:56	CindyLinz	因為看不懂 error message XD
2013-11-27 21:38:02	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-vwtdrwmmecoxfbkb) has joined #haskell.tw
2013-11-27 21:38:52	mno2	重點是不要上線之後死得不明不白啊 xD
2013-11-27 21:39:20	suhorng	靠 type system 的 team 呢www
2013-11-27 21:39:31	CindyLinz	可以這樣宣稱: 我們的產品是有機的, 所以有蟲是正常的...
2013-11-27 21:39:39	CindyLinz	(前幾天看來的 XD)
2013-11-27 21:39:41	petercommand	link的時候掛
2013-11-27 21:39:49	-->	hychen (uid12518@gateway/web/irccloud.com/x-dttqrwpkwpopabil) has joined #haskell.tw
2013-11-27 21:40:05	CindyLinz	suhorng: Simon Marlow 的 team 的程式活得不明不白的.. XD
2013-11-27 21:42:53	CindyLinz	其實我原本有聽說 null ref 是會製造問題的設計, 也聽說 null ref 的發明人 Tony Hoare (also qsort 的發明人) 說這是 one billion dollar mistake
2013-11-27 21:42:54	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-iqjfobjbimfcailv) has joined #haskell.tw
2013-11-27 21:43:13	CindyLinz	但是是玩了 minecraft, 而且有稍微幫忙管了一下在玩的 server, 會去看 crash report
2013-11-27 21:43:35	CindyLinz	才切實覺得它真的是很有效率的問題製造點... @@"
2013-11-27 21:43:38	mno2	有啊，yinwang 還特別寫了一篇反對，說這標題殺人
2013-11-27 21:44:20	CindyLinz	只是我們還偶爾就會遇到 jvm 層級 crash 就覺得難以理解了 orz
2013-11-27 21:44:44	CindyLinz	report 裡面就會噴一堆 jvm 裡面的暫存器之類的東西, 完全不知道能怎麼辦 zz
2013-11-27 21:45:22	mno2	不是上次 jvm 爆安全問題就一大堆人說沒救了
2013-11-27 21:45:42	CindyLinz	我們應該不是被惡意攻擊啊 XD
2013-11-27 21:46:22	mno2	啊，我的意思是，jvm crash 或出問題好像我們也不能怎樣 :p
2013-11-27 21:46:31	CindyLinz	喔 XD
2013-11-27 21:46:55	mno2	但 hotspot 好像也換不掉
2013-11-27 21:46:59	CindyLinz	我之前以為 jvm 應該超穩的, 出問題都是 app 寫爛... 但是... ww
2013-11-27 21:48:00	CindyLinz	我們那 server 的玩家真是超誇張的.. 遇到 server crash 了以後, 還會去有系統地找出來能怎麼 reproduce
2013-11-27 21:48:03	mno2	不是這幾天好像有再吵 nginx 怎樣怎樣
2013-11-27 21:48:13	CindyLinz	作出結論, 然後以後避免這樣的操作....
2013-11-27 21:48:20	CindyLinz	這... 這不是在玩遊戲啊啊
2013-11-27 21:48:24	mno2	太專業了吧
2013-11-27 21:48:41	mno2	他是遊戲測試從業人員吧 xDD
2013-11-27 21:49:01	CindyLinz	我們都互相沒問大家底細就是 XD
2013-11-27 21:50:26	CindyLinz	mno2: 欸欸.. nginx 怎樣啦 XD
2013-11-27 21:50:32	CindyLinz	用很兇, 很在意... ._.
2013-11-27 21:53:00	mno2	https://news.ycombinator.com/item?id=6799029
2013-11-27 21:53:15	CindyLinz	謝謝 :D
2013-11-27 21:53:19	mno2	我沒看內文，只是 zite 快速瞄到標題而已
2013-11-27 21:53:30	mno2	搞不好只是有人純靠盃
2013-11-27 21:56:18	CindyLinz	好 XD
2013-11-27 21:57:18	CindyLinz	他講的是 nginx 在試圖轉成收費模式的樣子
2013-11-27 21:57:27	CindyLinz	不是在講它有什麼漏洞之類的
2013-11-27 21:59:33	mno2	嗯嗯
2013-11-27 22:08:45	<--	suhorng (~suhorng@118-166-45-100.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-27 22:28:21	petercommand	dereference null pointer出來的就是null reference這樣講對嗎?
2013-11-27 22:29:00	CindyLinz	dereference null pointer 出來的是.... 不會出來吧 ^^|
2013-11-27 22:29:19	CindyLinz	會 raise null exception 啊
2013-11-27 22:29:28	petercommand	那甚麼是null reference呀
2013-11-27 22:29:45	CindyLinz	指向虛無的意思呀..
2013-11-27 22:30:00	CindyLinz	Java 裡面可以 Object a = null;
2013-11-27 22:30:12	CindyLinz	但是 a.print() 之類的都會死
2013-11-27 22:30:36	petercommand	喔喔
2013-11-27 22:30:41	CindyLinz	它不算是一個 type, 而是 Java 裡所有的 reference type 都可以有的值
2013-11-27 23:10:52	<--	hychen (uid12518@gateway/web/irccloud.com/x-dttqrwpkwpopabil) has quit (Ping timeout: 260 seconds)
2013-11-27 23:11:20	-->	hychen (uid12518@gateway/web/irccloud.com/x-wfaxanksnelyhkke) has joined #haskell.tw
2013-11-27 23:35:14	<--	hashcat (~kv2a@218-173-239-207.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-11-27 23:36:46	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-enntnozsntfsrukr) has quit (Quit: Connection closed for inactivity)
2013-11-27 23:38:02	<--	hychen (uid12518@gateway/web/irccloud.com/x-wfaxanksnelyhkke) has quit (Quit: Connection closed for inactivity)
2013-11-28 00:09:18	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-iqjfobjbimfcailv) has quit (Quit: Connection closed for inactivity)
2013-11-28 01:33:50	<--	b4283 (~b4283@118.150.135.82) has quit (Remote host closed the connection)
2013-11-28 01:49:06	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-28 01:56:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-28 03:07:11	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-vwtdrwmmecoxfbkb) has quit (Quit: Connection closed for inactivity)
2013-11-28 04:16:44	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-28 07:29:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-11-28 07:55:27	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has joined #haskell.tw
2013-11-28 09:57:37	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-28 10:00:47	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 272 seconds)
2013-11-28 10:02:09	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-28 10:17:50	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has joined #haskell.tw
2013-11-28 10:18:25	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-28 10:44:28	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-28 11:37:37	-->	hychen (uid12518@gateway/web/irccloud.com/x-pcvqjvmivrlgfqsc) has joined #haskell.tw
2013-11-28 13:02:55	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-28 13:32:36	-->	yu_lin (24ec13c2@gateway/web/freenode/ip.36.236.19.194) has joined #haskell.tw
2013-11-28 13:45:27	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-28 13:52:52	yu_lin	我在 Control.Concurrent 的 forkIO 中看到這段   case (fork# action_plus s) of (# s1, tid #) -> (# s1, ThreadId tid #)
2013-11-28 13:53:12	yu_lin	那個 # s1 中的 # 是什麼？
2013-11-28 14:56:48	monochrom	(# x, y #) 是 GHC 的特有 unboxed tuple
2013-11-28 14:59:10	monochrom	因此, 要把 "(#" 看成一個 token, "#)" 看成一個 token
2013-11-28 16:20:08	-->	hashcat (~kv2a@36.238.34.100) has joined #haskell.tw
2013-11-28 16:47:17	CindyLinz	正常的 ( x , y ) 在記憶體裡面應該是 [(), [x], [y]]  (每一組 [] 代表一個指標, 可能是個 thunk, 也可能解下去出來是個 bottom)
2013-11-28 16:48:29	CindyLinz	歐 (# x , y #) 在記憶體裡面是 [(), x, y]
2013-11-28 16:48:57	CindyLinz	(為什麼會打出 歐.. orz)
2013-11-28 16:49:11	kanru	歐~
2013-11-28 16:50:34	CindyLinz	所以用起來比較快, access x, y 的時候可以少一層 deref, 不過如果這整個 (# x , y #) 不是 bottom 的話, x 和 y 都不能是 bottom
2013-11-28 16:50:53	petercommand	呦~~
2013-11-28 16:52:20	CindyLinz	然後在 GHC 裡面定義 data OO = ... 的時候可以在 member 的 type 前面打 ! 代表這個 field 不會是 bottom (否則整個 record 是 bottom)
2013-11-28 16:52:40	CindyLinz	它額外提供一個 compile 選項是自動把這種 field 都 unbox 掉
2013-11-28 16:54:48	CindyLinz	不知道這邊的 x y 如果是像 Maybe a 這種 type, 兩個 branch 的長度不一樣, unbox 完會長什麼樣子 @@"
2013-11-28 18:11:51	b4283	喲~~~
2013-11-28 18:16:53	hashcat	union?
2013-11-28 18:18:40	hashcat	至少可以說會隨著分枝增加而增加不合理
2013-11-28 18:28:06	CindyLinz	union 的話就是取最大的那一個
2013-11-28 18:29:45	CindyLinz	感覺合理
2013-11-28 19:03:50	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-28 19:07:19	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-28 19:13:19	hashcat	考慮真要吵的話, 誰會吵贏這樣
2013-11-28 20:27:21	CindyLinz	hashcat: ??
2013-11-28 21:09:16	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-28 21:10:11	-->	suhorng (~suhorng@118-166-45-100.dynamic.hinet.net) has joined #haskell.tw
2013-11-28 21:16:11	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Ping timeout: 265 seconds)
2013-11-28 21:19:25	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-28 21:29:58	-->	b4283 (~b4283@118.150.135.82) has joined #haskell.tw
2013-11-28 21:43:15	hashcat	就要怎設計編譯器, 貌似不是像union取最大的方案都吵不贏
2013-11-28 22:11:50	hashcat	idris版本號進了一小步
2013-11-28 22:31:21	suhorng	馬上裝來玩
2013-11-28 22:32:51	hashcat	你的一大步
2013-11-28 22:33:47	suhorng	可以在現實世界跑的 depend type PL www
2013-11-28 22:33:54	suhorng	***depend
2013-11-28 22:33:57	suhorng	***dependent
2013-11-28 22:34:00	hashcat	其實我不知道自己在講啥, 只是想亂套名言
2013-11-28 22:34:23	hashcat	也要請得到人用
2013-11-28 22:34:59	suhorng	XD
2013-11-28 22:36:14	hashcat	dependent type要怎翻譯
2013-11-28 22:36:30	suhorng	相依型別如何
2013-11-28 22:37:12	hashcat	應該是英文這名字原本就取得不好才會這麼難翻
2013-11-28 22:37:20	hashcat	不知道ㄟ
2013-11-28 22:37:56	hashcat	為啥是相依不是依賴
2013-11-28 22:38:07	hashcat	雖說兩者都看不出意義
2013-11-28 22:40:06	suhorng	剛好跟 linearly dependent 翻譯成線性相依合 (呃 不過也都沒關聯就是)
2013-11-28 22:40:58	suhorng	Effect package好像滿有趣的
2013-11-28 22:43:49	hashcat	這語言啥麼都有趣
2013-11-28 22:44:32	CindyLinz	dependent - a. 懸垂的, 吊著的
2013-11-28 22:44:43	CindyLinz	dependent type 叫作 吊型 好了? :p
2013-11-28 22:45:14	hashcat	嗯很有周董的味道
2013-11-28 22:48:31	hashcat	最近已經夠冷了
2013-11-28 22:49:14	hashcat	相依型別, 解釋成數值和型別互相依賴
2013-11-28 22:49:20	hashcat	好像解釋的通
2013-11-28 22:50:22	CindyLinz	懸吊式類型系統不好嗎.. 拿來用在剎車系統之類的聽起來好像就很厲害 XD
2013-11-28 22:50:59	suhorng	需要防鎖死(compiling)呀 :P
2013-11-28 22:52:44	CindyLinz	totality 和 dependent type 應該沒有連帶關係吧, 只是剛好 Coq Agda 都是兩者都有這樣 ^^|
2013-11-28 22:52:46	hashcat	天氣真的夠冷了 :P
2013-11-28 22:54:57	favonia	idris 有 IRC channel 喔
2013-11-28 22:55:13	suhorng	比 agda 的還熱鬧...XD
2013-11-28 22:55:26	favonia	我雖然都掛著... 但沒在看 xD
2013-11-28 22:55:43	suhorng	idris不用保證totality? 那他要怎麼確保compiler不會跑到無窮迴圈?
2013-11-28 22:56:13	CindyLinz	suhorng: 沒, 我只是在講 懸吊式類型系統, 不一定有防鎖死的特性 XD
2013-11-28 22:56:13	suhorng	有些東西想在 Agda 中試卻因為 totality 不知道怎麼弄進去QQ
2013-11-28 22:56:23	suhorng	xDDD
2013-11-28 22:56:49	favonia	suhorng: 像什麼啊
2013-11-28 22:58:13	CindyLinz	那來掛一下 idris channel 看看...
2013-11-28 22:58:14	suhorng	favonia: 給個 functor => 弄出 free monad
2013-11-28 22:58:21	hashcat	Agda跟idris有很多一樣的人
2013-11-28 22:59:29	suhorng	還有上次看那篇 Agda tutorial 才知道 recursive datatype (給個functor取least fixed point那個)可以怎麼寫進去...
2013-11-28 23:35:16	<--	hashcat (~kv2a@36.238.34.100) has quit (Ping timeout: 260 seconds)
2013-11-28 23:37:39	<--	suhorng (~suhorng@118-166-45-100.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-29 00:38:17	<--	yu_lin (24ec13c2@gateway/web/freenode/ip.36.236.19.194) has quit (Quit: Page closed)
2013-11-29 00:48:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-11-29 01:36:32	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-29 01:52:01	<--	b4283 (~b4283@118.150.135.82) has quit (Remote host closed the connection)
2013-11-29 05:59:27	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-29 05:59:28	<--	godfat (~Adium@114-45-184-130.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-11-29 07:07:56	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has joined #haskell.tw
2013-11-29 07:17:06	-->	hashcat (~kv2a@218-173-232-121.dynamic.hinet.net) has joined #haskell.tw
2013-11-29 10:05:04	-->	favonia (~favonia@pool-71-126-36-200.pitbpa.east.verizon.net) has joined #haskell.tw
2013-11-29 10:05:04	<--	favonia (~favonia@pool-71-126-36-200.pitbpa.east.verizon.net) has quit (Changing host)
2013-11-29 10:05:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-29 10:21:54	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-29 10:25:12	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-29 12:58:37	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-29 13:35:11	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-11-29 14:20:32	CindyLinz	Comments are considered harmful.. XDD https://www.facebook.com/chernhan.ou/posts/10152034511049060
2013-11-29 15:14:55	mno2	我想寫一個 hackage 範例補充的 Chrome extension，不知道有沒有人有興趣
2013-11-29 15:15:39	mno2	可以針對 package 中的 function 自動在 client side 安插一小段 HTML，把蒐集來的範例顯示出來
2013-11-29 15:16:27	mno2	也就是一個 (package-name, version, function-name) 來決定顯示出一些 hpaste, gist 等等
2013-11-29 15:17:08	mno2	同時可以讓使用者貼 gist, haste 連結來 suggest 要顯示哪些範例
2013-11-29 15:17:30	mno2	反向的話，可以根據使用度，來推薦哪些 package 比較熱門
2013-11-29 15:17:59	mno2	如果範例多，可以自動開 issue 給作者，請他加進原始文件中
2013-11-29 15:36:18	CindyLinz	有趣耶
2013-11-29 15:39:51	<--	hychen (uid12518@gateway/web/irccloud.com/x-pcvqjvmivrlgfqsc) has quit (Ping timeout: 264 seconds)
2013-11-29 15:39:51	<--	logfat_ (~cinch@home.mno2.org) has quit (Ping timeout: 264 seconds)
2013-11-29 15:39:58	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2013-11-29 15:40:09	-->	hychen (uid12518@gateway/web/irccloud.com/x-tboagfvejauinsbz) has joined #haskell.tw
2013-11-29 15:49:15	mno2	CindyLinz 有興趣嗎？  （話說我 tmonad 設計想好但工作太忙一直都沒空動 LOL)
2013-11-29 15:50:17	mno2	這個 app 應該蠻簡單的，科技熟的人搞不好週末一天就寫完了
2013-11-29 15:58:29	CindyLinz	mno2: 有~
2013-11-29 15:59:04	CindyLinz	你可以整理一下想要的功能嗎?
2013-11-29 16:01:24	mno2	口頭描述的剛剛都講啦，你有推薦畫 wireframe 的軟體嗎？
2013-11-29 16:07:59	CindyLinz	沒做過 orz
2013-11-29 16:08:06	CindyLinz	我都是 vim 開起來就寫了.... zz
2013-11-29 16:08:53	CindyLinz	這個用來推荐的「使用度」.. 有這種統計喔?
2013-11-29 16:09:18	letoh	請問一下 wireframe 是指什麼?  3d rendering 的那種 wireframe 嗎? XD
2013-11-29 16:09:28	CindyLinz	還是說, 由這個 extension 來統計這個 package doc 被閱覽的不重複人數?
2013-11-29 16:09:41	CindyLinz	不重複人數, 和... 時間.. 之類的
2013-11-29 16:15:00	mno2	letoh: http://balsamiq.com/
2013-11-29 16:15:59	mno2	CindyLinz: server 會有 log 啊，還是會有一個 server 存  (package-name, version, function-name) -> snippets, 跟 query 次數的 counter
2013-11-29 16:16:15	mno2	extension 就從 server 拿就好
2013-11-29 16:16:44	mno2	你想要的話也可以加 like / unlike
2013-11-29 16:17:21	mno2	反正想個公式，想要蒐集什麼資料，前端加一加
2013-11-29 16:17:43	letoh	唔，看起來像是初期規劃或打草稿用的平台
2013-11-29 16:18:23	mno2	做 web 或 app 時，講 wireframe 通常是這樣工具做出來的草稿
2013-11-29 16:18:31	letoh	瞭解
2013-11-29 16:21:32	CindyLinz	mno2: 嗯, 所以不是 hackage 來的某個數據
2013-11-29 16:21:41	CindyLinz	cabal 安裝量之類的 :p
2013-11-29 16:22:14	mno2	CindyLinz: 要的話，也可以使用啊。反正 extension 只要在頁面上，什麼都可以拿到。
2013-11-29 16:22:26	CindyLinz	因為我不知道 hackage 有沒有這個啦 ^^|
2013-11-29 16:22:32	mno2	hackage 2 有
2013-11-29 16:22:45	CindyLinz	喔喔~~
2013-11-29 16:22:53	mno2	應該說下載量啦，不是安裝量
2013-11-29 16:23:06	CindyLinz	反正應該是正比 XD
2013-11-29 16:23:18	mno2	yes
2013-11-29 16:27:39	mno2	不知道這個 proejct 要叫什麼名字
2013-11-29 16:28:10	mno2	example combinator
2013-11-29 16:29:08	mno2	lazy documentation
2013-11-29 16:29:17	mno2	我喜歡後者 xDD
2013-11-29 16:30:31	mno2	有種不死到臨頭不寫 doc 的感覺
2013-11-29 16:55:46	CindyLinz	lazy 不錯 :p
2013-11-29 16:56:02	CindyLinz	LazyDoc
2013-11-29 16:56:09	CindyLinz	可是不會放進 hackage XD
2013-11-29 16:59:43	mno2	non-strict documentation
2013-11-29 17:05:23	CindyLinz	比較喜歡 Lazy.. XD
2013-11-29 17:25:40	--	You are now known as drbean_
2013-11-29 17:26:03	-->	drbean_ (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-11-29 17:26:03	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-11-29 17:26:03	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-11-29 17:26:03	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean drbean_ favonia flter gko godfat1 hashcat hychen kanru lambdabot letoh logfat_ mno2 monochrom petercommand shik superbil_c UncleHandsome]
2013-11-29 17:26:03	--	Channel #haskell.tw: 28 nicks (0 ops, 0 halfops, 0 voices, 28 normals)
2013-11-29 17:26:21	--	Mode #haskell.tw [+cnt]
2013-11-29 17:26:21	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-11-29 17:26:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-11-29 17:26:58	<--	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has quit (*.net *.split)
2013-11-29 17:27:01	--	You are now known as drbean
2013-11-29 17:34:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-29 18:37:08	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-11-29 19:16:49	-->	hashcat_ (~kv2a@218-173-232-121.dynamic.hinet.net) has joined #haskell.tw
2013-11-29 19:17:19	<--	hashcat (~kv2a@218-173-232-121.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-11-29 19:31:36	--	hashcat_ is now known as hashcat
2013-11-29 19:50:59	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-11-29 19:54:11	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-29 20:39:31	CindyLinz	mno2: 一則一則留言/眉批式的比較好, 還是 wiki 式的比較好呢?
2013-11-29 20:39:52	CindyLinz	gist / haste 的話應該是留言/眉批式的..
2013-11-29 20:40:44	mno2	https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack?hl=en  我希望有點像這樣
2013-11-29 20:41:13	mno2	其實可以抓回來 cache，不過就比較複雜一點
2013-11-29 20:41:25	mno2	我是想說用 pgrest 就可以很快解決 xD
2013-11-29 20:41:30	mno2	剛好今天很紅
2013-11-29 20:46:26	mno2	要不然來趕個潮流來用 firebase
2013-11-29 20:55:26	CindyLinz	後端要架哪也是有一點傷腦筋
2013-11-29 20:55:39	CindyLinz	不過是可以把眼睛閉起來先寫程式, 寫完再來傷腦筋 XD
2013-11-29 20:56:28	CindyLinz	pgrest 要找一台能架 postgresql 的機器吧? @@"
2013-11-29 20:56:42	CindyLinz	我們這個應該是 document based 的東西?
2013-11-29 20:58:36	CindyLinz	因為是 user generated content, 比較會需要修改修正的功能
2013-11-29 20:59:35	CindyLinz	哇 他這個還有去分析人家裡面的語法語意喔? 把實際呼叫哪個函數都抓出來 @@"
2013-11-29 21:41:57	mno2	有需要我可以去開一台 digitaloceans
2013-11-29 21:42:38	mno2	如果要 cache 的話，firebase 大概不太夠用
2013-11-29 21:42:51	mno2	sourcegraph 就是 yinwang 現在的公司啊 xD
2013-11-29 21:44:23	CindyLinz	原來他現在在工作啊...
2013-11-29 21:44:34	CindyLinz	不過有他在的地方... 分析語意就跟喝水一樣吧 XD
2013-11-29 21:46:09	mno2	應該吧 xD
2013-11-29 21:46:45	mno2	我剛剛睡起來，我先清醒一下等一下再來想後端要怎樣
2013-11-29 21:48:55	CindyLinz	wiki 式的, backend 是 git 這樣..? XD
2013-11-29 21:50:18	CindyLinz	可是 comment, note 式的比較好做.. @@"
2013-11-29 21:50:35	mno2	對啊
2013-11-29 21:50:59	mno2	wiki 感覺太麻煩了
2013-11-29 21:52:07	CindyLinz	可是 wiki 被整理過比較好用.. (閃閃)
2013-11-29 21:52:27	CindyLinz	有想要先只 focus 在使用範例嗎?
2013-11-29 21:53:01	CindyLinz	每一則都是「一段程式碼 + 這段程式碼的說明」
2013-11-29 21:53:18	CindyLinz	只是這樣.. LazyDoc 名字就取太大了 :p
2013-11-29 21:56:31	CindyLinz	嗯, 看一下你原始的提議的確是只要有範例補充
2013-11-29 21:56:50	CindyLinz	那就先這樣好了.
2013-11-29 22:05:56	mno2	被整理過的確比較好用，前提是有人整理 xD
2013-11-29 22:06:35	mno2	我是覺得先做範理補充，丟出來看社群反應
2013-11-29 22:06:47	mno2	有好評再看看要不要做 wiki
2013-11-29 22:31:19	CindyLinz	嗯嗯
2013-11-29 22:36:11	-->	Yu_lin (24ec1429@gateway/web/freenode/ip.36.236.20.41) has joined #haskell.tw
2013-11-29 23:57:51	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-11-30 00:05:33	mno2	CindyLinz: 突然發現 hpaste 還有 clone to IDE 的功能： http://lpaste.net/96372
2013-11-30 00:10:14	-->	suhorng (~suhorng@118-166-45-100.dynamic.hinet.net) has joined #haskell.tw
2013-11-30 00:14:26	suhorng	mno2: 好希望!!!
2013-11-30 00:15:01	suhorng	mno2: 我想到 sourcegraph.com ...
2013-11-30 00:15:44	mno2	suhorng: 去應徵啊~
2013-11-30 00:16:27	mno2	啊，是說你「聯想到」不是想去那邊工作
2013-11-30 00:17:23	suhorng	對XDD
2013-11-30 00:17:24	favonia	CindyLinz: mno2: hexamplify?
2013-11-30 00:17:56	mno2	favonia: 那是啥？
2013-11-30 00:18:03	favonia	名字 xD
2013-11-30 00:18:11	mno2	為什麼要用這個名字？
2013-11-30 00:18:21	mno2	是說你怎麼聯想到的？
2013-11-30 00:18:38	mno2	haskell + exmplify?
2013-11-30 00:18:44	favonia	喔我好像拼錯了
2013-11-30 00:18:47	favonia	hexemplify
2013-11-30 00:18:50	favonia	anyway
2013-11-30 00:18:59	favonia	exemplify 是舉例的意思啊
2013-11-30 00:19:03	mno2	我還是比較喜歡 lazy documentation  xD
2013-11-30 00:19:10	mno2	比較有梗
2013-11-30 00:19:36	mno2	I are Haskeller, we don't like documentation. We only document it when it is needed.
2013-11-30 00:19:39	mno2	We are
2013-11-30 00:20:28	suhorng	"Should we use that document?" "Its strictness analyzer is broken." (改/轉錄)
2013-11-30 00:24:36	Yu_lin	XD
2013-11-30 00:24:47	Yu_lin	lazy 過頭啦
2013-11-30 00:25:56	suhorng	其實也可以取個monad結尾的字
2013-11-30 00:26:01	suhorng	the document monad
2013-11-30 00:38:18	<--	suhorng (~suhorng@118-166-45-100.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-11-30 00:44:28	CindyLinz	mno2: 欸.. 這樣是不是應該從 hackage 裡面 parse 拉出 usage sample 啊?
2013-11-30 00:44:48	CindyLinz	mno2: 可是好難歐.. XD
2013-11-30 00:53:14	mno2	CindyLinz: 第一版先不用管那麼多吧
2013-11-30 00:53:30	mno2	CindyLinz: 之後加應該不會有衝突
2013-11-30 00:58:29	<--	Yu_lin (24ec1429@gateway/web/freenode/ip.36.236.20.41) has quit (Quit: Page closed)
2013-11-30 00:58:43	CindyLinz	mno2: 是不一樣的路線啊.. parse 這種的就不給人編輯了, 就不會有修改介面, 也不用有後端了
2013-11-30 00:59:07	CindyLinz	它就只是一個程式, 像 hoogle 那樣的程式, 跑一遍以後會出一個 offline 的 data 檔
2013-11-30 00:59:30	CindyLinz	把這個 data 檔拉到 extension 裡面, 就可以顯示了.. 也就不用租機器了 XD
2013-11-30 01:02:30	mno2	CindyLinz: 租後端機器，每筆 parse 塞成一筆 record 不就行了？
2013-11-30 01:03:20	CindyLinz	是可以啊~
2013-11-30 01:03:45	CindyLinz	只是有 parse 版, 好像就可以不用手動編輯的版本了
2013-11-30 01:04:49	CindyLinz	好吧 先把 parse 版忘掉好了.. XD
2013-11-30 01:05:18	CindyLinz	這是工人智慧 sourcegraph XD
2013-11-30 01:08:23	CindyLinz	哇, hpaste 上面最老的還有留到五年前的記錄耶
2013-11-30 01:36:11	-->	b4283 (~b4283@118.150.135.82) has joined #haskell.tw
2013-11-30 02:11:11	<--	b4283 (~b4283@118.150.135.82) has quit (Remote host closed the connection)
2013-11-30 02:11:27	 *	monochrom 的博士論文也是死到臨頭才寫的 lazy 論文. 你知道嗎? 題目正是 eager, lazy, and other executions for predicative programming
2013-11-30 02:14:37	CindyLinz	XDDD
2013-11-30 02:15:01	CindyLinz	平常是個 thunk.. 一切秘密都在自己腦海裡
2013-11-30 02:39:59	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-30 04:59:17	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-11-30 05:31:53	-->	godfat (~Adium@114-45-179-171.dynamic.hinet.net) has joined #haskell.tw
2013-11-30 07:48:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-30 10:42:28	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-30 11:00:19	-->	b4283 (~b4283@218-164-204-64.dynamic.hinet.net) has joined #haskell.tw
2013-11-30 11:02:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-30 12:23:49	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-11-30 14:32:32	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-11-30 14:43:09	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-30 15:12:40	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-30 15:45:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-30 15:56:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-11-30 19:13:49	mno2	CindyLinz: 我做了一個假的前端，你可以 checkout 裝起來看看
2013-11-30 19:23:37	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-30 19:55:33	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-30 20:23:42	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-11-30 21:08:03	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-11-30 21:10:47	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-11-30 21:45:05	mno2	https://docs.google.com/presentation/d/164YZt-A371ueTEpOQc-MtneprkDjVdMfdOrjH3xhflg/edit?pli=1#slide=id.g2968c6318_6_28   有人開始要把 rust 寫的東西弄到 production 了
2013-11-30 22:00:42	hashcat	有種蝦就這樣的感覺
2013-11-30 22:01:13	hashcat	開始撲滅C++
2013-11-30 22:01:54	suhorng	C++應該不太可能退流行...
2013-11-30 22:08:48	mno2	C++ 再戰十年
2013-11-30 22:09:38	suhorng	當然 十年之後的C++跟現在的C++還有多少相似度是另一回事
2013-11-30 22:10:19	letoh	c++14....
2013-11-30 22:16:32	mno2	今天在寫 livescript 才在想，cascades 這種用法到底是哪來的？ 用 .. 看起來好像寫程式寫得很無言的感覺 xDD
2013-11-30 22:17:08	mno2	..style  ..color
2013-11-30 22:22:18	suhorng	比較有節奏感 (LOL)
2013-11-30 22:24:15	letoh	休止符的感覺? XD
2013-11-30 22:34:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-11-30 23:15:21	suhorng	:t const id
2013-11-30 23:15:22	lambdabot	b -> a -> a
2013-11-30 23:15:33	suhorng	:t (const id) id
2013-11-30 23:15:34	lambdabot	a -> a
2013-12-01 00:28:38	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-01 00:37:13	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-01 00:57:57	<--	b4283 (~b4283@218-164-204-64.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-01 01:16:53	<--	hashcat (~kv2a@218-173-232-121.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-01 02:08:23	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-01 02:08:33	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-12-01 05:30:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-01 06:41:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-01 10:17:50	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-01 10:38:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-01 11:21:42	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-01 13:12:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-01 13:26:47	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-01 14:07:28	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-01 14:44:42	-->	hashcat (~kv2a@218-166-240-169.dynamic.hinet.net) has joined #haskell.tw
2013-12-01 15:02:09	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-01 18:44:48	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-12-01 18:49:26	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-01 19:02:51	-->	b4283 (~b4283@218-164-204-198.dynamic.hinet.net) has joined #haskell.tw
2013-12-01 19:06:56	<--	b4283 (~b4283@218-164-204-198.dynamic.hinet.net) has quit (Client Quit)
2013-12-01 19:09:25	-->	b4283 (~b4283@218-164-203-253.dynamic.hinet.net) has joined #haskell.tw
2013-12-01 19:35:59	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-12-01 20:02:41	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-01 20:16:11	-->	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has joined #haskell.tw
2013-12-01 20:20:42	<--	suhorng (~suhorng@118-166-49-96.dynamic.hinet.net) has quit (Client Quit)
2013-12-01 21:04:17	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-01 21:42:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-01 23:03:52	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-12-01 23:13:09	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-01 23:29:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-01 23:55:40	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-01 23:57:20	<--	b4283 (~b4283@218-164-203-253.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-02 00:09:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 00:12:22	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 246 seconds)
2013-12-02 00:12:30	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Ping timeout: 245 seconds)
2013-12-02 00:27:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-02 00:44:32	<--	hashcat (~kv2a@218-166-240-169.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-02 01:53:27	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-02 02:04:03	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 252 seconds)
2013-12-02 02:08:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 02:18:17	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-02 02:20:32	-->	sora_ (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-12-02 03:18:47	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-02 03:41:44	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-02 04:53:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 05:05:05	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-12-02 05:46:34	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 06:01:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-02 06:14:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 06:27:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-02 07:53:55	<--	sora_ (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Quit: leaving)
2013-12-02 07:54:08	-->	sora_ (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-12-02 08:10:02	--	sora_ is now known as UncleHandsome
2013-12-02 08:38:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 09:26:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-02 09:49:33	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-02 10:35:09	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-02 10:43:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-02 10:52:11	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2013-12-02 11:05:08	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-gpatyhkmzokcyprh) has joined #haskell.tw
2013-12-02 11:12:23	monochrom	https://github.com/treblacy/random-read
2013-12-02 11:41:41	-->	Yu_LIN (24ec17a9@gateway/web/freenode/ip.36.236.23.169) has joined #haskell.tw
2013-12-02 11:43:56	Yu_LIN	@hoogle IO () -> [IO ()] -> IO ()
2013-12-02 11:43:56	lambdabot	Network.HTTP.Base catchIO_ :: IO a -> IO a -> IO a
2013-12-02 11:43:57	lambdabot	Control.Exception.Base finally :: IO a -> IO b -> IO a
2013-12-02 11:43:57	lambdabot	Control.Exception finally :: IO a -> IO b -> IO a
2013-12-02 11:44:46	Yu_LIN	@hoogle  (IO () -> IO a) -> [IO ()] -> IO ()
2013-12-02 11:44:46	lambdabot	No results found
2013-12-02 11:44:51	Yu_LIN	@hoogle  (IO () -> IO a) -> [IO ()] -> IO a
2013-12-02 11:44:51	lambdabot	No results found
2013-12-02 12:46:38	<--	Yu_LIN (24ec17a9@gateway/web/freenode/ip.36.236.23.169) has quit (Quit: Page closed)
2013-12-02 13:02:33	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-02 13:42:08	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-02 14:13:43	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-02 17:14:59	-->	hashcat (~kv2a@36.238.36.67) has joined #haskell.tw
2013-12-02 17:52:40	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-02 18:49:22	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-02 19:20:07	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-02 22:05:03	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-02 22:06:17	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Client Quit)
2013-12-02 22:07:49	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-02 22:20:35	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-02 22:22:05	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-02 22:31:11	-->	b4283 (~b4283@218-164-127-218.dynamic.hinet.net) has joined #haskell.tw
2013-12-02 23:01:06	CindyLinz	mno2: 加了那個 theme, 初看有種眼睛一亮的感覺 :p
2013-12-02 23:01:45	mno2	哪個 theme?
2013-12-02 23:02:11	CindyLinz	mno2: lazy-doc
2013-12-02 23:02:40	mno2	你是說 code 使用 tomorrow_night_bright 嗎
2013-12-02 23:03:14	CindyLinz	嗯, 但可能只是因為跟 hackage 的色系很不搭, 所以就跳出來了 XDDD
2013-12-02 23:08:10	mno2	是啊
2013-12-02 23:08:21	mno2	我用 livescript 你應該不會介意吧 xDD
2013-12-02 23:09:18	CindyLinz	我著墨的部分不要用它就是了 XD
2013-12-02 23:10:15	mno2	你著墨什麼部分？ xD
2013-12-02 23:10:44	CindyLinz	反正我只碰沒有 livescript 的部分 XD
2013-12-02 23:10:46	mno2	CindyLinz: 其實我寫了一下整體來說也不太喜歡 xD  但好像暫時也找不到更好的
2013-12-02 23:11:13	mno2	我大概只會用某些子集吧
2013-12-03 00:19:35	<--	hashcat (~kv2a@36.238.36.67) has quit (Ping timeout: 245 seconds)
2013-12-03 00:32:51	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 00:32:56	CindyLinz	mno2: 那個.. fully_qualified_funcs 裡面各項, 它們的 fqn share 了同一個 obj 所以內容完全一樣... QQ
2013-12-03 00:33:33	CindyLinz	mno2: 然後.. fetchExamples 要改成 async 的, 不然不方便 fetch remote 的東西..
2013-12-03 00:33:34	mno2	CindyLinz: func-name 也一樣嗎？
2013-12-03 00:33:41	CindyLinz	mno2: 對, 全部一樣
2013-12-03 00:34:00	CindyLinz	只是剛好我看的 module  Network.Socket 只有 func-name 有必要不一樣
2013-12-03 00:34:10	CindyLinz	所以一開始我在想為什麼這一欄會 share
2013-12-03 00:34:18	CindyLinz	研究研究發現其實整個 obj 都 share
2013-12-03 00:34:20	mno2	O嗯嗯
2013-12-03 00:34:28	mno2	寫錯了
2013-12-03 00:35:14	mno2	async 不是可以用 back call ? 不能直接包在 function 裡面嗎？
2013-12-03 00:35:39	CindyLinz	我是讀 .js 版 XD
2013-12-03 00:35:51	CindyLinz	但我想應該不能包在 function 裡吧
2013-12-03 00:36:01	CindyLinz	如果外面是要這個 function 的 return
2013-12-03 00:36:12	CindyLinz	裡面 async 了, 外面就拿不到結果了才對...
2013-12-03 00:36:27	CindyLinz	這是底層機器語言 (javascript) 說的... XDDD
2013-12-03 00:37:59	mno2	backcall 不就是把 async 寫成 sync 的樣子
2013-12-03 00:38:15	CindyLinz	那 compile 出來的 javascript 長怎樣? @@"
2013-12-03 00:38:38	mno2	我不知道耶，我還沒寫 server 所以就還沒寫 backcall
2013-12-03 00:38:45	mno2	你可以去 livescript 網站看看
2013-12-03 00:38:54	CindyLinz	我以為呼叫 fetchExamples 的地方就要用 backcall 的方式寫吧
2013-12-03 00:39:12	CindyLinz	不要逼我學 livescript... QQ
2013-12-03 00:40:35	mno2	用到 async 的 lib 再寫不就好了？
2013-12-03 00:40:56	CindyLinz	我可以直接改 hackage.js 嗎? QQ
2013-12-03 00:41:25	mno2	那這樣 livescript 不就白寫了 xD
2013-12-03 00:41:41	CindyLinz	所以.. 所以我才丟 issue 給你嘛.. QQ
2013-12-03 00:41:45	CindyLinz	我的如意算盤是
2013-12-03 00:41:57	mno2	live script 對我最大的價值就是 back call  xD
2013-12-03 00:42:08	CindyLinz	如果你把這邊 livescript 改好了, 我就寫一個 什麼什麼.js 把 fetchExamples 函數換掉
2013-12-03 00:42:27	CindyLinz	那就不會破壞掉你 ls 的結構呀
2013-12-03 00:43:28	mno2	喔喔，也可以啊，不過我不確定你要寫什麼功能
2013-12-03 00:43:40	CindyLinz	寫後端, 用 hpaste
2013-12-03 00:44:05	CindyLinz	在 author 的地方 encode package 和 method
2013-12-03 00:44:08	mno2	後端你要用什麼寫？
2013-12-03 00:44:28	CindyLinz	版號就存在 content 裡面, 因為我想跨版本還是很有參考價值的
2013-12-03 00:44:49	CindyLinz	後端... 後端是 hpaste 寫的, 我不寫 XD
2013-12-03 00:45:16	CindyLinz	原本想用 HaskellWiki, 剛剛找找發現不給創帳號了..
2013-12-03 00:45:25	CindyLinz	然後 HaskellWiki 又有擔心被 spam 的問題
2013-12-03 00:45:30	mno2	不太懂.. 你是要寫「寫後端」的動作嗎？
2013-12-03 00:46:01	CindyLinz	就是跳一個 textarea 給 user 貼 example, 還有把貼入的 example fetch 出來的功能啊
2013-12-03 00:46:19	CindyLinz	寫後端, 還有讀後端 XD
2013-12-03 00:48:18	mno2	後半段跟我想得有點不太一樣
2013-12-03 00:48:25	CindyLinz	XDDD
2013-12-03 00:48:46	CindyLinz	我連 index 都想好了 XD
2013-12-03 00:49:09	mno2	我覺得最後顯示的 example 是投票的，不是想加就加。畢竟到時候有人貼錯了還要砍
2013-12-03 00:49:45	mno2	有點像是 recaptcha 的感覺
2013-12-03 00:49:50	CindyLinz	沒有署名, 大家都可以改啊
2013-12-03 00:50:37	mno2	那這樣就要定期 snapshot  xD
2013-12-03 00:50:43	mno2	也是可以啦
2013-12-03 00:50:50	mno2	這樣做反而簡單
2013-12-03 00:51:19	CindyLinz	hpaste 可以 browse
2013-12-03 00:51:27	CindyLinz	不過我原本想用 private 就會不能 browse
2013-12-03 00:51:43	CindyLinz	可以開一個 hpaste 來放更新列表.. 那就有 browse 了 XD
2013-12-03 00:52:06	mno2	NoSQL ...
2013-12-03 00:52:17	CindyLinz	我們這的確是 document base 的應用呀
2013-12-03 00:53:09	CindyLinz	snapshot 什麼的, 要有自己的 backend 才做 ^^|
2013-12-03 00:53:18	CindyLinz	才開始跑 :p
2013-12-03 00:53:44	CindyLinz	但還是不需要 storage.. 偶爾想到筆電開起來跑一下也就行了 :p
2013-12-03 00:54:12	CindyLinz	先去睡覺 ^^|
2013-12-03 00:54:21	mno2	就是要相信不會有人來亂就是
2013-12-03 00:55:51	CindyLinz	紅了才會有人亂呀 ^^
2013-12-03 00:55:55	<--	b4283 (~b4283@218-164-127-218.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-03 00:56:49	CindyLinz	hackage 這麼冷僻嚴峻的地方, 還好啦 :p
2013-12-03 00:59:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-03 01:46:02	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-03 02:17:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 03:25:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-03 03:57:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 04:04:53	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-12-03 04:18:34	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 05:25:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-03 05:55:23	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-03 05:58:28	<--	godfat (~Adium@114-45-179-171.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-12-03 09:56:22	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-03 10:21:50	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-03 12:07:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 13:00:39	-->	yu_lin (24ec161f@gateway/web/freenode/ip.36.236.22.31) has joined #haskell.tw
2013-12-03 13:03:16	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-03 13:38:21	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-03 14:05:52	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-03 14:07:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 15:04:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-03 15:51:51	-->	hashcat (~kv2a@1-172-235-8.dynamic.hinet.net) has joined #haskell.tw
2013-12-03 16:38:29	<--	hashcat (~kv2a@1-172-235-8.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-03 16:43:18	<--	yu_lin (24ec161f@gateway/web/freenode/ip.36.236.22.31) has quit (Quit: Page closed)
2013-12-03 17:56:44	-->	hashcat (~kv2a@118-171-192-149.dynamic.hinet.net) has joined #haskell.tw
2013-12-03 18:56:49	CindyLinz	覺得 Neo4j 的 query language 蠻有趣的.
2013-12-03 18:57:16	CindyLinz	用 pattern matching 的方式來下.. 類比於 SQL 的 where
2013-12-03 18:57:33	CindyLinz	才看一點點而已 :p
2013-12-03 18:57:44	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-03 18:58:00	CindyLinz	好像覺得... 一個這樣的 DB 「好用不好用」, 主要就是看 query language 設計得方便不方便了?
2013-12-03 19:01:00	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-03 20:09:35	-->	suhorng (~suhorng@118-166-51-135.dynamic.hinet.net) has joined #haskell.tw
2013-12-03 21:32:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 21:40:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-03 22:18:24	godfat1	然後就接到王垠的一切都是程式語言，所以都應該用 scheme? XD
2013-12-03 22:18:33	--	godfat1 is now known as godfat
2013-12-03 22:19:34	CindyLinz	scheme / lisp 應該要當中介語言吧... QQ
2013-12-03 22:20:11	CindyLinz	啊然後我說的是 Neo4j 裡一個叫作 Cypher 的語言.. 可能不是初代 Neo4j 就有的東西....
2013-12-03 22:20:22	godfat	說實在我也還是沒辦法接受 lisp 語法...
2013-12-03 22:23:53	CindyLinz	境界不足.. (逃)
2013-12-03 22:24:15	godfat	這個境界的定義是 lisp 境界的話我同意 XDD
2013-12-03 22:24:57	godfat	話說原來 netcat 種類這麼多... 不知道哪個好 @@
2013-12-03 22:24:57	godfat	http://d.hatena.ne.jp/EijiYoshida/20111109/1320800716
2013-12-03 22:25:06	suhorng	肉眼parse多層括號速度的境界(誤)
2013-12-03 22:26:01	godfat	很多人的說法都是要編輯器輔助，可是我還是覺得好的語言不應該靠外在的輔助
2013-12-03 22:26:01	godfat	我的意思是如果夠好的話，何必需要額外的輔助..?
2013-12-03 22:26:02	godfat	當然很多其實變成「環境」而非只是語言了..
2013-12-03 22:27:08	suhorng	語法可能是一回事
2013-12-03 22:27:27	suhorng	不過覺得若有 IDE 的眾多功能應該很方便?
2013-12-03 22:28:09	godfat	我剛剛心裡想的是，例如 lisp 有括號顏色對齊的功能之類的..
2013-12-03 22:28:32	CindyLinz	王垠的想法是靠 IDE 輔助吧
2013-12-03 22:28:37	godfat	不過說來這也滿有趣的，或許我們可以把顏色做到語法上 XD
2013-12-03 22:28:48	CindyLinz	應該不是直接肉眼看純文字
2013-12-03 22:28:48	godfat	我就很不喜歡靠 IDE 輔助這種想法 :(
2013-12-03 22:29:12	suhorng	這個..沒有括號顏色對齊幾乎不可寫阿...
2013-12-03 22:29:13	godfat	這樣在紙上寫程式時，還不能用鉛筆，要用色鉛筆或蠟筆 (?)
2013-12-03 22:29:16	CindyLinz	但語法如 scheme 這麼簡單的.. IDE 輔助可能就沒那麼討厭了?
2013-12-03 22:29:24	suhorng	真的XD 連粗體都不能
2013-12-03 22:29:47	suhorng	話說他提過的 ParEdit mode (某 emacs mode)是真的對 lisp 那種括號操作很好用...
2013-12-03 22:29:49	CindyLinz	godfat: netcat... 不就系統預載哪個就用哪個嗎, 挑什麼!? XD
2013-12-03 22:29:51	godfat	做起來是一回事，我只是覺得這樣感覺沒有 self-conatined 之類的感覺
2013-12-03 22:30:51	godfat	有機會我要重拾 lisp 時，可能先找找編輯器好了 ><
2013-12-03 22:30:52	godfat	ParEdit 先記著... XD
2013-12-03 22:30:52	godfat	CindyLinz, 可是用法不太一樣，我只想記得一種用法 orz
2013-12-03 22:30:59	CindyLinz	的確是不太一樣.. orz
2013-12-03 22:31:25	CindyLinz	listen tcp 的時候, BSD 版的不用 -l, linux 的要 -l...
2013-12-03 22:32:08	godfat	害我現在超怪的，在 mac 上丟到 linux 上參數要不一樣 = =...
2013-12-03 22:32:09	godfat	有時候換來換去會打結... 我現在想統一灌一種了
2013-12-03 22:36:36	suhorng	http://www.haskell.org/pipermail/haskell-cafe/2013-November/111210.html Galois在招internship耶XD 可是在波蘭..
2013-12-03 22:36:44	suhorng	婀不是
2013-12-03 22:36:58	suhorng	是波特蘭orz
2013-12-03 22:37:28	godfat	我也把波特蘭搞成波蘭過 XD
2013-12-03 22:37:46	suhorng	地理上好像有段距離QQ
2013-12-03 22:38:11	godfat	New York 和 York 也差滿遠的 XD
2013-12-03 22:38:28	suhorng	XDDDDD
2013-12-03 22:48:07	<--	suhorng (~suhorng@118-166-51-135.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-03 22:53:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-03 22:58:47	godfat	我決定改用 socat, 這樣我不用判斷 netcat 是啥版本
2013-12-03 23:02:06	letoh	socat 是接水管用的那個工具嗎?
2013-12-03 23:02:32	godfat	嗯，看起來好強大
2013-12-03 23:02:33	godfat	http://stuff.mit.edu/afs/sipb/machine/penguin-lust/src/socat-1.7.1.2/EXAMPLES
2013-12-03 23:02:56	letoh	很久以前有用過 socat，還不錯用
2013-12-03 23:03:28	godfat	不過我也希望 tcp 可以省略不打，因為我應該也只會用 tcp
2013-12-03 23:12:20	-->	b4283 (~b4283@218-164-221-7.dynamic.hinet.net) has joined #haskell.tw
2013-12-03 23:13:03	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-03 23:14:31	<--	b4283 (~b4283@218-164-221-7.dynamic.hinet.net) has quit (Client Quit)
2013-12-03 23:14:44	-->	b4283 (~b4283@218-164-221-7.dynamic.hinet.net) has joined #haskell.tw
2013-12-03 23:14:50	<--	hashcat (~kv2a@118-171-192-149.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-03 23:39:01	<--	b4283 (~b4283@218-164-221-7.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-03 23:41:55	CindyLinz	sonet 好像有點強大... 囧
2013-12-03 23:42:31	godfat	sonet 聽起來好像以前的 isp
2013-12-03 23:42:51	letoh	sonet XD
2013-12-03 23:43:04	letoh	那是 so-net
2013-12-03 23:43:08	petercommand	現在不存在了?
2013-12-03 23:43:16	letoh	還在啊
2013-12-03 23:43:31	godfat	我很久沒聽到了 XD
2013-12-03 23:43:35	petercommand	XD
2013-12-03 23:43:45	 *	letoh 剛剛 google 一下應該還在XD
2013-12-03 23:44:10	petercommand	so-net沒甚麼存在感XD
2013-12-03 23:44:55	CindyLinz	socat XD
2013-12-03 23:56:31	mno2	http://www.reddit.com/r/haskell/comments/1rx7mk/whats_the_deal_with_erik_meijer/    王垠翻版？ xD
2013-12-03 23:57:27	mno2	我想要 nyancat
2013-12-04 00:09:46	godfat	https://github.com/klange/nyancat
2013-12-04 00:30:28	godfat	影片沒看，不過看到 Edward Kmett 說..
2013-12-04 00:30:28	godfat	> I happen to disagree with him on this point, but he does seem to honestly believe it these days.
2013-12-04 00:30:28	godfat	嗯，看來路有很多方向 XD
2013-12-04 00:30:29	lambdabot	  <hint>:1:44: parse error on input `,'
2013-12-04 02:28:42	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-04 02:49:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-04 04:43:33	-->	wzy (~user@69.63.185.56) has joined #haskell.tw
2013-12-04 04:53:54	<--	wzy (~user@69.63.185.56) has left #haskell.tw ("Killed buffer")
2013-12-04 09:59:53	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-04 10:33:22	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-04 10:58:21	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 252 seconds)
2013-12-04 11:00:16	-->	flter (~Albert@140-113-124-1.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-04 11:12:33	<--	cataska (~cataska@210.64.6.233) has quit (Remote host closed the connection)
2013-12-04 11:20:00	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-12-04 12:17:09	<--	flter (~Albert@140-113-124-1.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 246 seconds)
2013-12-04 12:19:18	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-04 13:20:00	-->	mno2_ (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-04 13:20:34	-->	chihhsin_ (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-04 13:22:21	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 245 seconds)
2013-12-04 13:22:23	--	mno2_ is now known as mno2
2013-12-04 13:22:25	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 245 seconds)
2013-12-04 13:22:26	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 245 seconds)
2013-12-04 13:22:28	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 245 seconds)
2013-12-04 13:25:16	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-04 13:34:51	--	chihhsin_ is now known as chihhsin
2013-12-04 13:36:34	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Quit: leaving)
2013-12-04 13:36:49	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-04 13:39:44	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-04 13:45:03	-->	junhunz (~junhunz@59.59.115.209) has joined #haskell.tw
2013-12-04 13:45:16	junhunz	f
2013-12-04 13:45:20	junhunz	有人吗？
2013-12-04 13:45:50	<--	junhunz (~junhunz@59.59.115.209) has quit (Client Quit)
2013-12-04 14:11:44	-->	gko_ (~gko@42.71.192.168) has joined #haskell.tw
2013-12-04 14:16:37	<--	gko_ (~gko@42.71.192.168) has quit (Ping timeout: 248 seconds)
2013-12-04 14:26:48	-->	gko_ (~gko@42.71.192.168) has joined #haskell.tw
2013-12-04 14:45:00	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-04 15:44:45	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-12-04 16:14:01	-->	hashcat (~kv2a@118-171-192-149.dynamic.hinet.net) has joined #haskell.tw
2013-12-04 16:56:54	mno2	CindyLinz: 我開了一台 digitaloceans sanfrancisco,  你帳號想要用什麼？
2013-12-04 17:03:00	hashcat	亂入我也有digitaloceans
2013-12-04 17:06:36	hashcat	剛發現貌似編譯的語言少有或沒有reflection, 那就不能怪haskell也沒有了
2013-12-04 17:07:39	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-04 17:12:16	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2013-12-04 17:21:28	CindyLinz	mno2: cindy
2013-12-04 17:21:45	CindyLinz	咦, 所以一開始就要加後台了歐 ^^|
2013-12-04 17:28:37	mno2	CindyLinz: 想說來玩玩 pgrest, :p
2013-12-04 17:29:57	CindyLinz	那這樣還要存 hpaste 嗎?
2013-12-04 17:30:34	mno2	CindyLinz: 看你啊 xD
2013-12-04 17:31:00	mno2	萬一後端掛掉自動切 hpaste  xDD
2013-12-04 17:32:19	CindyLinz	呃.. 如果只拿 digitalocean 機器存備份 snapshot 的話..
2013-12-04 17:32:28	CindyLinz	喔, 可以當 hot 備援 XD
2013-12-04 17:34:22	hashcat	順便再亂入
2013-12-04 17:34:32	hashcat	我今天才知道有個協定是ddns
2013-12-04 17:36:06	hashcat	動態dns是可以動態改變ip的dns協定
2013-12-04 17:36:16	hashcat	可以用來分散覆載
2013-12-04 18:24:18	<--	gko_ (~gko@42.71.192.168) has quit (Ping timeout: 246 seconds)
2013-12-04 18:40:56	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-04 19:10:09	--	petercom1and is now known as petercommand
2013-12-04 19:24:36	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-04 20:24:50	-->	b4283 (~b4283@218-164-221-7.dynamic.hinet.net) has joined #haskell.tw
2013-12-04 20:51:51	-->	mno2 (~mno2@121.6.15.139) has joined #haskell.tw
2013-12-04 21:03:20	-->	Yu_lin (24ec14d3@gateway/web/freenode/ip.36.236.20.211) has joined #haskell.tw
2013-12-04 21:14:55	mno2	剛剛在 g0v 看到 a-tsioh 有在用 ocaml ，有人認識嗎？
2013-12-04 22:06:31	CindyLinz	mno2: 我處理了 share module_info 的問題. 不過有個有趣發現 orz
2013-12-04 22:06:46	CindyLinz	我是用 livescript.net 頁面裡的 compile 來產生 .js 檔
2013-12-04 22:07:18	CindyLinz	(不有趣的部分) 它生的檔案不會有頭尾的 (function(){   和 }).call(this)  所以這一部分我手動加一下..
2013-12-04 22:07:56	CindyLinz	(有趣的部分) 發現你原本用 livescript 1.2.0 生出來的 .js 檔裡面, isPageValid 整個不見了
2013-12-04 22:08:05	CindyLinz	包括函數定義與呼叫的部分通通都被丟掉了
2013-12-04 22:08:31	CindyLinz	我猜這是踩到 node.js ≠ browser 的地雷之一...
2013-12-04 22:09:48	CindyLinz	可能 node.js 的環境裡面沒有 window 及其內容, 所以把你那整個函數呼叫都當成 constant
2013-12-04 22:10:10	mno2	有可能 xD
2013-12-04 22:10:25	mno2	這種不會有個 warning 之類的嗎？ xD
2013-12-04 22:10:27	CindyLinz	可是我沒看懂為什麼它會認為 isPageValid 會 return true...
2013-12-04 22:10:37	CindyLinz	我怎麼知道, 是你 compile 的欸
2013-12-04 22:11:05	CindyLinz	我是丟頁面裡面的那個, 這些有出來, 然後.. 看起來應該也沒有顯示 warning 的地方
2013-12-04 22:11:21	CindyLinz	isPageValid 看起來只能 return true 或 false 或是 exception
2013-12-04 22:11:42	CindyLinz	我覺得在 node.js 環境應該是 always exception 才對 :Q
2013-12-04 22:13:19	mno2	還是我 commit 到舊的？
2013-12-04 22:13:47	-->	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-04 22:14:20	CindyLinz	噢... 你是說你的 .js 和 .ls 不是同步的?
2013-12-04 22:14:23	CindyLinz	也是有可能..
2013-12-04 22:18:59	<--	b4283 (~b4283@218-164-221-7.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-04 22:19:19	CindyLinz	mno2: 不得不說, 你的 ls 很不道地欸.. 括號那麼多! (逃)
2013-12-04 22:19:44	mno2	CindyLinz: 我就說我只會取子集寫啦 xDDD
2013-12-04 22:20:41	mno2	CindyLinz: 給我你的 gpg key ，傳密碼給你
2013-12-04 22:20:54	CindyLinz	我把 fetchExample 改成 backcall 的版本
2013-12-04 22:21:04	CindyLinz	沒有用過 gpg key ^^|
2013-12-04 22:22:23	CindyLinz	你是說 digital ocean 的密碼嗎? 直接給你我的 ssh public key 可以嗎?
2013-12-04 22:22:50	CindyLinz	這樣會不會有什麼風險啊?
2013-12-04 22:23:38	-->	b4283 (~b4283@118.150.141.236) has joined #haskell.tw
2013-12-04 22:23:46	mno2	喔喔，也可以
2013-12-04 22:26:04	CindyLinz	平常會關起來省錢嗎?
2013-12-04 22:26:39	mno2	不會啊，就開著，一個月也才 $5
2013-12-04 22:27:25	CindyLinz	也對.. 上次我在 survey 的時候是想租來開 minecraft server, 記憶體要吃 > 2G...
2013-12-04 22:27:54	mno2	開大台當然就比較貴
2013-12-04 22:28:07	CindyLinz	可是只有記憶體大, 別的部分不大嘛 QQ
2013-12-04 22:29:17	godfat	開超大 swap..?
2013-12-04 22:29:46	CindyLinz	那玩不動... ^^|
2013-12-04 22:30:03	godfat	搞不好 ssd 能這樣玩？ XD
2013-12-04 22:30:12	CindyLinz	開超大 swap 的玩法是先把想做的動作寫成 script 輸入進去給它慢慢背景跑吧.......||
2013-12-04 22:30:30	godfat	XDDD
2013-12-04 22:30:34	CindyLinz	行嗎...?? (懷疑貌)
2013-12-04 22:31:45	godfat	我只知道我開 $5/mo 的 digitalocean 本身沒有開 swap,
2013-12-04 22:31:45	godfat	結果我 ruby 有東西跑不動... 我只好幫他開
2013-12-04 22:31:45	godfat	然後發現 /tmp 的空間超小，packer 會用那邊 build 又 build 不起來
2013-12-04 22:31:45	godfat	還好可以用 TMPDIR 改暫存位置...
2013-12-04 22:32:14	godfat	不過便宜我也認了 @@
2013-12-04 22:32:20	<--	hashcat (~kv2a@118-171-192-149.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-04 22:32:47	CindyLinz	或是你用實體的筆電之類的 build 完再把 binary 搬上去?
2013-12-04 22:33:15	godfat	那我得弄 linux 或 crosscompile |||b
2013-12-04 22:33:24	CindyLinz	對喔你是用 mac...
2013-12-04 22:33:50	CindyLinz	那再開一個 $80/mo 的, 只用一個小時編完就關掉... XD
2013-12-04 22:34:07	godfat	我曾經想過，暫時加大... XD 還好後來是都解決了 @@
2013-12-04 22:34:16	CindyLinz	咦, 它可以暫時加大?
2013-12-04 22:34:22	CindyLinz	要 reboot 嗎?
2013-12-04 22:34:30	godfat	好像只能加記憶體就是了
2013-12-04 22:34:30	godfat	忘記要不要，應該要吧
2013-12-04 22:34:55	CindyLinz	不在意短期 down time 的話, 比加開方便的感覺...
2013-12-04 22:35:04	CindyLinz	比加開第二台方便的感覺
2013-12-04 22:35:33	godfat	是啊.. 開第二台我還要弄一樣的環境 XD
2013-12-04 22:36:52	CindyLinz	godfat: 哼哼, 就用你昨天找來的熱呼呼的 socat 搬啊!
2013-12-04 22:37:45	-->	hashcat (~kv2a@118-171-192-149.dynamic.hinet.net) has joined #haskell.tw
2013-12-04 22:37:49	godfat	XDDD 也是，socat 好強啊
2013-12-04 22:37:50	godfat	不不等會，單純只是要搬的話，rsync 比較方便？ XD
2013-12-04 22:38:36	CindyLinz	我還不會用 socat.. 所以我自己都是用 tar czvf - dirs | nc 目標   然後接收用 nc -l OOOO | tar xzvf -
2013-12-04 22:38:50	CindyLinz	加個 v 只是為了比較有 fu.. XD
2013-12-04 22:39:59	godfat	XDDD 我 nc 只是拿來傳 diff 而已，
2013-12-04 22:40:00	godfat	要傳目錄不用 rsync 嗎？
2013-12-04 22:40:12	CindyLinz	因為我都記不清楚 rsync 的參數... orz
2013-12-04 22:40:31	CindyLinz	好像 path 結尾有斜線或沒有斜線還會有微妙差異 orz
2013-12-04 22:40:36	godfat	難怪，不過我也都是要用時才查的，不常用都記不起來
2013-12-04 22:40:40	CindyLinz	tar 就可以有目錄了 XD
2013-12-04 22:41:15	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-12-04 22:41:59	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-04 23:17:00	<--	Yu_lin (24ec14d3@gateway/web/freenode/ip.36.236.20.211) has quit (K-Lined)
2013-12-05 00:07:22	<--	b4283 (~b4283@118.150.141.236) has quit (Read error: Connection reset by peer)
2013-12-05 00:35:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-05 00:55:04	<--	hashcat (~kv2a@118-171-192-149.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-05 01:07:30	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-05 02:21:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-05 02:42:29	<--	mno2 (~mno2@121.6.15.139) has quit (Quit: mno2)
2013-12-05 02:50:55	-->	banacorn (8c717b66@gateway/web/freenode/ip.140.113.123.102) has joined #haskell.tw
2013-12-05 02:55:17	<--	banacorn (8c717b66@gateway/web/freenode/ip.140.113.123.102) has quit (Ping timeout: 250 seconds)
2013-12-05 03:07:33	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2013-12-05 04:56:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-05 05:23:53	 *	monochrom 特地死記了 "rsync -avuz"
2013-12-05 05:55:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-05 06:08:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-05 09:55:12	-->	gko_ (~gko@220-135-201-90.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 10:03:49	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 10:18:20	<--	gko_ (~gko@220-135-201-90.HINET-IP.hinet.net) has quit (Ping timeout: 241 seconds)
2013-12-05 10:21:59	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 10:26:21	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2013-12-05 10:28:16	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-05 10:30:10	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 10:38:32	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-05 10:39:02	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-05 10:41:47	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 10:51:05	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-05 10:55:01	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 250 seconds)
2013-12-05 10:58:08	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 11:00:20	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-05 11:05:04	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-12-05 11:05:26	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 11:23:42	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-05 11:23:59	-->	gko_ (~gko@42.71.37.23) has joined #haskell.tw
2013-12-05 11:33:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-05 11:35:26	<--	gko_ (~gko@42.71.37.23) has quit (Ping timeout: 240 seconds)
2013-12-05 11:36:06	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 12:44:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-12-05 12:59:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-05 13:02:57	mno2	CindyLinz: livescript backcall 似乎外面沒辦法拿到 do 裡面最後一個值？
2013-12-05 13:12:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 250 seconds)
2013-12-05 13:32:15	mno2	http://lpaste.net/96586  這樣寫我還是不太滿意 xD
2013-12-05 13:35:15	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-05 14:09:58	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-05 14:12:51	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-05 16:22:33	-->	godfat (~Adium@114-45-181-43.dynamic.hinet.net) has joined #haskell.tw
2013-12-05 16:29:38	-->	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has joined #haskell.tw
2013-12-05 17:44:13	<--	godfat (~Adium@114-45-181-43.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-05 18:02:55	<--	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-05 18:27:14	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-05 18:39:59	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit
2013-12-05 19:01:00	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-12-05 19:04:23	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-05 19:08:23	-->	godfat (~Adium@101.8.122.194) has joined #haskell.tw
2013-12-05 19:18:39	<--	godfat (~Adium@101.8.122.194) has quit (Quit: Leaving.)
2013-12-05 19:35:12	-->	godfat (~Adium@101.8.122.194) has joined #haskell.tw
2013-12-05 20:22:46	-->	b4283 (~b4283@1-175-235-24.dynamic.hinet.net) has joined #haskell.tw
2013-12-05 20:31:47	<--	godfat (~Adium@101.8.122.194) has quit (Quit: Leaving.)
2013-12-05 20:46:54	-->	godfat (~Adium@101.8.122.194) has joined #haskell.tw
2013-12-05 20:49:05	<--	godfat (~Adium@101.8.122.194) has quit (Client Quit)
2013-12-05 21:29:11	-->	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has joined #haskell.tw
2013-12-05 22:09:15	-->	liuzhoou (~liuzhoou@101.80.76.220) has joined #haskell.tw
2013-12-05 22:25:56	<--	b4283 (~b4283@1-175-235-24.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-05 22:48:34	-->	b4283 (~b4283@1-172-83-19.dynamic.hinet.net) has joined #haskell.tw
2013-12-05 22:53:25	-->	godfat (~Adium@114-45-181-43.dynamic.hinet.net) has joined #haskell.tw
2013-12-05 22:57:23	<--	godfat (~Adium@114-45-181-43.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-05 22:59:51	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-05 23:21:21	CindyLinz	mno2: 你指的是 return 值?
2013-12-05 23:21:37	CindyLinz	mno2: backcall 和 do 應該是兩個不同的概念?
2013-12-05 23:21:54	CindyLinz	do 是當場建一個 anonymous function 並且就地呼叫它
2013-12-05 23:22:20	CindyLinz	哎, 反正 livescript 裡面兩個不同概念交會的時候就是災難的發生點嘛 XDD
2013-12-05 23:22:39	mno2	可以體會 xD
2013-12-05 23:25:47	CindyLinz	不過.. backcall... 就我從純 js 或 coffeescript 來理解的話... x <- ooo 的 x, 會拿到的是 ooo 這個函數在呼叫 callback 的時候放的參數
2013-12-05 23:25:58	CindyLinz	用 backcall 的話, ooo 的 return 值應該是丟掉的
2013-12-05 23:26:07	CindyLinz	啊, 你也可以看生出來的 code
2013-12-05 23:26:40	CindyLinz	這個會動喔!? http://lpaste.net/96586
2013-12-05 23:34:31	<--	liuzhoou (~liuzhoou@101.80.76.220) has quit (Read error: Connection reset by peer)
2013-12-05 23:39:20	mno2	後來發現不會動 xD
2013-12-05 23:39:28	CindyLinz	mno2: 我看你這一段... 嗯, product_infos 拿到的會是這一堆 do 函數的 return 值
2013-12-05 23:39:35	CindyLinz	不會有 cb 塞的 msg @@"
2013-12-05 23:40:48	CindyLinz	你可以考慮用我這個 CondVar 了 ^^| https://github.com/CindyLinz/JS-CondVar
2013-12-05 23:41:45	CindyLinz	但我沒考慮過(當然!)配合 livescript 有沒有更順的寫法..
2013-12-05 23:42:19	mno2	hmm
2013-12-05 23:43:17	CindyLinz	或手動這一段自己刻一下 (不用 CondVar), 包一個函數, 裡面附一個 counter, 等收集完所有 response 的時候再呼叫整體用的大 cb
2013-12-05 23:43:46	mno2	我是用 async.js
2013-12-05 23:43:57	CindyLinz	也是可以..
2013-12-05 23:57:26	<--	b4283 (~b4283@1-172-83-19.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-06 00:13:49	CindyLinz	mno2: 你都沒有 commit 喔?
2013-12-06 00:13:54	CindyLinz	呃.. push
2013-12-06 00:14:23	mno2	我週間都沒有動啊 xD
2013-12-06 00:14:23	mno2	沒空
2013-12-06 00:35:34	<--	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-06 00:35:49	CindyLinz	喔.. 我想說你 try 了什麼 backcall 寫法, 好奇是用在哪 :p
2013-12-06 00:37:03	-->	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has joined #haskell.tw
2013-12-06 00:40:48	mno2	CindyLinz: 其實是用在工作的 project xD
2013-12-06 00:45:58	CindyLinz	工作用 livescript.... (嘆)
2013-12-06 01:00:35	-->	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-06 01:23:59	<--	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-06 01:42:57	<--	mno2 (~mno2@bb121-6-15-139.singnet.com.sg) has quit (Quit: mno2)
2013-12-06 02:43:30	-->	liuzhoou (~liuzhoou@101.80.76.220) has joined #haskell.tw
2013-12-06 02:43:30	<--	liuzhoou (~liuzhoou@101.80.76.220) has quit (Client Quit)
2013-12-06 02:59:33	-->	liuzhoou (~liuzhoou@101.80.76.220) has joined #haskell.tw
2013-12-06 03:10:41	<--	liuzhoou (~liuzhoou@101.80.76.220) has quit (Read error: Connection reset by peer)
2013-12-06 03:12:52	-->	liuzhoou (~liuzhoou@101.80.76.220) has joined #haskell.tw
2013-12-06 03:13:07	<--	liuzhoou (~liuzhoou@101.80.76.220) has quit (Client Quit)
2013-12-06 03:49:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-06 04:52:43	-->	jle` (~mstksg@ip68-5-181-190.oc.oc.cox.net) has joined #haskell.tw
2013-12-06 05:53:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-06 06:05:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-06 06:26:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-06 07:06:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-06 09:51:52	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-06 10:04:10	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-06 10:23:44	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-06 10:51:55	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-06 11:03:09	mno2	CindyLinz: 一人 project 啊，因為要寫前端，目前看來看去好像暫時也沒有比 livescript 好的。（有考慮過 clojurescript )
2013-12-06 11:37:18	CindyLinz	我是都先用 coffeescript 等著.. ^^|
2013-12-06 11:37:29	CindyLinz	等著....更好的 js language.. XD
2013-12-06 11:39:17	mno2	CindyLinz: 你是用 iced coffeescript 還是原版的?
2013-12-06 11:55:00	mno2	新版 sourcegraph 還蠻好看的
2013-12-06 13:09:46	CindyLinz	mno2: 原版的
2013-12-06 13:11:30	CindyLinz	我原本就很習慣 CPS 的寫法, 而且也很習慣局部平行化之類的動作, iced 的特殊語法帶來的幫助好像就沒有很大
2013-12-06 13:39:43	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-06 14:28:14	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-06 14:55:18	CindyLinz	mno2: 咦, 你現在平常是在新加坡喔? 那連 digital ocean 的感受應該比我連還要卡?
2013-12-06 14:55:55	mno2	我不知道要怎麼跟你的感覺比較，但我的確是會 lag 一下
2013-12-06 14:56:12	CindyLinz	我現在 ping 大約是 125ms 上下
2013-12-06 14:56:30	CindyLinz	就打字的時候會感受到 latency, 但仍然是順的
2013-12-06 14:57:24	CindyLinz	不過我現在是在公司, 會比較快比較不準 ^^|  在家應該會再慢一截
2013-12-06 14:57:41	mno2	我大概 200ms
2013-12-06 14:58:07	CindyLinz	mmmm
2013-12-06 14:59:46	mno2	等他有亞洲的點再說 xD
2013-12-06 15:01:21	CindyLinz	對啊這真可惜.. @@"  一般亞洲點會選日本和新家坡吧 ^^
2013-12-06 15:05:16	mno2	來新加坡我就超快了 xD
2013-12-06 15:05:27	<--	mno2 (~mno2@49.128.60.52) has left #haskell.tw
2013-12-06 15:05:35	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-06 15:10:58	CindyLinz	沒錯 XD
2013-12-06 15:11:31	CindyLinz	mno2: 問問.. 在新加坡外面走路會不會壓力很大啊? 怕不小心丟了紙屑在地上之類的? @@"
2013-12-06 15:12:24	mno2	CindyLinz: 不會啊，沒那麼嚴重啦
2013-12-06 15:14:47	CindyLinz	是明顯故意才會出事?
2013-12-06 15:35:19	mno2	我沒有實驗過啊，但不是故意的話都有說話的空間
2013-12-06 15:35:49	CindyLinz	嗯嗯嗯... 好 ^^  我從小就對新加坡的故事有陰影 ^^|
2013-12-06 15:36:45	mno2	而且也不是到處都有警察啊..
2013-12-06 15:36:53	mno2	新加坡其實警察人力很缺乏
2013-12-06 15:37:24	mno2	你大概只會在機場碰到警察，路上不太會碰到
2013-12-06 15:39:20	CindyLinz	是喔.. 我對新加坡的印象還停留在法律超嚴管超細的部分 @@"
2013-12-06 16:13:47	-->	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has joined #haskell.tw
2013-12-06 16:29:18	-->	hashcat_ (~kv2a@218-166-238-147.dynamic.hinet.net) has joined #haskell.tw
2013-12-06 16:29:53	<--	hashcat_ (~kv2a@218-166-238-147.dynamic.hinet.net) has quit (Client Quit)
2013-12-06 16:34:59	<--	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-12-06 17:13:26	<--	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2013-12-06 17:35:14	-->	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has joined #haskell.tw
2013-12-06 18:18:23	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-06 18:24:05	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-06 18:59:27	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-06 19:04:59	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-06 19:30:10	-->	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-06 19:35:22	-->	mno2 (~mno2@bb116-15-92-176.singnet.com.sg) has joined #haskell.tw
2013-12-06 19:36:13	<--	mno2 (~mno2@bb116-15-92-176.singnet.com.sg) has quit (Read error: Connection reset by peer)
2013-12-06 19:38:28	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-06 20:02:56	-->	b4283 (~b4283@218-164-215-132.dynamic.hinet.net) has joined #haskell.tw
2013-12-06 20:15:07	-->	efgdgre (~wanghaido@113.97.55.242) has joined #haskell.tw
2013-12-06 20:19:36	<--	efgdgre (~wanghaido@113.97.55.242) has left #haskell.tw
2013-12-06 22:38:06	-->	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has joined #haskell.tw
2013-12-06 23:15:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-06 23:22:52	<--	hashcat (~kv2a@218-166-238-147.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-06 23:51:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-07 00:15:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 00:23:48	<--	b4283 (~b4283@218-164-215-132.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-07 00:30:54	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 246 seconds)
2013-12-07 01:00:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-07 01:26:09	<--	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-07 01:54:42	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-07 02:31:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 03:40:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-07 04:03:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 04:59:45	<--	jle` (~mstksg@ip68-5-181-190.oc.oc.cox.net) has quit (Ping timeout: 272 seconds)
2013-12-07 06:15:05	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-07 06:39:46	<--	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-12-07 06:40:31	-->	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-07 06:41:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 07:00:06	-->	hashcat (~kv2a@218-173-233-26.dynamic.hinet.net) has joined #haskell.tw
2013-12-07 08:11:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-07 09:31:57	-->	jle` (~mstksg@ip68-5-181-190.oc.oc.cox.net) has joined #haskell.tw
2013-12-07 09:53:06	-->	b4283 (~b4283@36.238.225.81) has joined #haskell.tw
2013-12-07 11:30:23	<--	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-07 11:30:51	-->	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-07 12:26:10	<--	b4283 (~b4283@36.238.225.81) has quit (Ping timeout: 246 seconds)
2013-12-07 12:43:44	-->	b4283 (~b4283@36.238.227.31) has joined #haskell.tw
2013-12-07 13:29:22	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-07 14:20:00	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-07 14:38:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 14:52:55	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-07 15:10:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-07 16:25:01	<--	miaout17 (~miaout17@miaout17.net) has quit (Quit: leaving)
2013-12-07 16:25:02	--	miaout17_ is now known as miaout17
2013-12-07 16:25:20	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-12-07 17:34:58	-->	hashcat_ (~kv2a@218-173-233-26.dynamic.hinet.net) has joined #haskell.tw
2013-12-07 17:35:39	<--	hashcat (~kv2a@218-173-233-26.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-07 17:41:03	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2013-12-07 17:41:11	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-12-07 18:16:23	--	hashcat_ is now known as hashcat
2013-12-07 18:22:22	<--	hashcat (~kv2a@218-173-233-26.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-07 18:28:20	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-07 20:12:03	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-07 20:16:20	-->	kanru` (~kanru@111-249-158-221.dynamic.hinet.net) has joined #haskell.tw
2013-12-07 20:18:14	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Ping timeout: 240 seconds)
2013-12-07 20:32:13	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-07 20:54:16	-->	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has joined #haskell.tw
2013-12-07 21:14:36	-->	liuzhoou (~liuzhoou@124.79.200.24) has joined #haskell.tw
2013-12-07 21:17:24	<--	b4283 (~b4283@36.238.227.31) has quit (Read error: Connection reset by peer)
2013-12-07 21:36:29	-->	b4283 (~b4283@218-164-206-99.dynamic.hinet.net) has joined #haskell.tw
2013-12-07 22:10:51	suhorng	http://etorreborre.blogspot.com.au/2012/06/strong-functional-programming.html total funtion(?) 很簡短的介紹
2013-12-07 22:10:53	suhorng	真有趣
2013-12-07 22:12:16	<--	kanru` (~kanru@111-249-158-221.dynamic.hinet.net) has quit (Ping timeout: 250 seconds)
2013-12-07 22:18:08	<--	liuzhoou (~liuzhoou@124.79.200.24) has quit (Read error: Connection reset by peer)
2013-12-07 22:18:15	-->	liuzhoou_ (~liuzhoou@124.79.200.24) has joined #haskell.tw
2013-12-07 22:34:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 22:45:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-07 23:33:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-07 23:42:16	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-08 00:00:38	<--	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-08 00:07:59	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-08 00:13:42	<--	b4283 (~b4283@218-164-206-99.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-08 00:27:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-08 00:30:56	-->	b4283 (~b4283@36.238.128.180) has joined #haskell.tw
2013-12-08 00:52:18	<--	b4283 (~b4283@36.238.128.180) has quit (Quit: 暫離)
2013-12-08 01:17:58	<--	liuzhoou_ (~liuzhoou@124.79.200.24) has quit (Quit: Leaving...)
2013-12-08 02:07:33	<--	gko_ (~gko@114-32-172-194.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-12-08 02:35:16	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-08 05:12:39	<--	monochrom (monokrom@216.138.220.146) has quit (Ping timeout: 246 seconds)
2013-12-08 05:15:22	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-12-08 09:47:09	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-08 11:31:30	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-08 12:20:37	-->	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has joined #haskell.tw
2013-12-08 12:28:11	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-08 12:37:51	suhorng	@hoogle f a -> Maybe a
2013-12-08 12:37:52	lambdabot	Data.Monoid getFirst :: First a -> Maybe a
2013-12-08 12:37:52	lambdabot	Data.Monoid getLast :: Last a -> Maybe a
2013-12-08 12:37:52	lambdabot	Data.Maybe listToMaybe :: [a] -> Maybe a
2013-12-08 12:38:20	suhorng	:i getFirst
2013-12-08 13:27:22	CindyLinz	我有試圖用過 Any, All, Last 之類的 Monoid....
2013-12-08 13:27:42	CindyLinz	那時初步的感想是..... 它們還是留在理論貢起來就好了 ._.
2013-12-08 13:27:51	suhorng	可讀性 ~ 0..
2013-12-08 13:28:13	suhorng	我只是想要把資料從 data type 裡面拿出來..
2013-12-08 13:30:43	CindyLinz	就.... 用了它們會把程式碼「加一層」.. 我想像應該只有寫一個超長(用程式碼計算)的一堆東西 and 起來的時候, 用 All 可能才會有點好處
2013-12-08 13:32:00	suhorng	因為他本來是打算給自訂資料結構用的？
2013-12-08 13:32:01	CindyLinz	如果把短短的 (a && (b || c) && ((d && e) || f)) 來用 Any, All 寫的話... 程式碼變超長的...
2013-12-08 13:32:12	suhorng	XDDD
2013-12-08 13:32:44	CindyLinz	我不知道它目的是什麼, 可能只是在 demo 從最基本的代數東西建構出來?
2013-12-08 13:32:56	CindyLinz	我那時試它只是想看看能不能把程式碼變「漂亮」
2013-12-08 13:33:14	CindyLinz	可是多太長了... 要一直穿衣服脫衣服..
2013-12-08 13:33:44	suhorng	我剛剛在看 Traversable, Foldable 的資料, 感覺是配合那邊用的
2013-12-08 13:33:53	suhorng	foldMap :: Monoid m => (a -> m) -> t a -> m
2013-12-08 13:34:38	CindyLinz	Traversable 我得重讀一下... ^^|
2013-12-08 13:35:09	suhorng	我才剛看　還沒找到什麼適合他用的情況
2013-12-08 13:38:06	CindyLinz	角色有一點太多 :|
2013-12-08 13:38:32	CindyLinz	就像 max-flow 演算法要拿來用的感覺, 都會覺得題目要設計得很故意 XD
2013-12-08 13:39:55	suhorng	max-flow...
2013-12-08 13:46:15	CindyLinz	有一題: 有一間餐廳, 他知道接下來每一天會有多少顧客, 要確保每位顧客能使用到一張乾淨的餐巾. 他可以選擇及時買新的(有個單價), 也可以把髒的送洗, 送洗還有兩個選項, 慢速洗要5天(某個單價), 快速洗要3天(某個單價).. 要規劃最低價的方案..
2013-12-08 13:46:25	CindyLinz	天數我是亂打的, 不過大概就這意思 :p
2013-12-08 13:48:50	CindyLinz	有上下界的最小花費最大流.... ww
2013-12-08 13:51:32	suhorng	XDD
2013-12-08 13:51:46	CindyLinz	XD # http://www.ptt.cc/bbs/joke/M.1386478958.A.06A.html
2013-12-08 13:51:55	suhorng	他最一開始不是為了解決很實用的問題嗎XD 鐵路運輸規劃之類
2013-12-08 13:52:53	suhorng	印象中利用最大流=最小割有很多很可怕的題目...連圖要怎麼建都不好想
2013-12-08 13:53:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-08 13:53:53	CindyLinz	可是角色太多了, 使得建構的時候就不是 問題->解法.. 而是先假設要用 max-flow, 然後套套看每一個參數要放在 max-flow 的哪一個角色, 然後再證明...
2013-12-08 13:54:23	CindyLinz	這過程蠻有效的.. 可是覺得不舒服.... ww
2013-12-08 13:55:14	suhorng	overflow XDDDD
2013-12-08 13:55:39	suhorng	兩個都overflow XDDDDDD
2013-12-08 14:06:20	suhorng	> tree = Node (Leaf 1) 7 (Leaf 2)
2013-12-08 14:06:20	suhorng	> ex7 = foldMap (Any . (== 1)) tree
2013-12-08 14:06:20	suhorng	> ex8 = foldMap (All . (> 5)) tree
2013-12-08 14:06:21	lambdabot	  <hint>:1:6: parse error on input `='
2013-12-08 14:06:22	lambdabot	  <hint>:1:5: parse error on input `='
2013-12-08 14:06:22	lambdabot	  can't find file: L.hs
2013-12-08 14:06:31	suhorng	http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html 這是我剛才說配合資料結構用的意思XD
2013-12-08 14:06:43	suhorng	算是 list 的 any/all 某種推廣..
2013-12-08 14:33:46	<--	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-08 14:42:11	-->	hashcat (~kv2a@1-172-190-186.dynamic.hinet.net) has joined #haskell.tw
2013-12-08 15:20:33	CindyLinz	suhorng: 用 foldr 和 foldl 不是也很好嗎? ^^|  ghc std lib 的 Data.Tree 有 instance Foldable, 所以有 foldr foldl 可以用..
2013-12-08 15:43:42	mno2	CindyLinz: 所以看起來很搞剛的題目不是都先猜 MFMC ,  wwwww
2013-12-08 15:53:35	CindyLinz	orz
2013-12-08 17:37:09	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-08 18:18:00	<--	hashcat (~kv2a@1-172-190-186.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-08 18:55:20	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-08 19:21:47	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-08 19:37:39	-->	imtinge (~imtinge@27.10.83.127) has joined #haskell.tw
2013-12-08 19:39:12	<--	imtinge (~imtinge@27.10.83.127) has quit (Client Quit)
2013-12-08 21:24:55	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-12-08 22:32:14	-->	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has joined #haskell.tw
2013-12-08 22:37:02	mno2	http://www.rethinkdb.com/blog/high-scalability-sql-and-computational-complexity/    這篇文章也是蠻有意思的。反思是否有設計龐大資料查詢語言的可能性與必要性。
2013-12-08 23:10:58	godfat	看起來意思好像是十年內都不會有一個好用的系統 XDD
2013-12-08 23:21:17	CindyLinz	十年一下就過了..
2013-12-08 23:22:00	godfat	看來我太保守了 XD 那來個三十年吧 XD
2013-12-08 23:23:25	suhorng	三十年後說不定就有夠實用的量子電腦了!
2013-12-08 23:25:01	godfat	然後可以暴力解這些問題？ XD
2013-12-08 23:25:34	CindyLinz	三十年後... 我可能就不在意了.. ww
2013-12-08 23:26:03	CindyLinz	suhorng: 有實用的量子電腦, 就會有量子電腦生出來的問題要解欸 XD
2013-12-08 23:26:06	godfat	XDDDD.... 這個回答更厲害
2013-12-08 23:26:42	suhorng	XDD
2013-12-08 23:59:55	mno2	CindyLinz: 譬如打敗 Sky Net 嗎？  wwwwww
2013-12-09 00:01:04	mno2	最終奧義:   量子電腦 -> Sky Net ->  Terminator ->  人類被消滅
2013-12-09 00:01:11	suhorng	mno2: C++ will do the job.# http://james-iry.blogspot.tw/2009/05/brief-incomplete-and-mostly-wrong.html again
2013-12-09 00:01:34	CindyLinz	QQ
2013-12-09 00:02:14	CindyLinz	不過我覺得 lim 計算能力強化 /= 自覺 XD
2013-12-09 00:12:37	<--	suhorng (~suhorng@118-166-47-44.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-09 00:36:40	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-09 01:54:32	monochrom	"量子暴力"似乎會是個很酷的名子 :)
2013-12-09 02:10:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-09 02:53:19	-->	monochrm (monokrom@216.138.220.146) has joined #haskell.tw
2013-12-09 02:54:26	<--	monochrom (monokrom@216.138.220.146) has quit (*.net *.split)
2013-12-09 02:54:28	--	monochrm is now known as monochrom
2013-12-09 03:30:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-09 08:15:08	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Quit: I die, but from the ashes I shall rise!)
2013-12-09 08:15:51	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-09 09:49:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-09 10:11:13	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-09 10:22:02	-->	gko_ (~gko@60-251-71-121.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-09 12:43:27	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-09 13:56:03	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-09 15:17:04	mno2	成立了海外分部 : http://www.meetup.com/HASKELL-SG   xD
2013-12-09 15:21:21	b4283	show girl
2013-12-09 15:22:26	CindyLinz	o.o
2013-12-09 15:34:08	mno2	show girl ?
2013-12-09 15:34:28	mno2	haskell girls ?
2013-12-09 15:35:12	mno2	其實也不是我要成立，但莫名其妙就變成我在弄了..
2013-12-09 15:37:02	b4283	mno2: 看到 SG 直覺想到 show girl 了.. 對不起 ._.
2013-12-09 15:38:37	b4283	google 圖片查 sg 出現一堆吉他..
2013-12-09 15:39:49	mno2	原來如此 xD   有 show girl 應該會紅吧 wwww
2013-12-09 15:57:32	<--	jle` (~mstksg@ip68-5-181-190.oc.oc.cox.net) has left #haskell.tw ("WeeChat 0.4.2")
2013-12-09 16:11:38	CindyLinz	Eva ST 好像有答應要 cosplay (逃)
2013-12-09 16:49:32	mno2	template haskell 跟 c++ libs 不合….
2013-12-09 16:50:02	CindyLinz	嗄? Template Haskell 會管到 FFI 喔? @@"
2013-12-09 16:54:40	mno2	CindyLinz: 因為 template haskell 似乎是用 ghci  那一套來解析的，而 ghci 無法 load C++ symbol .. so 會發生 unknown symbol
2013-12-09 16:55:41	CindyLinz	這樣能加一層純 C 的中介層來解決嗎? @@"
2013-12-09 16:56:27	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-09 16:58:31	mno2	似乎不行..  應該是 ghci 的問題
2013-12-09 16:59:28	CindyLinz	嗯... 所以是 TemplateHaskell 生出來的程式碼不可以叫用 C++ 寫的東西?
2013-12-09 17:00:05	CindyLinz	那用不是 TemplateHaskell 的 Haskell 來叫 C++, 然後 TemplateHaskell 生出來的再去叫用 Haskell 的呢?
2013-12-09 17:01:37	godfat	abi 的問題？
2013-12-09 17:11:11	mno2	不知道，有點複雜..
2013-12-09 17:11:19	mno2	http://nochair.net/posts/2011/10-03-ghc-and-cxx.html
2013-12-09 17:18:17	mno2	似乎 template haskell compile time 有另外一個 linker
2013-12-09 17:22:11	CindyLinz	mno2: 欸.. 出問題的是生出來的 code 要用 C++ lib, 還是生的過程要用到 C++ lib?
2013-12-09 17:23:41	mno2	是前者，但 Snap framework 不知道為什麼弄一弄就在生的階段也 load 進去了
2013-12-09 17:23:50	mno2	然後就 unknown symbol
2013-12-09 17:23:59	CindyLinz	噢..
2013-12-09 17:24:16	CindyLinz	覺得是 snap 才會這樣嗎? @@"
2013-12-09 17:24:41	mno2	有可能，因為他為了開發方便，好像有做一些奇特的招式
2013-12-09 17:29:36	CindyLinz	Template Haskell 不能有 circular 的 dep, 覺得應該可以自己 workaround 做兩個 pass 來弄之類的 @@"
2013-12-09 17:29:53	CindyLinz	啊不過使用 Template Haskell 的程式是埋在 snap 裡面, 那就麻煩了 orz
2013-12-09 17:36:39	mno2	用 nm 看那個 symbol 並不是 weak symbol ，搞不好是其他的 bug..
2013-12-09 17:38:46	CindyLinz	覺得 Template Haskell 結尾的 |] 不能自訂, 有點討厭 :Q
2013-12-09 17:39:03	godfat	感覺 haskell 雖然很理想，但實作問題真的不少... XD 我猜 llvm 應該有助於慢慢釐清這樣的狀況 @@
2013-12-09 17:39:21	CindyLinz	它也許可以把語法定為: [d|xxdd| .... |xxdd]
2013-12-09 17:39:35	CindyLinz	有點像 mysql 的 quote
2013-12-09 17:44:53	mno2	當然也有可能是 Mac 的問題。 xD
2013-12-09 17:48:53	CindyLinz	._.
2013-12-09 17:53:05	mno2	太複雜了，不太會修..
2013-12-09 17:54:29	CindyLinz	mno2: 那就簡易黑箱修法, 拿一台 Linux 試試看啊?
2013-12-09 18:13:35	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-09 18:13:35	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-12-09 18:13:35	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-12-09 18:13:35	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska_ chihhsin cibs CindyLinz cyt93cs drbean flter gko gko_ godfat hashcat hychen kanru lambdabot letoh logfat__ miaout17 miaout17_ mno2 monochrom petercommand shik superbil_c UncleHandsome]
2013-12-09 18:13:35	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-12-09 18:13:53	--	Mode #haskell.tw [+cnt]
2013-12-09 18:13:53	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-12-09 18:13:54	CindyLinz	去掉方便開發的一小塊, 開發起來更方便了 (Y)
2013-12-09 18:23:37	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-12-09 18:36:06	<--	gko_ (~gko@60-251-71-121.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-09 18:46:57	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-09 18:51:59	mno2	在 Linux 上無法重現，大概是 Mac 的問題了 xD
2013-12-09 18:53:57	mno2	BTW,  http://probcomp.csail.mit.edu/bayesdb/index.html  這個還蠻酷的
2013-12-09 18:54:05	mno2	跟昨天的話題有點關聯
2013-12-09 18:56:46	mno2	https://github.com/Sarwat/recdb-postgresql   沒有東西可以阻止 postgres 了 xD
2013-12-09 19:44:09	-->	b4283 (~b4283@36.238.228.96) has joined #haskell.tw
2013-12-09 19:56:45	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-09 21:11:21	CindyLinz	有趣..
2013-12-09 21:25:00	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-09 21:34:12	CindyLinz	噢.. Foreign.Storable 的 sizeOf :: a -> Int 要求實作不可以去看 a 的 value, 所以支援 Foreign.Storable 的都應該是固定長度的 type
2013-12-09 21:35:17	CindyLinz	而 hackage 上面有個 Data.Storable, 它對應的 sizeOfM 會去看 a 的值, 所以可以用可變長度的 type
2013-12-09 21:35:51	mno2	為什麼 CindyLinz 要突然看 Storable?
2013-12-09 21:36:10	CindyLinz	我之前不是說要弄一個 TCP UDP 的 tunnel
2013-12-09 21:36:39	CindyLinz	然後想用 Storable 來把資料變成 bytes, 所以就看了
2013-12-09 21:36:47	CindyLinz	雖然後來是選用 Data.Binary
2013-12-09 21:37:55	mno2	CindyLinz: 用麥片 (cereal) 就好啦
2013-12-09 21:38:32	CindyLinz	然後發現.... Data.Binary (binary package) 在 < 0.7 的時候, decode (從 binary -> data) 不會知道吃掉了多長的 binary
2013-12-09 21:39:07	CindyLinz	一直到 0.7 才加了一個 decodeOrFail, 可以在「失敗」的時候知道吃了多少發現失敗.. 但是 0.7.1 才開始知道成功時吃了多少 orz
2013-12-09 21:40:19	CindyLinz	麥片好像就跟 < 0.7 的 binary 一樣, 不知道吃了多長欸 @@"
2013-12-09 21:40:33	CindyLinz	這樣不知道下一個要從哪開始啊 @@"
2013-12-09 21:40:48	CindyLinz	用在 TCP 的部分
2013-12-09 21:42:05	CindyLinz	cereal 和 binary 的功能還真是重疊啊 ^^|
2013-12-09 21:42:18	mno2	不是用固定長的 type 嗎？
2013-12-09 21:42:48	CindyLinz	不是, 我一個「包」用來表示從某處 UDP 捎來的一個 datagram
2013-12-09 21:42:57	CindyLinz	長度是不一定的
2013-12-09 21:45:16	CindyLinz	好像也不是很大的問題啦, 可以另外再寫一個可以計算長度的函數 :Q
2013-12-09 21:45:34	CindyLinz	不過既然 0.7.1 之後的 binary 可以用, 就方便用就好了 :p
2013-12-09 22:34:13	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-09 22:44:33	-->	gko_ (~gko@111.80.17.102) has joined #haskell.tw
2013-12-09 23:01:30	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-09 23:07:37	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-09 23:28:11	<--	hashcat (~kv2a@118-171-199-239.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-09 23:55:56	<--	b4283 (~b4283@36.238.228.96) has quit (Ping timeout: 260 seconds)
2013-12-10 01:28:59	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-10 01:35:16	<--	gko_ (~gko@111.80.17.102) has quit (Ping timeout: 264 seconds)
2013-12-10 01:37:50	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-10 01:39:07	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Client Quit)
2013-12-10 06:55:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-10 08:33:08	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 252 seconds)
2013-12-10 08:33:09	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-10 08:38:57	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Remote host closed the connection)
2013-12-10 08:39:55	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-10 08:43:59	-->	shik_ (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-12-10 08:46:07	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 250 seconds)
2013-12-10 08:57:14	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 252 seconds)
2013-12-10 08:57:28	-->	a2n (~a2n@219.85.185.194) has joined #haskell.tw
2013-12-10 08:57:39	<--	a2n (~a2n@219.85.185.194) has quit (Changing host)
2013-12-10 08:57:39	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-12-10 09:23:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-10 09:25:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2013-12-10 09:26:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-10 09:30:16	<--	monochrom (monokrom@216.138.220.146) has quit (Quit: NO CARRIER)
2013-12-10 09:33:10	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-12-10 09:58:50	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-10 10:16:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-12-10 10:16:43	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-10 10:17:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-10 10:17:38	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-10 10:17:54	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-10 10:20:49	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-10 10:20:52	mno2	plv8 在 Ubuntu 13.10 沒有現成套件，裝 12.04 LTS 的 libv8 版本也不對，真麻煩 ~"~
2013-12-10 12:55:44	mno2	http://explainshell.com/  其實 explainshell 也可以做成 haskell 版本，甚至加進 lazy-doc 裡面
2013-12-10 12:56:01	mno2	基本上就是個 static analysis
2013-12-10 13:29:36	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-10 14:02:14	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-10 15:42:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-10 16:37:07	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-12-10 16:49:58	-->	hashcat (~kv2a@218-164-110-12.dynamic.hinet.net) has joined #haskell.tw
2013-12-10 17:19:42	<--	miaout17_ (~miaout17@miaout17.net) has quit (Quit: leaving)
2013-12-10 17:19:56	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-12-10 17:21:29	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-10 18:09:05	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-10 18:53:53	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-10 18:57:43	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-10 19:07:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-10 19:07:16	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-10 20:10:15	-->	b4283 (~b4283@36.238.223.32) has joined #haskell.tw
2013-12-10 20:35:32	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-10 22:28:46	<--	hashcat (~kv2a@218-164-110-12.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-10 23:16:39	<--	b4283 (~b4283@36.238.223.32) has quit (Ping timeout: 240 seconds)
2013-12-10 23:33:38	-->	b4283 (~b4283@1-175-246-213.dynamic.hinet.net) has joined #haskell.tw
2013-12-10 23:34:46	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2013-12-10 23:55:15	<--	b4283 (~b4283@1-175-246-213.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-11 00:11:39	-->	suhorng (~suhorng@118-166-52-181.dynamic.hinet.net) has joined #haskell.tw
2013-12-11 00:12:20	suhorng	https://sourcegraph.com/blog/python-static-analysis What makes Python static ananlysis hard and interesting
2013-12-11 00:21:00	mno2	https://github.com/nominolo/HTTP/commit/b9bd0a08fa09c6403f91422e3b23f08d339612eb   可以快十倍 xD
2013-12-11 00:32:18	suhorng	O(n^2) => O(n)..
2013-12-11 00:41:40	<--	suhorng (~suhorng@118-166-52-181.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-11 01:51:27	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-11 03:16:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-11 04:06:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-11 10:13:10	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-11 10:16:53	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-11 10:22:42	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-11 10:25:28	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-11 10:36:02	mno2	CindyLinz: pgrest 裝起來了
2013-12-11 10:36:30	mno2	CindyLinz: 你有想好的 schema 嗎？想好我就不用再想一遍 xD
2013-12-11 10:42:30	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-11 13:12:09	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-11 13:12:23	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-11 13:21:01	<--	monochrom (monokrom@216.138.220.146) has quit (Quit: NO CARRIER)
2013-12-11 13:25:20	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-12-11 14:17:56	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-11 14:40:55	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-11 15:15:42	hychen	裝pgrest?
2013-12-11 15:41:20	-->	hashcat (~kv2a@1-172-224-173.dynamic.hinet.net) has joined #haskell.tw
2013-12-11 16:33:17	mno2	hychen: yes,   for lazy doc project
2013-12-11 16:46:57	CindyLinz	mno2: 我想用 hpaste 存,   無．schema 啊 ^^|
2013-12-11 16:49:14	mno2	CindyLinz:  我的意思就是存的欄位啦。
2013-12-11 16:49:39	mno2	沒有 schema 但還是要知道存哪些東西吧
2013-12-11 16:51:40	CindyLinz	backup 用嗎? key: package-module-function 然後, module 和 function 可能留空
2013-12-11 16:53:54	mno2	CindyLinz: 正經一點還是要個後端 server 吧…
2013-12-11 17:06:46	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-11 17:20:07	CindyLinz	我也是認真覺得可行嘛... QQ
2013-12-11 17:36:44	hychen	what is lazy doc project?
2013-12-11 17:39:06	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Read error: Operation timed out)
2013-12-11 17:40:23	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-12-11 17:42:44	CindyLinz	hychen: 讀 hackage 的 doc 的時候, 可以由網友補上 code example
2013-12-11 17:42:52	CindyLinz	是一個 chrome extension
2013-12-11 17:45:59	CindyLinz	hychen: https://github.com/MnO2/lazy-doc/
2013-12-11 17:47:03	hychen	這樣後端為什麼要pgrest?
2013-12-11 17:47:59	CindyLinz	hychen: REST 是因為前端是 javascript app 很方便... 而 pgrest 的話.. mno2 說因為想玩 XD
2013-12-11 17:48:27	hychen	pgrest現在有pgbase喔 XD
2013-12-11 17:51:08	CindyLinz	那啥?
2013-12-11 17:51:53	CindyLinz	non-wysiwyg form builder...
2013-12-11 17:52:04	CindyLinz	我超討厭「non-xxxx」這種說明法.... ww
2013-12-11 17:52:27	CindyLinz	像是 NoSQL...
2013-12-11 17:52:46	CindyLinz	根本就什麼都沒說... ww
2013-12-11 17:57:03	CindyLinz	哼, 怒用 ``...`` operator 的方式使用 livescript!
2013-12-11 17:59:03	hychen	https://github.com/poga/yahnc
2013-12-11 17:59:43	hychen	用websocket傳data
2013-12-11 18:01:27	CindyLinz	pgbase 是 websocket server?
2013-12-11 18:06:21	hychen	client
2013-12-11 18:06:30	hychen	pgrest 現在可以支援websocket
2013-12-11 18:06:39	hychen	https://github.com/pgrest/pgrest-websocket
2013-12-11 18:07:38	CindyLinz	噢
2013-12-11 18:07:57	CindyLinz	hmmm
2013-12-11 18:10:52	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-11 18:53:19	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2013-12-11 19:11:03	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-11 19:27:05	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-11 20:06:34	-->	b4283 (~b4283@1-175-246-213.dynamic.hinet.net) has joined #haskell.tw
2013-12-11 20:23:52	<--	b4283 (~b4283@1-175-246-213.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-11 20:41:03	-->	b4283 (~b4283@218-164-217-171.dynamic.hinet.net) has joined #haskell.tw
2013-12-11 21:07:00	-->	suhorng (~suhorng@118-166-52-181.dynamic.hinet.net) has joined #haskell.tw
2013-12-11 22:04:01	hychen	CindyLinz: 現在沒啥文件 XD
2013-12-11 22:07:16	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-11 22:10:27	CindyLinz	沒關係 XD
2013-12-11 22:18:58	<--	suhorng (~suhorng@118-166-52-181.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-11 22:34:14	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Quit: Lost terminal)
2013-12-11 22:35:43	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-11 22:48:10	-->	LQYMGT (~LQYMGT@59.78.46.75) has joined #haskell.tw
2013-12-11 22:58:34	CindyLinz	hackage 裡面好像沒有 augmented tree?
2013-12-11 23:04:06	LQYMGT	想问一下《haskell趣学指南》有离线的文档吗？
2013-12-11 23:06:05	CindyLinz	我沒有看過這個..  等有看過的人來回答好了 ^^|
2013-12-11 23:06:59	LQYMGT	嗯……刚刚接触到
2013-12-11 23:08:00	CindyLinz	咦, 就是 learn you a haskell..
2013-12-11 23:08:34	CindyLinz	可以從這邊下載 https://github.com/learnyouahaskell-zh-tw/learnyouahaskell-zh-tw.github.com
2013-12-11 23:08:53	CindyLinz	右邊有個 Download ZIP
2013-12-11 23:09:04	LQYMGT	我知道……我git clone
2013-12-11 23:09:24	LQYMGT	不过我貌似装不上
2013-12-11 23:10:03	CindyLinz	把那個壓縮檔解開來, 應該不用 git, 可以直接用瀏覽器看啦?
2013-12-11 23:12:01	mno2	LQYMGT: 目前沒有主動提供，不過 letoh 有改過，用 kindlegen 可以弄成 .mobi ，或是網上找找可能也有人弄過
2013-12-11 23:12:17	mno2	LQYMGY: 或是再等等可以等到紙質版：http://book.douban.com/review/6003123/
2013-12-11 23:13:05	LQYMGT	CindyLinz: git clone 跟下载解压效果一样嘛……
2013-12-11 23:13:14	LQYMGT	mno2: 噢 好的 多谢
2013-12-11 23:13:33	CindyLinz	LQYMGT: 我以為你是說 git 裝不起來 XD
2013-12-11 23:22:13	letoh	唔  有什麼需要改的嗎?
2013-12-11 23:22:26	letoh	不太懂裝不上是什麼意思? @_@
2013-12-11 23:23:44	LQYMGT	准确地说……bundle是哪个包的？
2013-12-11 23:24:07	letoh	bundle ?
2013-12-11 23:24:27	LQYMGT	README里面不是说安装是 bundle install吗……
2013-12-11 23:24:57	letoh	為什麼會跑出 bundle XD
2013-12-11 23:25:34	mno2	LQYMGT:   http://dl.dbank.com/c0bzu2lez8
2013-12-11 23:26:25	letoh	我之前做好的 mobi 是有公開放出來啦  只是沒有簡中就是XD
2013-12-11 23:26:44	LQYMGT	letoh: http://imagebin.org/281843 这里不是写着bundle吗……
2013-12-11 23:26:55	LQYMGT	mno2: 谢了
2013-12-11 23:27:00	letoh	那個 bundle 是不是有人改錯的呢? 我手上的檔案不是這個內容XD
2013-12-11 23:27:09	LQYMGT	噗……
2013-12-11 23:27:16	letoh	我這邊寫的都是 yaourt 阿
2013-12-11 23:27:27	CindyLinz	LQYMGT: 你找到 bug 了.. ._.
2013-12-11 23:27:32	LQYMGT	。。。。。。。。。
2013-12-11 23:28:04	letoh	好像是 mno2 改的XD
2013-12-11 23:28:14	letoh	https://github.com/learnyouahaskell-zh-tw/learnyouahaskell-zh-tw.github.com/commit/ed91746f49b6b1c6110b67baffa1ac5b0179e463#diff-0a369498a5a8db3ac8fa606b544c9810
2013-12-11 23:29:15	letoh	唔  是指管理 ruby gem 的那個 bundle ?
2013-12-11 23:29:24	<--	hashcat (~kv2a@1-172-224-173.dynamic.hinet.net) has quit (Read error: Operation timed out)
2013-12-11 23:29:31	letoh	太先進了  我只會用 gem XD
2013-12-11 23:29:39	LQYMGT	yaourt install也不对啊……
2013-12-11 23:29:44	letoh	LQYMGT: http://bundler.io/
2013-12-11 23:29:47	letoh	我猜是這個
2013-12-11 23:30:20	LQYMGT	好吧=  =
2013-12-11 23:30:33	letoh	LQYMGT: https://github.com/learnyouahaskell-zh-tw/learnyouahaskell-zh-tw.github.com/blob/34d7f53d3df1d18d4b36753a6c926e36b6cc980c/README.markdown  這是前面一點的版本
2013-12-11 23:31:42	LQYMGT	要是有个pdf就好了。。
2013-12-11 23:32:06	letoh	pdf ? 這格式實在不太好XD
2013-12-11 23:32:26	LQYMGT	啊？是么……
2013-12-11 23:32:49	mno2	letoh: yes,
2013-12-11 23:33:29	letoh	LQYMGT: http://wanderer.tw/post/68483261378/open-web-2   不曉得你能不能看到這篇文章
2013-12-11 23:34:05	LQYMGT	有点慢 不过还是打开了
2013-12-11 23:37:19	LQYMGT	好吧..
2013-12-11 23:37:21	letoh	大概就是我覺得 pdf 不是拿來直接看的XD
2013-12-11 23:38:47	letoh	剛好工作上也有一點接觸  個人對 pdf 是有點反感XD
2013-12-11 23:43:59	LQYMGT	唔。。明白了，装了个FBReader来看了
2013-12-11 23:44:09	LQYMGT	多谢各位了，先睡了
2013-12-11 23:44:11	<--	LQYMGT (~LQYMGT@59.78.46.75) has quit (Quit: WeeChat 0.4.2)
2013-12-11 23:52:25	<--	b4283 (~b4283@218-164-217-171.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-12 01:55:13	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-12 07:08:54	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Read error: Connection reset by peer)
2013-12-12 07:10:03	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-12 09:50:04	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-12 10:20:33	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-12 10:22:28	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-12 10:31:03	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-12 10:33:24	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-12 10:36:05	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-12 11:08:49	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-12 11:11:56	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Read error: Connection reset by peer)
2013-12-12 11:12:06	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-12 11:12:55	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-12 11:27:46	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Read error: Connection reset by peer)
2013-12-12 11:34:47	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-12 11:58:51	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-12-12 12:19:53	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-12 12:53:02	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-12-12 12:58:36	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-12 13:01:31	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2013-12-12 13:32:19	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-12 13:38:04	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-12 13:52:39	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Ping timeout: 246 seconds)
2013-12-12 14:14:53	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-12 14:46:48	-->	godfat (~Adium@114-45-179-230.dynamic.hinet.net) has joined #haskell.tw
2013-12-12 16:36:55	-->	hashcat (~kv2a@218-166-240-43.dynamic.hinet.net) has joined #haskell.tw
2013-12-12 16:53:12	hashcat	http://shuklan.com/haskell/
2013-12-12 17:00:09	hashcat	bundle is an atom, not variable
2013-12-12 17:00:49	hashcat	bundle - Ruby Dependency Management
2013-12-12 17:02:54	hashcat	額是昨天的
2013-12-12 17:16:01	<--	hashcat (~kv2a@218-166-240-43.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-12-12 18:20:15	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-12-12 18:20:15	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-12-12 18:20:15	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-12-12 18:20:15	--	Nicks #haskell.tw: [a2n a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean flter gko godfat hychen kanru lambdabot letoh logfat__ miaout17 miaout17_ mno2 monochrom petercommand shik_ superbil_c UncleHandsome]
2013-12-12 18:20:15	--	Channel #haskell.tw: 27 nicks (0 ops, 0 halfops, 0 voices, 27 normals)
2013-12-12 18:20:33	--	Mode #haskell.tw [+cnt]
2013-12-12 18:20:33	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-12-12 18:49:24	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-12 19:07:57	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-12 19:54:04	-->	b4283 (~b4283@218-164-217-212.dynamic.hinet.net) has joined #haskell.tw
2013-12-12 20:35:44	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-12 21:14:59	-->	suhorng (~suhorng@118-166-45-165.dynamic.hinet.net) has joined #haskell.tw
2013-12-12 21:18:38	suhorng	clang還滿厲害的, 我丟這個東西給他 [](auto x) { return x(x); }
2013-12-12 21:18:51	suhorng	他遞迴一定深度後就報錯了 XDD
2013-12-12 21:27:35	-->	hashcat (~kv2a@218-166-240-43.dynamic.hinet.net) has joined #haskell.tw
2013-12-12 21:30:53	CindyLinz	...
2013-12-12 21:31:50	suhorng	回顧一下GHC：cannot construct the infinite type: t1 = t1 -> t0
2013-12-12 21:32:23	CindyLinz	suhorng: 你就這樣去教小朋友啊! # [](auto x) { return x(x); }
2013-12-12 21:34:38	hashcat	我記得以前有個人沒事嘗試寫命令把磁碟機頭移到一個奇怪的位置
2013-12-12 21:35:10	hashcat	那磁碟機就損毀了
2013-12-12 21:35:15	CindyLinz	..........................
2013-12-12 21:35:37	CindyLinz	這樣可以用保固換新嗎?
2013-12-12 21:35:42	letoh	練習 bios call ? XD
2013-12-12 21:36:01	hashcat	是unix剛出來的時候
2013-12-12 21:36:10	CindyLinz	好久遠 @@"
2013-12-12 21:36:16	hashcat	磁碟機比房子貴
2013-12-12 21:36:22	letoh	喔喔喔... unix 剛出來的時候!
2013-12-12 21:36:28	CindyLinz	對啊想起來就好貴 orz
2013-12-12 21:37:42	hashcat	那人還在書中很得意的說自己沒賠半毛錢
2013-12-12 21:37:48	suhorng	不能這樣教啦XDD
2013-12-12 21:40:46	hashcat	現在計算機便宜又安全, 大都可以亂試, 但有時還是會燒掉cpu
2013-12-12 21:45:40	CindyLinz	燒掉 CPU 應該有保固 :p
2013-12-12 21:46:11	CindyLinz	安全機制竟然沒有發生作用斷電, 廠商要負責 :D
2013-12-12 21:50:10	hashcat	有人就偏好沒有安全機制的 =P
2013-12-12 22:04:17	petercommand	hashcat: 哪本書寫的呀XD
2013-12-12 22:04:30	CindyLinz	好孩子不該看的書? XD
2013-12-12 22:06:03	petercommand	聽起來很有趣呀
2013-12-12 22:14:18	petercommand	會是叫甚麼"電腦破壞大全"之類的嗎?
2013-12-12 22:14:43	petercommand	XD
2013-12-12 22:18:21	CindyLinz	petercommand: ok, 你可以看.. 你已經明確表達你是壞小孩了 = 3=
2013-12-12 22:20:34	petercommand	= =
2013-12-12 22:28:29	CindyLinz	mno2: zepto 的 selector 遇到特殊字元是用 \ escape 嗎? @@"
2013-12-12 22:29:50	CindyLinz	#lazy-doc-\(\<\<\\) 被 zepto 抗議了
2013-12-12 22:30:19	CindyLinz	原始函數名是 (<<\)
2013-12-12 22:31:37	CindyLinz	好像是 \ 沒被 escape 到
2013-12-12 22:33:05	mno2	CindyLinz: 我是參考 jQuery 的 xD，jQuery 是用 \ 沒錯。
2013-12-12 22:34:38	hashcat	petercommand: 想不太起來, 印象中有看過而已
2013-12-12 22:35:09	CindyLinz	是 \ 沒錯.. 發現問題是這個 text.replace(/[!"#$%&'()*+,./:;<=>?@[\]^`{|}~]/g, "\\$&")
2013-12-12 22:35:10	hashcat	是不是想遙控燒掉某人手機
2013-12-12 22:35:16	CindyLinz	[ ] 中間的 \ 被當成 \]
2013-12-12 22:35:28	CindyLinz	要改成三條
2013-12-12 22:35:40	CindyLinz	js 的 regex 的 [...] 的用法
2013-12-12 22:35:47	CindyLinz	好像不能直接把 ] 放到最前面就好 @@"
2013-12-12 22:40:47	mno2	hmm..
2013-12-12 23:09:31	<--	b4283 (~b4283@218-164-217-212.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-12 23:11:32	suhorng	http://stackoverflow.com/questions/14047241/simple-example-for-impredicativetypes GHC的impredicativity有點癥結
2013-12-12 23:12:03	suhorng	說是 document page 裡面給了一個 example
2013-12-12 23:12:03	suhorng	f :: Maybe (forall a. [a] -> [a]) -> Maybe ([Int], [Char])
2013-12-12 23:12:04	suhorng	f (Just g) = Just (g [3], g "hello")
2013-12-12 23:12:04	suhorng	f Nothing  = Nothing
2013-12-12 23:12:46	suhorng	但是 > f (Just reverse) 會爆炸，必須要 f ((Just :: (forall a. [a] -> [a]) -> Maybe (forall a. [a] -> [a])) reverse) 才會成功 (我去 annotate reverse 還沒有用...)
2013-12-12 23:22:34	suhorng	還有不知道為什麼如果我開ghci不是用 ghci -XRankNTypes 而是在裡面 :set -XRankNTypes 的話就不能用 forall...
2013-12-12 23:27:58	CindyLinz	實作問題好難啊 orz
2013-12-12 23:28:38	<--	hashcat (~kv2a@218-166-240-43.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-12 23:40:31	mno2	原來 pgrest 一定要有 id 欄位
2013-12-12 23:46:36	<--	suhorng (~suhorng@118-166-45-165.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-12 23:54:58	CindyLinz	好像 post lpaste 有被擋掉.. 大概是 refer.. ww
2013-12-12 23:58:11	mno2	CindyLinz: 壞事大概已經有前人做過了
2013-12-12 23:58:45	mno2	我覺得 pgrest 還不錯用，只是有些 under document
2013-12-12 23:59:27	CindyLinz	mno2: 嘿嘿我寫過改 referer 的 chrome extension.. :p
2013-12-12 23:59:53	CindyLinz	不過今天有點累了 orz
2013-12-13 00:03:25	CindyLinz	mno2: pgrest 可以怎樣作類似 session 或 authentication 的功能啊?
2013-12-13 00:04:23	mno2	CindyLinz: authentication 就用 not exists 之類的 query 先查一遍 auth table 再說吧
2013-12-13 00:04:48	mno2	CindyLinz: session 投影片都沒提，有實作嗎？
2013-12-13 00:07:00	mno2	不過我也不是很確定一般的 session 實作方式是什麼就是
2013-12-13 00:07:18	CindyLinz	我想的只要能額外 pass 一個 token, 剩下就可以自己做了
2013-12-13 00:07:59	mno2	那理論上也是類似吧，就預定好一個 function, check session table
2013-12-13 00:08:15	CindyLinz	但是如果它沒有額外開什麼門路的話, 就變成全部都要做成 view, 多一個 field 放 token.. orz
2013-12-13 00:08:22	mno2	只是這一版好像還沒
2013-12-13 00:08:59	mno2	CindyLinz:  的確是..
2013-12-13 00:09:02	CindyLinz	那就會有很多 boilerplate codes.. 那, 手動自己包一層自動生成的 cgi 程式好像比 pgrest 還方便了 @@"
2013-12-13 00:09:33	mno2	CindyLinz: 所以不適合太複雜的 use case 吧 xD
2013-12-13 00:10:08	CindyLinz	只是多 token 就算太複雜噢? orz
2013-12-13 00:11:02	mno2	CindyLinz: token 我不知道耶，也許有奧妙的方式吧
2013-12-13 00:13:34	mno2	CindyLinz: 不過你碰過的 use case 哪些是 rest 情況還需要 session 啊？
2013-12-13 00:13:59	CindyLinz	mno2: facebook 的 graph api 就都要呀
2013-12-13 00:14:18	mno2	喔喔，沒用過 xD
2013-12-13 00:14:24	mno2	http://stackoverflow.com/questions/6068113/do-sessions-really-violate-restfulness
2013-12-13 00:14:35	CindyLinz	token 看是放在 url 裡面, 或是從 cookie 送過去
2013-12-13 00:14:59	CindyLinz	如果真的是以「session」的方式在使用它, 的確違反 rest 的精神
2013-12-13 00:15:17	CindyLinz	但如果只是用來控制存取權就還好啊
2013-12-13 00:15:25	CindyLinz	我想問題不是 rest
2013-12-13 00:15:36	CindyLinz	rest 可以總是開一個 field 放 access token
2013-12-13 00:17:07	CindyLinz	問題是 postgres 裡面的 資料-table 不可能額外有這一個 field 的
2013-12-13 00:19:04	mno2	CindyLinz: 同意
2013-12-13 00:19:34	mno2	只是提到 session 就讓我想到而已
2013-12-13 00:20:29	CindyLinz	嗯嗯嗯
2013-12-13 02:03:31	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-13 09:59:44	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-13 10:50:59	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-13 12:59:11	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-13 13:53:09	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-13 15:25:29	-->	hashcat (~kv2a@36-238-33-25.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-13 16:13:43	CindyLinz	用 cabal 寫 package 的 test suite 有辦法 import 自己的 hidden module 來測試嗎?
2013-12-13 16:14:10	CindyLinz	我在 Test-Suite 的 build-depends: 把 package name 寫進去
2013-12-13 16:14:56	CindyLinz	然後在 test 的 main-is 的 hs 檔裡面 import 自己 package 的 hidden module. cabal build 的時候被 cabal 抱怨了:
2013-12-13 16:15:08	CindyLinz	    it is a hidden module in the package `AugmentedRBTree-0.1.0.0'
2013-12-13 16:19:04	CindyLinz	嗯, 把 package 「正文」部分的 hs-source-dirs: 也加到 TestSuite 裡面讓它再 compile 一次是個解法.... ww
2013-12-13 16:19:26	CindyLinz	比暫時開成 exposed, 打包時再關掉好 XD
2013-12-13 18:07:07	CindyLinz	不知道是我腦筋不行了, 還是 paper (technicl report) 寫得很難讀.. 讀 Fully Persistent Arrays (Paul F. Dietz 1989) 讀得好想睡 orz
2013-12-13 18:20:23	hashcat	邊讀邊動手畫圖=P
2013-12-13 18:42:23	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-13 18:43:38	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-13 18:43:49	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-13 19:21:18	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-13 20:10:51	<--	hashcat (~kv2a@36-238-33-25.dynamic-ip.hinet.net) has quit (Ping timeout: 252 seconds)
2013-12-13 20:40:37	-->	hashcat (~kv2a@36.238.33.25) has joined #haskell.tw
2013-12-13 20:47:05	-->	b4283 (~b4283@36.238.226.201) has joined #haskell.tw
2013-12-13 21:24:25	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-13 22:05:56	-->	LQYMGT (~LQYMGT@59.78.46.75) has joined #haskell.tw
2013-12-13 23:47:21	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-14 00:05:25	<--	LQYMGT (~LQYMGT@59.78.46.75) has quit (Ping timeout: 245 seconds)
2013-12-14 00:40:50	<--	b4283 (~b4283@36.238.226.201) has quit (Quit: 暫離)
2013-12-14 00:42:24	-->	cyt93cs_ (~cyt93cs@140.123.101.4) has joined #haskell.tw
2013-12-14 00:44:36	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Write error: Broken pipe)
2013-12-14 01:14:45	<--	miaout17_ (~miaout17@miaout17.net) has quit (Ping timeout: 248 seconds)
2013-12-14 01:21:53	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2013-12-14 01:51:32	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-14 01:53:20	<--	hashcat (~kv2a@36.238.33.25) has quit (Ping timeout: 245 seconds)
2013-12-14 02:57:20	monochrom	黃昏讀paper係最容易睡!
2013-12-14 08:58:48	-->	b4283 (~b4283@36.238.222.112) has joined #haskell.tw
2013-12-14 09:35:35	-->	suhorng (~suhorng@118-166-55-26.dynamic.hinet.net) has joined #haskell.tw
2013-12-14 09:37:04	suhorng	上次(12月XD) functional thursday 的投影片放上去了 https://kktix.com/events/bef47a
2013-12-14 09:41:17	suhorng	CindyLinz: 後面的投影片補充了一些XD
2013-12-14 09:58:23	<--	suhorng (~suhorng@118-166-55-26.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-14 10:10:20	<--	b4283 (~b4283@36.238.222.112) has quit (Quit: 暫離)
2013-12-14 10:12:28	-->	b4283 (~b4283@218-164-202-80.dynamic.hinet.net) has joined #haskell.tw
2013-12-14 12:12:47	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 245 seconds)
2013-12-14 12:20:00	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-12-14 15:16:52	-->	hashcat (~kv2a@218-166-242-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-14 15:42:15	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 264 seconds)
2013-12-14 15:47:42	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-14 16:02:05	<--	logfat__ (~cinch@home.mno2.org) has quit (Ping timeout: 245 seconds)
2013-12-14 16:20:50	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-12-14 16:21:23	-->	logfat__ (~cinch@home.mno2.org) has joined #haskell.tw
2013-12-14 16:52:21	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2013-12-14 17:12:29	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-14 20:04:04	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-14 21:24:38	-->	suhorng (~suhorng@118-166-56-152.dynamic.hinet.net) has joined #haskell.tw
2013-12-14 22:03:29	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-14 23:53:05	<--	LQYMGT (~user@59.78.46.75) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-12-14 23:54:11	<--	suhorng (~suhorng@118-166-56-152.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-15 00:26:55	<--	b4283 (~b4283@218-164-202-80.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-15 00:28:22	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-15 00:37:08	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-15 01:29:44	-->	hashcat_ (~kv2a@218-166-242-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-15 01:30:14	<--	hashcat (~kv2a@218-166-242-61.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-12-15 01:46:43	CindyLinz	之前幫 GHC 傷腦筋, 如果把不只一個 constructor, 而且不同 constructor 的長度還不一樣的 type 的 field unpack 要怎麼做..
2013-12-15 01:46:56	CindyLinz	現在知道實際的答案了...
2013-12-15 01:47:00	CindyLinz	就是不做..... www
2013-12-15 01:47:40	CindyLinz	GHC 只會 unpack strict 而且 single constructor 的 type 的 field..
2013-12-15 02:05:38	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2013-12-15 02:07:38	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-12-15 02:40:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-15 02:55:41	<--	hashcat_ (~kv2a@218-166-242-61.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-15 03:10:25	-->	speleolog (~speleolog@91.210.100.11) has joined #haskell.tw
2013-12-15 03:10:27	<--	speleolog (~speleolog@91.210.100.11) has quit (Remote host closed the connection)
2013-12-15 03:15:14	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-15 03:17:06	<--	godfat (~Adium@114-45-179-230.dynamic.hinet.net) has quit (Ping timeout: 250 seconds)
2013-12-15 03:21:59	-->	wabramow (~wabramow@193.105.154.109) has joined #haskell.tw
2013-12-15 03:23:18	<--	wabramow (~wabramow@193.105.154.109) has quit (Read error: Connection reset by peer)
2013-12-15 06:29:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-12-15 09:12:45	<--	darkx (~x4r@unaffiliated/darkx) has quit (Quit: leaving)
2013-12-15 09:12:54	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-12-15 09:12:55	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2013-12-15 09:12:55	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-12-15 09:40:06	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-15 10:18:19	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-15 10:58:15	-->	b4283 (~b4283@218-164-206-83.dynamic.hinet.net) has joined #haskell.tw
2013-12-15 11:46:13	<--	b4283 (~b4283@218-164-206-83.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-12-15 11:46:15	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-15 12:02:49	-->	b4283 (~b4283@218-164-209-57.dynamic.hinet.net) has joined #haskell.tw
2013-12-15 12:20:34	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-15 12:46:04	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-15 13:27:54	CindyLinz	如果 OSDC 要開講, 有沒有什麼建議題目啊? :D
2013-12-15 13:35:35	CindyLinz	我初學程式, 那可意氣風發了, 說什麼 Object Oriented, Design Patterns, Agile programming, 當真是不要臉的胡吹法螺. 直到後來修習 Haskell, 才慢慢悟到了人生妙諦. 其後勤修 Type Theory, 數年之後, 終於明白了天人化生, 萬物滋長的要道.
2013-12-15 13:35:35	CindyLinz	XDD
2013-12-15 13:41:20	mno2	CindyLinz: 這是參考了邪教傳播手冊嗎？ xDD
2013-12-15 13:44:00	CindyLinz	不是歐
2013-12-15 13:44:11	CindyLinz	是金庸小說 XD
2013-12-15 13:44:31	CindyLinz	東方不敗對葵花寶典的贊辭..
2013-12-15 13:44:44	mno2	不過隨著 Haskell 越寫越多，我也漸漸有跟 yinwang 類似的感覺 xD
2013-12-15 13:44:54	CindyLinz	賀.. 囧
2013-12-15 13:45:14	CindyLinz	你明明就在寫 livescript... = 3=
2013-12-15 13:45:36	mno2	CindyLinz: 那只是一部分啊 xD
2013-12-15 13:46:02	mno2	所以最近開始在看 clojure  :p
2013-12-15 13:46:36	CindyLinz	是要幫 clojure 程式作分析?
2013-12-15 13:47:40	mno2	沒有啦，只是覺得想找一個語言環境，覺得不那麼討厭，支援平台廣，但又不會被 type 綁死的時候寫。特別是一人 project 的時候
2013-12-15 13:48:21	mno2	如果是多人 project ，我還是會傾向於有 type system 的語言
2013-12-15 13:54:21	CindyLinz	嗯嗯嗯
2013-12-15 13:58:45	mno2	我漸漸地覺得，由於現今的 type system 還是不夠自然。寫起來會有鱉腳的感覺。有點像是你要用任何 framework 必須要去滿足 framework 的邏輯。只是 system F 的表達能力當然比較制式與深入探討過。
2013-12-15 13:59:09	mno2	但某些點你還是會撞到類似讓你討厭某種 framework 的情形
2013-12-15 14:00:15	mno2	Haskell type system 是「強制」讓你繞不過去，所以大家必須被迫遵守，這樣看別人程式就輕鬆
2013-12-15 14:00:27	mno2	因為有相同邏輯
2013-12-15 14:00:53	mno2	只是起手的時候，就會需要投資一定時間，有撞牆期。
2013-12-15 14:01:40	mno2	但其他 dynamic type language 就感覺是對於 common case 的邏輯讓他變得很輕鬆，但複雜的時候，每個寫的人想法都不一樣，程式就隱藏微妙的邏輯差異
2013-12-15 14:02:02	mno2	所以最終來說，有種在探討朝三暮四或是朝四暮三的感覺 xD
2013-12-15 14:03:06	mno2	只是人類心理我認為還是比較喜歡朝三暮四 :p
2013-12-15 14:03:50	CindyLinz	我聽不出來你這個數字大代表的是比較輕鬆還是比較難過... ^^|
2013-12-15 14:04:12	mno2	喔喔，比較難過 xD
2013-12-15 14:04:31	CindyLinz	短視就對了 XD
2013-12-15 14:04:37	mno2	yes
2013-12-15 14:05:27	mno2	但如果一人 project，短時間內因為邏輯都是統一的，所以我覺得我會傾向於不要被 type system 綁死
2013-12-15 14:05:46	CindyLinz	加個條件.. 而且不需要長期維護.. @@"
2013-12-15 14:05:57	mno2	是的
2013-12-15 14:06:20	mno2	只是大多數 project，你都不知道會不會要變成長期維護 xD
2013-12-15 14:06:56	mno2	javascript 當初也只是被認為是交差了事的 project xD
2013-12-15 14:15:07	CindyLinz	我在公司的感想是一樣的....
2013-12-15 14:15:50	CindyLinz	有一個我當初敷衍亂寫的 project 被一直用下去了...
2013-12-15 14:16:50	CindyLinz	現在超過一半的玩家流量都會用到它... 而且它還開枝散葉, 別的工程式 fork 它繼續做新 project... orz
2013-12-15 14:17:05	CindyLinz	我認真寫的 project 大部分都滅了... zz
2013-12-15 14:18:10	mno2	CindyLinz: 我認為這也是軟體開發的最大困難，你無法預知到底事情會怎樣進行。最好的方式就是不要預測，然後即時因應。但這也是有一定極限存在，甚至也有取捨。
2013-12-15 14:19:00	mno2	CindyLinz 是反指標 xDDD  跟你合作 project 要反著做
2013-12-15 14:20:32	CindyLinz	那... 我 lazy-doc 還是亂寫亂寫比較好... zz
2013-12-15 14:21:14	favonia	CindyLinz: 可以先定一個介面強迫大家用嗎
2013-12-15 14:21:23	favonia	CindyLinz: 這樣子以後要整個改寫還有希望
2013-12-15 14:22:30	favonia	CindyLinz: 不如 lazy-doc 就用 livescript 先亂寫吧（咦咦咦
2013-12-15 14:22:51	CindyLinz	lazy-doc 是用 livescript 沒錯啊... ww
2013-12-15 14:23:03	CindyLinz	但是我都在裡面寫 `` javascript ``
2013-12-15 14:23:04	CindyLinz	wwww
2013-12-15 14:23:11	CindyLinz	這是無聲的抗議....||
2013-12-15 14:23:12	favonia	這麼說來新的 shell 應該也要用 livescript 寫才對（咦）
2013-12-15 14:23:36	mno2	這才是劣即是夯的真義，亂寫的 project 比較容易紅 (誤)
2013-12-15 14:23:46	favonia	名稱可以叫作 jail 嗎
2013-12-15 14:23:51	CindyLinz	shell 這樣... 會不會刪檔案的時候常刪錯啊... zz
2013-12-15 14:24:11	favonia	CindyLinz: 反正又不會真的刪掉(??????)
2013-12-15 14:24:50	favonia	先閃人
2013-12-15 14:26:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-15 15:18:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-15 15:37:11	CindyLinz	喔, 你把名字叫 jail, 指的就只是一個 sandbox 喔 XD
2013-12-15 16:49:30	-->	hashcat_ (~kv2a@218-166-242-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-15 18:13:25	<--	hashcat_ (~kv2a@218-166-242-61.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-15 18:14:12	-->	hashcat (~kv2a@218-166-242-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-15 19:31:23	mno2	CindyLinz: 我把 api.lazydoc.haskell.sg 指到那台後端了
2013-12-15 19:31:40	mno2	我沒有 haskell.tw 所以我只能指 haskell.sg  xD
2013-12-15 19:37:43	-->	suhorng (~suhorng@118-166-56-152.dynamic.hinet.net) has joined #haskell.tw
2013-12-15 20:19:43	suhorng	@hoogle Maybe (m a) -> m (Maybe a)
2013-12-15 20:19:44	lambdabot	Data.Traversable sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)
2013-12-15 20:19:44	lambdabot	Data.Traversable sequence :: (Traversable t, Monad m) => t (m a) -> m (t a)
2013-12-15 20:19:44	lambdabot	Control.Applicative optional :: Alternative f => f a -> f (Maybe a)
2013-12-15 20:26:46	CindyLinz	mno2: 反正你現在是 sg 人.. XD
2013-12-15 20:27:32	suhorng	:t \x -> case x of {Just a -> return (Just a); Nothing -> mzero}
2013-12-15 20:27:33	lambdabot	MonadPlus m => Maybe a -> m (Maybe a)
2013-12-15 20:28:13	suhorng	:t \m -> m >>= \x -> case x of {Just a -> return a; Nothing -> mzero}
2013-12-15 20:28:14	lambdabot	MonadPlus m => m (Maybe b) -> m b
2013-12-15 20:33:01	suhorng	:t \x -> case x of {Just ma -> Just <$> ma; Nothing -> return Nothing}
2013-12-15 20:33:02	lambdabot	(Monad f, Functor f) => Maybe (f a) -> f (Maybe a)
2013-12-15 20:47:34	<--	suhorng (~suhorng@118-166-56-152.dynamic.hinet.net) has quit (Ping timeout: 265 seconds)
2013-12-15 20:57:28	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2013-12-15 21:08:47	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-15 22:23:54	-->	liuzhoou (~liuzhoou@124.78.232.224) has joined #haskell.tw
2013-12-15 23:31:29	<--	liuzhoou (~liuzhoou@124.78.232.224) has quit (Quit: Leaving...)
2013-12-16 00:17:09	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-16 00:57:15	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-16 01:19:34	<--	hashcat (~kv2a@218-166-242-61.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-16 02:34:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-16 03:57:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-16 04:28:43	monochrom	type theory 竟成了葵花寶典, 辟邪劍法 XD
2013-12-16 05:11:34	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-16 05:56:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-16 06:09:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-16 06:41:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-16 07:35:32	CindyLinz	是內功! XD
2013-12-16 07:54:10	-->	gorionds (~gorionds@91.210.101.64) has joined #haskell.tw
2013-12-16 08:00:17	<--	gorionds (~gorionds@91.210.101.64) has quit (Remote host closed the connection)
2013-12-16 08:53:12	<--	b4283 (~b4283@218-164-209-57.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-16 09:07:34	CindyLinz	Haskell 代入的那個位置才是葵花寶典 XDD
2013-12-16 09:45:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-12-16 09:48:16	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-16 10:03:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-16 10:13:01	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-16 10:14:35	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-16 10:25:37	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-16 11:01:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-16 11:26:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-16 11:35:48	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-16 11:39:38	CindyLinz	原來這個是可以投稿程式的呀.. http://benchmarksgame.alioth.debian.org/
2013-12-16 11:39:57	CindyLinz	那可以拿來當 online judge 玩^H練習耶 :p
2013-12-16 11:40:38	CindyLinz	看到 GHC 輸給 Go 了, 不爽中.. XD # http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=nbody&sort=fullcpu
2013-12-16 11:41:14	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-12-16 11:45:30	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-16 12:15:50	<--	cyt93cs_ (~cyt93cs@140.123.101.4) has quit (Ping timeout: 245 seconds)
2013-12-16 12:16:38	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-12-16 12:18:30	-->	godfat (~Adium@111-251-42-153.dynamic.hinet.net) has joined #haskell.tw
2013-12-16 12:29:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-16 13:19:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-16 13:44:10	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-16 14:43:01	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-16 14:45:14	mno2	看起來 go 1.2 runtime 改進了不少
2013-12-16 15:05:21	CindyLinz	這一頁裡面 GHC 的 code 兩個都看起來好奇怪啊
2013-12-16 15:05:45	CindyLinz	它們都會一再把資料壓到 Ptr Double 裡面再解回來...
2013-12-16 15:05:49	CindyLinz	這是規定的嗎? orz
2013-12-16 15:06:26	CindyLinz	主要時間是花在一個 50M 次的... 迴圈
2013-12-16 15:07:05	CindyLinz	這兩個 GHC code 在每一次 iterate 都會去把東西從 Ptr 裡面解出來算, 算完再壓回 Ptr....
2013-12-16 15:15:05	mno2	CindyLinz: 不知道耶，不熟 Ptr
2013-12-16 15:39:20	CindyLinz	mno2: 就理解成 C 的 ptr 就是了 ^^|
2013-12-16 15:39:41	CindyLinz	這兩支 GHC 版的就一直重覆地使用 Storable.. @@"
2013-12-16 15:39:50	mno2	CindyLinz: 我知道可以理解成 C pointer, 但我不知道你的問題的答案
2013-12-16 16:03:06	CindyLinz	喔 XD
2013-12-16 16:29:08	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-16 17:35:48	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-16 17:40:15	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2013-12-16 17:44:57	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-12-16 17:49:38	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-16 17:52:35	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2013-12-16 17:52:35	<--	godfat (~Adium@111-251-42-153.dynamic.hinet.net) has quit (*.net *.split)
2013-12-16 17:52:35	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (*.net *.split)
2013-12-16 17:54:31	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-12-16 17:54:31	-->	godfat (~Adium@111-251-42-153.dynamic.hinet.net) has joined #haskell.tw
2013-12-16 17:54:31	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-16 18:49:59	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-16 19:09:03	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-16 19:11:01	-->	hashcat (~kv2a@218-173-234-246.dynamic.hinet.net) has joined #haskell.tw
2013-12-16 19:44:34	<--	godfat (~Adium@111-251-42-153.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-16 19:53:07	-->	b4283 (~b4283@218-164-220-167.dynamic.hinet.net) has joined #haskell.tw
2013-12-16 19:59:00	-->	filius (~filius@2001:da8:201:1160:fab1:56ff:fe9a:45ce) has joined #haskell.tw
2013-12-16 20:08:36	<--	filius (~filius@2001:da8:201:1160:fab1:56ff:fe9a:45ce) has quit (Quit: Leaving)
2013-12-16 21:10:53	-->	godfat (~Adium@114-45-187-214.dynamic.hinet.net) has joined #haskell.tw
2013-12-16 21:47:24	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-16 22:19:31	-->	flter_ (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-16 22:22:23	-->	cherti (~cherti@91.210.101.64) has joined #haskell.tw
2013-12-16 22:23:52	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-16 22:31:17	--	flter_ is now known as flter
2013-12-16 22:34:47	<--	cherti (~cherti@91.210.101.64) has quit (Remote host closed the connection)
2013-12-16 22:54:01	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Ping timeout: 265 seconds)
2013-12-16 22:57:31	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-16 23:01:09	-->	LQYMGT` (~user@59.78.46.75) has joined #haskell.tw
2013-12-16 23:01:37	<--	LQYMGT` (~user@59.78.46.75) has quit (Client Quit)
2013-12-16 23:12:37	mno2	https://docs.google.com/presentation/d/18ZdJoDGQr47wBfO-zEwW1hkc6tfiAdP7TYTKhki_IKk/edit#slide=id.p   禮拜五要給個 talk
2013-12-16 23:13:01	mno2	關於 strictness / unboxed type 的簡易教學
2013-12-16 23:14:50	<--	monochrom (monokrom@216.138.220.146) has quit (Ping timeout: 264 seconds)
2013-12-16 23:15:09	-->	monochrm (monokrom@216.138.220.146) has joined #haskell.tw
2013-12-16 23:15:11	--	monochrm is now known as monochrom
2013-12-16 23:16:05	CindyLinz	:D
2013-12-16 23:16:22	CindyLinz	教同事喔?
2013-12-16 23:27:23	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 264 seconds)
2013-12-16 23:27:26	-->	darkx_ (~x4r@162.243.133.203) has joined #haskell.tw
2013-12-16 23:27:40	mno2	CindyLinz: no, haskell.sg
2013-12-16 23:27:53	--	darkx_ is now known as darkx
2013-12-16 23:28:24	CindyLinz	喔喔~
2013-12-16 23:29:36	mno2	new name for bottom = finger
2013-12-16 23:30:54	CindyLinz	中指? @@"
2013-12-16 23:33:41	mno2	CindyLinz: 對啊
2013-12-16 23:39:04	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2013-12-16 23:44:29	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-12-16 23:46:55	-->	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has joined #haskell.tw
2013-12-16 23:49:55	-->	petercom1and (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-16 23:55:51	CindyLinz	噗噗噗
2013-12-16 23:56:44	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 248 seconds)
2013-12-16 23:57:38	<--	hashcat (~kv2a@218-173-234-246.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-12-16 23:59:36	--	petercom1and is now known as petercommand
2013-12-17 00:00:04	<--	petercommand (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2013-12-17 00:00:04	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-17 00:02:58	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 260 seconds)
2013-12-17 00:03:51	-->	cyt93cs (~cyt93cs@140.123.101.4) has joined #haskell.tw
2013-12-17 00:15:59	<--	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has quit (*.net *.split)
2013-12-17 00:15:59	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-17 00:16:00	<--	darkx (~x4r@162.243.133.203) has quit (*.net *.split)
2013-12-17 00:16:00	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-12-17 00:16:00	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2013-12-17 00:16:01	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2013-12-17 00:16:01	<--	shik_ (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2013-12-17 00:16:01	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2013-12-17 00:16:01	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-gpatyhkmzokcyprh) has quit (*.net *.split)
2013-12-17 00:16:01	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (*.net *.split)
2013-12-17 00:16:01	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (*.net *.split)
2013-12-17 00:16:02	<--	hychen (uid12518@gateway/web/irccloud.com/x-tboagfvejauinsbz) has quit (*.net *.split)
2013-12-17 00:16:02	<--	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2013-12-17 00:16:02	<--	monochrom (monokrom@216.138.220.146) has quit (*.net *.split)
2013-12-17 00:16:02	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-17 00:16:02	<--	godfat (~Adium@114-45-187-214.dynamic.hinet.net) has quit (*.net *.split)
2013-12-17 00:16:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-12-17 00:16:02	<--	logfat__ (~cinch@home.mno2.org) has quit (*.net *.split)
2013-12-17 00:16:02	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2013-12-17 00:16:03	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has quit (*.net *.split)
2013-12-17 00:16:03	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has quit (*.net *.split)
2013-12-17 00:16:03	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has quit (*.net *.split)
2013-12-17 00:16:03	<--	b4283 (~b4283@218-164-220-167.dynamic.hinet.net) has quit (*.net *.split)
2013-12-17 00:23:37	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-17 00:23:37	-->	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has joined #haskell.tw
2013-12-17 00:23:37	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2013-12-17 00:23:37	-->	monochrom (monokrom@216.138.220.146) has joined #haskell.tw
2013-12-17 00:23:37	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-17 00:23:37	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-17 00:23:37	-->	godfat (~Adium@114-45-187-214.dynamic.hinet.net) has joined #haskell.tw
2013-12-17 00:23:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-17 00:23:37	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-17 00:23:37	-->	logfat__ (~cinch@home.mno2.org) has joined #haskell.tw
2013-12-17 00:23:37	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-17 00:23:37	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-17 00:23:37	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-12-17 00:23:37	-->	shik_ (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-12-17 00:23:37	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-gpatyhkmzokcyprh) has joined #haskell.tw
2013-12-17 00:23:37	-->	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-12-17 00:23:37	-->	hychen (uid12518@gateway/web/irccloud.com/x-tboagfvejauinsbz) has joined #haskell.tw
2013-12-17 00:23:37	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has joined #haskell.tw
2013-12-17 00:23:37	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has joined #haskell.tw
2013-12-17 00:23:37	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has joined #haskell.tw
2013-12-17 00:23:37	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-17 00:23:37	-->	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-12-17 00:25:35	-->	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-17 00:27:20	CindyLin1	QQ
2013-12-17 00:27:25	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 264 seconds)
2013-12-17 00:29:12	godfat	Lin1? XD
2013-12-17 00:31:04	petercommand	irssi好像會把nick裡的一個字換成1的樣子XD
2013-12-17 00:31:29	godfat	XDDD 那最終就會變成 111111111 了
2013-12-17 00:32:49	petercommand	XDD
2013-12-17 00:35:28	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2013-12-17 00:35:54	CindyLinz	進步 5%..
2013-12-17 00:37:37	CindyLinz	godfat: 剛剛有講話嗎? @@"
2013-12-17 00:38:26	godfat	CindyLinz, 這段嗎？
2013-12-17 00:38:26	godfat	那不是在 print 時才會變成 2 就好了嗎？
2013-12-17 00:38:26	godfat	我能想到的只有記憶體上的理由 XD
2013-12-17 00:38:38	<--	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 250 seconds)
2013-12-17 00:39:10	CindyLinz	那這段看過了 :D
2013-12-17 00:39:17	CindyLinz	剛剛網路不順.. QQ
2013-12-17 00:39:48	letoh	還有會被 1 附身
2013-12-17 00:40:04	letoh	不過我也用 irssi 啊，好像只是加個底線?
2013-12-17 00:40:45	CindyLinz	那是 irssi 重連上來, server 覺得舊的 connection 還在
2013-12-17 00:50:57	CindyLinz	呼.. 實驗這種東西常常不小心就吃一堆 swap, 電腦就不動了 orz
2013-12-17 00:55:00	godfat	我用 adium 是 append 1
2013-12-17 01:17:41	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-17 01:23:13	-->	fibify (~fibify@91.229.248.92) has joined #haskell.tw
2013-12-17 01:26:12	<--	fibify (~fibify@91.229.248.92) has quit (Remote host closed the connection)
2013-12-17 01:35:28	<--	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-17 01:37:10	-->	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has joined #haskell.tw
2013-12-17 01:54:13	<--	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-12-17 01:54:43	-->	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has joined #haskell.tw
2013-12-17 01:57:49	<--	hashcat_ (~kv2a@218-173-234-246.dynamic.hinet.net) has quit (Read error: No route to host)
2013-12-17 02:28:12	-->	reider (~reider@91.210.101.199) has joined #haskell.tw
2013-12-17 02:30:39	<--	reider (~reider@91.210.101.199) has quit (Remote host closed the connection)
2013-12-17 02:47:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-12-17 02:47:58	-->	fogmaster (~fogmaster@91.210.101.71) has joined #haskell.tw
2013-12-17 02:49:55	<--	fogmaster (~fogmaster@91.210.101.71) has quit (Remote host closed the connection)
2013-12-17 02:55:41	-->	tomavto (~tomavto@91.210.101.8) has joined #haskell.tw
2013-12-17 03:03:04	<--	tomavto (~tomavto@91.210.101.8) has quit (Ping timeout: 272 seconds)
2013-12-17 05:28:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-17 07:36:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 250 seconds)
2013-12-17 07:41:28	-->	hashcat (~username@106.65.135.97) has joined #haskell.tw
2013-12-17 07:42:28	<--	hashcat (~username@106.65.135.97) has quit (Remote host closed the connection)
2013-12-17 08:46:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-17 10:12:55	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-17 10:16:01	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-17 10:18:54	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-17 10:23:56	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-17 11:13:59	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-17 11:26:41	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-17 12:58:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-12-17 13:16:03	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-17 13:38:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-17 13:50:29	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2013-12-17 13:50:29	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2013-12-17 14:25:09	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-17 16:10:13	CindyLinz	QQ.. GHC 看來不會把 EmptyDataDecls 的 field 直接 optimize 掉欸..
2013-12-17 16:13:31	mno2	CindyLinz: 什麼意思？ EmptyDataDecls 不是沒有 value 嗎？
2013-12-17 16:14:21	CindyLinz	就假設有個 data Empty
2013-12-17 16:15:40	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-17 16:16:00	CindyLinz	我再試一下..
2013-12-17 16:19:03	mno2	CindyLinz: core 印出來是什麼樣？
2013-12-17 16:20:39	CindyLinz	好誤會了 應該會 optimize 掉
2013-12-17 16:21:29	CindyLinz	有個 data Empty, 一個 data One = One. 然後是 data Data = Data { one :: {-# UNPACK #-} !One , empty :: Empty , n :: {-# UNPACK #-} !Int }
2013-12-17 16:21:39	CindyLinz	生出來的 Data 是:
2013-12-17 16:23:41	CindyLinz	http://lpaste.net/4267802525500964864
2013-12-17 16:24:10	CindyLinz	中間那個 empty 會直接不見
2013-12-17 16:27:10	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-17 16:30:41	CindyLinz	我在做 Augmented red black tree, 然後 augmented value 是 non-strict, lazy eval 的
2013-12-17 16:31:08	CindyLinz	這樣如果 augmented value 放的是 empty data 的話, 直接就可以縮成一般的 RB tree 耶 ^^
2013-12-17 16:33:34	CindyLinz	不過這不是設計讓它 non-strict 的原因啦.. 主要只是因為 RB tree 偶爾要旋轉.. 希望旋轉過程不要一直重算 augmented value
2013-12-17 16:34:33	CindyLinz	只是轉完以後要不要去 forced 它... 嗯, 如果允許用 empty 的話, 就不可以去 force 它了 :Q
2013-12-17 16:35:42	CindyLinz	但如果都不去 force 它的話, 其實是個 amortized lg N
2013-12-17 16:35:55	CindyLinz	的 RB tree, 不是 worst case lg N 了
2013-12-17 16:53:12	CindyLinz	不過 user 可以每次加入或刪除資料之後, 去 seq 一下 root 的 augmented value
2013-12-17 17:05:41	mno2	CindyLinz: 為什麼你會要 RB Tree 啊？
2013-12-17 17:06:41	mno2	CindyLinz:  (模擬對白) : 硬派的 programmer 就是要寫 RB tree 不寫 skip list
2013-12-17 17:06:57	CindyLinz	重點是 Augmented 的部分啦
2013-12-17 17:07:10	CindyLinz	其實我想要的是 on-disk 的 btree 版本
2013-12-17 17:07:28	CindyLinz	只是 disk 要考慮的因素更多, 想先拿這種 memory 的版本試試看會遇到什麼問題
2013-12-17 17:07:49	CindyLinz	我想要做 real time 的 ranking, 把玩家的分數丟進去
2013-12-17 17:07:58	CindyLinz	隨時可以查指定玩家現在是第幾名
2013-12-17 17:07:58	mno2	B-tree 也可以 memory 吧，反正 block 都放 memory 就好啦
2013-12-17 17:08:16	mno2	一般資料庫也是用一個 manager 去管理 page cache
2013-12-17 17:08:28	CindyLinz	可是 memory 版的 btree, 我考慮過 immutable 的情況下沒有實用價值 @@"
2013-12-17 17:08:42	mno2	還要 immutable 喔 @@
2013-12-17 17:08:57	CindyLinz	啊不然我應該直接用 C 寫吧... ^^|
2013-12-17 17:09:23	CindyLinz	那我覺得應該找得到現成的, 也不用寫了?
2013-12-17 17:09:40	mno2	喔喔，原來你是要做 immutable cache
2013-12-17 17:09:46	CindyLinz	不是 cache 啊
2013-12-17 17:09:52	CindyLinz	等等怎麼變成 cache 了 XD
2013-12-17 17:10:08	mno2	聽起來就是把玩家分數暫存啊，然後又不能變
2013-12-17 17:10:11	CindyLinz	我就只是要把一堆分數丟進去, 然後隨時看名次而已
2013-12-17 17:10:35	CindyLinz	可以變啊, 說用 immutable 是因為想用 Haskell 寫啦 ^^|
2013-12-17 17:11:19	mno2	喔喔
2013-12-17 17:12:48	CindyLinz	我沒有想過 skip list 怎麼作 augment 的應用
2013-12-17 17:13:36	CindyLinz	不過 skip list 要吃一個 random generator, 這樣在一開始 create 的時候要附一個進去
2013-12-17 17:13:48	CindyLinz	或是黏在 data type 的 class 裡面
2013-12-17 17:13:55	mno2	http://www.stanford.edu/~joyku/proj_cs161/
2013-12-17 17:14:13	CindyLinz	喔喔! :D
2013-12-17 17:15:00	mno2	而且 Skip List 可以 concurrent 啊，RB tree 就…..
2013-12-17 17:15:25	mno2	沒辦法侷限旋轉範圍，只好一個大鎖
2013-12-17 17:16:35	CindyLinz	immutable 實作不用 lock, 用 zipper 來存取它, 在 create zipper 的時候相當於作了 snapshot, 在這個 zipper 滅掉以前, 這棵 tree 就自動在 copy-on-write 的狀態
2013-12-17 17:19:51	mno2	CindyLinz: 突然發覺好像 MVCC
2013-12-17 17:20:02	CindyLinz	嗯有像
2013-12-17 17:20:17	mno2	真有趣
2013-12-17 17:20:31	CindyLinz	可是又各自可以改, 會變成平行宇宙, MVCC 應該就沒有這個了?
2013-12-17 17:20:41	CindyLinz	因為 MVCC 最後是要 commit 合在一起的吧
2013-12-17 17:21:46	CindyLinz	如果是改在不同部位, MVCC 可以讓它們最後合在一起.. 而 immutable RB tree 這種. 如果在某 zipper 分到兩處去做, 最後一定是兩個不同的 tree
2013-12-17 17:28:08	CindyLinz	好吧我在 loading 來自很多 user 很多 task, 而不是一個 heavy job 的環境, 常常會忽略一次可以吃 N 個 CPU core 有什麼好處 ^^|
2013-12-17 17:44:25	CindyLinz	嗯, 沒有加 -O2 的 -ddump-simpl 讀起來友善多了 XD
2013-12-17 17:44:41	CindyLinz	那個 empty 也不意外地出現了 XD
2013-12-17 17:48:55	mno2	不過讀到的跟實際拿 -O2 跑的就差很多了
2013-12-17 17:52:02	CindyLinz	對 XD
2013-12-17 18:16:12	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-17 18:28:00	-->	hashcat (~kv2a@218-173-234-246.dynamic.hinet.net) has joined #haskell.tw
2013-12-17 18:34:14	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-17 18:54:51	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-17 19:18:12	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-17 20:18:15	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-17 20:18:39	mno2	http://tgceec.tumblr.com/post/70134083864/introducing-the-grand-c-error-explosion-competition
2013-12-17 20:18:55	mno2	the Grand C++ Error Explosion Competition
2013-12-17 20:18:58	mno2	LOL
2013-12-17 20:40:46	-->	b4283 (~b4283@36.238.223.59) has joined #haskell.tw
2013-12-17 21:35:58	-->	suhorng (~suhorng@118-166-56-152.dynamic.hinet.net) has joined #haskell.tw
2013-12-17 21:55:26	-->	logfat___ (~cinch@home.mno2.org) has joined #haskell.tw
2013-12-17 21:56:49	<--	logfat__ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2013-12-17 22:31:51	<--	b4283 (~b4283@36.238.223.59) has quit (Ping timeout: 240 seconds)
2013-12-17 22:32:31	-->	b4283 (~b4283@36.238.223.59) has joined #haskell.tw
2013-12-17 23:06:34	godfat	這種比賽想都沒想過... XD
2013-12-17 23:06:34	godfat	讓我想起 vc++ 6.0 少打一個分號可以跟你噴幾千個錯誤
2013-12-17 23:35:49	CindyLinz	補一個分號就可以解掉數千個錯誤, 有沒有感覺很棒? :D
2013-12-17 23:36:17	godfat	真是厲害的半杯水思考 XD
2013-12-17 23:42:44	petercommand	有人去參加嗎XD
2013-12-17 23:44:09	CindyLinz	好久沒碰這語言了 @@"
2013-12-17 23:44:50	petercommand	CindyLinz: 趁不太熟的時候看能不能讓他多噴一些錯誤XD
2013-12-17 23:45:48	CindyLinz	累 XD
2013-12-17 23:58:27	<--	suhorng (~suhorng@118-166-56-152.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-18 00:02:27	mno2	CindyLinz: 全選 delete 也可以解掉數千個錯誤（誤)
2013-12-18 00:03:36	CindyLinz	..............||
2013-12-18 00:03:46	CindyLinz	真是 total solution....
2013-12-18 00:05:44	godfat	讓我想到可以 scale 到宇宙的資料庫： /dev/null
2013-12-18 00:08:49	petercommand	...
2013-12-18 00:11:48	<--	b4283 (~b4283@36.238.223.59) has quit (Quit: 暫離)
2013-12-18 00:14:38	CindyLinz	/dev/null 竟然有這麼浪漫的別稱... ww
2013-12-18 00:17:22	petercommand	浪漫派詩人~~~
2013-12-18 00:20:43	godfat	原始出處 https://gist.github.com/raggi/e1744a804a6f7469b022/raw/09db938de5063a7ff70d367fa608cd61c0e735c0/gistfile1
2013-12-18 00:20:43	godfat	影片版 http://www.youtube.com/watch?v=majbJoD6fzo
2013-12-18 00:24:33	CindyLinz	影片版...... wwww
2013-12-18 00:29:36	CindyLinz	shardnull... unverse scale..
2013-12-18 00:29:39	CindyLinz	shardnull... universe scale..
2013-12-18 00:30:55	godfat	XDDDD 我是不太喜歡這樣嘲笑人，不過真的很好笑..
2013-12-18 00:54:48	monochrom	我還以為 fibre 是為笑話虚構出來的. 原來真有 fibre, 意思是 green thread.
2013-12-18 00:55:53	godfat	應該比較接近 coroutine
2013-12-18 00:55:54	monochrom	唉, 其實程式界有甚麼不是虚構呢? (很襌的說)
2013-12-18 00:56:18	godfat	人工界 XD
2013-12-18 01:08:43	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-18 04:51:15	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-18 04:51:15	<--	godfat (~Adium@114-45-187-214.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-18 05:32:01	-->	putila (~putila@91.210.101.185) has joined #haskell.tw
2013-12-18 05:46:14	<--	putila (~putila@91.210.101.185) has quit (Ping timeout: 248 seconds)
2013-12-18 06:45:03	<--	monochrom (monokrom@216.138.220.146) has quit (Ping timeout: 252 seconds)
2013-12-18 09:58:03	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-18 10:20:23	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-18 10:30:28	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-18 12:16:00	<--	hashcat (~kv2a@218-173-234-246.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2013-12-18 12:43:41	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-18 13:44:49	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-18 15:25:13	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-18 15:58:23	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2013-12-18 17:10:52	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-18 17:10:52	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2013-12-18 17:10:52	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has quit (*.net *.split)
2013-12-18 17:10:52	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has quit (*.net *.split)
2013-12-18 17:10:52	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has quit (*.net *.split)
2013-12-18 17:12:38	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-18 17:12:38	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-18 17:12:38	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has joined #haskell.tw
2013-12-18 17:12:38	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has joined #haskell.tw
2013-12-18 17:12:38	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has joined #haskell.tw
2013-12-18 17:16:17	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-18 17:16:18	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2013-12-18 17:16:18	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has quit (*.net *.split)
2013-12-18 17:16:18	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has quit (*.net *.split)
2013-12-18 17:16:18	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has quit (*.net *.split)
2013-12-18 17:21:43	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-18 17:21:43	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-18 17:21:43	-->	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has joined #haskell.tw
2013-12-18 17:21:43	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has joined #haskell.tw
2013-12-18 17:21:43	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has joined #haskell.tw
2013-12-18 18:14:45	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-18 18:25:59	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-18 18:53:50	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-18 18:55:53	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-12-18 19:46:16	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-18 19:54:04	-->	b4283 (~b4283@218-164-206-26.dynamic.hinet.net) has joined #haskell.tw
2013-12-18 21:42:07	--	a2n is now known as a2n_afk
2013-12-18 21:57:25	--	a2n_afk is now known as a2n
2013-12-18 22:01:15	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-18 22:08:42	--	a2n is now known as guildwar_
2013-12-18 22:09:00	--	guildwar_ is now known as guildwar__
2013-12-18 22:09:05	--	guildwar__ is now known as a2n
2013-12-18 22:12:27	<--	a2n_ (uid13285@gateway/web/irccloud.com/x-yobhkznlmcngaivm) has left #haskell.tw
2013-12-19 00:21:07	<--	b4283 (~b4283@218-164-206-26.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-19 01:28:36	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-19 01:56:44	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2013-12-19 01:56:44	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2013-12-19 01:56:44	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has quit (*.net *.split)
2013-12-19 01:56:44	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has quit (*.net *.split)
2013-12-19 02:08:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2013-12-19 02:12:59	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-19 02:13:00	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2013-12-19 02:13:00	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has joined #haskell.tw
2013-12-19 02:13:00	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has joined #haskell.tw
2013-12-19 04:49:16	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-19 04:50:30	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-19 04:51:07	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-19 05:25:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-19 05:42:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-19 06:00:52	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-19 08:42:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-19 09:15:32	-->	hashcat (~kv2a@36.238.32.11) has joined #haskell.tw
2013-12-19 09:58:05	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-19 10:03:16	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-19 10:12:35	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-19 10:26:38	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-19 11:12:46	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-19 11:13:35	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-19 11:53:29	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 250 seconds)
2013-12-19 11:57:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-19 12:00:56	--	a2n is now known as a2n_awk
2013-12-19 12:01:01	--	a2n_awk is now known as a2n_afk
2013-12-19 12:30:29	-->	godfat (~Adium@111-251-47-136.dynamic.hinet.net) has joined #haskell.tw
2013-12-19 12:36:42	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-19 13:21:24	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-19 13:33:09	--	a2n_afk is now known as a2n
2013-12-19 14:05:14	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-19 14:15:04	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-19 15:34:14	CindyLinz	Haskell 有規定 eval 到 undefined 就一定要爆掉嗎?
2013-12-19 15:34:30	CindyLinz	還是 eval 到 undefined 可以是.. undefined. ^^
2013-12-19 15:34:49	CindyLinz	我在看了一些 GHC 用 RULE 作 optimize 的東西
2013-12-19 15:34:59	CindyLinz	有些會強調說它改了 semantic
2013-12-19 15:35:15	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-19 15:35:17	CindyLinz	會把原本可能會爆的東西, 剛好前後對消, 所以就沒爆了
2013-12-19 15:35:58	CindyLinz	如果 eval _|_ (含 undefined 或是 a = a 這種的) 的行為是 undefined 的話, 那就沒問題了 ^^
2013-12-19 15:37:12	CindyLinz	從 C 語言 undefined behavior 對 compiler 友善的現象的想法.. :p
2013-12-19 15:37:28	godfat	這個 undefined 是字面上的嗎？如果是的話，似乎是可以吃掉 exception
2013-12-19 15:37:28	godfat	> handle ((\_ -> do{ return () }) :: SomeException -> IO ()) (evaluate undefined)
2013-12-19 15:37:30	lambdabot	 <IO ()>
2013-12-19 15:38:17	godfat	我不確定這跟你想的有沒有關就是了... XD
2013-12-19 15:41:01	CindyLinz	> handle ((\_ -> do { return () } ) :: SomeException -> IO ()) (let a = a in evaluate a)
2013-12-19 15:41:03	lambdabot	 <IO ()>
2013-12-19 15:41:10	CindyLinz	為什麼還是吃得到 XD
2013-12-19 15:41:23	CindyLinz	大概是 lambdabot 會丟 timeout exception?
2013-12-19 15:44:25	godfat	有可能 XD
2013-12-19 15:51:35	CindyLinz	或是說... undefined `seq` 3 可不可以仍然得到 3
2013-12-19 16:15:22	godfat	我感覺要是不行，不然就 defeat the purpose of seq? XD
2013-12-19 16:17:19	CindyLinz	我覺得 seq 的用途不是讓能爆的爆一爆.. 而是讓不會爆的趕快算一算.. @@"
2013-12-19 16:17:54	CindyLinz	所以覺得如果是會爆的, 其實可以讓 compiler 自由發揮一下 ^^
2013-12-19 16:21:42	CindyLinz	然後.. 就算 seq 守住 undefined `seq` 3 一定要爆, 它對於 useALotOfMemory `seq` 3 還是沒辦法有一致的結果
2013-12-19 16:31:54	CindyLinz	然後.. 既然 ghc optimize 本來就可能會去改變 useALotOfMemory 的行為 (從會爆變成不會爆), 從而改變 useALotOfMemory `seq` 3..
2013-12-19 16:32:27	CindyLinz	如果 ghc 事先知道 useALotOfMemory 是沒有用的, 之後也沒人要去拿它的結果來用, 那乾脆就可以把它整個移掉
2013-12-19 16:33:35	godfat	嗯... best effort XD
2013-12-19 16:33:35	godfat	不過這樣說來，就等於 seq 不一定會做什麼事了？
2013-12-19 16:36:25	CindyLinz	有的..
2013-12-19 16:36:55	CindyLinz	如果 ghc 知道算下去不會爆的方法, 就必須把它算出來
2013-12-19 16:37:44	godfat	從 programmer 的角度並不知道不是嗎？
2013-12-19 16:37:55	CindyLinz	godfat: 這是現實程式的天缺啊..
2013-12-19 16:38:13	CindyLinz	halting problem XD
2013-12-19 16:38:54	CindyLinz	好啦不一定是 halting problem
2013-12-19 16:39:02	godfat	總之 seq 解釋起來就變成，總之我要把左邊的東西先算出來，你就盡量啦
2013-12-19 16:39:02	godfat	這樣嗎？ XD
2013-12-19 16:39:26	CindyLinz	現在就是這樣呀.. 只是我想, 可以讓 ghc 盡量的程度再更盡量一點
2013-12-19 16:40:20	godfat	undefined `seq` 1 -- 1 這樣是更盡量嗎？ XD
2013-12-19 16:41:05	godfat	不過這也許是 undefined 實作問題，我想，畢竟他是丟 exception
2013-12-19 16:41:22	CindyLinz	undefined `seq` 1 -- 1 或 undefined. 也許我們手上的 ghc 比較笨, 所以就 undefined, 也許它比較聰明, 所以就 1
2013-12-19 16:41:30	CindyLinz	不對啦
2013-12-19 16:41:59	CindyLinz	因為 ghc 找不出 undefined 算出來的方法, 所以就沒有要求它一定要怎麼做
2013-12-19 16:42:45	godfat	你是說你理想上的 seq 實作嗎？
2013-12-19 16:42:46	CindyLinz	剛剛是說, 如果 ghc 找得到算得出來的方法, 而且出來的結果之後有機會用得上, 那就要當場去把結果弄出來.
2013-12-19 16:42:58	CindyLinz	我們用 seq 都是效率考量吧
2013-12-19 16:43:14	CindyLinz	叫 ghc runtime 把 thunk 縮一縮之類的
2013-12-19 16:43:48	CindyLinz	如果 `seq` 的左邊是個 bottom, 應該是 programmer 寫錯了.. XD
2013-12-19 16:44:03	godfat	所以你覺得 non-termination `seq` 1 的話，ghc 應該試著算，然後 timeout fallback 回 1 嗎？
2013-12-19 16:44:37	CindyLinz	我覺得 non-termination `seq` 1 的話, programmer 寫錯了, 所以 ghc 你請自便.. XD
2013-12-19 16:44:53	CindyLinz	timeout fallback 回 1 也是你的自由這樣 XD
2013-12-19 16:45:19	CindyLinz	這樣 optimize 比較好做... ww
2013-12-19 16:46:34	CindyLinz	不然.. 連 a = \x -> let y = x + 1 in y `seq` y - 1 都不能縮成 a = id 了... @@"
2013-12-19 16:46:54	godfat	聽起來好像也可以在 something `seq` 1 時開一個 thread 去算 something... XD
2013-12-19 16:46:54	godfat	不過我想這些應該是實作自由沒錯，畢竟 seq 還是 pure 的..?
2013-12-19 16:47:12	CindyLinz	seq 是 pure 的.. 只是可能會弄爆記憶體..
2013-12-19 16:47:54	godfat	弄爆的話只好停下程式，硬跑 gc, 甚至丟掉 seq 左邊，然後程式繼續？ XD
2013-12-19 16:48:54	CindyLinz	欸可是用 `seq` 的時候, 是要左邊先跑出結果了, 右邊才能繼續欸.. 常常是右邊可能會用到左邊很多次, 或是會拿左邊再次去展開一堆 thunk, 怕 thunk 太多出事 @@"
2013-12-19 16:49:09	CindyLinz	但如果 `seq` 左邊會爆的話, 一切都不重要了.. XD
2013-12-19 16:49:17	godfat	不過看起來要把 a = id 的話，還得保證 x + 1 - 1 跟 x 是相等的
2013-12-19 16:49:41	CindyLinz	但就如果 x 有可能是整個 Int 的話, maxBound + 1 就壞了
2013-12-19 16:49:54	godfat	那聽起來還是先算出來就好呀 XD
2013-12-19 16:50:31	CindyLinz	x + 1 - 1 如果不能縮成 x, 真是太苦了啊
2013-12-19 16:50:53	CindyLinz	所以如果把 semantic 定成, 如果原本不會壞, 那麼 optimize 之後也不會壞
2013-12-19 16:51:06	CindyLinz	如果原本會壞, 那就算了
2013-12-19 16:51:30	CindyLinz	算了的意思是, 仍有可能不會壞
2013-12-19 16:52:11	CindyLinz	如果把 a optimize 成 a = \x -> if x < maxBound then x else undefined 可能比原本還慢 XD
2013-12-19 16:52:33	godfat	這樣聽起來 ghc 必須預知 seq 左邊是什麼 @@
2013-12-19 16:52:34	godfat	undefined 是可以預知，但一般運算不行
2013-12-19 16:52:49	CindyLinz	不是必須, 是高興就預知一下..
2013-12-19 16:52:57	godfat	XDDDD
2013-12-19 16:53:45	CindyLinz	像這個 a 與 id 的例子, 也沒真的去預知什麼, 只是就不處理範圍外的事情
2013-12-19 16:54:37	CindyLinz	然後一般性的 x `seq` y 的話.. 如果發現 x 與 x 的內容都沒再被用到, 就乾脆變成 y 就好, 把整個 x 丟掉
2013-12-19 16:55:10	godfat	喔喔，所以回到你原本說的會爆後來不會爆了
2013-12-19 16:55:10	godfat	原本 x + 1 - 1 可能會炸，但你改成 x 後就沒事了
2013-12-19 16:55:10	godfat	這讓我想到之前看到 gcc 的討論... 也是關於整數 overflow 的
2013-12-19 16:55:35	CindyLinz	對
2013-12-19 16:55:36	CindyLinz	的確是從 C compiler 來的想法.. ww
2013-12-19 16:55:54	godfat	唔唔，好，我被你說服了 XD
2013-12-19 16:56:21	CindyLinz	不過昨天我看到一個看起來很好用的 Haskell standard lib (不確定是不是 ghc only)
2013-12-19 16:56:36	CindyLinz	Debug.Trace 裡面的 trace :: String -> a -> a
2013-12-19 16:57:06	CindyLinz	你看這 type 長得跟 seq 的 a -> b -> b 這麼像就知道它也是個邪惡的傢伙 XD
2013-12-19 16:57:45	CindyLinz	它會先把 String 那一項從 stdout (or stderr?) 印出來, 然後若無其事地把後面那個 a 給出去
2013-12-19 16:58:17	CindyLinz	如果 seq 如我那樣講的定義的話, 這種函數就只能 compiler 內建實作才做得出來了
2013-12-19 16:58:47	CindyLinz	然後一些 unsafe 的東西也會真的 unsafe.. 可能會被 optimize 掉.. XD
2013-12-19 16:59:18	CindyLinz	就.. 如果 unsafe 算出來的東西後來沒人想看的話, 整個 unsafe 可能就被丟了
2013-12-19 17:00:55	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-19 17:00:55	godfat	結果 trace 就不 trace 了 XD
2013-12-19 17:00:55	godfat	這時候可能要 -O0 這樣..? XD
2013-12-19 17:01:02	CindyLinz	所以 trace 要由 compiler 內建嘛... XD
2013-12-19 17:01:11	CindyLinz	就像現在的 seq 也一定是 compiler 內建 :p
2013-12-19 17:01:31	CindyLinz	咦, seq 得由 compiler 內建好像就是跟你討論出來的 XD
2013-12-19 17:02:12	godfat	compiler 地主優勢... =_=
2013-12-19 17:02:12	godfat	這樣愈來愈多東西是 compiler only... XD
2013-12-19 17:02:12	godfat	我們把髒東西都丟給 compiler, 建構我們上端美好無上的純淨世界
2013-12-19 17:02:53	CindyLinz	啊還不都因為 ghc 下面踩的是 gcc 這片重度汙染的大地.... (遠目)
2013-12-19 17:03:10	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-19 17:03:18	CindyLinz	mno2 聽不下去了.. QQ
2013-12-19 17:03:20	godfat	XDDDDDDDDDD
2013-12-19 17:03:20	godfat	我覺得我腦裡好像浮現了一部電影
2013-12-19 17:03:46	CindyLinz	._.?
2013-12-19 17:04:34	godfat	比方說上層美好 ghc 世界跟下層骯髒 gcc 世界，在某一天忽然 gcc 跟 ghc 宣戰要革命獨立之類的
2013-12-19 17:04:46	CindyLinz	其實是這一週花了些時間去拼 http://benchmarksgame.alioth.debian.org/ 有點挫折.... orz
2013-12-19 17:05:03	CindyLinz	我好像聽說過這個電影.....
2013-12-19 17:05:48	godfat	好像是 shootout 新版 XD 上次看前面全都是 c...
2013-12-19 17:05:48	godfat	很多電影都像這樣的感覺 XD
2013-12-19 17:06:17	godfat	不過電影裡上層可能是高科技，不像 ghc 純淨世界我想到的是獨角獸
2013-12-19 17:07:18	CindyLinz	輸給 C 不會難過.. 輸給 Java 一大堆, 然後再輸 go 就難過了.... orz
2013-12-19 17:07:55	godfat	我看上面的 ghc 是沒輸 java/go 啦... XD
2013-12-19 17:08:02	CindyLinz	咦?
2013-12-19 17:08:08	godfat	http://benchmarksgame.alioth.debian.org/u32/performance.php?test=nbody#about
2013-12-19 17:08:15	CindyLinz	是因為我看的 architecture 的問題嗎...
2013-12-19 17:08:28	godfat	我隨便翻的，不知道是在看啥
2013-12-19 17:08:41	CindyLinz	go.plurk.com/?url=http%3A%2F%2Fbenchmarksgame.alioth.debian.org%2Fu64q%2Fperformance.php%3Ftest%3Dnbody%26sort%3Dfullcpu&id=33357X911862&xs=1
2013-12-19 17:08:50	CindyLinz	咦
2013-12-19 17:08:52	CindyLinz	http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=nbody&sort=fullcpu
2013-12-19 17:09:46	godfat	多核心 ghc 就輸了！？
2013-12-19 17:10:07	CindyLinz	可是這一個 N-Body 的問題我不覺得多核心能做什麼就是了 @@"
2013-12-19 17:10:24	CindyLinz	它只有 5 個 body, 然後 50M 個 iteration
2013-12-19 17:10:43	CindyLinz	每個 iteration 要 depend 前一個, 每個 iteration 裡面只有 5 個 body 要算 @@"
2013-12-19 17:10:46	godfat	喔喔，重點是 x86 vs x64
2013-12-19 17:10:46	godfat	x64 java 效能變好
2013-12-19 17:11:16	CindyLinz	或說 ghc 在 x64 的執行效能還沒有調得很好?
2013-12-19 17:11:23	godfat	感覺是這樣
2013-12-19 17:12:26	godfat	好像大部分在 x64 都快很多
2013-12-19 17:12:56	CindyLinz	這個印 pi 的超誇張 @@  http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=pidigits&lang=all&data=u64
2013-12-19 17:13:16	godfat	p...hp?
2013-12-19 17:13:27	CindyLinz	php 2.15s, Haskell 3.41s
2013-12-19 17:13:35	godfat	呼叫 gmp 是怎樣
2013-12-19 17:13:49	CindyLinz	我覺得 Haskell 輸在它是用 Show 來輸出 @@"
2013-12-19 17:14:01	CindyLinz	Show 會先轉 [Char]..
2013-12-19 17:14:09	CindyLinz	需要 ByteString 版的 show.. XD
2013-12-19 17:14:11	godfat	...XD
2013-12-19 17:14:32	godfat	快 submit 一個版本
2013-12-19 17:14:49	CindyLinz	我不知道能不能用第三方的 lib 就是 @@"
2013-12-19 17:15:21	CindyLinz	咦, bytestring 在 standard lib 裡唷!?
2013-12-19 17:15:34	godfat	是啊，而且他們不是都用 gmp 了 @@
2013-12-19 17:15:56	CindyLinz	那 perl 可以用 Inline::C 嗎..... 囧
2013-12-19 17:16:06	godfat	XDDDDD
2013-12-19 17:16:49	godfat	http://benchmarksgame.alioth.debian.org/u64/program.php?test=pidigits&lang=scala&id=4
2013-12-19 17:16:49	godfat	你看看啦
2013-12-19 17:16:49	godfat	class GmpUtil {
2013-12-19 17:16:49	godfat	  System.loadLibrary("jpargmp")
2013-12-19 17:16:49	godfat	  @native def mpz_init(): Long
2013-12-19 17:16:49	godfat	...
2013-12-19 17:17:38	CindyLinz	Gmp 等於是直接去操作浮點運算器?
2013-12-19 17:18:02	CindyLinz	呃.. GHC standard lib 也有欸.... ww
2013-12-19 17:18:20	CindyLinz	可是怎麼這麼沒內容啊 囧 http://www.haskell.org/ghc/docs/latest/html/libraries/integer-gmp-0.5.0.0/GHC-Integer-GMP-Internals.html
2013-12-19 17:18:25	godfat	我不知道哩，只知道是科學運算用的
2013-12-19 17:23:09	CindyLinz	不知道 deepseq 的實用性有多大 @@"  它用在大 structure 是效能毒藥啊 @@"
2013-12-19 17:24:15	godfat	因為一次算太多東西？
2013-12-19 17:24:25	CindyLinz	嗯不過這個印 pi 的程式, haskell 程式超短的 ^^  # http://benchmarksgame.alioth.debian.org/u64/program.php?test=pidigits&lang=ghc&id=4
2013-12-19 17:24:34	CindyLinz	因為要層層跑 `seq`
2013-12-19 17:24:46	CindyLinz	而且已經算完了的也要層層跑 `seq`
2013-12-19 17:25:05	CindyLinz	雖然都不會去算, 但就要整個 traverse 檢查一次 @@"
2013-12-19 17:25:10	godfat	也許 seq 過可以 mark 一下
2013-12-19 17:25:14	CindyLinz	如果是一個巨大的 tree, 就很慘
2013-12-19 17:25:52	CindyLinz	覺得 mark 一下又是個只有 compiler 能做的黑魔法 orz
2013-12-19 17:26:39	godfat	是啊 XDDDDD
2013-12-19 17:57:52	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-19 18:01:14	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-19 18:01:52	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Read error: Connection timed out)
2013-12-19 18:05:18	CindyLinz	經過一番努力.....
2013-12-19 18:05:40	CindyLinz	我覺得 [Char] 並沒有想像中的慢.......... orz
2013-12-19 18:05:48	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-19 18:05:52	godfat	...XD...
2013-12-19 18:06:36	CindyLinz	原始程式裡面有一個一整串的 [[Char]] 而且裡面長得像這樣: ["1", "2", "5", ...]
2013-12-19 18:06:44	CindyLinz	就是, 每一個內層 [Char] 都只有一個字
2013-12-19 18:06:57	CindyLinz	我手動把這一層拆掉, 效能不變.... orz
2013-12-19 18:07:11	godfat	看來要 profiling 了 XD
2013-12-19 18:07:16	CindyLinz	那時還沒用到 ByteString
2013-12-19 18:08:04	CindyLinz	現在把 : 換成 B.cons, 把 ++ 換成 B.append
2013-12-19 18:08:17	CindyLinz	再自己實作一個 byteShow
2013-12-19 18:08:25	CindyLinz	跑起來速度一樣... zz
2013-12-19 18:08:43	godfat	@@" 因為資料量都很小？
2013-12-19 18:08:59	CindyLinz	我試 10000 digits, 都是一秒出頭
2013-12-19 18:09:02	CindyLinz	而且頭一樣大
2013-12-19 18:09:24	CindyLinz	每 10 digits 換一行, 不過 byteShow 只有用在行尾標行號
2013-12-19 18:09:41	CindyLinz	原始版的話, 每一個 digit 都 show 一次, 行尾行號再 show 一個
2013-12-19 18:09:57	godfat	這樣居然沒差，果然證明了 ghc 超強 (?)
2013-12-19 18:10:33	CindyLinz	那怎麼還輸... QQ
2013-12-19 18:10:56	CindyLinz	原始版看起來真像 perl golf... orz
2013-12-19 18:11:13	CindyLinz	它定義了三個函數: (%) (#) (&)...
2013-12-19 18:11:22	CindyLinz	然後都沒標 type..
2013-12-19 18:11:25	CindyLinz	這是故意的吧 = =
2013-12-19 18:11:38	godfat	其他用 gmp 作弊啦 = =...
2013-12-19 18:11:54	CindyLinz	就看它算式裡面 #, %, &, +, *, -, @, = 混在一起 orz
2013-12-19 18:56:32	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-19 18:57:35	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-19 19:10:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-19 19:21:01	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-19 19:25:34	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-19 19:30:22	-->	suhorng (~suhorng@118-166-47-62.dynamic.hinet.net) has joined #haskell.tw
2013-12-19 19:40:10	<--	hashcat (~kv2a@36.238.32.11) has quit (Ping timeout: 265 seconds)
2013-12-19 19:46:23	<--	godfat (~Adium@111-251-47-136.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-19 19:54:14	-->	b4283 (~b4283@218-164-202-64.dynamic.hinet.net) has joined #haskell.tw
2013-12-19 19:57:12	-->	hashcat (~kv2a@36-238-32-11.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-19 20:20:53	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-19 20:33:14	<--	hashcat (~kv2a@36-238-32-11.dynamic-ip.hinet.net) has quit (Ping timeout: 264 seconds)
2013-12-19 20:43:37	suhorng	javascript的Y combinator外觀.... http://kestas.kuliukas.com/YCombinatorExplained/
2013-12-19 20:43:47	suhorng	syntax matters...
2013-12-19 21:07:03	-->	suhorng1 (~suhorng@118-166-47-62.dynamic.hinet.net) has joined #haskell.tw
2013-12-19 21:09:12	<--	suhorng (~suhorng@118-166-47-62.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-12-19 21:51:51	mno2	CindyLinz: http://www.techempower.com/benchmarks/  go 又獲勝了 xD
2013-12-19 21:57:04	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-19 22:05:58	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-19 22:08:37	<--	suhorng1 (~suhorng@118-166-47-62.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-19 22:42:23	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Ping timeout: 265 seconds)
2013-12-19 22:44:11	-->	godfat (~Adium@114-45-189-163.dynamic.hinet.net) has joined #haskell.tw
2013-12-19 22:46:02	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-20 00:00:54	<--	b4283 (~b4283@218-164-202-64.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-20 00:52:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-12-20 00:52:02	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2013-12-20 00:55:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-20 00:58:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-12-20 01:04:54	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-20 01:09:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-12-20 01:15:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-20 02:19:35	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-20 06:08:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-12-20 07:39:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-20 10:01:59	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-20 10:40:53	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 10:42:27	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-20 10:44:40	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 12:01:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 250 seconds)
2013-12-20 13:06:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-20 13:41:37	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-20 14:49:37	<--	cataska (~cataska@210.64.6.233) has quit (Read error: Connection reset by peer)
2013-12-20 14:55:19	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 14:57:42	-->	cataska (~cataska@210.64.6.233) has joined #haskell.tw
2013-12-20 15:02:16	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-20 15:55:21	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 16:08:17	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-20 16:30:57	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 16:31:40	-->	yu_lin (24ec125d@gateway/web/freenode/ip.36.236.18.93) has joined #haskell.tw
2013-12-20 16:37:24	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 246 seconds)
2013-12-20 16:51:05	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 16:57:21	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 246 seconds)
2013-12-20 17:11:10	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-20 18:26:41	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-20 19:00:32	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-20 19:25:19	-->	mno2 (mno2@nat/google/x-lgjwdgmbqufoewkm) has joined #haskell.tw
2013-12-20 19:28:39	<--	mno2 (mno2@nat/google/x-lgjwdgmbqufoewkm) has quit (Client Quit)
2013-12-20 19:39:01	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2013-12-20 19:58:36	-->	b4283 (~b4283@218-164-219-176.dynamic.hinet.net) has joined #haskell.tw
2013-12-20 20:11:23	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-20 20:37:03	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-20 20:42:06	-->	hashcat (~kv2a@218-164-104-239.dynamic.hinet.net) has joined #haskell.tw
2013-12-20 20:47:02	hashcat	http://ajhc.metasepi.org/
2013-12-20 20:47:10	hashcat	jhc快速開發版本
2013-12-20 22:14:55	hashcat	ajhc上的試驗會反饋到jhc
2013-12-20 22:27:30	<--	cyt93cs (~cyt93cs@140.123.101.4) has quit (Ping timeout: 245 seconds)
2013-12-20 22:28:59	-->	cyt93cs (~cyt93cs@140.123.101.4) has joined #haskell.tw
2013-12-20 22:33:28	<--	cyt93cs (~cyt93cs@140.123.101.4) has quit (Ping timeout: 240 seconds)
2013-12-20 22:34:18	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-12-20 22:41:43	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 250 seconds)
2013-12-20 22:42:32	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-12-20 22:55:44	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 265 seconds)
2013-12-20 22:56:04	-->	cyt93cs (~cyt93cs@140.123.101.4) has joined #haskell.tw
2013-12-20 23:03:12	<--	yu_lin (24ec125d@gateway/web/freenode/ip.36.236.18.93) has quit (Quit: Page closed)
2013-12-21 00:05:06	hashcat	好文 : http://blog.samibadawi.com/2013/02/scala-vs-haskell-vs-python.html
2013-12-21 00:21:23	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-21 00:22:38	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-21 00:23:24	<--	b4283 (~b4283@218-164-219-176.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-21 00:43:09	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-21 01:04:47	<--	hashcat (~kv2a@218-164-104-239.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-21 01:07:38	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-21 03:23:14	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-21 05:12:50	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-21 05:15:27	<--	godfat (~Adium@114-45-189-163.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-21 06:09:25	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 272 seconds)
2013-12-21 06:10:46	-->	a2n (~a2n@219.85.185.194) has joined #haskell.tw
2013-12-21 06:10:46	<--	a2n (~a2n@219.85.185.194) has quit (Changing host)
2013-12-21 06:10:46	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-12-21 06:43:21	<--	cyt93cs (~cyt93cs@140.123.101.4) has quit (Ping timeout: 272 seconds)
2013-12-21 06:43:35	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2013-12-21 09:00:46	-->	hashcat (~kv2a@36-238-37-236.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-21 09:25:21	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-21 09:28:39	-->	b4283 (~b4283@114-39-252-115.dynamic.hinet.net) has joined #haskell.tw
2013-12-21 09:46:24	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Ping timeout: 246 seconds)
2013-12-21 10:00:00	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 252 seconds)
2013-12-21 10:10:32	<--	hashcat (~kv2a@36-238-37-236.dynamic-ip.hinet.net) has quit (Read error: Operation timed out)
2013-12-21 10:29:43	-->	suhorng (~suhorng@118-166-51-126.dynamic.hinet.net) has joined #haskell.tw
2013-12-21 10:30:05	suhorng	hashcat: 不過JHC有點舊就是, 需要 GHC 6.10~12 才編得起來..
2013-12-21 10:32:01	suhorng	"It took me around one year of low intensity studying, but one day it just made sense." 哈哈
2013-12-21 10:36:04	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 265 seconds)
2013-12-21 11:03:26	<--	b4283 (~b4283@114-39-252-115.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-21 11:20:06	-->	b4283 (~b4283@218-164-206-115.dynamic.hinet.net) has joined #haskell.tw
2013-12-21 11:40:27	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-21 11:55:57	<--	suhorng (~suhorng@118-166-51-126.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-21 12:01:03	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2013-12-21 12:22:00	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-21 12:33:13	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-21 12:39:57	<--	LQYMGT (~user@59.78.46.75) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-12-21 14:08:54	-->	hashcat (~kv2a@36-238-37-236.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-21 17:04:29	-->	cibs_ (~cibs@218.211.32.194) has joined #haskell.tw
2013-12-21 17:08:00	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Ping timeout: 256 seconds)
2013-12-21 17:56:10	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-12-21 18:03:01	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-21 18:46:47	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-21 18:50:35	<--	cibs_ (~cibs@218.211.32.194) has quit (Ping timeout: 256 seconds)
2013-12-21 18:54:36	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-21 18:59:40	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-21 19:27:05	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-21 19:51:35	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-21 19:51:42	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-21 19:53:07	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2013-12-21 19:56:42	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-21 20:56:43	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-21 21:23:27	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 240 seconds)
2013-12-21 21:24:40	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-21 21:24:41	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-21 22:22:25	mno2	https://www.quora.com/Reviews-of-Haskell/review/Edward-Kmett
2013-12-21 22:24:28	mno2	or http://pastebin.com/cGaKCq2D
2013-12-21 22:55:35	hashcat	Haskell is the reason I am still a programmer today. 這句真是各種豪氣
2013-12-21 23:00:41	hashcat	只是在老闆面前講不太出來
2013-12-22 00:08:16	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-22 00:20:23	<--	b4283 (~b4283@218-164-206-115.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-22 00:31:10	<--	hashcat (~kv2a@36-238-37-236.dynamic-ip.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-22 00:40:18	--	chihhsin is now known as pichuanq
2013-12-22 00:41:20	--	darkx is now known as pichuan9
2013-12-22 00:52:39	--	pichuan9 is now known as darkx
2013-12-22 01:03:26	--	pichuanq is now known as chihhsin
2013-12-22 01:07:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-12-22 01:55:44	-->	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has joined #haskell.tw
2013-12-22 01:56:13	<--	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has quit (Client Quit)
2013-12-22 01:58:44	-->	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has joined #haskell.tw
2013-12-22 01:59:08	<--	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has quit (Client Quit)
2013-12-22 02:06:44	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-22 07:07:57	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-22 07:24:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-12-22 08:46:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-22 09:42:15	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-22 10:02:34	-->	b4283 (~b4283@218-164-200-54.dynamic.hinet.net) has joined #haskell.tw
2013-12-22 10:05:35	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-22 11:05:42	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-22 13:10:37	<--	LQYMGT (~user@59.78.46.75) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-12-22 13:24:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-12-22 13:56:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-22 15:05:41	-->	mno2 (~mno2@121.6.254.75) has joined #haskell.tw
2013-12-22 15:12:20	-->	yc0304 (~mros@140.112.211.18) has joined #haskell.tw
2013-12-22 15:12:34	mno2	https://plus.google.com/+YinWang/posts/Bj7tJKaUbc2  Second comment:  Racket can use image?
2013-12-22 15:13:12	mno2	https://plus.google.com/photos/+YinWang/albums/5960098365186631281/5960098365904262578?pid=5960098365904262578&oid=117380487359344039293
2013-12-22 15:23:13	<--	yc0304 (~mros@140.112.211.18) has quit (Quit: leaving)
2013-12-22 15:43:55	CindyLinz	最近寫 Haskell 遇到一個問題.. QQ
2013-12-22 15:44:15	CindyLinz	我在寫一個用不到 Show a 的函數
2013-12-22 15:44:36	mno2	?
2013-12-22 15:44:47	CindyLinz	但為了 debug 方便, 測的時候放的東西是可以 show 的, 然後想在跑一半的時候 show 它
2013-12-22 15:45:11	CindyLinz	compiler 當然就叫了.. 因為我操作的函數是 polymorphic 的, 沒有指定實體 type
2013-12-22 15:45:25	CindyLinz	然後 class 的要求沒有說要有 Show a
2013-12-22 15:45:32	CindyLinz	所以我就暫時加一個 Show a 上去..
2013-12-22 15:45:45	CindyLinz	接下來.. 呼叫它的函數也都需要加上 Show a..
2013-12-22 15:46:05	CindyLinz	等 debug 完成以後, 再把所有多加的 Show a 通通拔掉
2013-12-22 15:46:20	CindyLinz	這實在太苦了 orz
2013-12-22 15:46:45	mno2	我也有想過
2013-12-22 15:46:50	CindyLinz	這怎麼辦? ^^|
2013-12-22 15:46:56	mno2	不過似乎沒有好解法
2013-12-22 15:47:17	CindyLinz	如果可以在我要 debug 的函數裡面加上可以 detect type 的寫法
2013-12-22 15:47:41	mno2	如果有 unsafeShow 之類的就好了
2013-12-22 15:47:43	CindyLinz	可以如果傳進來的時候有 Show a, 那 compiler 就生出會 show 的動作, 不然就用另一個動作
2013-12-22 15:48:04	CindyLinz	如果改用 Typeable 和 Dynamic 的話雖然就可以 runtime detect 一些東西
2013-12-22 15:48:22	CindyLinz	可是要把所有的函數 type 都加上 Typeable 的話.. 那跟 Show a 一樣慘嘛
2013-12-22 15:48:27	CindyLinz	字還更多 XD
2013-12-22 15:48:53	mno2	是啊
2013-12-22 16:04:32	mno2	http://llvm.org/devmtg/2013-11/
2013-12-22 16:04:49	mno2	好多 video 可以看
2013-12-22 16:32:46	drbean	j
2013-12-22 17:28:18	-->	hashcat (~kv2a@36-238-37-236.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-22 17:47:35	<--	letoh (~stackvm@203-67-180-157.adsl.dynamic.seed.net.tw) has quit (Read error: Connection reset by peer)
2013-12-22 18:20:03	-->	suhorng (~suhorng@118-166-51-126.dynamic.hinet.net) has joined #haskell.tw
2013-12-22 18:22:27	<--	mno2 (~mno2@121.6.254.75) has quit (Quit: mno2)
2013-12-22 19:18:40	suhorng	https://github.com/bos/llvm/blob/master/examples/Fibonacci.hs 拿Haskell來實作DSL真的很酷XD
2013-12-22 19:18:59	suhorng	看那精美的 `buildMod` 函式, 跟寫 llvm asm 沒兩樣xd
2013-12-22 19:48:21	-->	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-12-22 20:21:15	<--	b4283 (~b4283@218-164-200-54.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-22 20:22:31	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-22 20:38:14	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Operation timed out)
2013-12-22 20:46:02	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-22 21:11:33	<--	suhorng (~suhorng@118-166-51-126.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-22 21:23:24	<--	hashcat (~kv2a@36-238-37-236.dynamic-ip.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-22 21:35:15	-->	hashcat (~hashcat@27.52.2.215) has joined #haskell.tw
2013-12-22 22:07:27	<--	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 240 seconds)
2013-12-22 22:07:46	-->	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2013-12-22 22:21:08	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-12-22 22:28:39	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-22 23:24:19	--	superbil_c is now known as superbil__
2013-12-22 23:27:33	--	superbil__ is now known as superbil^^
2013-12-22 23:27:46	--	superbil^^ is now known as superbil_c
2013-12-23 00:23:22	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-23 00:48:16	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-23 01:32:26	-->	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 01:40:38	<--	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-23 01:41:31	-->	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 03:06:46	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tawwzucyorqczacu) has quit (Ping timeout: 252 seconds)
2013-12-23 03:08:56	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-btomtgdqiramjano) has joined #haskell.tw
2013-12-23 03:34:49	<--	caasih (~caasiHuan@114-46-147-37.dynamic.hinet.net) has quit (Quit: leaving)
2013-12-23 03:48:30	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-gpatyhkmzokcyprh) has quit (Ping timeout: 246 seconds)
2013-12-23 03:53:49	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-pvrjivxsgvipjlyy) has joined #haskell.tw
2013-12-23 05:17:28	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-pvrjivxsgvipjlyy) has quit (Ping timeout: 240 seconds)
2013-12-23 05:18:54	-->	miaout17 (uid13197@gateway/web/irccloud.com/x-zpudncmmvmfabtwd) has joined #haskell.tw
2013-12-23 09:49:12	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-23 10:21:46	-->	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-23 10:41:23	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-23 11:14:39	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 240 seconds)
2013-12-23 11:15:42	-->	petercommand (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-23 11:16:01	--	petercommand is now known as Guest48570
2013-12-23 11:50:20	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-23 12:24:51	-->	godfat (~Adium@111-251-40-123.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 13:07:26	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-23 13:12:05	<--	gko_ (~gko@218-161-19-128.HINET-IP.hinet.net) has quit
2013-12-23 13:28:34	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-23 14:09:06	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-23 14:47:34	<--	Guest48570 (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2013-12-23 14:47:34	-->	Guest48570 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-23 14:47:52	--	Guest48570 is now known as petercommand
2013-12-23 15:02:03	-->	hashcat_ (~kv2a@218-166-240-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 15:03:01	<--	hashcat_ (~kv2a@218-166-240-61.dynamic.hinet.net) has quit (Client Quit)
2013-12-23 15:11:03	<--	hashcat (~hashcat@27.52.2.215) has quit (Quit: Bye)
2013-12-23 15:11:29	-->	hashcat (~kv2a@218-166-240-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 15:12:08	<--	hashcat (~kv2a@218-166-240-61.dynamic.hinet.net) has quit (Client Quit)
2013-12-23 15:12:29	-->	hashcat (~kv2a@218-166-240-61.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 15:38:43	mno2	https://twitter.com/jekor/status/414995501042237440
2013-12-23 15:40:43	mno2	我的公司
2013-12-23 15:40:55	mno2	意者請洽 xD
2013-12-23 15:42:31	hashcat	是做啥的
2013-12-23 15:48:34	mno2	https://github.com/projectdeltasea/projectdelta/blob/master/README.md
2013-12-23 15:53:01	hashcat	百萬客戶跟9位數資金
2013-12-23 15:53:34	hashcat	真是有錢
2013-12-23 16:02:40	hashcat	haskell貌似會影響使用java的心境
2013-12-23 16:02:55	hashcat	prolog感覺沒啥影響
2013-12-23 16:03:14	CindyLinz	這什麼意思? # 16:02 < hashcat> haskell貌似會影響使用java的心境
2013-12-23 16:04:59	hashcat	就是會想包裝成haskell的寫法, 只要不取些抽象的名字讓人想到haskell, 看起來挺有新意的
2013-12-23 16:05:58	hashcat	monad就可以偽裝變成好幾種東西
2013-12-23 16:06:50	hashcat	對完全沒寫過haskell的人很唬爛
2013-12-23 16:08:26	hashcat	這是程式禪的境界, 人機一體, 沒寫到那境界所無法想像的世界
2013-12-23 16:08:50	CindyLinz	喔 XD
2013-12-23 16:09:12	CindyLinz	獨孤九劍嗎.. XD
2013-12-23 16:10:02	hashcat	或許我該去當房屋仲介了
2013-12-23 16:11:28	hashcat	prolog就只能讓我想到說要嵌一個搜尋器在java裡, 想不出什麼玩法
2013-12-23 17:02:49	-->	banacorn (8c717b66@gateway/web/freenode/ip.140.113.123.102) has joined #haskell.tw
2013-12-23 17:02:56	<--	banacorn (8c717b66@gateway/web/freenode/ip.140.113.123.102) has quit (Client Quit)
2013-12-23 17:11:56	CindyLinz	寫紅黑樹的時候覺得有好多左右對稱的程式... 然後就寫了兩遍 :(
2013-12-23 17:35:12	hashcat	CindyLinz:不把對稱中變動的東西拔出來當參數?
2013-12-23 17:35:31	hashcat	http://functionaljava.org/
2013-12-23 17:35:48	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-23 17:38:26	CindyLinz	Jλvλ.. XD
2013-12-23 17:39:05	hashcat	根本唸不出來
2013-12-23 17:39:12	hashcat	只能照字母唸
2013-12-23 17:40:00	CindyLinz	以前去東馬來西亞, 有條河就叫作 jalam..
2013-12-23 17:40:26	CindyLinz	晚點來試試看套一層 helper function 能不能怎樣變好看
2013-12-23 17:45:51	hashcat	馬來西亞是不是阿布薩耶夫那邊
2013-12-23 17:46:17	hashcat	好像是菲律賓
2013-12-23 17:46:37	hashcat	應該都沒差, 他們貌似在這兩邊跳來跳去
2013-12-23 17:47:46	CindyLinz	東馬來西亞是在婆羅洲上
2013-12-23 17:50:00	CindyLinz	嗯.. 可能是汶萊.. 是同一趟旅程, 可能記混了 XD
2013-12-23 17:50:31	hashcat	反正我不敢去了
2013-12-23 17:51:33	CindyLinz	啊? ^^|
2013-12-23 17:52:21	hashcat	不然會被綁去喝670萬的現摘椰子水
2013-12-23 17:52:42	CindyLinz	好像有很深層不易懂的梗.. ._.
2013-12-23 17:54:10	hashcat	是最近沒在看新聞吧
2013-12-23 17:54:26	CindyLinz	對 XD
2013-12-23 17:54:48	hashcat	阿布薩耶夫組織綁走台灣觀光客張安薇
2013-12-23 17:55:14	hashcat	到手6.7M放人
2013-12-23 17:55:38	CindyLinz	o.o
2013-12-23 17:55:48	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-23 17:55:52	hashcat	說啥綁匪待遇不錯無凌虐, 還特地去摘椰子水
2013-12-23 17:56:03	hashcat	給他待遇不錯
2013-12-23 17:57:14	hashcat	貌似我直接說去看聯合報頭版就好了
2013-12-23 17:58:38	hashcat	深層的梗就在聯合報頭版
2013-12-23 18:00:15	godfat	這觀光客還滿有錢的...
2013-12-23 18:01:53	hashcat	說不定是特別費還國務機要費出的
2013-12-23 18:03:19	godfat	聽起來頗有內幕
2013-12-23 18:07:35	hashcat	嗯各種內幕
2013-12-23 18:08:05	hashcat	雇傭兵公司台灣代理都出現了
2013-12-23 18:11:06	godfat	....
2013-12-23 18:28:49	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-23 19:07:53	<--	LQYMGT (~user@59.78.46.75) has quit (Remote host closed the connection)
2013-12-23 19:08:00	-->	LQYMGT` (~user@59.78.46.75) has joined #haskell.tw
2013-12-23 19:08:40	<--	LQYMGT` (~user@59.78.46.75) has quit (Client Quit)
2013-12-23 19:31:37	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-23 19:34:01	<--	godfat (~Adium@111-251-40-123.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-23 19:53:15	-->	b4283 (~b4283@218-164-216-193.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 20:41:26	-->	godfat (~Adium@114-45-179-193.dynamic.hinet.net) has joined #haskell.tw
2013-12-23 20:47:33	<--	godfat (~Adium@114-45-179-193.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2013-12-23 20:48:27	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-23 20:56:02	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-23 23:31:33	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-12-23 23:49:53	<--	hashcat (~kv2a@218-166-240-61.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-24 00:50:41	<--	b4283 (~b4283@218-164-216-193.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-24 01:41:55	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-24 10:04:17	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-24 10:13:44	mno2	https://github.com/paf31/purescript
2013-12-24 10:18:10	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-24 10:31:04	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-24 10:31:11	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: 暫離)
2013-12-24 11:54:06	-->	town55 (~1@222.215.21.90) has joined #haskell.tw
2013-12-24 11:56:03	--	b4284 is now known as b4283
2013-12-24 12:30:40	-->	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-12-24 12:32:45	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-24 13:12:16	-->	hashcat (~kv2a@1-172-184-132.dynamic.hinet.net) has joined #haskell.tw
2013-12-24 13:21:24	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-24 13:52:41	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Quit: Changing server)
2013-12-24 13:54:36	-->	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has joined #haskell.tw
2013-12-24 14:59:51	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-24 15:07:17	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-24 15:12:20	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-12-24 15:12:49	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-24 16:14:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-12-24 17:23:01	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-24 18:15:09	<--	hashcat (~kv2a@1-172-184-132.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-12-24 18:15:35	-->	hashcat (~kv2a@1-172-184-132.dynamic.hinet.net) has joined #haskell.tw
2013-12-24 18:32:33	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-24 18:52:10	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-24 18:54:36	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-24 18:56:25	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-24 20:04:55	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-24 22:00:41	<--	town55 (~1@222.215.21.90) has quit (Quit: Leaving)
2013-12-24 22:15:08	-->	b4283 (~b4283@1-172-83-241.dynamic.hinet.net) has joined #haskell.tw
2013-12-24 22:35:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-25 00:06:51	-->	hashcat_ (~kv2a@1-172-184-132.dynamic.hinet.net) has joined #haskell.tw
2013-12-25 00:07:41	<--	hashcat (~kv2a@1-172-184-132.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-25 00:24:25	<--	b4283 (~b4283@1-172-83-241.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-25 01:01:48	<--	hashcat_ (~kv2a@1-172-184-132.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-12-25 01:29:14	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 01:43:34	<--	hashcat (~hashcat@27.241.134.253) has quit (Ping timeout: 248 seconds)
2013-12-25 01:44:29	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 01:44:31	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 01:44:51	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 01:44:52	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 01:45:15	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 01:45:16	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 01:47:56	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 01:47:58	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 01:50:29	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-25 03:27:44	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-25 08:39:02	-->	jiajunwong (~jiajunwon@218.64.17.175) has joined #haskell.tw
2013-12-25 09:12:16	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-25 09:15:59	<--	jiajunwong (~jiajunwon@218.64.17.175) has quit (Quit: Leaving)
2013-12-25 10:15:56	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-25 11:54:23	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-25 13:30:10	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 13:31:34	<--	miaout17_ (~miaout17@miaout17.net) has quit (Remote host closed the connection)
2013-12-25 13:42:17	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2013-12-25 13:42:45	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-25 14:01:27	<--	hashcat (~hashcat@27.241.134.253) has quit (Ping timeout: 240 seconds)
2013-12-25 14:34:17	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:34:18	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:34:36	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:34:38	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:34:52	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:34:54	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:42:45	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:42:45	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:42:58	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:42:59	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:43:16	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:43:17	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:43:40	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:43:41	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:44:09	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:44:10	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:44:22	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:44:22	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-25 14:44:23	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 14:44:41	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 14:44:42	<--	hashcat (~hashcat@27.241.134.253) has quit (Excess Flood)
2013-12-25 15:21:56	<--	cataska (~cataska@210.64.6.233) has quit (Ping timeout: 252 seconds)
2013-12-25 15:48:05	-->	hashcat_ (~kv2a@1-172-231-191.dynamic.hinet.net) has joined #haskell.tw
2013-12-25 15:54:41	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-25 15:58:09	-->	caasih (~caasiHuan@36-233-24-239.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-25 17:21:21	<--	caasih (~caasiHuan@36-233-24-239.dynamic-ip.hinet.net) has quit (Quit: leaving)
2013-12-25 19:03:55	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-25 19:16:50	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Remote host closed the connection)
2013-12-25 19:56:32	-->	petercommand (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-25 19:56:41	--	petercommand is now known as Guest61203
2013-12-25 19:57:03	<--	Guest61203 (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2013-12-25 19:57:03	-->	Guest61203 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-25 19:57:32	--	Guest61203 is now known as petercommand
2013-12-25 19:58:02	-->	b4283 (~b4283@218-164-219-133.dynamic.hinet.net) has joined #haskell.tw
2013-12-25 20:38:14	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-25 21:35:52	<--	LQYMGT (~user@59.78.46.75) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-12-25 22:36:36	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2013-12-25 22:56:04	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-25 23:02:08	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-25 23:35:44	<--	LQYMGT (~user@59.78.46.75) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-12-26 00:08:31	<--	b4283 (~b4283@218-164-219-133.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-26 00:23:52	-->	b4283 (~b4283@1-173-100-91.dynamic.hinet.net) has joined #haskell.tw
2013-12-26 00:25:39	<--	b4283 (~b4283@1-173-100-91.dynamic.hinet.net) has quit (Client Quit)
2013-12-26 00:26:02	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-26 00:50:16	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2013-12-26 00:52:30	<--	hashcat_ (~kv2a@1-172-231-191.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-26 09:57:44	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-26 10:05:23	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-26 10:26:47	-->	mno2_ (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-26 10:31:24	-->	monochrm (trebla@216.138.220.146) has joined #haskell.tw
2013-12-26 10:33:58	<--	mno2 (~mno2@49.128.60.52) has quit (*.net *.split)
2013-12-26 10:33:58	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2013-12-26 10:33:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-12-26 10:34:13	--	mno2_ is now known as mno2
2013-12-26 10:34:13	--	monochrm is now known as monochrom
2013-12-26 10:41:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-26 12:04:01	-->	flter_ (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-26 12:05:09	<--	flter_ (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (Client Quit)
2013-12-26 13:31:43	<--	UncleHandsome (~sora@140-113-138-8.Dorm12.NCTU.edu.tw) has quit (Ping timeout: 243 seconds)
2013-12-26 13:50:39	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-26 14:04:07	-->	cataska (~cataska@118-163-69-2.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-26 14:27:13	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-26 17:02:10	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-26 17:02:43	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-26 17:32:45	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2013-12-26 17:39:01	-->	hashcat_ (~kv2a@118-171-193-247.dynamic.hinet.net) has joined #haskell.tw
2013-12-26 17:46:01	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-26 18:57:17	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-26 19:04:17	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-26 19:47:28	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-26 19:53:26	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2013-12-26 20:14:10	-->	b4283 (~b4283@218-164-220-90.dynamic.hinet.net) has joined #haskell.tw
2013-12-26 21:30:42	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2013-12-26 21:30:42	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-12-26 21:30:42	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-12-26 21:30:42	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia flter gko hashcat hashcat_ hychen lambdabot letoh liuzhoou logfat___ miaout17 monochrom petercommand shik_ superbil_c]
2013-12-26 21:30:42	--	Channel #haskell.tw: 25 nicks (0 ops, 0 halfops, 0 voices, 25 normals)
2013-12-26 21:31:01	--	Mode #haskell.tw [+cnt]
2013-12-26 21:31:01	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-12-26 22:03:57	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-26 22:03:57	--	Topic for #haskell.tw is "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-12-26 22:03:57	--	Topic set by CindyLinz on Tue, 11 Dec 2012 21:20:52
2013-12-26 22:03:57	--	Nicks #haskell.tw: [a2n b4283 cataska cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia flter gko hashcat hashcat_ hychen lambdabot letoh logfat___ miaout17 monochrom petercommand shik_ superbil_c]
2013-12-26 22:03:57	--	Channel #haskell.tw: 24 nicks (0 ops, 0 voices, 24 normals)
2013-12-26 22:03:57	***	Buffer Playback...
2013-12-26 22:03:57	--	Notice(morgan.freenode.net) -> #haskell.tw: [21:50:19] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
2013-12-26 22:03:57	***	Playback Complete.
2013-12-26 22:04:18	--	Mode #haskell.tw [+cnt]
2013-12-26 22:04:18	--	Channel created on Mon, 11 Jun 2012 11:00:00
2013-12-26 22:08:44	-->	suhorng (~suhorng@118-166-53-203.dynamic.hinet.net) has joined #haskell.tw
2013-12-26 22:09:08	suhorng	http://yinwang0.wordpress.com/2013/12/24/oop/ 對OOP的砲火依舊猛烈
2013-12-26 22:10:47	letoh	is everything an object 這點好像在 g+ 上說過了?
2013-12-26 22:12:13	suhorng	沒仔細追 g+ XD
2013-12-26 22:19:33	hashcat_	prolog有加進OO的傾向
2013-12-26 22:20:34	letoh	oo 的 prolog 要叫 oop ? (抱歉這實在很冷XD
2013-12-26 22:20:51	-->	godfat (~Adium@114.45.183.163) has joined #haskell.tw
2013-12-26 22:21:28	hashcat_	暈
2013-12-26 22:22:06	hashcat_	我是很懷疑他是否真言之有物
2013-12-26 22:22:45	letoh	p 開頭語言還不少  以前 object pascal 好像沒有什麼特別的簡稱
2013-12-26 22:23:19	hashcat_	簡稱下去就變OP了
2013-12-26 22:23:31	letoh	XDXD
2013-12-26 22:24:25	letoh	不過以前 object pascal 紅的時候我沒參與到，開始學的時候已經是 delphi 的時代了，mailing list 上很少有人提 object pascal 這名字@_@
2013-12-26 22:25:06	hashcat_	這個我覺得比你講得還冷ㄟ
2013-12-26 22:25:35	hashcat_	看王垠文像是看天書唉
2013-12-26 22:26:21	letoh	很王垠的感覺? XD
2013-12-26 22:26:26	hashcat_	講程式講到一行程式碼都沒有
2013-12-26 22:27:21	hashcat_	跟什麼佛學講量子力學一個方程式都沒有
2013-12-26 22:28:53	petercommand	這比喻XD
2013-12-26 22:29:28	hashcat_	其他學科有這傾向, 越外行越長篇大論, 用越多形容詞
2013-12-26 22:29:43	hashcat_	但他又不是外行, 還能有這特徵
2013-12-26 22:30:34	b4283	文好長
2013-12-26 22:31:01	hashcat_	形容詞應該補充為標準不明確的形容詞
2013-12-26 22:31:36	hashcat_	若是有個閥值, 大於多少算快, 小於多少算慢之類的定義就還好
2013-12-26 22:44:28	petercommand	" It is bad idea of giving the programmers the power of defining control structures" 好像還好?
2013-12-26 22:48:41	suhorng	說到樓上這句, 我在想說 FP 給的 power 不是更大嗎... Scheme給的還特別大耶
2013-12-26 22:49:13	suhorng	雖然他也有提到就是..
2013-12-26 22:50:24	hashcat_	來實驗設計
2013-12-26 22:50:34	hashcat_	統計一票不懂程序的菜鳥, 讓高手只用一個月教一個語言, 測量那些菜鳥編程的速度和行數, 出誤導性題目測量犯錯率和完成率
2013-12-26 22:51:01	hashcat_	haskell高手教haskell, python高手教python這樣
2013-12-26 22:51:25	hashcat_	相信prolog一定會勝出
2013-12-26 22:51:30	letoh	XDXD
2013-12-26 22:51:42	letoh	如果 haskell 高手教 python，會變怎樣?
2013-12-26 22:51:57	b4283	vim 高手教 vim, emacs 高手教 emacs
2013-12-26 22:51:59	suhorng	可能會出現 "python's lambda is broken"
2013-12-26 22:52:09	letoh	suhorng++ XD
2013-12-26 22:52:13	godfat	XDDDDD+++
2013-12-26 22:52:31	hashcat_	haskell高手也可能說他不會python
2013-12-26 22:53:15	 *	letoh 太經典了可以擴散到 plurk/twitter 上XD
2013-12-26 22:53:22	petercommand	XD
2013-12-26 22:53:58	suhorng	這..我只是引述以前的戰文的標題阿XD""
2013-12-26 22:54:25	letoh	印象中那個 blog 有不少引戰文XD
2013-12-26 22:54:39	hashcat_	哪個blog?
2013-12-26 22:54:51	godfat	可是我真的覺得 python 很多 fp 的功能都是.. 很不好用 O_o
2013-12-26 22:54:52	godfat	之前想反轉字串，然後發現他好多東西都是 in-place 的
2013-12-26 22:55:02	letoh	對
2013-12-26 22:55:10	suhorng	in-place XD
2013-12-26 22:55:36	suhorng	hashcat_: 搜尋 python's lambda is broken 應該會找到那個blog
2013-12-26 22:55:40	letoh	godfat: Guido 自己寫了幾篇勸世文說 python 不是讓你拿來寫 fp 用的XD
2013-12-26 22:56:37	godfat	letoh, .......好吧，我認了，我同意。偏偏好多人都喜歡亂跟 fp 扯上關係..
2013-12-26 22:56:44	suhorng	letoh: 不過我怎麼對引戰文沒什麼印象..?
2013-12-26 22:57:01	hashcat_	想用分類雙盲測試跟交叉驗證結束這些亂七八糟的戰文
2013-12-26 22:57:21	suhorng	然後昨天看到很有趣的 http://blog.lab49.com/archives/3011 (雖然應該是舊消息了)
2013-12-26 22:57:25	letoh	suhorng: 唔  可能我記錯了  因為這標題記得好幾個地方出現過
2013-12-26 22:58:10	suhorng	一個型別 跟他的zipper之間 有某種類似微分的關係XD
2013-12-26 22:59:23	letoh	http://python-history.blogspot.tw/2009/04/origins-of-pythons-functional-features.html
2013-12-26 22:59:40	CindyLinz	偏微分
2013-12-26 23:00:49	letoh	Guido 在講 TRE 時也提到
2013-12-26 23:00:53	letoh	"I don't believe in recursion as the basis of all programming. This is a fundamental belief of certain computer scientists, especially those who love Scheme and like to teach programming by starting with a "cons" cell and recursion."
2013-12-26 23:01:28	letoh	現在 google 好像變聰明  隨便丟幾個關鍵字就找到了XD
2013-12-26 23:01:30	suhorng	喔 偏微分w
2013-12-26 23:02:55	-->	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has joined #haskell.tw
2013-12-26 23:03:25	suhorng	letoh: XDDD
2013-12-26 23:04:28	hashcat_	prolog還是各種冷清
2013-12-26 23:04:30	letoh	那篇是 Guido 在說明為啥 Python 不做 TRE
2013-12-26 23:04:58	letoh	hashcat_: 辛苦了... 有看過一點，但實在沒深入玩過XD
2013-12-26 23:05:03	godfat	ruby 有做耶，不過是個 compile option...
2013-12-26 23:05:53	letoh	godfat: 因為 matz 不排斥 recursion ?
2013-12-26 23:06:11	letoh	雖說他是從 lisp 世界來的...
2013-12-26 23:06:27	godfat	這我就不知道了，不過還有加 curry, 加進去時 matz 說 for functional kids
2013-12-26 23:06:39	letoh	好親切XDXD
2013-12-26 23:07:06	godfat	現實上倒是沒看過有人在用.. 老實講不是預設，composition 也不方便時，curry 實在用處不大
2013-12-26 23:07:31	hashcat_	suhorng: 至少要看下table跟index
2013-12-26 23:08:01	suhorng	table跟index?
2013-12-26 23:08:48	hashcat_	tabled讓prolog免於無窮搜尋
2013-12-26 23:09:03	godfat	哇，好帥喔，byte code compile option 居然可以 runtime 調整...
2013-12-26 23:09:03	godfat	我之前試是整個 ruby 要重新 compile 說
2013-12-26 23:09:03	godfat	RubyVM::InstructionSequence.compile_option = {
2013-12-26 23:09:03	godfat	  :tailcall_optimization => true,
2013-12-26 23:09:04	godfat	  :trace_instruction => false
2013-12-26 23:09:04	godfat	}
2013-12-26 23:09:04	godfat	加上去之後後面的程式就有 TCO 了耶
2013-12-26 23:09:37	hashcat_	我找下文
2013-12-26 23:09:45	suhorng	哇!
2013-12-26 23:10:23	hashcat_	tabling其實就是memoization
2013-12-26 23:10:40	letoh	cache
2013-12-26 23:11:13	hashcat_	Term indexing貌似沒那麼重要
2013-12-26 23:11:17	letoh	在程式裡亂改 vm 參數會不會遇到打架的參數啊?
2013-12-26 23:12:32	CindyLinz	那些好喜歡跟 FP 扯上關係的人, 偏偏又不來玩真正的 FP... QQ
2013-12-26 23:13:16	godfat	letoh, 我猜是會的，所以我還滿意外可以這樣做
2013-12-26 23:13:39	godfat	CindyLinz, 真的，有時候看到都覺得好火... 搞不清楚狀況的傢伙
2013-12-26 23:13:47	hashcat_	suhorng: Modes, DCG, Constraints, Higher-order有兩種ISO用call謂詞做, 另一種是像是HiLog
2013-12-26 23:14:13	letoh	像 c 有的 pragma 也很討厭  非用不可的時候只好細心一點管理XD
2013-12-26 23:14:48	godfat	王垠的文章還沒看完，其實我大抵同意他的說法，但身為一個 OOP 喜愛者，我不覺得這算是打擊 OOP, 因為本來對我來說 OOP 就只是一個便利的工具而已，很多東西都不用也不能強求
2013-12-26 23:15:19	suhorng	hashcat_: ...我可以說我完全看不懂嗎QQ
2013-12-26 23:15:30	suhorng	最近我又開始碰C++ (遮臉)
2013-12-26 23:15:39	godfat	letoh, 可以限制 scope 應該就好，例如 file scope 之類的
2013-12-26 23:15:42	hashcat_	suhorng: 你要是看得懂我就沒啥好講啦
2013-12-26 23:16:12	petercommand	dynamic scope...
2013-12-26 23:16:16	hashcat_	只是想秀一下prolog有不少可以深的地方
2013-12-26 23:16:39	suhorng	邏輯!
2013-12-26 23:17:39	letoh	file scope 大概是基本要求了吧  不然太可怕XD   include 個檔案進來，結果裡面改了參數XD
2013-12-26 23:18:07	hashcat_	Constraints比較好講, 就是可以拿來表述解應符合的條件, 像是線性規劃或組合優化之類的問題
2013-12-26 23:18:49	godfat	XD
2013-12-26 23:18:50	godfat	不過像 ruby 其實沒有檔案的概念，就不太容易做 file scope..
2013-12-26 23:19:13	hashcat_	suhorng:另外尾遞歸和物件導向跟prolog意外的合
2013-12-26 23:19:29	hashcat_	suhorng:不灌了噗噗, 都是能查的詞
2013-12-26 23:19:45	suhorng	XDD
2013-12-26 23:19:47	suhorng	好喔
2013-12-26 23:20:22	petercommand	function scope之類的呢?
2013-12-26 23:21:02	hashcat_	我自己是偏向xsb prolog還有基於前者的flora-2, 不過論實用還是入門都是swi佔優
2013-12-26 23:21:08	letoh	block scope
2013-12-26 23:21:31	suhorng	套件比較完整的樣子?
2013-12-26 23:21:55	godfat	ruby 的話，function/block scope 大概是靠 ensure
2013-12-26 23:22:35	hashcat_	suhorng: xsb特性比較全, 不過連有在更新的編輯器都無, 很haskell的感覺
2013-12-26 23:23:00	hashcat_	suhorng:swi含各種工具
2013-12-26 23:23:02	b4283	Design Patterns 書被批很慘
2013-12-26 23:24:12	godfat	我覺得是層次不一樣的問題，我覺得王垠可能有一個毛病是，學會了更好的東西後，開始回頭批評之前的東西很差，但其實那是一個學習的過程
2013-12-26 23:24:30	hashcat_	suhorng: xsb是研究用兼商用, 會比較多實驗的特性可以玩
2013-12-26 23:25:01	suhorng	嗯@@
2013-12-26 23:25:14	suhorng	GHC表示 XD
2013-12-26 23:26:32	hashcat_	suhorng: xsb還有flora-2這系統可以玩
2013-12-26 23:33:11	hashcat_	suhorng: flora-2有一個很吸引人的說法叫可計算知識
2013-12-26 23:33:50	hashcat_	suhorng: 不論對人對計算機都是有意亦可言的東西!
2013-12-26 23:33:57	hashcat_	*意義
2013-12-26 23:41:42	<--	suhorng (~suhorng@118-166-53-203.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-27 00:03:10	<--	b4283 (~b4283@218-164-220-90.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-27 01:02:29	<--	hashcat (~hashcat@27.241.134.253) has quit (Quit: Bye)
2013-12-27 01:02:41	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-27 01:04:26	<--	hashcat_ (~kv2a@118-171-193-247.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-12-27 01:17:44	--	darkx is now known as darkx_slzzp
2013-12-27 01:25:24	<--	mno2 (~mno2@bb116-15-44-14.singnet.com.sg) has quit (Quit: mno2)
2013-12-27 03:32:20	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 261 seconds)
2013-12-27 03:59:36	CindyLinz	Design pattern 的確是誤我良多啊... (遠目)
2013-12-27 04:05:50	monochrom	design patterns 沒有錯, 錯的是程式語言. 某程式語言不准你做某 abstraction, 那麼你唯把那個 abstraction 轉為一個 design pattern
2013-12-27 04:07:05	monochrom	例如說 Command 吧, 分明是程式語言沒有簡易 lambda 所致
2013-12-27 04:07:39	monochrom	又例如 Composite, 只因為程式語言沒有 algebraic data type
2013-12-27 04:09:55	monochrom	Visitor 更開宗明義扮 CLOS 的 multiple dispatch
2013-12-27 04:30:28	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-27 04:33:28	<--	godfat (~Adium@114.45.183.163) has quit (Ping timeout: 255 seconds)
2013-12-27 04:41:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-27 07:19:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-12-27 07:58:16	--	darkx_slzzp is now known as darkx
2013-12-27 09:54:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-27 10:03:16	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-27 10:07:26	-->	hashcat_ (~kv2a@36-238-38-133.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-27 10:25:14	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-27 10:43:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-27 10:45:56	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-27 11:58:10	CindyLinz	monochrom: 可是我剛學 design pattern 的那日子....
2013-12-27 11:58:15	CindyLinz	會有一種 fu
2013-12-27 11:58:39	CindyLinz	就好像在寫程式的時候, 每多用一個有名字的 pattern, 就可以 +5 點攻擊力
2013-12-27 11:58:52	CindyLinz	所以花了很多力氣在找哪裡可以套 pattern...
2013-12-27 11:59:08	monochrom	我也是
2013-12-27 11:59:18	monochrom	夢醒了!
2013-12-27 11:59:23	CindyLinz	這部分的確錯在 design pattern 這本書吧 XDDD
2013-12-27 11:59:30	favonia	CindyLinz: 那現在你覺得有哪些 pattern 是可以講的 xD
2013-12-27 11:59:33	CindyLinz	好啦, 錯在我啦 XD
2013-12-27 11:59:48	CindyLinz	builder 還不錯啊... 如果沒有 monad 的話..
2013-12-27 12:00:11	CindyLinz	facade 也不算是製造問題, 只是有說等於沒說 XD
2013-12-27 12:00:31	favonia	CindyLinz: 我記得 GoF 好像也沒有說他們覺得這個很好？？？可能我記憶有錯就是了
2013-12-27 12:00:42	CindyLinz	我也很久沒看了..
2013-12-27 12:00:52	CindyLinz	只是我後來還修了一門 OOAD 的課, 就是在教 design pattern
2013-12-27 12:01:01	CindyLinz	土木系的喔 XD
2013-12-27 12:01:18	favonia	然後他們好像不支持繼承
2013-12-27 12:01:37	CindyLinz	修課的時候有時候被要求要把一團程式硬分為什麼 pattern
2013-12-27 12:01:58	CindyLinz	可是那明明就是從不同的角度去看, 就會看到不同的 pattern 啊 @@"
2013-12-27 12:02:19	CindyLinz	delegation 還不錯.. 但它就是一個 callback.. :Q
2013-12-27 12:03:31	favonia	我覺得裡面所有跟 singleton 相關的都很蠢 xD
2013-12-27 12:03:32	CindyLinz	類似的 template 也不錯, 雖然現在看, 覺得它是 applicative 或 monad
2013-12-27 12:03:43	CindyLinz	singleton 還有別的相關的喔? ^^|
2013-12-27 12:04:03	favonia	有吧但我太久沒看了
2013-12-27 12:04:22	CindyLinz	singleton 那時看就覺得這有點糟 XD
2013-12-27 12:05:17	CindyLinz	覺得 private, public, protected 的設計也不好
2013-12-27 12:05:27	CindyLinz	這不是工程師之間 spec 講好就好了嗎 @@"
2013-12-27 12:06:17	favonia	CindyLinz: 問題在於繼承吧
2013-12-27 12:07:13	favonia	喔還有一堆 parametric polymorphism 可以解決的問題
2013-12-27 12:07:46	favonia	我印象中 Proxy pattern 的限制根本是語言本身太爛 xDDD
2013-12-27 12:07:54	CindyLinz	所以遇到有人在罵 design pattern 的文章, 不管其他部分的內容如何, 先 +10 分.. XD
2013-12-27 12:08:16	favonia	噗
2013-12-27 12:15:22	favonia	當時為了要解釋為什麼那 23 個 design patterns 很多都是因為他參考的語言太爛，才認真看的（哭
2013-12-27 12:18:20	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-27 12:29:19	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2013-12-27 12:29:48	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2013-12-27 12:45:34	hashcat_	又可以趁機吹prolog
2013-12-27 12:53:36	-->	godfat (~Adium@111-248-146-211.dynamic.hinet.net) has joined #haskell.tw
2013-12-27 13:06:37	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2013-12-27 13:16:59	-->	chihhsin (~starbops@140.113.121.170) has joined #haskell.tw
2013-12-27 13:17:09	CindyLinz	那如果寫個文章用 functional style 來一一對應解決這些 pattern 有沒有搞頭呢? @@"
2013-12-27 13:22:15	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-12-27 13:25:52	suhorng	哇 沒跟到 design pattern 的討論
2013-12-27 13:26:36	suhorng	monochrom: 太同意了 這學期參加個DP讀書會, 感想是很多 design pattern 是用來展示 "純粹OO" 的缺點...
2013-12-27 13:28:48	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2013-12-27 13:31:05	godfat	我覺得倒也不一定是 OO, 像上面提到 CLOS
2013-12-27 13:31:31	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Ping timeout: 272 seconds)
2013-12-27 13:32:15	godfat	CindyLinz, 不過我覺得還是要看語言就是了，
2013-12-27 13:32:15	godfat	提到一堆好方法，結果 java 不能用還是沒用？
2013-12-27 13:32:19	_13h	亂入一個問題..  昨天提到 curry 的時候想到的，currying 跟 partial application 怎麼區分？還是根本一樣？
2013-12-27 13:32:56	godfat	curried function 可以被 partially apply?
2013-12-27 13:33:49	_13h	我以為產生 curried function 的過程就是在做 partial apply 了？
2013-12-27 13:35:29	godfat	map 是 curried function, map f 是 partial application to map?
2013-12-27 13:36:15	_13h	唔，看來我對 curried function 這個詞的理解有問題，我先確認一下XD
2013-12-27 13:37:30	godfat	話說回來，看到很多像是 design patterns in ruby 也覺得滿蠢的
2013-12-27 13:37:30	godfat	不知道內容都寫些啥，懶得翻...
2013-12-27 13:38:34	_13h	wikipedia: "Note, however, that currying, while similar, is not the same operation as partial function application."
2013-12-27 13:38:48	godfat	以 haskell 而言的話... 類似這樣
2013-12-27 13:38:48	godfat	curried function: fst = \a -> \b -> a
2013-12-27 13:38:48	godfat	uncurried function: fst = \(a, b) -> a
2013-12-27 13:38:58	CindyLinz	godfat: 可以用: 這裡不會有這個問題, 也算是一種展示法呀 ^^
2013-12-27 13:39:13	CindyLinz	我指的「搞頭」是... 拿來當 FP 的宣傳 XD
2013-12-27 13:39:45	godfat	XDDD 好吧，不過我覺得很多用主流語言的人，心裡其實對其他東西是漠不關心的，能用就能用，更好用就更好用，所以呢？...
2013-12-27 13:39:47	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-12-27 13:41:23	_13h	再亂入一下，這幾天才在 g+ 看到一篇文章，大致是說宣傳還是廣告之類的，應該是讓對方知道用了以後會有什麼變化，而不是被宣傳的東西本身有多好  (記不得原始內容，用自己的理解隨便翻譯
2013-12-27 13:42:08	suhorng	喔喔, 好像知道 CLOS multiple dispatch 那個在說什麼XD
2013-12-27 13:42:50	CindyLinz	_13h: 可是 curry function 還是可以 fully apply 啊..
2013-12-27 13:43:27	_13h	原來 curried function 中文翻譯是 鞣製函式   之前好像有看過，但每次都記不起來XD
2013-12-27 13:43:40	CindyLinz	台灣翻譯嗎? @@"
2013-12-27 13:43:42	_13h	嗯... 原來如此
2013-12-27 13:43:43	suhorng	...完全不會唸的字
2013-12-27 13:43:50	b4283	還用革部的，是什麼皮制品嗎
2013-12-27 13:43:52	godfat	我記得我當年看 visitor 也是看好久，現在回想起來那書其實有點誤導，不過很久沒看，也不記得確切用語
2013-12-27 13:43:52	godfat	那時候的印象是，他的意思是「這個東西就是要這樣寫」
2013-12-27 13:43:52	godfat	而不是「因為我們要什麼，但有這個限制，所以只好這樣」
2013-12-27 13:44:05	b4283	godfat 打字好快
2013-12-27 13:44:11	godfat	不如說咖哩函數好了 @@
2013-12-27 13:44:13	suhorng	話說用 functional 來對應 GoF 那些 pattern 有很多人寫過了
2013-12-27 13:44:14	_13h	那個翻譯是在一個看起來像台灣人維護的 blog 上看到的XD
2013-12-27 13:44:18	godfat	還好耶，我打字不算快的 @@
2013-12-27 13:44:22	_13h	咖哩函數++
2013-12-27 13:44:25	CindyLinz	可是 haskell 裡面的 fst = \(a, b) -> a 其實是視為一個只有一個函數的函教吧?
2013-12-27 13:44:28	suhorng	但是 functional language 也有自己的某些patttern...
2013-12-27 13:44:33	b4283	剛剛瞬間打了三行 XD
2013-12-27 13:44:41	suhorng	可以打好一次送出吧XD
2013-12-27 13:44:41	CindyLinz	只是這個參數的 type 是 pair
2013-12-27 13:44:52	suhorng	對話突然變multiple thread了
2013-12-27 13:44:57	godfat	uncurry 不是這樣嗎？
2013-12-27 13:45:19	CindyLinz	godfat: 是這樣啊.. 也許該說, haskell 裡面只有 curry 的作法..
2013-12-27 13:45:24	CindyLinz	uncurry 是在 hack.. XD
2013-12-27 13:45:26	godfat	是說也有人說 monad 是 pattern, 我覺得這樣說也沒啥錯
2013-12-27 13:45:36	suhorng	我想他可能是想說 uncurry f (a, b) = f a b?
2013-12-27 13:45:41	godfat	是沒錯，但是要解釋也只能這樣了？ XD
2013-12-27 13:45:50	CindyLinz	suhorng: 這樣依然是一個 pair 參數啊 ^^|
2013-12-27 13:46:03	suhorng	是啦, 因為沒有那種"多"參數..XD
2013-12-27 13:46:16	b4283	用 SML 就可以 XD
2013-12-27 13:46:30	CindyLinz	godfat: 不過 haskell 裡的 monad 是實際可以使用的 code
2013-12-27 13:46:41	CindyLinz	覺得 pattern 是實際上不能直接用的 code
2013-12-27 13:46:42	suhorng	SML其實也是tuple
2013-12-27 13:46:48	CindyLinz	常常要重新寫, 只是寫起來很像
2013-12-27 13:47:06	suhorng	Scheme大概就是有沒有curry有差...括弧用法不一樣
2013-12-27 13:47:19	CindyLinz	haskell monad 太具體了, 就會覺得該叫 lib, 而不叫 pattern 了 XD
2013-12-27 13:47:26	_13h	我好像搞懂我誤解的地方了  像剛剛 godfat 說的 \a -> \b -> a ，curried function 只是說允許 partial application
2013-12-27 13:47:32	suhorng	話說雖然說monad直接可以用, 可是當萬事萬物都得用monad就各種麻煩...
2013-12-27 13:47:51	CindyLinz	那是.. 歷史因素? XD
2013-12-27 13:47:58	CindyLinz	因為 Arrow 太晚發展了.. XD
2013-12-27 13:48:08	suhorng	QQ
2013-12-27 13:48:23	CindyLinz	不然就萬事萬物都得用 Arrow... XD
2013-12-27 13:48:29	suhorng	最近寫code常常需要在某個地方加入 "產生fresh symbol" 這種東西
2013-12-27 13:48:42	suhorng	然後code就要全部翻修了...
2013-12-27 13:48:59	_13h	val curry = fn f => fn x => fn y => f(x, y);
2013-12-27 13:49:01	suhorng	這種除非一開始就知道整個程式架構不然總是要翻修orz
2013-12-27 13:49:04	CindyLinz	performUnsafeIO 可以救贖你..? XD
2013-12-27 13:50:08	suhorng	_13h: fun uncurry f a b = f (a, b);
2013-12-27 13:50:34	suhorng	與其unsafePerformIO不如跳槽QQQ
2013-12-27 13:50:53	CindyLinz	嗯, 如果不是 Haskell 這種 non-strict 的, 可能就沒必要特別把是不是一個 tuple 參數和真的 N 個參數分開看了
2013-12-27 13:51:07	CindyLinz	啊... GHC 的 Haskell 可以寫 f (# a, b #) ?
2013-12-27 13:51:17	suhorng	unboxed..
2013-12-27 13:51:33	CindyLinz	好... GHC 的 Haskell 有 uncurry.. XD
2013-12-27 13:52:19	CindyLinz	XD # 13:50 < suhorng> 與其unsafePerformIO不如跳槽QQQ
2013-12-27 13:52:36	CindyLinz	只是人生一個小汙點嘛 :p
2013-12-27 13:53:29	godfat	一顆老鼠屎 XD
2013-12-27 13:53:32	suhorng	難過
2013-12-27 13:54:15	b4283	scheme 有 curry 呀？
2013-12-27 13:54:52	suhorng	b4283: 這是肯定句還是問句？
2013-12-27 13:55:22	b4283	問句~
2013-12-27 13:57:40	suhorng	可能就是意思類似的東西吧, 但用起來因為括弧長相不一樣了
2013-12-27 13:58:08	suhorng	(define curry (lambda (f) (lambda (a) (lambda (b) (f a b)))))
2013-12-27 13:58:23	CindyLinz	用 Haskell 來實作 flyweight pattern:
2013-12-27 13:58:30	suhorng	(define uncurry (lambda (f) (lambda (a b) ((f a) b))))
2013-12-27 13:58:42	CindyLinz	天天都在 flyweight (完)
2013-12-27 13:59:21	b4283	喔，我以為你說的是 scheme 有 curry 的 syntax
2013-12-27 13:59:38	suhorng	喔喔XD
2013-12-27 14:01:04	suhorng	http://blog.ezyang.com/2010/05/design-patterns-in-haskel/ 這種文章感覺超多的...而且好像大家對裡面的design pattern理解都有點微妙的差距 XDD
2013-12-27 14:01:50	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 272 seconds)
2013-12-27 14:04:20	cataska	http://norvig.com/design-patterns/design-patterns.pdf
2013-12-27 14:04:34	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2013-12-27 14:04:52	b4283	公司的名字很有意思
2013-12-27 14:05:07	b4283	Harlequin Inc.  讓我想到 Harley Quinn
2013-12-27 14:06:21	suhorng	還有 Haskell的反擊：The category design pattern, the functor design pattern XDD
2013-12-27 14:06:25	suhorng	http://www.haskellforall.com/2012/08/the-category-design-pattern.html
2013-12-27 14:06:27	suhorng	http://www.haskellforall.com/2012/09/the-functor-design-pattern.html
2013-12-27 14:06:40	CindyLinz	那來中譯就好了.. ww
2013-12-27 14:13:57	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Ping timeout: 272 seconds)
2013-12-27 14:18:00	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-27 14:19:03	-->	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has joined #haskell.tw
2013-12-27 14:45:39	CindyLinz	覺得邪教的特性之一是會有他們特有的禁忌, 或是特定的舉動, 這好像有助於提升向心力?
2013-12-27 14:46:29	CindyLinz	然後, 這個 symbol 最好不能太難實行, 不然實際上很少做, 也就沒效果了...
2013-12-27 14:46:42	CindyLinz	嗯, 我只是在想, 可以設計某個特定的 symbol
2013-12-27 14:46:55	CindyLinz	以後寫程式的時候就要求要打進去.. XD
2013-12-27 14:47:15	CindyLinz	不能太難記.. XD
2013-12-27 14:48:28	monochrom	我喜歡咖喱羊肉 curry lamb :)
2013-12-27 14:50:52	godfat	像這樣？
2013-12-27 14:50:53	godfat	{-# LANGUAGE TemplateHaskell #-}
2013-12-27 14:52:26	CindyLinz	呃.. 這好像不夠特殊沒啥心理上的凝聚力 XD
2013-12-27 14:52:45	CindyLinz	然後別的語言也要可以用啊 :p
2013-12-27 14:53:04	CindyLinz	大概是個放在註解裡的東西吧 @@"
2013-12-27 14:53:43	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-27 14:53:44	CindyLinz	像是 Slogan.. Functions rule the world!
2013-12-27 14:53:52	godfat	我也可以放在 ruby 裡 XDDD
2013-12-27 14:53:52	godfat	可惜要放在註解裡就是了
2013-12-27 14:54:44	godfat	找個可以不用當註解放在各種語言裡的
2013-12-27 14:57:30	CindyLinz	不用當註解放各語言嗎!?
2013-12-27 14:57:36	CindyLinz	這也太難了 orz
2013-12-27 14:58:04	CindyLinz	大小寫來歪一下好了? fUnctIOn
2013-12-27 14:58:19	godfat	參考一下 XD
2013-12-27 14:58:19	godfat	http://en.wikipedia.org/wiki/Polyglot_%28computing%29
2013-12-27 14:58:59	CindyLinz	這句也不錯.. 只是有點長 @@" A monad is just a monoid in the category of endofunctors
2013-12-27 14:59:18	CindyLinz	godfat: 可是這個補不完吧 QQ
2013-12-27 15:07:41	b4283	Does it run backwards?
2013-12-27 15:08:11	CindyLinz	這個也不錯.. ._.
2013-12-27 15:08:52	suhorng	it runs backwards XDDDD
2013-12-27 15:09:41	CindyLinz	也可以打在投影片裡, 夾帶著當浮水印 :p
2013-12-27 15:16:50	suhorng	突然想到之前看到一句話: "functional language嘛, 寫完就functional"
2013-12-27 15:19:42	CindyLinz	這啥情況 ^^|
2013-12-27 15:34:23	<--	suhorng (8c701092@gateway/web/freenode/ip.140.112.16.146) has quit (Ping timeout: 272 seconds)
2013-12-27 15:42:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2013-12-27 15:49:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-27 15:56:37	godfat	++Does it run backwards?
2013-12-27 16:09:31	--	ChanServ has changed topic for #haskell.tw from "Haskell 台灣 | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" to "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2013-12-27 16:10:57	CindyLinz	:p
2013-12-27 17:08:03	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2013-12-27 18:19:38	mno2	http://quangchien.wordpress.com/tag/haskell/page/2/    有越南版了
2013-12-27 18:44:35	<--	godfat (~Adium@111-248-146-211.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-27 18:50:44	 *	letoh 看到中2又笑了XD
2013-12-27 18:58:26	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-27 20:01:54	hashcat_	http://peaker.github.io/lamdu/
2013-12-27 20:03:23	hashcat_	不用打字直接操作語法樹的程式, haskell-like
2013-12-27 20:04:01	hashcat_	這樣學函數式也太方便
2013-12-27 20:06:18	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-27 21:04:59	-->	hashcat__ (~kv2a@36-238-38-133.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-27 21:05:44	<--	hashcat_ (~kv2a@36-238-38-133.dynamic-ip.hinet.net) has quit (Ping timeout: 252 seconds)
2013-12-27 21:30:09	-->	godfat (~Adium@114-45-179-253.dynamic.hinet.net) has joined #haskell.tw
2013-12-27 21:31:23	CindyLinz	看起來很棒.. # lamdu
2013-12-27 21:35:57	CindyLinz	中譯就叫「懶惰」好了.. XD
2013-12-27 21:56:00	letoh	印象中好像有人講過自己的 diff 程式也是以語法樹的操作為基礎做的?
2013-12-27 21:59:48	letoh	g+ 社群那邊好像被奇怪的東西入侵了?
2013-12-27 22:04:24	CindyLinz	letoh: 就... 王垠的 ydiff? https://github.com/yinwang0/ydiff
2013-12-27 22:05:48	letoh	好像是吧  不過我一看到語法樹的操作第一個想到的還是 s-exp @_@
2013-12-27 22:06:01	CindyLinz	他也是從 s-exp 發想來的
2013-12-27 22:07:04	letoh	看起來語法比較接近 haskell，這樣操作起來會不會沒那麼直覺?
2013-12-27 22:07:45	CindyLinz	你這什麼歧視言論.. ww
2013-12-27 22:07:58	CindyLinz	(逃)
2013-12-27 22:08:06	letoh	XDXD 語法的型式上感覺還是有差啊
2013-12-27 22:08:44	CindyLinz	哼我覺得 Haskell 很直覺啊!! (大聲)
2013-12-27 22:09:19	letoh	直接看 haskell 當然是很直覺啦  我是指語法樹的部份  sexp 是連視覺上都像樹XD
2013-12-27 22:09:52	CindyLinz	hmm..
2013-12-27 22:10:40	letoh	這 ide 好像不錯，會標示型別
2013-12-27 22:13:57	letoh	看了一下圖，感覺好像有點類似 blockly 那種東西...
2013-12-27 22:14:22	letoh	只是美工的部份沒那麼漂亮而已
2013-12-27 22:15:15	CindyLinz	這提示方式比 GHC 的 type error 提示好多了 QQ
2013-12-27 22:15:50	letoh	一般的 ide 大概都會做成移動過去才跳個 tooltip 顯示
2013-12-27 22:16:20	letoh	不過很吃 type inference 的語言好像這樣會方便一點
2013-12-27 22:16:54	CindyLinz	C++ (誤)
2013-12-27 22:17:01	letoh	XD
2013-12-27 22:17:14	letoh	C++ 不是直接跳個 T 出來嗎?
2013-12-27 22:17:57	CindyLinz	想到 C++11 的 auto @@"
2013-12-27 22:18:35	letoh	為什麼之前會突然跑出一堆 design pattern 的討論@_@
2013-12-27 22:19:26	CindyLinz	因為王垠的新文章.. http://yinwang0.wordpress.com/2013/12/24/oop/
2013-12-27 22:20:28	letoh	喔喔喔  這篇好長，所以只看了開頭XD
2013-12-27 22:20:58	letoh	我最近忽然又覺得 design pattern 還是挺重要的
2013-12-27 22:21:09	CindyLinz	我覺得這篇開頭兩段還蠻不錯的..
2013-12-27 22:21:20	CindyLinz	到後面就開始激動了起來... XD
2013-12-27 22:22:12	letoh	實作就隨便啦，但我覺得對某種問題的某種解決方案  在交流時有共通的語言這一點，design pattern 還是幫上不少忙 (其他部份可能都是幫倒忙比較多XD
2013-12-27 22:24:01	letoh	就像一講 queue/stack 對方馬上可以意會到需要什麼特性，或問題的本質之類的，這種感覺還不錯
2013-12-27 22:31:54	 *	letoh 想到前兩年對公司裡很喜歡 DP 的同事講過 DP 只是在補 OOPL 的缺點... 對方的表情就變得有點僵硬了XD
2013-12-27 22:37:49	letoh	"I don’t like OO at all. I use none of the OO techniques even when I write Java."   這點要怎麼辦到?  entry class 不算嗎?
2013-12-27 22:38:11	 *	letoh 還是改用 clojure ? (誤
2013-12-27 22:38:28	godfat	"I wrote everything in static in java" (設計對白)
2013-12-27 22:38:38	letoh	XD
2013-12-27 22:39:19	letoh	阿我知道了... 他說的 OO 是 message passing 那種，所以 java 沒問題的
2013-12-27 22:39:42	letoh	其實就是照平常方式寫的意思 (誤
2013-12-27 22:40:38	godfat	?
2013-12-27 22:40:38	godfat	有 late binding 不就是了？
2013-12-27 22:40:38	godfat	java 裡用很多吧？
2013-12-27 22:41:05	letoh	這倒是  所以還是得避開某些寫法XD
2013-12-27 22:41:32	godfat	stdlib 一堆都是，要完全避開我真不知道要怎麼寫
2013-12-27 22:42:15	letoh	我忘記那本書還說 java 是 pure oopl... 很多年前看的就是
2013-12-27 22:42:25	godfat	XDD
2013-12-27 22:42:56	letoh	超過十年了所以一時想不起書名  但我記得是暢銷書
2013-12-27 22:43:22	letoh	而且我看的是中譯本，就隨手拿起來翻一下序的部份而已
2013-12-27 22:43:40	godfat	(聳肩)
2013-12-27 22:43:59	godfat	我覺得程式語言的謬論真的到處都是..
2013-12-27 22:45:36	letoh	不過我應該被騙蠻久的  因為那時我只會 c++... 但我一直覺得 c++ 所謂的 oo 很複雜，所以看到 pure oopl 的說法好像有點相信XD 不過一直沒去碰 java 就是
2013-12-27 22:46:02	letoh	(因為學 c++ 就花了太多時間 沒空再學 java XD)
2013-12-27 22:46:30	godfat	反正 java 裡也沒啥特別的，我覺得 c++ 摸熟後 java 剩的也沒多少了 XD
2013-12-27 22:47:02	letoh	很久以前的印象，感覺就只是一直 casting 很煩XD
2013-12-27 22:47:27	godfat	那也是...
2013-12-27 22:47:53	letoh	然後跟 xml 是好朋友這點也很討厭
2013-12-27 22:48:35	godfat	我覺得最煩的是類似 new BufferedReader(new StreamReader(new FileReader(...))) 之類的
2013-12-27 22:48:51	letoh	scala 改善不少XD
2013-12-27 22:49:44	godfat	不過我覺得 scala 也有夠瘋狂，甚至比 c++ 還瘋.. XD
2013-12-27 22:49:44	godfat	雖然這樣說，其實我也還算喜歡就是了
2013-12-27 22:49:44	godfat	反正一堆詭異的東西就.. 不要用 XD
2013-12-27 22:50:11	-->	b4283 (~b4283@218-164-202-131.dynamic.hinet.net) has joined #haskell.tw
2013-12-27 22:50:16	godfat	有一部分原因是 jvm 就是了
2013-12-27 22:50:29	--	hashcat__ is now known as hashcat_
2013-12-27 22:51:29	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-27 22:51:47	hashcat_	scala有啥詭異
2013-12-27 22:52:14	hashcat_	我覺得很多特性都缺不了
2013-12-27 22:53:01	godfat	你的意思是很多都是必要的？我上次看到 scala 有 typed macro
2013-12-27 22:53:29	hashcat_	第一次聽過
2013-12-27 22:54:24	hashcat_	好像還不錯
2013-12-27 22:55:00	godfat	這個？ http://docs.scala-lang.org/overviews/macros/overview.html
2013-12-27 22:56:03	godfat	上次 scala 作者 (Martin ...) 有個 talk 在說 type 的問題與麻煩
2013-12-27 22:56:03	godfat	Harper 就在 twitter 上回應說那是 scala 的問題
2013-12-27 22:56:03	godfat	XD
2013-12-27 22:59:48	hashcat_	我覺得他有區分實驗跟非實驗很好
2013-12-27 23:00:10	godfat	工程是做得不錯
2013-12-27 23:00:16	hashcat_	其他貌似都沒明白在分
2013-12-27 23:00:36	godfat	這方向對不對我就不敢說了（目前傾向是錯的）
2013-12-27 23:00:49	godfat	ghc 算有吧？
2013-12-27 23:01:13	hashcat_	我喜歡實驗的概念
2013-12-27 23:01:26	hashcat_	貌似也沒有
2013-12-27 23:01:39	hashcat_	只有分擴展跟標準
2013-12-27 23:01:52	godfat	我是把擴充都當成實驗的意思.. XD
2013-12-27 23:02:08	hashcat_	新特性用陣子熟了突然給你拿掉
2013-12-27 23:02:31	hashcat_	擴展也有是已經成熟但沒進標準的
2013-12-27 23:02:45	hashcat_	實驗特性原本就有會大規模改變或拿掉的意思
2013-12-27 23:03:30	hashcat_	還可以讓不知道內部原理的不會誤用可能出包的新特性
2013-12-27 23:06:07	hashcat_	GADTs就可以說是實驗期已過了
2013-12-27 23:06:33	hashcat_	是不是實驗貌似可以看jhc有沒有當標準
2013-12-27 23:12:15	hashcat_	改一下前一句話, 看了下貌似標點符號太少
2013-12-27 23:12:34	hashcat_	 是不是實驗, 貌似可以看jhc有沒有實現, 來當標準
2013-12-27 23:17:33	godfat	也是一個方法 XD
2013-12-27 23:36:00	-->	suhorng (~suhorng@118-166-49-20.dynamic.hinet.net) has joined #haskell.tw
2013-12-27 23:36:10	suhorng	hashcat: lamdu好酷!!!!!
2013-12-27 23:39:06	suhorng	letoh: 話說...跳個T出來完全無法看阿T^T
2013-12-27 23:39:18	suhorng	他檢查時都直接帶入, 帶入錯誤的話就所有訊息都噴出來....
2013-12-27 23:40:17	letoh	其實程式碼都直接告訴你 typename T 了，不用 ide 輔助也知道XD
2013-12-27 23:41:17	suhorng	另一方面來講, 我也可寫 fun :: forall t. φ (逃)
2013-12-27 23:42:53	suhorng	真的覺得template至少有種的 parametric polymorphism + dependent type 奇怪混合體的味道...
2013-12-27 23:43:00	suhorng	不過機制差很多就是
2013-12-27 23:43:13	letoh	結果你有去找那本書來看嗎?
2013-12-27 23:43:44	suhorng	哪一本呢?
2013-12-27 23:43:56	hashcat_	suhorng: 在想像lamdu的prolog版
2013-12-27 23:43:57	letoh	你不是有在問 template 的書嗎?
2013-12-27 23:44:08	letoh	好像在 plurk 看到的XD
2013-12-27 23:44:42	suhorng	有呀 最近獲得了兩本template的書XD
2013-12-27 23:45:03	letoh	有兩本? 除了藍皮之外還有哪一本?
2013-12-27 23:45:27	suhorng	dependently typed language雖然很強, 但我一直好奇用在個比較廣泛使用的語言長怎樣
2013-12-27 23:46:11	suhorng	我這邊一本是C++ Template Metaprogramming, 另一本是C++ Templates The Complete Guide
2013-12-27 23:46:21	hashcat_	suhorng: 應該像X10那樣
2013-12-27 23:46:27	suhorng	X10?
2013-12-27 23:46:42	hashcat_	x10-lang.org
2013-12-27 23:46:51	suhorng	我有聽過的 感覺最接近實用的是 Coq 跟 Idris 兩個
2013-12-27 23:47:03	suhorng	可是兩個目的都不是那類型的實用..XD
2013-12-27 23:47:11	hashcat_	X10是很大尾的語言
2013-12-27 23:47:17	letoh	原來是那本... 那本我沒看過XD
2013-12-27 23:47:34	suhorng	有專門的workshop耶...
2013-12-27 23:47:42	hashcat_	企業很大尾, 目標也很大尾
2013-12-27 23:47:42	suhorng	letoh: 那你說的是XD?
2013-12-27 23:47:51	letoh	C++ Template Metaprogramming 好像沒有中譯版? (有的話公司就會有人買了XD
2013-12-27 23:48:11	letoh	我手上有的是 C++ Templates: The Complete Guide
2013-12-27 23:48:22	suhorng	這我不知道XD 後者我知道有中譯..圖書館有XD
2013-12-27 23:48:37	letoh	我也知道有中譯  因為公司有XD
2013-12-27 23:48:58	suhorng	C++ Template Metaprogramming看來裡面講很多 C++03 時代 boost 的作法XD
2013-12-27 23:49:01	letoh	不過後來我自己買一本就是
2013-12-27 23:49:23	godfat	我兩本都有... 現在想想覺得好羞愧 (?)
2013-12-27 23:49:29	letoh	還是蠻有參考價值
2013-12-27 23:50:29	suhorng	我現在有點期待 Effective C++11 XD
2013-12-27 23:51:28	suhorng	X01乍看之下有點奇怪lol
2013-12-27 23:51:40	suhorng	http://x10.sourceforge.net/documentation/intro/latest/html/img26.png type definition..?
2013-12-27 23:51:42	suhorng	*X10
2013-12-27 23:52:22	letoh	印象中 scot meyers 好像有說要寫 effective c++11 ?
2013-12-27 23:52:25	letoh	scott
2013-12-27 23:52:46	mno2	話說，一則關於 Coq 的軼聞是，法國人故意取一個名字讓英國人唸起來像 Cock
2013-12-27 23:54:00	mno2	就好像有人發明一個語言叫做 GG，然後台灣人唸起來就會很像「雞雞」。你用雞雞寫程式...
2013-12-27 23:54:23	letoh	XD
2013-12-27 23:54:28	mno2	我不知道是不是真的 xD
2013-12-27 23:55:26	hashcat_	GG本身也夠恐怖
2013-12-27 23:55:35	hashcat_	寫程式GG
2013-12-27 23:55:45	suhorng	寫程式GG XDD
2013-12-27 23:56:34	hashcat_	suhorng:你給我個圖片我還真看不懂要表達啥奇怪
2013-12-27 23:58:11	hashcat_	suhorng: X10 的賣點是 GPU 跟 CPU 混合的集群是用一樣的語言寫的
2013-12-27 23:58:54	hashcat_	suhorng: 還可以宣告記憶體在各個集群的佈局
2013-12-27 23:59:00	suhorng	應該是我對 object oriented 很不習慣...
2013-12-27 23:59:21	suhorng	GPU跟CPU混合..ThorScript好像也是做這個, 不過ThorScript一直還沒release
2013-12-27 23:59:30	hashcat_	suhorng: 順便有了dependent type, IBM真是無法無視
2013-12-28 00:02:13	hashcat_	suhorng: X10是統一整個網路的計算資源, 跟ThorScript有差距
2013-12-28 00:02:46	suhorng	網路!
2013-12-28 00:04:28	hashcat_	suhorng: 能宣告分佈式資料在集群中各記憶體的布局
2013-12-28 00:05:54	hashcat_	我貌似都在看些沒人在用的語言..
2013-12-28 00:06:19	suhorng	XDDD
2013-12-28 00:10:38	hashcat_	不過就是沒辦法無視
2013-12-28 00:18:52	<--	suhorng (~suhorng@118-166-49-20.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-28 00:21:45	monochrom	怎麼 IBM 時不時都想弄個統一天下的語言? 上次是 PL/I, 結果是天下反面教材.
2013-12-28 00:23:44	hashcat_	因為他是IBM
2013-12-28 00:24:24	monochrom	真是性格決定命運! XD
2013-12-28 00:24:47	hashcat_	有做有機會, 連IBM都不做就沒機會了
2013-12-28 00:25:30	hashcat_	另外一個有這種能力跟心思的公司被甲骨文吃掉啦
2013-12-28 00:28:16	hashcat_	也不是期待他有多大機會成功推廣, 只是為一種可能性全力以赴, 還有人在做的感動
2013-12-28 00:31:59	hashcat_	雖說我只是圍觀路人, 也是可以順便感動一下
2013-12-28 00:38:20	<--	hashcat_ (~kv2a@36-238-38-133.dynamic-ip.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-28 00:38:46	monochrom	但我不感動. 我認為統一天下是荒謬的.
2013-12-28 00:50:26	<--	b4283 (~b4283@218-164-202-131.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-28 00:50:35	hashcat	錢都賺飽了, 不做好玩的事還能做啥
2013-12-28 00:54:05	hashcat	洋人佔領北美洲還想著月球火星能不挖礦插國旗
2013-12-28 00:56:33	hashcat	更早前有火炮後還想著多管機砲
2013-12-28 00:59:12	hashcat	差距就慢慢拉大了, 想要把網路各資源用個語言, 也還好而已
2013-12-28 01:05:48	hashcat	有haskell想著idris
2013-12-28 01:07:41	hashcat	那個目標也算縮小了  只面向高性能計算
2013-12-28 01:08:52	hashcat	通用的話現在是python的天下
2013-12-28 01:12:13	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-28 01:45:13	letoh	python 厲害的地方在於吃到不少科學計算的市場?
2013-12-28 03:42:31	favonia	我覺得 python 這方面的優勢很不穩 lol
2013-12-28 09:48:29	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-28 11:18:08	-->	b4283 (~b4283@218-164-126-249.dynamic.hinet.net) has joined #haskell.tw
2013-12-28 11:30:53	<--	b4283 (~b4283@218-164-126-249.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2013-12-28 11:47:26	-->	b4283 (~b4283@36-238-225-1.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-28 12:10:14	<--	b4283 (~b4283@36-238-225-1.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2013-12-28 12:13:21	-->	b4283 (~b4283@36-238-229-41.dynamic-ip.hinet.net) has joined #haskell.tw
2013-12-28 13:08:25	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 252 seconds)
2013-12-28 13:10:01	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2013-12-28 14:03:53	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-28 14:41:07	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-28 14:49:46	-->	suhorng (~suhorng@118-166-49-20.dynamic.hinet.net) has joined #haskell.tw
2013-12-28 16:00:02	-->	LQYMGT (~user@59.78.46.75) has joined #haskell.tw
2013-12-28 16:00:27	<--	LQYMGT (~user@59.78.46.75) has quit (Client Quit)
2013-12-28 16:01:20	<--	chihhsin (~starbops@140.113.121.170) has quit (Quit: leaving)
2013-12-28 16:08:22	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-28 16:09:16	<--	suhorng (~suhorng@118-166-49-20.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-28 19:53:27	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-28 21:03:35	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-28 21:52:50	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-28 22:00:10	CindyLinz	"In his book, self-balancing binary search trees are less than a page of code.
2013-12-28 22:00:13	CindyLinz	Except that delete is left as an exercise to the reader.
2013-12-28 22:00:14	CindyLinz	"
2013-12-28 22:00:18	CindyLinz	# http://matt.might.net/articles/red-black-delete/
2013-12-28 22:00:48	CindyLinz	這裡的「his」指的是寫 Purely functional datastructure 的  Chris Okasaki XD
2013-12-28 22:07:05	hashcat	favonia: 中小規模科學計算開源首選
2013-12-28 22:14:25	CindyLinz	欸我不太懂欸, 為什麼 python 會擅於科學計算啊?
2013-12-28 22:14:48	hashcat	favonia:python常常比最強的沒嬴過,但在很多領域位居老二老三的
2013-12-28 22:15:01	CindyLinz	科學計算不是高階點的用 mathematica 或 matlab, 低階就用 C 直接掃了? @@"
2013-12-28 22:15:46	hashcat	個人想法是因為一件事一個方法的哲學
2013-12-28 22:16:53	hashcat	很有科學的可重複性, 另外對CS要求不高
2013-12-28 22:17:12	hashcat	matlab慢
2013-12-28 22:17:29	hashcat	用途有限
2013-12-28 22:17:41	CindyLinz	python 不會比 matlab 更慢嗎?
2013-12-28 22:17:57	CindyLinz	我記得就算是寫 C, 也要很有經驗的人能把矩陣運算寫贏 matlab
2013-12-28 22:18:15	CindyLinz	要懂得怎麼去考慮 memory locality 之類的..
2013-12-28 22:18:25	hashcat	python的矩陣包後端是fortran
2013-12-28 22:18:34	CindyLinz	不過寫 C 後來用 gsl 這套 lib 就行了..
2013-12-28 22:18:36	CindyLinz	喔
2013-12-28 22:19:17	hashcat	還有自動jit成c或opencl
2013-12-28 22:19:52	hashcat	但用法都是python
2013-12-28 22:21:05	hashcat	像統計來說的話王牌可能是R,spss
2013-12-28 22:21:21	hashcat	接下來python
2013-12-28 22:22:31	hashcat	企業It java c++ python
2013-12-28 22:22:33	CindyLinz	所以說, 因為 python 夾帶了一個還算強力的運算引擎, 然後再配合 python 本身「黏合」很方便, 所以就厲害了?
2013-12-28 22:24:06	hashcat	自動jit那個缺reflection的編譯語言就不好搞了
2013-12-28 22:24:30	CindyLinz	我正在看這篇.. http://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html
2013-12-28 22:24:48	CindyLinz	其中 Fallacy: Dynamically typed languages are weakly typed 這一段裡面講到
2013-12-28 22:25:04	CindyLinz	Dynamic type language 的強項在於它有一個 runtime
2013-12-28 22:25:27	CindyLinz	使得執行爆掉的時候可以噴出很詳細的訊息讓人知道它到底發生了什麼事
2013-12-28 22:25:40	CindyLinz	不過.. 這讓我想到 Java....
2013-12-28 22:25:58	CindyLinz	不知道作者是不是把 Java 歸為 dynamic..
2013-12-28 22:26:24	CindyLinz	然後你說的 reflection, 也讓我想到這個 @@"
2013-12-28 22:28:22	hashcat	我覺得可以協調封裝不同功能也很重要
2013-12-28 22:29:39	CindyLinz	嗯嗯嗯
2013-12-28 22:29:54	hashcat	要是字串處理perl統計R硬體輸出c的
2013-12-28 22:31:01	hashcat	會讓人有種我還是紙上作業好了的感覺
2013-12-28 22:32:26	hashcat	或者花錢請各種程序員, 但要協調會死人
2013-12-28 22:34:21	CindyLinz	你大概會想要有一種「語言包」, 裡面某一段寫 :perl 就是開始跑 perl, 寫 :R 就開始跑 R.. 然後變數可以共通著用 XD
2013-12-28 22:34:29	hashcat	順便講下符號計算 mathematica maxima sympy
2013-12-28 22:34:47	hashcat	又有python這樣
2013-12-28 22:34:54	CindyLinz	XD
2013-12-28 22:35:40	hashcat	python有夠穩
2013-12-28 22:38:30	hashcat	不得不首選
2013-12-28 22:38:41	CindyLinz	統計還有 SCSS
2013-12-28 22:38:46	CindyLinz	寫錯 XD
2013-12-28 22:38:52	CindyLinz	SPSS
2013-12-28 22:40:10	hashcat	在python之前的都很名貴
2013-12-28 22:40:23	CindyLinz	XD
2013-12-28 22:41:04	hashcat	之後的就,很多都沒之後了
2013-12-28 23:16:18	petercommand	"python之前"是指甚麼?
2013-12-28 23:19:40	-->	suhorng (~suhorng@118-166-49-20.dynamic.hinet.net) has joined #haskell.tw
2013-12-28 23:20:19	petercommand	應該說甚麼叫"之前"阿XD
2013-12-28 23:20:55	favonia	petercommand: 之錢，就是比較貴的意思
2013-12-28 23:21:23	suhorng	CindyLinz: purely functional data structure 搜下去會找到作者的心得欸 XDD 好有趣
2013-12-28 23:22:46	petercommand	favonia: XD
2013-12-28 23:38:45	monochrom	我看 python 與科學計算: 如果你只見過 fortran, c, python, 你會選哪一樣?
2013-12-28 23:38:57	mno2	原來 Reid Barton 也會出現在 mathoverflow:  http://mathoverflow.net/a/2312
2013-12-28 23:41:15	monochrom	換另一個方法講: 問: 為甚麼老人電腦班教視窗而不是Mac呢? 答: 如果你只見過視窗, 你會教哪一樣?
2013-12-28 23:43:13	CindyLinz	他指的之前之後是排名吧?
2013-12-28 23:44:09	suhorng	怎麼這樣句子聽起來有種「如果我只見過 C++, Java, Python, 要選擇 OOP 還是 functional programming 呢？」的感覺
2013-12-28 23:45:43	suhorng	"Git is a purely functional data structure" http://www.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/ XDDDD
2013-12-28 23:45:58	suhorng	他其實是種 Zipper 吧(誤)
2013-12-28 23:57:03	<--	hashcat (~hashcat@27.241.134.253) has quit (Quit: Bye)
2013-12-28 23:57:22	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2013-12-28 23:57:44	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-28 23:58:07	<--	hashcat (~hashcat@27.241.134.253) has quit (Client Quit)
2013-12-29 00:41:10	<--	suhorng (~suhorng@118-166-49-20.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-29 01:38:32	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-29 01:51:28	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-29 02:15:39	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-29 10:20:18	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-29 12:01:33	-->	YellowClothes (~mros@140.112.211.18) has joined #haskell.tw
2013-12-29 12:05:26	<--	YellowClothes (~mros@140.112.211.18) has left #haskell.tw
2013-12-29 16:19:02	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Ping timeout: 240 seconds)
2013-12-29 17:03:52	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-29 17:54:37	-->	YellowClothes (~mros@140.112.211.18) has joined #haskell.tw
2013-12-29 18:34:51	<--	YellowClothes (~mros@140.112.211.18) has left #haskell.tw
2013-12-29 19:22:04	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Remote host closed the connection)
2013-12-29 19:28:02	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-29 20:37:46	-->	hashcat (~hashcat@27.241.134.253) has joined #haskell.tw
2013-12-29 20:50:30	<--	b4283 (~b4283@36-238-229-41.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2013-12-29 21:00:49	-->	b4283 (~b4283@118.150.143.229) has joined #haskell.tw
2013-12-30 01:08:05	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-30 01:13:26	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2013-12-30 01:16:05	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2013-12-30 01:16:07	<--	b4283 (~b4283@118.150.143.229) has quit (Remote host closed the connection)
2013-12-30 04:04:36	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-30 04:06:48	<--	godfat (~Adium@114-45-179-253.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-12-30 10:17:01	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-30 10:18:14	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-30 10:18:29	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2013-12-30 10:18:55	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-30 11:40:21	<--	cataska (~cataska@118-163-69-2.HINET-IP.hinet.net) has quit (Ping timeout: 248 seconds)
2013-12-30 12:24:39	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-30 13:05:42	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 246 seconds)
2013-12-30 13:41:49	-->	godfat (~Adium@1-160-80-43.dynamic.hinet.net) has joined #haskell.tw
2013-12-30 14:12:43	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-30 14:43:34	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-30 18:33:18	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2013-12-30 18:38:11	-->	petercommand (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-30 18:38:36	--	petercommand is now known as Guest120
2013-12-30 18:52:49	<--	Guest120 (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2013-12-30 18:52:49	-->	Guest120 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2013-12-30 18:53:10	--	Guest120 is now known as petercommand
2013-12-30 19:00:09	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2013-12-30 19:50:46	<--	godfat (~Adium@1-160-80-43.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-30 20:04:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2013-12-30 20:05:13	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2013-12-30 20:06:37	<--	shik_ (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 272 seconds)
2013-12-30 20:41:25	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-30 21:11:41	-->	suhorng (~suhorng@118-166-45-49.dynamic.hinet.net) has joined #haskell.tw
2013-12-30 21:35:51	-->	b4284 (~b4283@1-172-84-205.dynamic.hinet.net) has joined #haskell.tw
2013-12-30 22:21:07	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2013-12-30 23:38:30	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-30 23:50:05	<--	b4284 (~b4283@1-172-84-205.dynamic.hinet.net) has quit (Quit: 暫離)
2013-12-30 23:52:38	<--	suhorng (~suhorng@118-166-45-49.dynamic.hinet.net) has quit (Quit: Leaving.)
2013-12-31 01:48:48	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2013-12-31 02:14:41	-->	koronas (~koronas@91.210.102.191) has joined #haskell.tw
2013-12-31 02:19:54	<--	koronas (~koronas@91.210.102.191) has quit (Remote host closed the connection)
2013-12-31 02:26:22	-->	molodoyolen (~molodoyol@91.210.101.27) has joined #haskell.tw
2013-12-31 02:27:34	<--	molodoyolen (~molodoyol@91.210.101.27) has quit (Remote host closed the connection)
2013-12-31 03:28:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-12-31 04:41:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-31 06:48:02	monochrom	台灣有沒有聖誕節法定假期?
2013-12-31 06:58:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-12-31 08:25:41	cataska_	monochrom: 以前有放假，但是卻是以行憲紀念日的名義放的假
2013-12-31 08:48:53	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 252 seconds)
2013-12-31 08:51:40	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2013-12-31 09:12:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2013-12-31 10:18:25	-->	sergeyda (~sergeyda@91.210.101.109) has joined #haskell.tw
2013-12-31 10:29:01	<--	sergeyda (~sergeyda@91.210.101.109) has quit (Remote host closed the connection)
2013-12-31 10:38:28	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2013-12-31 11:47:58	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2013-12-31 11:48:09	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2013-12-31 12:18:50	-->	b4283 (~b4283@1-172-85-226.dynamic.hinet.net) has joined #haskell.tw
2013-12-31 14:00:59	<--	monochrom (trebla@216.138.220.146) has quit (Quit: NO CARRIER)
2013-12-31 15:06:12	-->	mros (~mros@140.112.211.18) has joined #haskell.tw
2013-12-31 15:23:49	<--	mros (~mros@140.112.211.18) has quit (Ping timeout: 265 seconds)
2013-12-31 16:05:44	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2013-12-31 16:12:41	-->	mros (~mros@140.112.211.18) has joined #haskell.tw
2013-12-31 16:16:55	-->	godfat (~Adium@114-45-191-107.dynamic.hinet.net) has joined #haskell.tw
2013-12-31 16:49:17	mros	 /wc
2013-12-31 16:49:23	<--	mros (~mros@140.112.211.18) has left #haskell.tw
2013-12-31 16:52:10	-->	hashcat_ (~kv2a@1-172-240-116.dynamic.hinet.net) has joined #haskell.tw
2013-12-31 16:58:30	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2013-12-31 20:15:00	-->	mros (~mros@140.112.211.18) has joined #haskell.tw
2013-12-31 20:15:10	<--	mros (~mros@140.112.211.18) has quit (Client Quit)
2013-12-31 21:24:34	-->	Yu_LIN (24ec1262@gateway/web/freenode/ip.36.236.18.98) has joined #haskell.tw
2013-12-31 21:36:33	Yu_LIN	hi，大家新年快樂阿
2013-12-31 21:40:03	hashcat	還沒xd
2013-12-31 21:43:08	Yu_LIN	先算起來放著（？
2013-12-31 21:44:30	hashcat	看住哪
2013-12-31 21:49:45	hashcat	我家隔壁在起笑
2013-12-31 23:13:18	-->	b4284 (~b4283@118.150.143.229) has joined #haskell.tw
2013-12-31 23:34:39	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2013-12-31 23:44:30	mno2	各位新年快樂啊
2013-12-31 23:45:11	CindyLinz	:D
2013-12-31 23:49:19	-->	temirtau (~temirtau@91.210.100.124) has joined #haskell.tw
2013-12-31 23:50:09	hashcat_	洋曆新年快樂
2013-12-31 23:51:46	<--	Yu_LIN (24ec1262@gateway/web/freenode/ip.36.236.18.98) has quit (Quit: Page closed)
2013-12-31 23:56:33	hashcat_	問個問題
2013-12-31 23:56:59	hashcat_	有個長得很像modus ponens的記號但有兩條橫線
2013-12-31 23:57:02	hashcat_	是啥玩意
2014-01-01 00:01:43	<--	temirtau (~temirtau@91.210.100.124) has quit (K-Lined)
2014-01-01 00:14:47	-->	hashcat__ (~kv2a@1-172-240-116.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 00:14:59	<--	hashcat_ (~kv2a@1-172-240-116.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-01 00:15:01	<--	hashcat__ (~kv2a@1-172-240-116.dynamic.hinet.net) has quit (Client Quit)
2014-01-01 00:15:32	-->	hashcat__ (~kv2a@1-172-240-116.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 00:15:32	--	hashcat__ is now known as hashcat_
2014-01-01 01:04:51	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-01 01:07:41	<--	b4284 (~b4283@118.150.143.229) has quit (Remote host closed the connection)
2014-01-01 01:15:51	<--	hashcat_ (~kv2a@1-172-240-116.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-01 02:16:16	monochrom	⊢P 是用符號化規則證P, ⊩P 是用語義證P
2014-01-01 02:17:15	monochrom	打錯字. ⊨P 是用語義證P
2014-01-01 04:04:27	<--	hashcat (~hashcat@27.241.134.253) has quit (Ping timeout: 252 seconds)
2014-01-01 04:05:33	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:05:37	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:05:54	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:05:56	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:06:19	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:06:21	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:06:50	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:06:52	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:07:23	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:07:25	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:07:45	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:07:46	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:08:23	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:08:25	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:09:02	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:09:04	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:09:43	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:09:44	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:10:22	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:10:24	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:11:02	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:11:04	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:11:42	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:11:44	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:12:21	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:12:22	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:12:59	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:13:00	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:13:39	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 04:13:40	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-01 04:14:25	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-01 08:01:53	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2014-01-01 13:20:51	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-01 13:35:31	-->	suhorng (~suhorng@118-166-45-49.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 13:44:45	-->	hashcat_ (~kv2a@1-172-231-34.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 14:04:54	<--	suhorng (~suhorng@118-166-45-49.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-01 14:07:47	-->	mros (~mros@140.112.211.18) has joined #haskell.tw
2014-01-01 14:08:04	<--	mros (~mros@140.112.211.18) has left #haskell.tw
2014-01-01 15:23:28	<--	godfat (~Adium@114-45-191-107.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2014-01-01 15:24:36	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2014-01-01 16:05:41	-->	godfat (~Adium@111-250-136-202.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 16:55:29	<--	godfat (~Adium@111-250-136-202.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-01 17:07:15	hashcat_	吾見一語言形似Haskell, 名曰Curry, 俱理則(logic)同函數, 琴瑟和鳴. 然缺typeclass, 實不可直視之劣處, 嗚呼哀哉
2014-01-01 17:08:41	hashcat_	若增typeclass, 如虎添翼, 則Haskell危矣
2014-01-01 17:42:29	<--	hashcat_ (~kv2a@1-172-231-34.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-01 17:52:39	letoh	前幾天正想跟你說 Curry 這語言
2014-01-01 17:59:03	-->	suhorng (~suhorng@118-166-45-49.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 17:59:13	suhorng	typeclass有什麼特別的好處阿？
2014-01-01 17:59:23	suhorng	怎麼感覺很多用 typeclass 的都是靠 GHC extension
2014-01-01 18:26:00	<--	suhorng (~suhorng@118-166-45-49.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-01 18:31:26	CindyLinz	typeclass 就是 Haskell 的 class 嗎?
2014-01-01 20:23:34	-->	hashcat_ (~kv2a@1-172-231-34.dynamic.hinet.net) has joined #haskell.tw
2014-01-01 20:42:01	hashcat	余識得Curry已久,侯typeclass多時
2014-01-01 20:42:35	hashcat	不見其蹤至今
2014-01-01 20:43:23	hashcat	故未論之
2014-01-01 20:44:38	hashcat	時至今已無所期
2014-01-01 20:50:09	hashcat	重載, 舊律新用者也
2014-01-01 21:02:41	hashcat	眾用當循其本. 重複造車,橫生枝節,實有弊無利.
2014-01-01 21:03:44	hashcat	算術及monad可為例.
2014-01-01 21:04:19	hashcat	CindyLinz 然也
2014-01-01 21:07:48	hashcat	爾等習haskell非兩三日,既得算術及monad之利甚多
2014-01-01 21:09:10	hashcat	, 不詳typeclass之利, 敝人匪夷所思
2014-01-01 21:13:11	hashcat	若無typeclass, 相異數值型別之算術將各自為政, 符號各異, 同義異字
2014-01-01 21:14:42	hashcat	這樣講話要想好久XD
2014-01-01 21:16:20	hashcat	suhorng居然噴出這問題
2014-01-01 21:18:44	hashcat	他們都用typeclass的擴展了,貌似更沒理由連typeclass都沒有
2014-01-01 21:19:03	hashcat	curry偏沒有
2014-01-01 21:23:46	hashcat_	古文新用之例 : http://zh-classical.wikipedia.org/wiki/%E6%B6%BC%E5%AE%AE%E6%98%A5%E6%97%A5%E7%B3%BB%E5%88%97
2014-01-01 21:25:12	hashcat_	舊律新用, 同typeclass之理
2014-01-01 21:26:28	-->	b4284 (~b4283@118.150.143.229) has joined #haskell.tw
2014-01-01 23:56:50	-->	godfat (~Adium@114-45-191-107.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 00:07:39	<--	b4283 (~b4283@1-172-85-226.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-02 00:15:58	<--	hashcat_ (~kv2a@1-172-231-34.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-02 00:40:05	monochrom	哈哈, 怎麼忽然文言起來了?
2014-01-02 00:46:32	monochrom	文言文者, 苦思而寫, 言簡意賅, 與 Haskell 同. XD
2014-01-02 01:00:31	<--	b4284 (~b4283@118.150.143.229) has quit (Remote host closed the connection)
2014-01-02 01:05:33	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-02 01:33:24	CindyLinz	不是什麼好事.. XD
2014-01-02 03:53:17	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-bzkhtslpkgvhscsn) has joined #haskell.tw
2014-01-02 03:58:18	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-02 03:58:19	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-zpudncmmvmfabtwd) has quit (*.net *.split)
2014-01-02 03:59:37	--	miaout17_ is now known as miaout17
2014-01-02 04:09:06	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-01-02 04:10:34	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-01-02 04:10:46	-->	godfat1 (~Adium@114-45-191-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 04:12:10	<--	godfat (~Adium@114-45-191-107.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-02 04:50:06	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2014-01-02 04:50:06	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-02 04:50:06	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-02 04:50:06	--	Nicks #haskell.tw: [a2n cataska_ chihhsin cibs CindyLinz cyt93cs darkx drbean favonia flter gko hashcat hychen lambdabot letoh logfat___ miaout17 monochrom petercommand shik superbil_c]
2014-01-02 04:50:06	--	Channel #haskell.tw: 21 nicks (0 ops, 0 voices, 21 normals)
2014-01-02 04:50:06	--	Notice(hubbard.freenode.net) -> #haskell.tw: [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
2014-01-02 04:50:26	--	Mode #haskell.tw [+cnt]
2014-01-02 04:50:26	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-02 04:51:54	-->	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 07:23:59	<--	hashcat (~hashcat@27.52.178.75) has quit (Ping timeout: 246 seconds)
2014-01-02 07:24:50	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:24:54	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:25:14	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:25:18	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:25:44	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:25:47	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:26:19	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:26:20	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:26:55	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:26:56	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:27:36	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:27:38	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:28:16	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:28:18	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:28:59	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:29:00	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:29:40	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:29:41	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:30:22	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:30:25	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:31:04	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:31:07	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:31:49	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:31:50	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:32:29	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:32:31	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:33:11	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:33:15	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:33:55	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:33:58	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:34:38	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:34:40	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:35:19	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:35:21	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:36:02	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:36:03	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:36:41	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:36:43	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:37:23	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:37:24	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:38:03	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:38:05	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:38:43	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:38:46	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:39:24	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:39:26	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:40:06	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:40:08	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:40:49	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:40:53	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:41:34	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:41:36	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:42:17	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:42:19	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:43:00	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:43:02	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:43:40	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:43:42	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:44:21	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:44:22	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:45:01	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:45:03	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:45:43	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:45:45	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 07:46:24	-->	hashcat (~hashcat@27.52.178.75) has joined #haskell.tw
2014-01-02 07:46:26	<--	hashcat (~hashcat@27.52.178.75) has quit (Excess Flood)
2014-01-02 10:03:59	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-02 10:05:55	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2014-01-02 10:13:29	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-02 10:25:39	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-02 12:02:51	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-02 12:05:37	cataska_	「用籌兮用嚴。井涸兮無礙」?
2014-01-02 14:09:51	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-02 14:10:45	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-02 14:13:27	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-02 14:30:06	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-02 14:36:12	mno2	哀哉，丙正正一十一令人費解矣。
2014-01-02 14:37:39	letoh	才過個年，大家是被什麼電波打到了? XD
2014-01-02 15:19:04	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:19:06	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:19:20	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:19:21	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:19:39	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:19:41	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:20:07	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:20:08	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:20:38	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:20:39	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:21:14	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:21:15	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:21:52	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 15:21:53	<--	hashcat (~hashcat@27.241.23.244) has quit (Excess Flood)
2014-01-02 15:23:05	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-02 16:46:53	petercommand	letoh: 近日於此頻道所見之文字著實令吾感艱澀難懂也也
2014-01-02 16:47:07	petercommand	letoh: 近日於此頻道所見之文字著實令吾感艱澀難懂也
2014-01-02 16:50:13	-->	hashcat_ (~kv2a@218-166-241-162.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 17:44:25	hashcat	貧道書簡實劣 望海涵
2014-01-02 18:04:52	cataska	截起吾純風  賦小入大合 = chomp (my $z = <STDIN>);
2014-01-02 18:07:01	hashcat_	在下粗陋, 不通此文
2014-01-02 18:07:47	cataska	https://github.com/audreyt/lingua-sinica-perlyuyan/blob/master/lib/Lingua/Sinica/PerlYuYan.pm
2014-01-02 18:11:17	hashcat_	此碼頗似駱駝語
2014-01-02 18:12:50	cataska	然
2014-01-02 18:12:54	hashcat_	在下不諳駱駝語
2014-01-02 18:14:29	hashcat_	愧甚
2014-01-02 18:52:07	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-02 19:56:45	-->	b4283 (~b4283@1-175-236-27.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 20:24:18	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-02 20:30:53	<--	b4283 (~b4283@1-175-236-27.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-02 20:41:36	-->	b4283 (~b4283@1-173-102-114.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 21:02:24	CindyLinz	highlight.js 幫 haskell 語法上色實在是有點弱 @@"
2014-01-02 21:02:42	CindyLinz	它認不得 -- 為註解, 所以 -- 後面的東西還會特殊變色
2014-01-02 21:03:21	CindyLinz	然後 haskell 程式裡面如果用 a' 這樣的變數名, 它一定會把 ' 當成獨立的單引號
2014-01-02 21:03:34	CindyLinz	然後後面都變成字串的顏色, 直到下一個單引號....
2014-01-02 21:05:41	letoh	該不會只是單純用 regex 處理?
2014-01-02 21:06:19	CindyLinz	這不知道.. 不過, 會覺得作者應該不知道 haskell 的語法.. orz
2014-01-02 21:06:37	CindyLinz	haskell 沒有 '...........' 這樣的字串啊 @@"
2014-01-02 21:06:53	CindyLinz	只有一個字的字元 或是用 \ escape 的, 頂多兩個字 @@"
2014-01-02 21:52:50	<--	b4283 (~b4283@1-173-102-114.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-02 22:51:10	-->	suhorng (~suhorng@118-166-50-133.dynamic.hinet.net) has joined #haskell.tw
2014-01-02 22:52:10	suhorng	CindyLinz: 你直接用官網default的highlight.js? 還是有自己打包?
2014-01-02 22:52:15	suhorng	我用有變色XD
2014-01-02 22:53:44	suhorng	不過 a' 這個真的有bug..
2014-01-02 22:57:12	suhorng	欸不對 我剛剛試 a' 也沒問題耶XD
2014-01-02 22:58:01	suhorng	不過不知道為什麼他沒有把 'a' 變色..
2014-01-02 23:11:29	CindyLinz	從官網抓的, 不過好幾個月前了.. 一直延用..
2014-01-02 23:15:13	suhorng	CindyLinz: 官網抓的預設沒含Haskell吧?
2014-01-02 23:15:39	suhorng	喔喔 直接有custom package連結
2014-01-02 23:15:58	suhorng	https://twitter.com/tomaspetricek/status/402827811297050624 xDDDD
2014-01-02 23:31:53	suhorng	關於昨天的 typeclass 話題, 我還沒有想清楚, 不過覺得不太喜歡 polymorphic numeral 的作法
2014-01-02 23:32:46	suhorng	我覺得比較明顯有種共通性質的是 Functor, Monad, Show 那類, 但是 Num 一系列的覺得有點怪
2014-01-02 23:35:06	suhorng	對於 overloading 到底怎樣做比較好一直覺得很困擾
2014-01-02 23:36:28	<--	hashcat_ (~kv2a@218-166-241-162.dynamic.hinet.net) has quit (Ping timeout: 265 seconds)
2014-01-02 23:37:46	suhorng	再者, 像用 monad 那些需要用到 flexible contexts/instances 之後 type inference 的效果就一直都很差
2014-01-02 23:38:15	suhorng	何況還有很多有遞迴的情形會用到 undecidable instances 這個擴展...
2014-01-02 23:39:27	suhorng	就是說 很多的 extension 感覺都像是某個條件可以放鬆 就把他放鬆...或是加入一些部份的功能(functional dependency)
2014-01-02 23:57:53	hashcat	不是在說curry嘛
2014-01-02 23:58:32	suhorng	我說Haskell 囧
2014-01-03 00:01:04	hashcat	我是在說curry完全沒typeclass
2014-01-03 00:05:53	hashcat	Num怎會不好
2014-01-03 00:07:05	hashcat	符號也是函數的話只能重載吧
2014-01-03 00:08:10	hashcat	不然整數+浮點數++有理數+++
2014-01-03 00:08:30	hashcat	看到會傻住
2014-01-03 00:14:55	hashcat	有dependent type就用不上那些擴展了
2014-01-03 00:26:26	<--	suhorng (~suhorng@118-166-50-133.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-03 01:05:24	<--	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-03 01:09:34	-->	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-03 01:16:21	CindyLinz	有了 dependent type 就是 undecidable by default, 不用 extension 了啊..
2014-01-03 01:28:43	hashcat	提高一致性
2014-01-03 02:04:05	monochrom	參考 OCaml 吧: 小整數 +  浮點數 +.  有理數 +/  大整數 add_big_int.  投降吧!
2014-01-03 02:16:14	CindyLinz	如果 Haskell 加個 extension, 開放用 symbol 來當 module name...
2014-01-03 02:18:19	CindyLinz	import Integral as <#>    import Num as <O>    然後用 <#>.+ 和 <O>.+ 這樣? XD
2014-01-03 02:20:48	CindyLinz	好像沒很有趣... 囧
2014-01-03 03:21:52	favonia	好像會很亂...
2014-01-03 03:55:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-01-03 04:37:29	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-03 06:14:15	<--	miaout17 (uid13197@gateway/web/irccloud.com/x-bzkhtslpkgvhscsn) has quit (Ping timeout: 240 seconds)
2014-01-03 06:19:15	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-nfnwhmftxgeulkyn) has quit (Ping timeout: 252 seconds)
2014-01-03 06:19:21	<--	hychen (uid12518@gateway/web/irccloud.com/x-tboagfvejauinsbz) has quit (Ping timeout: 252 seconds)
2014-01-03 06:20:01	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-btomtgdqiramjano) has quit (Ping timeout: 272 seconds)
2014-01-03 06:20:33	-->	hychen (uid12518@gateway/web/irccloud.com/x-vlwkfolliclrkzgw) has joined #haskell.tw
2014-01-03 06:22:26	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-mqrzluhgemjwuelf) has joined #haskell.tw
2014-01-03 06:23:30	<--	hychen (uid12518@gateway/web/irccloud.com/x-vlwkfolliclrkzgw) has quit (Read error: Connection reset by peer)
2014-01-03 06:41:00	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-mqrzluhgemjwuelf) has quit (Ping timeout: 246 seconds)
2014-01-03 06:45:13	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-mddlpurjpmfrluip) has joined #haskell.tw
2014-01-03 07:35:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2014-01-03 08:12:52	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-mddlpurjpmfrluip) has quit (Read error: Connection reset by peer)
2014-01-03 08:16:35	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-zkksylyhyjbvwcdv) has joined #haskell.tw
2014-01-03 09:18:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-03 09:41:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-01-03 10:08:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-03 10:18:51	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-03 10:55:07	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-bvndtperwsmknajr) has joined #haskell.tw
2014-01-03 11:25:22	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-01-03 11:28:49	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-03 12:30:33	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-03 12:46:44	<--	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-03 13:20:45	-->	godfat (~Adium@36-226-133-185.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-03 13:59:13	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-03 14:53:45	-->	hashcat_ (~kv2a@218-173-235-251.dynamic.hinet.net) has joined #haskell.tw
2014-01-03 14:57:23	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-03 15:28:56	-->	godfat1 (~Adium@36-226-133-185.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-03 15:28:57	<--	godfat (~Adium@36-226-133-185.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-03 17:24:04	hashcat	像agda一樣搞隱參數
2014-01-03 17:24:48	hashcat	idris的教程有變好看了
2014-01-03 17:57:44	CindyLinz	recursive structure.. XD # http://dailypicksandflicks.com/wp-content/uploads/2013/02/a-ship-shipping-ship-shipping-shipping-ships.jpg
2014-01-03 18:13:16	hashcat_	CindyLinz 讓我想到起重機
2014-01-03 18:14:34	hashcat_	起重機在拆解時, 是n大小的起重機, 把n-1大小的起重機釣上來
2014-01-03 18:15:41	godfat1	那要怎麼拆 n 大小的起重機？做一個 n+1 大的？ XD
2014-01-03 18:15:44	--	godfat1 is now known as godfat
2014-01-03 18:15:47	hashcat_	然後拆解n大小的起重機成組件, 組裝n-1大小的起重機, 再用n-1大小的起重機釣下去
2014-01-03 18:16:21	hashcat_	一直反覆到起重機小到可以用電梯載下來
2014-01-03 18:16:28	godfat	好辛苦...
2014-01-03 18:16:45	godfat	有種倉庫番的感覺
2014-01-03 18:17:10	hashcat_	最小的算成0 的話 n大約是2或3
2014-01-03 18:17:35	hashcat_	起重機拆解是人上去拆的
2014-01-03 18:17:40	godfat	這樣也不少
2014-01-03 18:17:47	hashcat_	月薪30萬
2014-01-03 18:17:55	godfat	光拆解？
2014-01-03 18:18:02	hashcat_	和維修
2014-01-03 18:18:23	godfat	看來還要了解各廠牌的
2014-01-03 18:18:40	hashcat_	有這技術和膽量的人全台貌似十幾個
2014-01-03 18:18:57	godfat	膽量？很有風險嗎？
2014-01-03 18:19:29	hashcat_	貌似還沒摔死過人, 但就沒啥人敢上去
2014-01-03 18:20:09	hashcat_	有失手掉東西砸死人
2014-01-03 18:20:14	godfat	O_o
2014-01-03 18:20:23	CindyLinz	所以最安全的是上面那個.... ww
2014-01-03 18:21:04	CindyLinz	這是 n depend (n+1) 的 codata 嗎... XD
2014-01-03 18:21:28	CindyLinz	是說.... highlight.js 的 haskell syntax 把 sub 當關鍵字變色是什麼怪設定 @@"
2014-01-03 18:24:48	b4283	像是 Hanoi Tower 的謎題
2014-01-03 18:24:50	hashcat_	不要用好了
2014-01-03 18:28:04	hashcat_	http://quickhighlighter.com/
2014-01-03 18:28:16	hashcat_	用這個起碼還可以自己改
2014-01-03 18:29:01	godfat	不過 highlight.js 是真的滿方便的
2014-01-03 18:29:26	godfat	我以前用 pygments
2014-01-03 18:29:42	hashcat_	或者用 highlight.js 但不要直接在網頁用, 只用輸出的結果
2014-01-03 18:30:11	hashcat_	起碼可以改
2014-01-03 18:30:47	godfat	也是一招，不過 highlight.js 我覺得最方便的地方就在於... 可以不用改
2014-01-03 18:30:47	godfat	以後更新版本也直接換程式就好
2014-01-03 18:31:59	hashcat_	沒在用網站啥的
2014-01-03 18:32:11	hashcat_	是有想用vps租windows主機玩模擬城市
2014-01-03 18:32:39	godfat	直接建在 local 太麻煩嗎？
2014-01-03 18:33:07	hashcat_	vps快到不行, 但滑鼠反應有點慢
2014-01-03 18:33:55	godfat	租日本的？
2014-01-03 18:34:32	hashcat_	不如去樓下的網咖
2014-01-03 18:35:21	godfat	XD
2014-01-03 18:36:02	hashcat_	之前有玩到cpu超標被無預警停掉帳戶
2014-01-03 18:36:32	petercommand	vps?
2014-01-03 18:36:33	hashcat_	討不回來損失慘重
2014-01-03 18:36:42	hashcat_	嗯嗯
2014-01-03 18:36:58	godfat	.....哪一家？好糟糕！
2014-01-03 18:37:05	hashcat_	租一年的第二個月就停掉
2014-01-03 18:37:17	godfat	太差勁了
2014-01-03 18:37:27	petercommand	好糟
2014-01-03 18:37:37	godfat	奇怪，我的輸入法打差勁優先選插進
2014-01-03 18:38:19	hashcat_	好糟糕的輸入法
2014-01-03 18:38:30	godfat	小麥輸入法
2014-01-03 18:39:12	hashcat_	好像是buyvm
2014-01-03 18:39:24	hashcat_	很久以前的事
2014-01-03 18:39:52	petercommand	這樣誰敢用阿XD
2014-01-03 18:40:09	godfat	facebook 918 likes, 好少
2014-01-03 18:40:23	godfat	還比 digitalocean 貴
2014-01-03 18:40:52	hashcat_	那時候還沒有數位海
2014-01-03 18:44:34	hashcat_	數位海不知道有沒美國國防部贊助
2014-01-03 18:44:48	hashcat_	有點詭異的便宜
2014-01-03 18:45:26	godfat	忽然間才聽懂數位海 XD
2014-01-03 18:45:27	godfat	可能賠本賣？我覺得他們系統沒 linode 穩定就是了
2014-01-03 18:47:13	hashcat_	嗯先賠本再創造價值的套路
2014-01-03 18:47:58	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-03 18:48:02	hashcat_	有點老套, 但沒大錢就玩不起, 還是有門檻有搞頭的
2014-01-03 18:48:08	hashcat_	來去吃東西
2014-01-03 18:48:32	godfat	慢吃
2014-01-03 19:10:04	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-03 19:13:26	<--	godfat (~Adium@36-226-133-185.dynamic-ip.hinet.net) has quit (Ping timeout: 264 seconds)
2014-01-03 19:52:15	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-01-03 20:01:39	-->	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-03 20:21:41	-->	b4283 (~b4283@218-164-221-250.dynamic.hinet.net) has joined #haskell.tw
2014-01-03 20:42:25	CindyLinz	我用 highlight.js 是用在 remark 寫投影片 ._.
2014-01-03 21:39:57	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2014-01-03 23:01:38	favonia	hashcat: n 吊起 n-1, 然後把 n 變成 n-1, 這樣不就兩個 n-1 了？
2014-01-03 23:02:30	hashcat	n-1把n釣下去
2014-01-03 23:04:30	favonia	"然後拆解n大小的起重機成組件, 組裝 *A* 大小的起重機, 再用n-1大小的起重機釣下去" <-- A 應該是 n-2?
2014-01-03 23:04:47	favonia	我覺得我一定是哪裡沒看懂 xD
2014-01-03 23:34:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-01-03 23:53:56	hashcat	n被拆的同時n-1被組裝起來
2014-01-03 23:54:20	hashcat	n的組件就下去
2014-01-03 23:54:43	hashcat	換n-1在上面
2014-01-03 23:55:32	hashcat	n <- n-1 遞歸
2014-01-04 00:17:28	-->	hashcat__ (~kv2a@218-173-235-251.dynamic.hinet.net) has joined #haskell.tw
2014-01-04 00:18:14	<--	hashcat_ (~kv2a@218-173-235-251.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-01-04 00:18:33	<--	b4283 (~b4283@218-164-221-250.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-04 00:31:38	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-04 00:42:40	<--	hashcat__ (~kv2a@218-173-235-251.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2014-01-04 08:29:00	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2014-01-04 08:53:16	mno2	http://xkcd.com/1312/
2014-01-04 10:55:35	-->	b4283 (~b4283@36-238-227-16.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-04 13:00:26	-->	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-04 15:03:45	<--	monochrom (trebla@216.138.220.146) has quit (Quit: NO CARRIER)
2014-01-04 15:10:49	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-04 15:16:03	-->	hashcat__ (~kv2a@118-171-198-112.dynamic.hinet.net) has joined #haskell.tw
2014-01-04 15:21:44	--	hashcat__ is now known as hashcat_
2014-01-04 17:18:02	<--	hashcat_ (~kv2a@118-171-198-112.dynamic.hinet.net) has quit (*.net *.split)
2014-01-04 17:18:08	<--	b4283 (~b4283@36-238-227-16.dynamic-ip.hinet.net) has quit (*.net *.split)
2014-01-04 17:18:13	<--	hashcat (~hashcat@27.241.23.244) has quit (*.net *.split)
2014-01-04 17:18:16	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2014-01-04 17:18:21	<--	logfat___ (~cinch@home.mno2.org) has quit (*.net *.split)
2014-01-04 17:18:27	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2014-01-04 17:18:34	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-bvndtperwsmknajr) has quit (*.net *.split)
2014-01-04 17:18:34	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-zkksylyhyjbvwcdv) has quit (*.net *.split)
2014-01-04 17:18:35	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2014-01-04 17:18:37	<--	flter (~Albert@140.113.249.196) has quit (*.net *.split)
2014-01-04 17:18:40	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-01-04 17:18:41	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2014-01-04 17:18:42	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-01-04 17:18:43	<--	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-04 17:18:47	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-01-04 17:18:50	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2014-01-04 17:18:57	<--	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has quit (*.net *.split)
2014-01-04 17:18:58	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-04 17:19:03	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2014-01-04 17:19:04	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-01-04 17:19:08	<--	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2014-01-04 17:22:20	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-bvndtperwsmknajr) has joined #haskell.tw
2014-01-04 17:22:20	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-zkksylyhyjbvwcdv) has joined #haskell.tw
2014-01-04 17:22:20	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-01-04 17:22:20	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-04 17:22:20	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-01-04 17:22:20	-->	logfat___ (~cinch@home.mno2.org) has joined #haskell.tw
2014-01-04 17:28:50	-->	b4283 (~b4283@36-238-227-16.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-04 17:29:03	-->	hashcat_ (~kv2a@118-171-198-112.dynamic.hinet.net) has joined #haskell.tw
2014-01-04 17:29:56	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-04 17:29:56	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-01-04 17:30:13	-->	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-04 17:30:13	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-04 17:30:13	-->	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-04 17:30:13	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-01-04 17:31:42	-->	hashcat (~hashcat@27.241.23.244) has joined #haskell.tw
2014-01-04 17:31:42	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-01-04 17:31:53	-->	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-04 17:31:53	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-04 17:32:05	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-01-04 17:44:15	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-01-04 17:44:15	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-04 22:15:47	<--	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-01-04 22:15:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-04 22:49:52	hashcat_	Idris有新版, 教程變比較好懂, 頁數也比較少
2014-01-04 22:56:24	hashcat_	少6頁
2014-01-04 23:21:40	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2014-01-04 23:28:44	<--	hashcat_ (~kv2a@118-171-198-112.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-05 00:14:31	<--	b4283 (~b4283@36-238-227-16.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-01-05 00:23:33	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-01-05 01:05:55	favonia	hashcat: er... 有可能是 293842 變 293836 頁
2014-01-05 01:06:25	monochrom	沒那麼邪惡吧? :)
2014-01-05 01:07:01	hashcat	少原來的十分之一
2014-01-05 01:07:45	hashcat	無量綱數
2014-01-05 01:08:56	favonia	我對 idris 的發展有不少憧憬啊 :P
2014-01-05 01:10:28	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-05 01:11:54	hashcat	寫成上萬頁就沒前途了
2014-01-05 01:14:00	hashcat	純函數式+上萬頁->死
2014-01-05 09:35:48	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-05 11:00:46	-->	b4283 (~b4283@218-164-204-51.dynamic.hinet.net) has joined #haskell.tw
2014-01-05 14:21:22	-->	hashcat_ (~kv2a@218-166-241-64.dynamic.hinet.net) has joined #haskell.tw
2014-01-05 16:32:09	<--	hashcat_ (~kv2a@218-166-241-64.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-05 16:34:52	<--	b4283 (~b4283@218-164-204-51.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2014-01-05 16:51:43	-->	b4283 (~b4283@36-238-128-93.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-05 17:06:21	<--	b4283 (~b4283@36-238-128-93.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-05 17:23:45	-->	b4283 (~b4283@218-164-113-150.dynamic.hinet.net) has joined #haskell.tw
2014-01-05 17:50:03	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2014-01-05 17:52:43	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-05 18:08:34	-->	hashcat_ (~kv2a@218-164-109-174.dynamic.hinet.net) has joined #haskell.tw
2014-01-05 19:23:20	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-01-05 19:27:29	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-05 22:08:52	<--	hashcat_ (~kv2a@218-164-109-174.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2014-01-05 23:21:07	-->	suhorng (~suhorng@118-166-49-199.dynamic.hinet.net) has joined #haskell.tw
2014-01-05 23:26:02	-->	hychen (uid12518@gateway/web/irccloud.com/x-swrvsdwnrrsxylzl) has joined #haskell.tw
2014-01-05 23:59:31	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-01-06 00:00:49	<--	b4283 (~b4283@218-164-113-150.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-06 00:12:33	<--	suhorng (~suhorng@118-166-49-199.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-06 01:03:18	-->	TerryChan (~TerryChan@111.37.5.242) has joined #haskell.tw
2014-01-06 01:06:13	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-06 01:13:25	<--	TerryChan (~TerryChan@111.37.5.242) has quit (Ping timeout: 245 seconds)
2014-01-06 02:02:11	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-01-06 03:16:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-06 03:21:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-01-06 03:28:33	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 03:31:08	<--	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-06 03:40:10	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-06 03:53:35	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2014-01-06 04:04:59	-->	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-01-06 04:08:32	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 265 seconds)
2014-01-06 04:36:48	<--	logfat___ (~cinch@home.mno2.org) has quit (Write error: Broken pipe)
2014-01-06 04:37:33	-->	logfat____ (~cinch@home.mno2.org) has joined #haskell.tw
2014-01-06 06:21:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-06 06:29:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-01-06 06:57:51	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-06 07:00:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-06 07:20:47	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-01-06 09:47:48	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-06 10:27:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-06 10:30:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 12:01:20	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 12:08:01	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 12:12:12	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2014-01-06 12:32:24	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2014-01-06 12:39:35	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-06 12:46:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-06 13:17:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-01-06 13:18:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-06 13:18:17	-->	godfat (~Adium@111-248-148-80.dynamic.hinet.net) has joined #haskell.tw
2014-01-06 13:51:46	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-06 14:16:39	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 14:44:19	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-06 14:50:57	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-06 14:53:30	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 14:56:09	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Client Quit)
2014-01-06 14:59:47	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-06 15:04:27	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 276 seconds)
2014-01-06 15:20:22	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-06 15:48:17	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-06 16:45:19	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2014-01-06 16:54:39	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-06 18:06:50	-->	hashcat_ (~kv2a@218-166-240-166.dynamic.hinet.net) has joined #haskell.tw
2014-01-06 18:41:39	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2014-01-06 18:48:10	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-06 19:11:39	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-06 19:24:39	-->	suhorng (~suhorng@118-166-49-199.dynamic.hinet.net) has joined #haskell.tw
2014-01-06 19:39:02	-->	yu_LIN (24ec10dc@gateway/web/freenode/ip.36.236.16.220) has joined #haskell.tw
2014-01-06 19:39:23	suhorng	最近寫 monad code 犯了很好笑的錯
2014-01-06 19:41:39	yu_LIN	什麼錯？
2014-01-06 19:54:39	suhorng	原本我的程式是 pure 的 (有用 monad 但最後都 run 掉了)
2014-01-06 19:54:39	-->	b4283 (~b4283@218-164-219-64.dynamic.hinet.net) has joined #haskell.tw
2014-01-06 19:54:39	suhorng	func ... = Constructor data1 data2 where {data1 = ... commonData ...; data2 = ... commonData; commonData = .... }
2014-01-06 19:54:39	suhorng	後來為了 debug 我把他全部丟入 `IO` 裡面, 變成
2014-01-06 19:55:12	suhorng	func ... = Constructor <$> data1 <*> data2 where {data1 = ... commonData ...; data2 = ... commonData; commonData :: IO ... = .... }
2014-01-06 19:55:39	suhorng	然後我的程式就變成(幾乎)兩倍慢了 囧
2014-01-06 19:57:10	yu_LIN	再次證明 IO 盡量別用，不算犯錯阿
2014-01-06 19:59:39	suhorng	不是這樣吧 XDDDD
2014-01-06 19:59:47	suhorng	假如改成 monadic code 果然應該好好把 pure value 拿出來....XD　　　做兩次實在太好笑了阿...
2014-01-06 20:00:34	suhorng	其實也不只是 IO, 一般 monadic code 都是 Orz
2014-01-06 20:04:55	yu_LIN	比我最近寫的 C code 好多了，起碼你還容易 debug.......XD
2014-01-06 20:08:24	suhorng	C code到底怎麼了..?
2014-01-06 20:13:26	<--	godfat (~Adium@111-248-148-80.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-06 20:18:51	yu_LIN	忘記怎麼用 for 跟 while，結果兩個亂混用
2014-01-06 20:20:44	yu_LIN	完全就是反面教材的狀態
2014-01-06 20:42:15	hashcat_	for跟while能有啥差別, 感覺就是哪個方便用哪個
2014-01-06 20:43:31	hashcat_	suhorng: 沒想到IO沒有優化
2014-01-06 20:45:24	hashcat_	我用haskell幾乎只有主程式用IO Monad
2014-01-06 20:45:36	suhorng	hashcat_: 其實是不能優化，不是沒有優化
2014-01-06 20:45:43	suhorng	加 IO 純粹為了 debug T_T
2014-01-06 20:45:49	hashcat_	http://en.wikipedia.org/wiki/Static_single_assignment_form
2014-01-06 20:46:09	hashcat_	想不出啥情況非得用IO來debug
2014-01-06 20:46:09	suhorng	用 <$>, <*> 變成把一個 IO a 串了兩遍，一定得跑兩次……
2014-01-06 20:46:26	suhorng	hashcat_: 不然 Haskell 該怎麼debug阿？
2014-01-06 20:46:27	hashcat_	我發現Haskell整個很意外地簡單 = =
2014-01-06 20:46:58	hashcat_	當然是用ghci
2014-01-06 20:47:26	hashcat_	設斷點樹展開, 在記憶體長啥樣都一目了然
2014-01-06 20:47:28	suhorng	咦
2014-01-06 20:47:43	suhorng	天阿 斷點orz
2014-01-06 20:47:44	hashcat_	???????
2014-01-06 20:47:48	suhorng	主要de的是演算法的bug
2014-01-06 20:48:45	hashcat_	ghci會顯現所有內在的東西
2014-01-06 20:49:23	hashcat_	載入模組後, 可以對某個函數debug, 沒理由都要搞成IO吧
2014-01-06 20:49:27	CindyLin1	洩漏點星期四 topic 的內容好了... 用 Debug.Trace 裡面的 trace 和 traceShow 來 debug 吧 :p
2014-01-06 20:49:43	hashcat_	哦被我走漏了
2014-01-06 20:49:48	hashcat_	最近發現Haskell除了IO有點麻煩, 剩下跟imperative根本可以一對一翻譯了
2014-01-06 20:49:51	suhorng	有用過 trace T_T
2014-01-06 20:50:50	hashcat_	在where區塊用Static single assignment form(靜態單賦值式)
2014-01-06 20:50:54	suhorng	不過不太熟 (我的程式只能說一團糟阿.. https://github.com/suhorng/compiler13hw/tree/hw5-mips-trans )
2014-01-06 20:51:00	hashcat_	迴圈用遞歸
2014-01-06 20:51:13	hashcat_	根本用不上monad
2014-01-06 20:51:15	suhorng	hashcat_: 我以為這個 bug 跟這件事沒關係？
2014-01-06 20:51:28	hashcat_	我想也是沒啥關係
2014-01-06 20:51:40	hashcat_	手癢想貼
2014-01-06 20:51:52	--	CindyLin1 is now known as CindyLinz
2014-01-06 20:52:10	CindyLinz	就... Main.hs 喔?
2014-01-06 20:52:33	CindyLinz	好短喔.. XD
2014-01-06 20:52:50	CindyLinz	喔喔 Language/ 裡面還有一大堆.... /_\
2014-01-06 20:53:01	hashcat_	所以說還是只有prolog可以說是不同的範式
2014-01-06 20:53:30	hashcat_	嘿噗胡言亂語拉人
2014-01-06 20:54:09	hashcat_	速入prolog坑
2014-01-06 20:55:15	suhorng	XDD
2014-01-06 20:55:15	suhorng	本來我們最後的 IR 也想作成 SSA, 不過沒空處理 φ 就算了
2014-01-06 20:56:39	hashcat_	Prolog明明也是各種內涵, 也不像Haskell各種天馬行空, 阿不知道怎樣就沒人
2014-01-06 20:57:12	hashcat_	算了打住
2014-01-06 20:57:12	suhorng	FP也是最近幾年才紅起來？
2014-01-06 20:57:39	hashcat_	好像是
2014-01-06 20:58:28	hashcat_	印象中是隨著多核心崛起
2014-01-06 20:59:39	letoh	唔  我覺得應該再更早一點?
2014-01-06 20:59:39	letoh	說真的就算有多核心了，但真的用 fp 在開發的專案也不多吧? 應該還是用傳統的模型，跟 lock 奮鬥?
2014-01-06 20:59:39	hashcat_	猜測是基於可擴展性引入函數式範式, Haskell身為純種而受到關注
2014-01-06 21:00:00	hashcat_	我覺得lock比什麼純函數麻煩吧
2014-01-06 21:00:20	letoh	很麻煩  但因為大部份的人習慣了
2014-01-06 21:01:36	hashcat_	FP先天就是可以平行的, 不用鎖來鎖去
2014-01-06 21:01:36	CindyLinz	可是我用 Haskell 寫 concurrent 的程式, 用 MVar 感覺跟 lock 沒什麼差啊.. orz
2014-01-06 21:01:39	hashcat_	鎖成死鎖和不知道怎開的鎖
2014-01-06 21:02:41	CindyLinz	還是我寫的方式不對? @@"
2014-01-06 21:02:41	letoh	我沒有特別觀察，不過我猜 fp 這件事，ruby 應該幫上不少忙?
2014-01-06 21:02:41	hashcat_	CinzyLinz:也可以不用
2014-01-06 21:02:41	letoh	或 python (很不想舉它當例子XD
2014-01-06 21:02:41	CindyLinz	甚至.. 因為我習慣在 perl 寫 event driven (explicit callback) 的.. 用 MVar 反而更不習慣 orz
2014-01-06 21:02:41	hashcat_	對python有偏見
2014-01-06 21:02:41	CindyLinz	hashcat_: 那用什麼咧? @@"
2014-01-06 21:03:39	CindyLinz	在 haskell (GHC) 裡面用了 forkIO.. 後面寫起來整個 fu 就是 multi-thread 的感覺 orz
2014-01-06 21:03:39	suhorng	因為 forkIO 就真的是 multi-thread 吧...?
2014-01-06 21:04:19	CindyLinz	suhorng: 如果把 do-notation 都展開.. 視為 callback 系的嗎? @@"
2014-01-06 21:04:19	suhorng	問題是要通信(或sync)的部份有辦法不用鎖嗎...?
2014-01-06 21:05:39	letoh	actor model 呢?
2014-01-06 21:05:39	hashcat_	可能是我都是寫那種不用很多IO的程序, parallel包就很夠了
2014-01-06 21:05:39	suhorng	嗯..我不太清楚QQ, 就算用perl寫callback, 不會有同步的問題嗎? 還是同時一定只有一個callback能被執行
2014-01-06 21:05:39	CindyLinz	同時只有一個 callback 能被執行
2014-01-06 21:06:15	letoh	不用 lock 的情況，最簡單的就用 cooperative model 吧
2014-01-06 21:08:56	suhorng	那像 forkIO 就好比同時有很多個callback可能執行？
2014-01-06 21:08:56	CindyLinz	而且如果我沒開 -thread
2014-01-06 21:08:56	CindyLinz	MVar 就直接 dead-lock...
2014-01-06 21:09:24	suhorng	悲劇..XD
2014-01-06 21:09:39	CindyLinz	perl 有人直接寫 user code 做出 condition variable @@"
2014-01-06 21:10:10	-->	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-06 21:10:10	CindyLinz	所以我那時也覺得 ghc 沒加 -thread 的時候應該也要能動 @@"
2014-01-06 21:10:39	CindyLinz	嗯, perl 那個作法有個限制: 在 handler 裡面不可以去 wait 一個 condition variable, 只能放一個 callback 在 condition variable 上面
2014-01-06 21:11:17	letoh	http://adit.io/posts/2013-05-15-Locks,-Actors,-And-STM-In-Pictures.html
2014-01-06 21:11:17	CindyLinz	該 condition variable DONE 的時候會去呼叫放在上面的 callback
2014-01-06 21:12:20	CindyLinz	===分隔線===
2014-01-06 21:13:40	CindyLinz	那在 ghc 裡面, 不開 -thread 的時候流行怎樣寫 concurrent 程式呢?
2014-01-06 21:14:39	suhorng	沒有經驗..
2014-01-06 21:19:44	hashcat_	我應該是搞錯了
2014-01-06 21:20:39	hashcat_	平行化跟concurrent的概念不一樣
2014-01-06 21:20:39	hashcat_	concurrency我就不知道了
2014-01-06 21:23:39	hashcat_	CindyLinz: 你是用STM嘛
2014-01-06 21:27:39	<--	b4283 (~b4283@218-164-219-64.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-06 21:28:35	hashcat_	STM的機制比原來的好
2014-01-06 21:44:31	CindyLinz	hashcat_: 沒有用 STM.. 嗯, 我不知道 STM 要怎麼運用在 concurrent @@"
2014-01-06 21:45:15	CindyLinz	我是說.. 拿來當作 concurrent 程式的主幹..
2014-01-06 21:49:38	hashcat_	http://en.wikipedia.org/wiki/Concurrent_Haskell 捲到最底下有範例
2014-01-06 21:54:19	hashcat_	搞定死鎖和惡性競爭
2014-01-06 21:57:39	hashcat_	像是atomically這函數
2014-01-06 21:58:16	hashcat_	X10也有這機制
2014-01-06 22:17:18	-->	b4283 (~b4283@118.150.130.223) has joined #haskell.tw
2014-01-06 22:17:53	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2014-01-06 22:31:39	suhorng	我電腦上跑 idris REPL 速度好慢 QQ
2014-01-06 22:33:13	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2014-01-06 22:35:12	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-06 22:49:41	suhorng	現在 GHC 的 IO 竟然是丟給 ST monad 做
2014-01-06 23:01:23	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Read error: Connection reset by peer)
2014-01-06 23:03:51	-->	chihhsin (~starbops@140.113.121.170) has joined #haskell.tw
2014-01-06 23:03:51	favonia	CindyLinz: MVar 不用 -threaded 會炸掉嗎？
2014-01-06 23:03:51	favonia	CindyLinz: -threaded 應該只跟 OS thread 有關吧...
2014-01-06 23:04:49	favonia	Haskell thread 本來就可以很多個
2014-01-06 23:05:29	CindyLinz	hashcat_: 謝謝, 等下來讀 @@"
2014-01-06 23:05:29	CindyLinz	favonia: 我原本也以為不會炸.....
2014-01-06 23:05:45	CindyLinz	不過這應該是一年多前, 可能 7.2 的時候的事
2014-01-06 23:10:26	favonia	CindyLinz: 你還有程式碼嗎？
2014-01-06 23:19:23	CindyLinz	favonia: 這邊, 我的 source 就是 http://funth.kktix.cc/events/55c147
2014-01-06 23:19:24	CindyLinz	不過我現在也試一下簡單的例子好了..
2014-01-07 00:00:11	<--	suhorng (~suhorng@118-166-49-199.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-07 00:13:07	CindyLinz	暫時試不出來, 真是好消息.. XD
2014-01-07 00:13:56	<--	yu_LIN (24ec10dc@gateway/web/freenode/ip.36.236.16.220) has quit (Quit: Page closed)
2014-01-07 00:14:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-01-07 00:17:39	<--	hashcat_ (~kv2a@218-166-240-166.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-07 00:55:51	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2014-01-07 00:58:04	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-07 01:26:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-07 01:29:16	<--	b4283 (~b4283@118.150.130.223) has quit (Remote host closed the connection)
2014-01-07 01:29:31	favonia	CindyLinz: 現在不能 git clone 都覺得好麻煩（疑
2014-01-07 01:34:48	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-07 01:51:43	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 260 seconds)
2014-01-07 01:56:58	CindyLinz	orz
2014-01-07 02:20:24	favonia	而且我的 base 好像太新了 囧
2014-01-07 02:35:53	CindyLinz	其實我也是 orz
2014-01-07 02:36:18	CindyLinz	我剛是把 .cabal 裡面不合的版號都調大, 反正應該沒用到什麼不相容的功能 :p
2014-01-07 03:16:31	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Quit: updating)
2014-01-07 03:17:15	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-01-07 04:05:12	<--	hashcat (~hashcat@27.241.23.244) has quit (Ping timeout: 252 seconds)
2014-01-07 05:37:37	-->	godfat1 (~Adium@1-160-167-167.dynamic.hinet.net) has joined #haskell.tw
2014-01-07 05:39:43	<--	godfat (~Adium@114-45-191-33.dynamic.hinet.net) has quit (Ping timeout: 265 seconds)
2014-01-07 05:43:54	-->	hashcat (~hashcat@27.241.37.14) has joined #haskell.tw
2014-01-07 06:44:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-01-07 07:49:20	-->	hashcat_ (~kv2a@1-172-238-35.dynamic.hinet.net) has joined #haskell.tw
2014-01-07 08:02:39	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-07 08:02:54	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2014-01-07 08:20:27	--	petercom1and is now known as petercommand
2014-01-07 09:20:30	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 248 seconds)
2014-01-07 09:35:37	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-07 09:52:27	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-07 09:54:22	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-07 09:56:20	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2014-01-07 10:18:24	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-07 10:29:05	<--	hashcat (~hashcat@27.241.37.14) has quit (Ping timeout: 240 seconds)
2014-01-07 10:31:00	-->	hashcat (~hashcat@27.241.37.14) has joined #haskell.tw
2014-01-07 10:31:01	<--	hashcat (~hashcat@27.241.37.14) has quit (Excess Flood)
2014-01-07 10:31:19	-->	hashcat (~hashcat@27.241.37.14) has joined #haskell.tw
2014-01-07 10:31:20	<--	hashcat (~hashcat@27.241.37.14) has quit (Excess Flood)
2014-01-07 10:32:16	-->	hashcat (~hashcat@27.241.37.14) has joined #haskell.tw
2014-01-07 10:32:17	<--	hashcat (~hashcat@27.241.37.14) has quit (Excess Flood)
2014-01-07 10:33:07	-->	hashcat (~hashcat@27.241.37.14) has joined #haskell.tw
2014-01-07 10:33:07	<--	hashcat (~hashcat@27.241.37.14) has quit (Excess Flood)
2014-01-07 10:34:39	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-07 12:32:04	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-07 13:33:43	-->	darkx_ (~x4r@162.243.133.203) has joined #haskell.tw
2014-01-07 13:36:14	<--	godfat1 (~Adium@1-160-167-167.dynamic.hinet.net) has quit (*.net *.split)
2014-01-07 13:36:25	-->	godfat (~Adium@1-160-167-167.dynamic.hinet.net) has joined #haskell.tw
2014-01-07 13:38:49	-->	letoh_ (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-07 13:39:43	<--	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2014-01-07 13:39:43	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-01-07 13:39:46	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-01-07 13:39:59	-->	monochrm (trebla@216.138.220.146) has joined #haskell.tw
2014-01-07 13:40:12	--	monochrm is now known as monochrom
2014-01-07 13:51:16	-->	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-07 13:52:18	<--	letoh_ (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2014-01-07 13:52:20	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-07 14:23:48	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-07 14:29:29	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-07 15:06:04	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-07 15:53:07	-->	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has joined #haskell.tw
2014-01-07 15:53:34	_13h	http://yapb-soc.blogspot.tw/2012/08/implementing-maybe-monad-in-c.html  看了一下這個 blog 上的幾篇文章，都是在做苦工XD
2014-01-07 16:04:04	_13h	https://github.com/splinterofchaos/Pure
2014-01-07 16:05:52	b4283	@@
2014-01-07 16:06:09	b4283	Pure 好像是老牌的 abandonware
2014-01-07 16:29:21	b4283	oh no，我記錯了，我腦中想的是 Potion
2014-01-07 16:30:29	_13h	程式語言的那個 potion ?
2014-01-07 16:30:36	b4283	_13h: Potion 好像有人接手了！！
2014-01-07 16:30:41	b4283	https://github.com/perl11/potion
2014-01-07 16:30:53	b4283	_13h: 對啊就你介紹的那個 prototype lang
2014-01-07 16:31:23	_13h	喔  印象中之前有人備份而已，原來另外有人繼續接手了
2014-01-07 16:32:12	b4283	http://perl11.org/potion/index.html
2014-01-07 16:32:20	_13h	不知道 jit 修好了沒... 原作者最後幾版的 jit 有點問題，一跑就 crash XD (但早一點的版本是好的
2014-01-07 17:32:38	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 265 seconds)
2014-01-07 17:36:10	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-07 18:15:21	--	darkx_ is now known as darkx
2014-01-07 18:42:11	<--	godfat (~Adium@1-160-167-167.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-07 18:44:26	<--	_13h (3ddcf7bc@gateway/web/freenode/ip.61.220.247.188) has quit (Quit: Page closed)
2014-01-07 18:54:52	-->	hashcat__ (~kv2a@1-172-238-35.dynamic.hinet.net) has joined #haskell.tw
2014-01-07 18:55:01	<--	hashcat_ (~kv2a@1-172-238-35.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2014-01-07 19:00:50	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-07 19:03:14	-->	hashcat (~hashcat@39.10.62.77) has joined #haskell.tw
2014-01-07 19:05:08	<--	mno2 (~mno2@49.128.60.52) has quit (Read error: Connection reset by peer)
2014-01-07 19:06:42	-->	godfat (~Adium@211-75-129-193.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-07 19:34:52	--	hashcat__ is now known as hashcat_
2014-01-07 19:57:02	<--	godfat (~Adium@211-75-129-193.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2014-01-07 20:06:50	-->	b4283 (~b4283@218-164-215-240.dynamic.hinet.net) has joined #haskell.tw
2014-01-07 20:14:14	-->	godfat (~Adium@211-75-129-194.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-07 20:45:52	<--	godfat (~Adium@211-75-129-194.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2014-01-07 21:05:04	-->	godfat (~Adium@211-75-129-193.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-07 22:00:54	-->	suhorng (~suhorng@118-166-49-199.dynamic.hinet.net) has joined #haskell.tw
2014-01-07 22:02:11	suhorng	突然發現我不知道怎麼在 Idris 裡寫個 strExplode : (s : String) -> Vect (length s) Char 的函數……
2014-01-07 22:06:18	suhorng	阿不對, 是 string 沒得 pattern match..
2014-01-07 22:07:59	hashcat_	有那麼悲催
2014-01-07 22:08:32	suhorng	好吧, Prelude 裡的 unpack : String -> List Char 前面有個「assert_total」……看來 string 是無法了
2014-01-07 22:09:43	<--	godfat (~Adium@211-75-129-193.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2014-01-07 22:10:01	hashcat_	String不是List of Char阿
2014-01-07 22:10:11	suhorng	不是呀
2014-01-07 22:10:14	hashcat_	不愧為重視效率的實作
2014-01-07 22:10:19	suhorng	真的
2014-01-07 22:10:32	hashcat_	感覺像是Hasekll的Text
2014-01-07 22:11:22	hashcat_	在想用prolog寫DSL產生Idris程式和證明
2014-01-07 22:11:38	suhorng	www
2014-01-07 22:11:46	suhorng	然後用 Idris 產生 javascript (誤)
2014-01-07 22:12:25	hashcat_	直接產生javascript整個有難度
2014-01-07 22:12:46	suhorng	所以才透過 idris XD?
2014-01-07 22:13:05	hashcat_	昨天我發現一種prolog包忍不住想吹
2014-01-07 22:13:17	hashcat_	叫啥CLP(Q,R)
2014-01-07 22:13:31	hashcat_	Q是有理數, R是實數
2014-01-07 22:14:04	hashcat_	在有理數和實數域上做推論
2014-01-07 22:14:29	suhorng	0.0
2014-01-07 22:14:54	hashcat_	clp(z)是在整數域, clp(fd)是有限域
2014-01-07 22:15:20	hashcat_	不像其他程序所謂實數都是用浮點數冒充
2014-01-07 22:18:08	hashcat_	http://www.swi-prolog.org/man/clpqr.html
2014-01-07 22:20:21	hashcat_	idris也挺好XD
2014-01-07 22:21:04	suhorng	竟然有取 inf 跟取 sup
2014-01-07 22:21:14	hashcat_	可能可以嵌類似prolog DSL並透過ffi跟prolog串起來
2014-01-07 22:22:10	hashcat_	等Idris穩了來試試
2014-01-07 22:37:15	<--	b4283 (~b4283@218-164-215-240.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-07 23:13:07	suhorng	好難過XD Idris好像比Agda少一些些判斷資訊
2014-01-07 23:13:34	suhorng	假如我有個函數
2014-01-07 23:13:34	suhorng	fn ('d'::xs) = ...1
2014-01-07 23:13:34	suhorng	fn (x::xs) = ...2
2014-01-07 23:13:50	suhorng	在 ...2 的時候他好像沒辦法推出 x /= 'd'
2014-01-07 23:16:13	hashcat_	改用prolog算了
2014-01-07 23:16:18	hashcat_	不過真的很冷門
2014-01-07 23:16:21	hashcat_	暈
2014-01-07 23:21:02	suhorng	http://stackoverflow.com/questions/17905537/dependently-typed-printf-in-idris 大家都想寫printf
2014-01-07 23:21:12	suhorng	我寫不出來...
2014-01-07 23:26:33	suhorng	喔不對寫出來了 xDD 可是他過不了totality check (那不就沒用了嗎)
2014-01-07 23:28:21	hashcat_	不要check就好, 本來就不一定過得了吧
2014-01-07 23:35:33	suhorng	https://gist.github.com/suhorng/8301097 我到底寫了什麼糟糕的東西 XDDD
2014-01-07 23:46:40	-->	godfat (~Adium@1-161-52-71.dynamic.hinet.net) has joined #haskell.tw
2014-01-08 00:01:16	<--	suhorng (~suhorng@118-166-49-199.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-08 00:01:45	<--	hashcat_ (~kv2a@1-172-238-35.dynamic.hinet.net) has quit (Ping timeout: 276 seconds)
2014-01-08 00:02:28	hashcat	printf 貌似是那種過陣子就會出現在標準的東西
2014-01-08 00:07:46	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-08 00:08:38	<--	godfat (~Adium@1-161-52-71.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-01-08 01:23:33	favonia	hashcat: 變成業界標準了
2014-01-08 01:28:49	CindyLinz	某領域是超愛做 todo list....
2014-01-08 01:29:24	letoh	對啊  為什麼是 todo list ?
2014-01-08 01:29:43	CindyLinz	我沒去關心原因.. @@"
2014-01-08 01:30:11	CindyLinz	只是聽到說在比可以有什麼 XXX種寫 todo list 的方法.. 就覺得很病態 XDrz
2014-01-08 01:32:21	letoh	X 種 hello world ? XD
2014-01-08 01:33:02	godfat1	我猜是因為好做而且好驗證？
2014-01-08 01:33:32	--	godfat1 is now known as godfat
2014-01-08 01:39:11	favonia	CindyLinz: 你可以私底下丟給我訊息嗎 lol
2014-01-08 01:39:30	favonia	CindyLinz: 我好想知道該領域喔～～～
2014-01-08 01:39:39	CindyLinz	不用私下啊
2014-01-08 01:39:45	CindyLinz	就寫網站的啊
2014-01-08 01:39:58	CindyLinz	然後我那時候剛好在看 node.js 的東西..
2014-01-08 01:40:20	CindyLinz	XD
2014-01-08 01:40:41	favonia	CindyLinz: 你剛才好像講了一個頭會痛的東西，我不太想重複名字
2014-01-08 01:40:44	godfat	angularjs 或什麼什麼 js framework 等等都滿常用 todo list 當範例
2014-01-08 01:40:54	godfat	XDDDDDDDD
2014-01-08 01:41:24	CindyLinz	呃... @____@
2014-01-08 01:41:33	CindyLinz	node.js 嗎? 好我幫你講... XD
2014-01-08 01:41:45	letoh	XDXD
2014-01-08 01:42:26	favonia	godfat: 我以為該領域會用 login 畫面做例子
2014-01-08 01:43:06	favonia	然後改一個參數就有二階段認証之類的（咦
2014-01-08 01:43:52	CindyLinz	可能重點會偏到怎麼加密儲存密碼? @@"
2014-01-08 01:44:13	favonia	喔
2014-01-08 01:44:45	CindyLinz	欸.. 我不是很認真想的 ^^|
2014-01-08 01:44:48	godfat	XDDDD
2014-01-08 01:44:48	godfat	javascript can do anything
2014-01-08 01:44:48	godfat	anything could be done in javascript
2014-01-08 01:44:48	godfat	welcome to zombo.com
2014-01-08 01:44:55	letoh	texlive.js – A LaTeX Compiler for Javascript
2014-01-08 01:45:39	CindyLinz	texlive.js 倒不錯 :p
2014-01-08 01:46:22	letoh	javascript can do anything... 說組語能做出任何東西沒意義啊....XD
2014-01-08 01:46:51	CindyLinz	是因為以前只能在瀏覽器裡跑的關係吧, 突破了就會喊很大聲 :p
2014-01-08 01:47:16	godfat	http://en.wikipedia.org/wiki/Turing_tarpit
2014-01-08 01:48:33	favonia	CindyLinz: 自從 javascript 可以啟動 Linux 後
2014-01-08 01:48:59	favonia	我覺得是時候在裡面跑 X 了
2014-01-08 01:49:15	favonia	最好在裡面再跑個 firefox
2014-01-08 01:49:28	godfat	we need to go deeper
2014-01-08 01:49:32	letoh	然後裡面再跑個 linux ?
2014-01-08 01:50:06	favonia	letoh: 喔每多跑一輪你的電腦評價就會加一分
2014-01-08 01:50:59	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2014-01-08 01:51:05	CindyLinz	...
2014-01-08 01:51:12	CindyLinz	還不如拿來挖礦...... ww
2014-01-08 01:51:37	-->	gko_ (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-08 01:51:38	favonia	CindyLinz: javascript 沒有 bitcoin 程式嗎？
2014-01-08 01:52:05	favonia	CindyLinz: http://www.bitcoinplus.com/miner/embeddable
2014-01-08 01:52:23	favonia	你只要在最裡層的 firefox 跑這個就好了
2014-01-08 01:52:27	CindyLinz	favonia: 我是說.. 這樣子層層包來耗效能..... ww
2014-01-08 01:53:19	godfat	facebook 可以裝這個，然後挖到礦之後寄回給 facebook
2014-01-08 01:53:26	CindyLinz	(Y)
2014-01-08 01:53:37	CindyLinz	用 facebook 對 facebook 說讚.... ww
2014-01-08 01:53:43	godfat	一切都是為了 distributed mining
2014-01-08 01:53:55	favonia	godfat: in javascript
2014-01-08 01:54:02	favonia	godfat: 你漏掉重要的兩個字
2014-01-08 01:54:05	godfat	XDDDD
2014-01-08 01:54:10	CindyLinz	...........||
2014-01-08 01:54:38	letoh	這個字頭就不會痛嗎?
2014-01-08 01:54:41	godfat	把這些討論搬到 javascript 討論板上搞不好就變成正向討論
2014-01-08 01:54:47	favonia	letoh: 麻痹了
2014-01-08 01:54:55	letoh	XDXD
2014-01-08 01:54:55	CindyLinz	我們太不正經了.... QQ
2014-01-08 01:55:19	favonia	CindyLinz: 我們最正經了～
2014-01-08 01:55:35	letoh	其實我覺得剛剛還蠻正向的啊，還能再更正向啊? XD
2014-01-08 01:58:03	godfat	我以為都是嘲諷口氣.... XD
2014-01-08 01:58:17	favonia	letoh: 他的意思是說我們不應該正經的諷刺 javascript
2014-01-08 01:58:28	letoh	好吧XD
2014-01-08 01:58:35	favonia	letoh: 應該要發自內心的愛 javascript
2014-01-08 01:59:26	 *	letoh 懺悔，下個專案改用 javascript 好了
2014-01-08 01:59:27	favonia	letoh: 即使不寫 javascript 可能對某些人來說是更正向的事情但那都無關緊要
2014-01-08 01:59:35	letoh	XDXD
2014-01-08 02:24:57	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2014-01-08 02:24:57	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-01-08 02:39:43	monochrom	哈哈, 原來還有人知道 zombo.com
2014-01-08 02:40:23	godfat	我超愛的 XD
2014-01-08 02:43:15	 *	monochrom 的 javascript 的正向用途: http://www.vex.net/~trebla/homework/epsilon-delta.html  還有 http://www.vex.net/~trebla/homework/extended-euclid.html
2014-01-08 02:43:34	monochrom	還有! http://www.vex.net/~trebla/humour/lmcify.html
2014-01-08 02:46:39	favonia	monochrom: 好吧 http://www.vex.net/~trebla/humour/lmcify.html?t=JavaScript+is+great.
2014-01-08 02:47:33	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-08 02:48:39	monochrom	對了!
2014-01-08 03:41:09	favonia	monochrom: ?
2014-01-08 03:41:45	monochrom	你懂得用我的 lmcify.html :)
2014-01-08 05:22:45	<--	hashcat (~hashcat@39.10.62.77) has quit (Ping timeout: 248 seconds)
2014-01-08 09:48:34	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-08 09:56:03	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-08 10:12:56	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-08 10:56:36	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-08 11:30:19	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-01-08 12:11:15	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2014-01-08 12:11:57	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-08 12:12:56	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2014-01-08 12:13:15	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-08 12:13:50	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2014-01-08 12:14:31	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-08 12:50:16	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2014-01-08 12:50:43	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-08 13:22:47	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-08 13:52:45	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-08 13:53:00	--	petercommand is now known as Guest54918
2014-01-08 13:53:25	--	petercom1and is now known as petercommand
2014-01-08 13:56:21	<--	Guest54918 (~peter@unaffiliated/petercommand) has quit (Ping timeout: 276 seconds)
2014-01-08 13:56:50	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-08 14:13:13	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-01-08 14:22:57	<--	gko_ (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 272 seconds)
2014-01-08 14:30:33	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-08 14:50:15	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Ping timeout: 240 seconds)
2014-01-08 15:01:19	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-08 15:01:24	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-08 15:18:47	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:19:35	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 245 seconds)
2014-01-08 15:20:42	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-08 15:23:02	<--	hashcat (~hashcat@27.241.176.229) has quit (Ping timeout: 240 seconds)
2014-01-08 15:23:50	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:23:51	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:24:09	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:24:10	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:24:34	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:24:35	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:25:22	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:25:24	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:25:58	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:25:59	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:26:38	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:26:38	<--	hashcat (~hashcat@27.241.176.229) has quit (Remote host closed the connection)
2014-01-08 15:26:48	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:26:49	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:27:03	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:27:04	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:27:23	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:27:24	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:27:49	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:27:49	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:28:17	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:28:17	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:28:50	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:28:53	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:29:31	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:29:32	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:30:10	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:30:11	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:31:11	-->	petercom1and (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-08 15:31:22	--	petercommand is now known as Guest64223
2014-01-08 15:31:22	<--	Guest64223 (~peter@unaffiliated/petercommand) has quit (Killed (barjavel.freenode.net (Nickname regained by services)))
2014-01-08 15:31:22	--	petercom1and is now known as petercommand
2014-01-08 15:31:37	<--	petercommand (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2014-01-08 15:31:37	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-08 15:32:25	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-08 15:40:44	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:40:46	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:41:01	-->	hashcat (~hashcat@27.241.176.229) has joined #haskell.tw
2014-01-08 15:41:06	<--	hashcat (~hashcat@27.241.176.229) has quit (Excess Flood)
2014-01-08 15:41:58	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 15:42:00	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 15:42:13	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 15:42:14	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 16:35:01	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 16:39:27	<--	hashcat (~hashcat@27.52.63.40) has quit (Ping timeout: 240 seconds)
2014-01-08 16:45:42	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 16:45:44	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 16:46:03	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 16:46:04	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 16:47:15	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 16:47:17	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 17:22:50	-->	hashcat_ (~kv2a@118-171-192-140.dynamic.hinet.net) has joined #haskell.tw
2014-01-08 17:24:53	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 17:24:55	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 17:25:09	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 17:25:12	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 17:25:30	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 17:25:34	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 17:25:56	-->	hashcat (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-08 17:25:59	<--	hashcat (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-08 17:55:37	--	hashcat_ is now known as hashcat
2014-01-08 18:03:01	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2014-01-08 18:49:12	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-08 18:59:02	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-08 20:06:12	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2014-01-08 20:13:58	-->	b4283 (~b4283@218-164-220-36.dynamic.hinet.net) has joined #haskell.tw
2014-01-08 21:17:14	-->	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has joined #haskell.tw
2014-01-08 21:22:50	mno2	http://www.cs.utexas.edu/users/EWD/OtherDocs/To%20the%20Budget%20Council%20concerning%20Haskell.pdf
2014-01-08 21:23:28	mno2	不愧是戰神 Dijkstra (誤)
2014-01-08 21:33:11	-->	suhorng (~suhorng@118-166-52-132.dynamic.hinet.net) has joined #haskell.tw
2014-01-08 22:40:23	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2014-01-08 22:43:04	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-09 00:35:59	<--	b4283 (~b4283@218-164-220-36.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-09 01:09:22	<--	mno2 (~mno2@bb116-15-39-197.singnet.com.sg) has quit (Quit: mno2)
2014-01-09 02:47:34	<--	suhorng (~suhorng@118-166-52-132.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-09 03:41:49	<--	hashcat (~kv2a@118-171-192-140.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-09 06:23:56	monochrom	我愛 Dijkstra :)
2014-01-09 06:31:01	monochrom	然而 lazy evaluation 是雙刃劍, 即使只談 Dijkstra 所談. 首先我當然跟 Dijkstra 一樣, 鼓勵少想操作, 因此像 Haskell 這樣, 不用想操作而能預測程式給出甚麼答案, 這是大幸. 但我們遲早也要預測程式用幾多時間幾多記憶, 這時難以避免考慮操作, 而 lazy evaluation 是較難跟的操作.操作
2014-01-09 06:34:53	monochrom	我已經知道怎樣避免操作而仍能預測時間, 畢竟這是我的博士論文! 而然寫完論文, 還是嘆曰: 不易. 而預測記憶依然遙遙無期.
2014-01-09 06:38:19	monochrom	當然, 其實官方從沒公開說 Haskell 是 lazy, 只說 non-strict. 說 non-strict, 就更加斷絕所有考慮操作的希望了! XD
2014-01-09 06:42:37	monochrom	最後, 這只是末節. 重點上 Dijkstra 是對的, 教 Haskell 可擴闊視野, 並且鼓勵把程式當嚴謹數式.
2014-01-09 06:46:57	monochrom	預測記憶, Haskell 面對的是雙邊戰爭, 是 lazy evaluation 及 garbage collection 兩面夾擊. 注意單單 garbage collection 已不易, 例如 ML 及 Java.
2014-01-09 06:47:38	monochrom	惜也! Dijkstra 不在世, 沒見到我的博士論文!
2014-01-09 06:48:01	monochrom	否則一定大讚 XD
2014-01-09 09:53:55	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-09 10:01:47	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-01-09 10:04:27	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-09 10:06:18	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-09 10:14:00	-->	shik_ (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-01-09 10:15:02	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 272 seconds)
2014-01-09 12:01:15	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2014-01-09 12:38:33	-->	godfat (~Adium@1-160-83-28.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 12:55:25	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-09 12:58:44	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-09 13:22:27	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-09 13:34:17	-->	godfat1 (~Adium@1-160-83-28.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 13:34:18	<--	godfat (~Adium@1-160-83-28.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-09 14:19:35	CindyLinz	monochrom: 如果他真的還在世, 你真的敢拿給他看喔? 不是聽說他脾氣超差...? XDD
2014-01-09 14:20:06	godfat1	XDDDDD
2014-01-09 14:20:10	--	godfat1 is now known as godfat
2014-01-09 14:21:03	CindyLinz	monochrom: 不過, 應該可以不用甩 Haskell 官方說的 non-strict, 直接做 lazy 版, 然後說這個分析方法只適用 lazy-haskell.. 而實際上所有的 haskell 都是 lazy-haskell.. :p
2014-01-09 14:22:20	godfat	...=_=... 最終都是實作獲勝的味道
2014-01-09 14:39:51	CindyLinz	不是這樣嘛, 只是先顧現實的問題啊~ ^^  non-strict 是一個「非建構性」的定義, 什麼都不能做啊.. XD
2014-01-09 14:40:16	CindyLinz	等到有和 lazy 不一樣的 non-strict 出來, 也是可以對它作分析的 ^^
2014-01-09 14:40:49	godfat	唔，也是 XD 不過具體而言，還有啥作法嗎？
2014-01-09 14:40:56	CindyLinz	提醒提醒~~ 今天晚上是 Functional Thursday 喔~~
2014-01-09 14:41:05	CindyLinz	就沒聽過嘛 :p
2014-01-09 14:41:10	godfat	今天沒空參加 ><
2014-01-09 14:41:29	CindyLinz	我想, eval 完不要把結果記住, 仍然留著 thunk 在那邊也是一個可行的作法? XD
2014-01-09 14:42:01	godfat	如果 thunk 是 pure 的，這樣有意義嗎？ XD
2014-01-09 14:42:55	CindyLinz	省記憶體.. XD
2014-01-09 14:43:12	godfat	結果不是通常比較小嗎？
2014-01-09 14:45:05	CindyLinz	do { let a = [1..1000000000] ; putStrLn $ show $ sum a ; threadDelay 1000000000 ; putStrLn $ show $ length a }
2014-01-09 14:45:24	CindyLinz	通常是啦.. 所以才沒看過有人這樣做 XD
2014-01-09 14:46:15	CindyLinz	哎唷.. 嘴砲不要太認真嘛 QQ
2014-01-09 14:48:36	godfat	XDDDD
2014-01-09 14:48:36	godfat	哎唷，不認真我也沒問到這樣的具體例子呀 :P
2014-01-09 14:48:36	godfat	也許可以有 annotation 給 compiler/vm 一些提示應該要記 value 還是 thunk, 不保證這樣
2014-01-09 14:49:12	CindyLinz	「強烈建議每次重算」
2014-01-09 14:50:44	CindyLinz	不知道 GHC 會不會越過 unsafe 的牆來檢查..
2014-01-09 14:50:57	CindyLinz	我在想可以用 unsafe 擋著, 叫 GHC 每次都重算
2014-01-09 14:51:19	CindyLinz	只是如果 GHC 會爬過牆來檢查說: 你這根本 safe.... 就破功了..
2014-01-09 14:51:56	godfat	要怎麼用 unsafe 擋著呀？用 ghc 本身的 api..?
2014-01-09 14:53:28	CindyLinz	http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/System-IO-Unsafe.html
2014-01-09 14:53:50	CindyLinz	然後在裡面 IO 的地方使用 suhorng 上次遇到的問題
2014-01-09 14:54:59	CindyLinz	# 19:55 < suhorng> 然後我的程式就變成(幾乎)兩倍慢了 囧
2014-01-09 14:55:21	godfat	哪個問題..? XD 為 debug 插入 IO?
2014-01-09 14:55:21	godfat	可是問題不是在怎麼讓 ghc 丟掉 value 嗎？
2014-01-09 14:55:51	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-09 14:56:24	CindyLinz	ghc 好像還蠻容易丟掉 value 的... @@"
2014-01-09 14:56:50	CindyLinz	只要不是在同一層函數裡面用到, 就不會 cache 了的樣子
2014-01-09 14:57:23	CindyLinz	像是 fib 0 = 1 ; fib 1 = 1 ; fib n = fib (n - 1) + fib (n - 2) 裡面, f 會一再重算
2014-01-09 14:57:44	CindyLinz	但我不知道明確的 rule.. 所以真要應用還不太行
2014-01-09 14:58:13	godfat	我內心的想像是 keepThunk :: a -> a
2014-01-09 14:58:13	godfat	XD
2014-01-09 14:58:43	godfat	可能會是 lexical 的...
2014-01-09 14:59:04	CindyLinz	目前的應該還不行.. 如果寫成 let a = keepThunk f in (a, a) 的話, a 的結果會被記住, f 還是只有算一次
2014-01-09 14:59:24	CindyLinz	但! 如果 f 裡面有 unsafe 的話, 不知道 ghc 會不會就不敢 cache 了 :p
2014-01-09 14:59:55	CindyLinz	我猜還是敢.. 不然 unsafe 就很沒用了.. :Q
2014-01-09 14:59:59	godfat	也許想說反正你都 unsafe 了，就讓你瞧瞧 unsafe 的真義 XD
2014-01-09 15:03:30	CindyLinz	有了
2014-01-09 15:03:38	CindyLinz	我作了測試
2014-01-09 15:04:48	CindyLinz	http://lpaste.net/98225
2014-01-09 15:05:01	CindyLinz	f 只會 eval 一次, 但 g 會 eval 二次
2014-01-09 15:07:36	godfat	唔，然後是不是應該有 jit 讓 g 多跑幾次後他發現其實應該 cache? XD
2014-01-09 15:11:33	CindyLinz	覺得好像要做這個已經準備好了, 只是 ghc 那幫高手的風格好學術, 可能不覺得這是重要的事 orz
2014-01-09 15:20:10	CindyLinz	不過.. 塞給 g 的參數兩次是不一樣的欸..
2014-01-09 15:20:15	CindyLinz	因為那個 callback 不一樣
2014-01-09 15:21:02	CindyLinz	它還是可以分析出塞給 next 的 3 沒有 depend on 這個 callback
2014-01-09 15:21:10	CindyLinz	那我 trace 放的位置不對...
2014-01-09 15:21:46	CindyLinz	我把 trace 移到 3 的位置, 還是有 eval 兩次 ^^
2014-01-09 15:23:05	godfat	不過說實在我很難想像好的 jit 應該怎麼做，感覺需要很多 heuristic 去預測什麼時候開始最佳化？
2014-01-09 15:24:19	CindyLinz	對啊, 就解決常見的就好.. 應該是個非常不嚴謹, 講不太出可證明的理由的行為.. @@
2014-01-09 15:24:39	CindyLinz	和 FP 圈的文化不太合.. XD
2014-01-09 15:25:47	godfat	...XDD 也是..
2014-01-09 15:28:25	CindyLinz	也許我一兩年前去 #haskell 問說.. 有沒有什麼 generic 的函數把 head :: [Int] -> Int, tail :: [Int] -> [Int] 變成 maybeHead :: [Int] -> Maybe Int 和 maybeTail 的時候..
2014-01-09 15:28:41	CindyLinz	有人回答我說 impossible, it's halting problem
2014-01-09 15:28:58	CindyLinz	就是個 symbol 了.. o.o
2014-01-09 15:29:26	CindyLinz	從實際應用的角度來說, 在 halting problem 之前, 還有很多文章可以作
2014-01-09 15:30:02	godfat	好像就是丟到 IO 裡面抓 exception... XD
2014-01-09 15:30:10	CindyLinz	像這個問題, 其實可以不用全面性地視為 halting problem, 而視為 non-exhaustive pattern 的問題
2014-01-09 15:30:31	CindyLinz	non-exhaustive pattern 是可以解的..
2014-01-09 15:30:47	godfat	你是說從 input 去看嗎？
2014-01-09 15:31:11	CindyLinz	它就是缺 pattern 來 match [] 呀
2014-01-09 15:31:58	CindyLinz	只是這種解法不夠全面, 就會上不了 那個 台面.. :Q
2014-01-09 15:34:00	godfat	要這樣做似乎就等於要幫 f 補完 case 了？
2014-01-09 15:34:15	godfat	是說這樣好像也是一種 exception 的意思
2014-01-09 15:35:48	CindyLinz	可以算是 exception, 現狀也是被當成 exception... 不過我覺得這一種 exception 可以適當包裝, 讓它留在 pure...
2014-01-09 15:36:03	CindyLinz	我還沒試過把它放在 Maybe Monad 裡面能不能變成 Nothing
2014-01-09 15:36:33	godfat	這樣等於是 haskell 語意也變了.. XD
2014-01-09 15:37:02	godfat	另一方面，感覺這也是某一種 null pointer
2014-01-09 15:38:43	CindyLinz	null 可以解決所有的事, 但不一定就要把所有的事都推給 null 啊? ^^
2014-01-09 15:39:10	godfat	我的意思是，他的概念其實有點像是 null, 像是可以正常處理例外
2014-01-09 15:39:33	CindyLinz	像是 Monad 的 fail?
2014-01-09 15:39:47	godfat	或是說，Maybe 其實是某種 Nullable... XD
2014-01-09 15:40:00	CindyLinz	Monad 的 fail 我覺得就是: monad 內無法處理, 但是 runMonad 的地方 (monad 外面) 可以處理
2014-01-09 15:40:18	godfat	嗯，也是像是那樣
2014-01-09 15:42:38	CindyLinz	試完了, 不會被當成 failed monad # http://lpaste.net/98227
2014-01-09 15:43:42	CindyLinz	記得它的實作是有 pattern match...
2014-01-09 15:43:58	CindyLinz	head [] = error "empty list"
2014-01-09 15:44:07	CindyLinz	這個 error 太兇殘了.. ww
2014-01-09 15:44:47	CindyLinz	戳一下就一路捅到 IO 才能處理 orz
2014-01-09 15:45:46	godfat	XDDDD 這等於是沒有統一方法了
2014-01-09 15:46:28	CindyLinz	可是 fail 只能在 Monad 裡面用
2014-01-09 15:46:55	CindyLinz	throw 更侷限, 只能在特定的 Monad 裡面用
2014-01-09 15:47:29	CindyLinz	應該強制把所有的 pure 函數都當成在 Identity a 裡面跑... ww
2014-01-09 15:47:43	CindyLinz	這樣就可以 fail 了 :p
2014-01-09 15:47:57	godfat	呃.... XD
2014-01-09 15:48:20	CindyLinz	現在在 pure 裡面放個 error 是什麼意思嘛.. XD
2014-01-09 15:48:35	godfat	"please debug your application"
2014-01-09 15:49:16	CindyLinz	或說.. error 的 semantic 應該可以由 monad 來定義
2014-01-09 15:49:25	CindyLinz	不過這樣就 error = fail 了.. :p
2014-01-09 15:49:39	godfat	是啊
2014-01-09 15:50:02	CindyLinz	覺得這樣比較對啊.. :Q
2014-01-09 15:50:35	CindyLinz	pure 函數到處都能用.. 然後我們又希望不要 IO monad 滿天飛
2014-01-09 15:50:44	godfat	我想是因為沒有想要整個 haskell 在 monad 裡？
2014-01-09 15:50:48	CindyLinz	結果 pure 裡面有一堆東西都是一戳就直達 IO... orz
2014-01-09 15:51:17	godfat	不過整個 haskell 都在 monad 好像也是滿有趣的... XD
2014-01-09 15:51:23	CindyLinz	整個 haskell 在 monad 裡應該是無可避免的命運吧? XD
2014-01-09 15:51:55	godfat	這樣 return a 跟 a 好像也沒分別了？
2014-01-09 15:52:12	CindyLinz	髒的是 IO a, 不是所有的 Monad 啊.. QQ  你看 Identity a 多麼純啊 ^^
2014-01-09 15:52:15	godfat	或是說 return a 變成 return $ return a 了
2014-01-09 15:52:20	godfat	XDDDDD
2014-01-09 15:52:45	CindyLinz	聽起來不太妙 orz
2014-01-09 15:54:06	CindyLinz	還是由 compiler 來施展黑魔法吧, 把 error 當成 fail 來用就好 XD
2014-01-09 15:56:23	godfat	不確定這樣會變怎麼樣... XD 可以做成一個 ghc extension 瞧瞧？ XD
2014-01-09 15:56:49	CindyLinz	syntax 上還是得由 programmer 決定 Identity 有幾層.. 不然最後面套了無窮多層 IdentityT, 這程式寫不了的...
2014-01-09 15:57:30	godfat	由 programmer 宣告 type?
2014-01-09 15:57:34	CindyLinz	好像可以是一個 per module 的 extension
2014-01-09 15:57:46	CindyLinz	 global 用可能會和已有的程式不合
2014-01-09 15:57:59	godfat	我覺得一定不會合，語意不一樣... XD
2014-01-09 15:58:06	CindyLinz	已有的程式可能假設 Nothing 發生時一定是某某問題, 而不是發生這種 list 不夠長的意外
2014-01-09 15:58:29	CindyLinz	但可以指定讓某一層 Monad 可以收 error
2014-01-09 15:58:44	CindyLinz	好像不用 extension, 用 unsafe 就可以做了?
2014-01-09 15:59:21	CindyLinz	用 unsafe IO 裡面擺 catch, 然後再 run Identity..
2014-01-09 15:59:48	CindyLinz	那是不是已經有這種 monad 了呢? :p
2014-01-09 16:00:23	godfat	聽起來是可行.... XD
2014-01-09 16:00:37	godfat	可是不太確定為什麼要這樣用... XD
2014-01-09 16:01:40	CindyLinz	想像你寫了個 Monad
2014-01-09 16:01:52	CindyLinz	想把所有的東西 run 在這個 Monad 裡面.. 而且, 它不是 IO!
2014-01-09 16:02:21	CindyLinz	然後如果你寫的是類似 server 性質的程式, 也許這程式有些地方會出點意外
2014-01-09 16:02:34	CindyLinz	但你希望它不會因為不夠嚴重的意外就把整個程式 crash 掉
2014-01-09 16:02:48	CindyLinz	那就會在某些地方攔一些救援性質的程式
2014-01-09 16:02:56	godfat	是，我唯一想到不希望程式 crash 的真的就 server 之類的 XD
2014-01-09 16:03:15	CindyLinz	啊我就一天到晚寫 server 程式嘛, 所以都從這邊開始想啊 ^^|
2014-01-09 16:03:19	godfat	像是程式爛了自動重開，是個爛招，但有時候確實想要...
2014-01-09 16:03:41	CindyLinz	但我們就會希望不要爛到需要重開的地步, 而是局部 abort 某個 task 就好
2014-01-09 16:03:56	godfat	之前也常常覺得自己寫了好髒的東西，覺得把錯誤都藏起來了很討厭，但又不得不這樣做
2014-01-09 16:04:15	CindyLinz	就像在這邊.. 希望不要爛到整個 IO thread 要重來, 而是局部處理, 局部修復就好
2014-01-09 16:04:31	CindyLinz	像是... Memory 不夠了
2014-01-09 16:04:38	CindyLinz	也不用因此就被 kill 9
2014-01-09 16:04:54	CindyLinz	我把部分 job 丟掉, 還剩一些可以繼續跑呀~
2014-01-09 16:05:01	godfat	來個 safe haskell, 然後這跟大家想的 safe 不一樣，其實是 never crash (but unsafe...)
2014-01-09 16:05:12	CindyLinz	「跟大家想的 safe 不一樣」...... wwww
2014-01-09 16:06:18	godfat	說來我寫程式也常常覺得滿矛盾的，錯誤就想噴錯，但導致不夠 robust 又不好...
2014-01-09 16:06:26	CindyLinz	你可以噴 log
2014-01-09 16:06:33	CindyLinz	fatal log, 寄信塞爆你信箱...
2014-01-09 16:06:34	godfat	log 不夠吵... XD
2014-01-09 16:06:37	godfat	....XDD...
2014-01-09 16:06:42	CindyLinz	cc 給董事長
2014-01-09 16:07:09	godfat	我現在確實慢慢把程式改成用 email 回報... (其實是丟給另外 service, 他會再寄信)
2014-01-09 16:07:11	CindyLinz	或是 cc 到 #haskell channel.. 就會開始有人罵你... XD
2014-01-09 16:07:25	godfat	cc 給董事長也滿好笑的，還可以 cc 給客戶更猛 (??)
2014-01-09 16:07:28	godfat	XDDDDDDDDDD
2014-01-09 16:07:29	CindyLinz	XDD
2014-01-09 16:07:34	godfat	不行，社群不能得罪 (??)
2014-01-09 16:07:45	CindyLinz	吵過頭了 XD
2014-01-09 16:08:28	CindyLinz	我們家的 perl 程式常常在包 eval { }
2014-01-09 16:08:38	CindyLinz	類似 java 的 try { } catch all
2014-01-09 16:08:59	godfat	silently faill...!?
2014-01-09 16:09:02	CindyLinz	然後會噴信
2014-01-09 16:09:07	godfat	喔喔 XD
2014-01-09 16:09:24	CindyLinz	我們實際上有很多壞掉也沒關係, 但不要總是壞掉的服務..
2014-01-09 16:09:43	CindyLinz	例如說 PM 辦活動, 玩家玩完一局有機率掉寶
2014-01-09 16:09:56	godfat	crash = no items
2014-01-09 16:09:59	CindyLinz	這種程式常常在改, 因為常常有新活動, 所以也常常錯
2014-01-09 16:10:07	godfat	XDDD 可以理解...
2014-01-09 16:10:11	CindyLinz	如果它出的 exception 讓正常結算都爆掉...
2014-01-09 16:10:23	CindyLinz	還不如把這 error 河蟹掉..
2014-01-09 16:10:34	CindyLinz	至少正常遊戲可以玩, 只是沒寶..
2014-01-09 16:51:09	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-09 17:01:09	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-09 17:11:09	-->	hashcat_ (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-09 17:11:10	<--	hashcat_ (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-09 17:11:23	-->	hashcat_ (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-09 17:11:24	<--	hashcat_ (~hashcat@27.52.63.40) has quit (Excess Flood)
2014-01-09 17:59:37	-->	hashcat (~kv2a@118-171-193-4.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 19:05:45	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-09 19:11:22	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-09 19:13:04	<--	godfat (~Adium@1-160-83-28.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-09 20:02:23	-->	godfat (~Adium@1-161-52-71.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 20:06:55	<--	godfat (~Adium@1-161-52-71.dynamic.hinet.net) has quit (Ping timeout: 265 seconds)
2014-01-09 20:06:58	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-09 20:56:09	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-09 21:11:34	-->	b4283 (~b4283@218-164-214-248.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 22:37:03	<--	b4283 (~b4283@218-164-214-248.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-09 22:53:44	-->	b4283 (~b4283@114-39-254-241.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 23:33:05	<--	shik_ (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-01-09 23:33:21	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-01-09 23:43:59	-->	suhorng1 (~suhorng@118-166-52-132.dynamic.hinet.net) has joined #haskell.tw
2014-01-09 23:55:40	<--	suhorng1 (~suhorng@118-166-52-132.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-10 00:00:15	<--	hashcat (~kv2a@118-171-193-4.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-01-10 00:11:29	<--	b4283 (~b4283@114-39-254-241.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-10 00:48:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-10 03:31:00	-->	hashcat_ (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-10 03:33:23	<--	hashcat_ (~hashcat@27.52.63.40) has quit (Remote host closed the connection)
2014-01-10 03:36:01	-->	hashcat_ (~hashcat@27.52.63.40) has joined #haskell.tw
2014-01-10 03:37:23	<--	hashcat_ (~hashcat@27.52.63.40) has quit (Client Quit)
2014-01-10 03:37:40	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-10 03:44:22	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Remote host closed the connection)
2014-01-10 04:02:13	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-10 04:02:14	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Excess Flood)
2014-01-10 05:27:50	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-10 09:51:09	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-10 10:06:07	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Remote host closed the connection)
2014-01-10 10:18:27	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-10 10:18:40	-->	hashcat (~kv2a@218-166-237-92.dynamic.hinet.net) has joined #haskell.tw
2014-01-10 12:01:05	<--	hashcat (~kv2a@218-166-237-92.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-10 14:04:22	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-10 14:40:52	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-10 16:17:17	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2014-01-10 16:23:20	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-10 18:48:24	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-10 18:51:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2014-01-10 19:29:10	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-10 19:31:13	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Quit: rcirc on GNU Emacs 24.3.50.1)
2014-01-10 19:46:36	-->	b4283 (~b4283@218-164-218-86.dynamic.hinet.net) has joined #haskell.tw
2014-01-10 20:04:49	-->	hashcat (~kv2a@218-173-239-191.dynamic.hinet.net) has joined #haskell.tw
2014-01-10 20:11:03	<--	b4283 (~b4283@218-164-218-86.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-10 20:27:10	-->	b4283 (~b4283@218-164-212-162.dynamic.hinet.net) has joined #haskell.tw
2014-01-10 20:37:56	<--	hashcat (~kv2a@218-173-239-191.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-10 21:41:06	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-10 22:13:01	-->	suhorng1 (~suhorng@118-166-52-132.dynamic.hinet.net) has joined #haskell.tw
2014-01-10 23:23:12	-->	hashcat (~kv2a@36-238-36-8.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-10 23:54:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-11 00:32:38	<--	hashcat (~kv2a@36-238-36-8.dynamic-ip.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-11 00:48:06	<--	b4283 (~b4283@218-164-212-162.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-11 00:53:22	<--	suhorng1 (~suhorng@118-166-52-132.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-11 01:00:21	-->	b4283 (~b4283@218-164-212-162.dynamic.hinet.net) has joined #haskell.tw
2014-01-11 01:10:09	<--	b4283 (~b4283@218-164-212-162.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-11 01:20:53	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-11 02:14:06	CindyLinz	JVM in TypeScript... orz # https://github.com/int3/doppio
2014-01-11 02:15:21	letoh	會不會有人用 (alt)js 搞個 dalvik 以後，整個 android 搬到 nodejs 上跑?
2014-01-11 02:20:27	CindyLinz	這樣有... 降低穩定性的好處? orz
2014-01-11 02:20:50	letoh	大概吧XD
2014-01-11 04:38:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2014-01-11 04:39:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-11 06:48:38	favonia	CindyLinz: 這樣子就有 jpu 出現啦---javascript process unit
2014-01-11 07:05:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2014-01-11 07:08:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-11 08:40:15	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-11 08:53:12	-->	suhorng1 (~suhorng@118-166-47-20.dynamic.hinet.net) has joined #haskell.tw
2014-01-11 09:00:07	suhorng1	https://github.com/ekmett/js-parsers/blob/master/parsers.js 竟然是js
2014-01-11 09:03:05	monochrom	它的 readme 不是開宗明義說: 給 javascript 用嗎?
2014-01-11 09:03:39	suhorng1	對阿對阿
2014-01-11 09:05:42	monochrom	其實, 可以說 "parser combinators for javascript" 模梭兩可. 第一可: 用來讀 javascript. 第二可: 用在 javascript 內.
2014-01-11 09:06:49	monochrom	"for" 字一向都很多問題 :)
2014-01-11 09:07:10	suhorng1	也是這樣說啦XD
2014-01-11 09:07:58	suhorng1	是想說, 我這學期修了編譯器, 上課講 LL, LR 之類的, 講 LL 時倒是完全沒提到有 parser combinator 這種好用的東西XD 很可惜
2014-01-11 09:08:59	monochrom	教師從沒想過 combinator, 或認為講了也沒學生明白
2014-01-11 09:10:14	monochrom	combinator 這概念需要很強的程式語言才成事. 例如, 用 BASIC 時 combinator 是妄想
2014-01-11 09:10:26	suhorng1	真難過
2014-01-11 09:10:42	suhorng1	好吧..我們從頭到尾的示範都用 C =_=||| 沒什麼好講的
2014-01-11 09:10:50	monochrom	未見過函式語言就跟本不會明 combinator
2014-01-11 09:11:40	suhorng1	想說 C++ 至少也有用起來很像的 boost::spirit
2014-01-11 09:11:53	monochrom	當然了, C 比 BASIC 好些 :)
2014-01-11 09:14:12	suhorng1	裡面講的一些東西感覺就是比較針對 C 實作的問題XD
2014-01-11 09:15:36	suhorng1	助教給的程式還手寫vector XDD
2014-01-11 09:18:28	monochrom	分得出重點與末節的人有福了
2014-01-11 09:33:48	suhorng1	好難過, Appel 的 Modern Compiler Implementation in C, in Java 都有進口代理, 唯獨 in ML 沒有(兩倍價格...)
2014-01-11 09:36:55	monochrom	很久以前趁書局不知何解有, 價錢又不貴, 買了 :)
2014-01-11 09:37:15	monochrom	不過, 畢竟是加拿大
2014-01-11 09:38:37	suhorng1	真的是書局部知道為何有 XD
2014-01-11 09:38:50	monochrom	又不過, 加拿大都有弊處. 有一年, 加元對美元甚弱, 書店就大肆加價. 之後, 沒有怎樣減.
2014-01-11 09:39:38	monochrom	美元$10 的書賣加元 $15 都試過
2014-01-11 09:43:08	monochrom	更加離奇的是, Andrew Gordon 的博士論文, functional programming and input/output, 都在連鎖書店找到
2014-01-11 09:43:51	petercommand	monochrom: 一般書店?
2014-01-11 09:44:09	monochrom	(也是馬上買了. 竟讓我碰到, 簡直是天意, 天意不可違!)
2014-01-11 09:44:32	monochrom	是呀! 加拿大的連鎖書店 Chapters
2014-01-11 09:45:48	monochrom	當然不會每間分店都有. 應該是只一間分店有, 只有一本, 給我遇到了. 天意!
2014-01-11 09:46:46	suhorng1	好神奇
2014-01-11 09:47:38	monochrom	Chapters 是舊名. 現叫 Indigo, 因為轉老闆. 但網站保留舊名, 叫 chapters.indigo.ca
2014-01-11 09:48:02	suhorng1	(!)
2014-01-11 09:54:33	monochrom	我想, 有得解的. 那是2000年左右, 互聯網股泡沫時. 所以, 書店也認為所有電腦書, 不分青紅皀白都有市.
2014-01-11 09:56:17	monochrom	事實證明的確有市, 就是我 :)
2014-01-11 10:00:01	monochrom	嘩, 即使在 amazon.com, Appel 的 in ML 都很貴. 租都要 us$35, 買就要 us$62. 而且只是軟皮
2014-01-11 10:01:13	monochrom	咦, 原來我那時買都貴, cdn$77, 不過我有硬皮 XD
2014-01-11 10:01:34	suhorng1	in Java也很貴？
2014-01-11 10:01:47	monochrom	讓我看看
2014-01-11 10:01:48	suhorng1	國際版的才比較便宜..
2014-01-11 10:03:48	monochrom	in Java 硬皮 us$76, 找不到軟皮.
2014-01-11 10:06:05	monochrom	啊, 有第三者在 amazon 寄賣軟皮, 可以低到 us$26
2014-01-11 10:06:15	suhorng1	喔喔
2014-01-11 10:06:39	suhorng1	java還是比較人 QQ
2014-01-11 10:07:22	suhorng1	哈哈, amazon在 in ML 書下方推薦的：「Frequently Bought Together: ..in ML + Compiling with Continuations」
2014-01-11 10:08:00	monochrom	continuation 簡直是 Appel 看家本領啦
2014-01-11 10:15:06	monochrom	幾時有 in javascript 呢, 那就功德完滿了 XD
2014-01-11 10:15:27	monochrom	呀, 圓滿!
2014-01-11 10:15:51	monochrom	(死啦, 中文退步了)
2014-01-11 10:18:04	monochrom	有了! "compiler implementation in javascript with continuations" 會是驚世駭作! XD
2014-01-11 10:18:13	suhorng1	wwwwww
2014-01-11 10:18:30	suhorng1	把 continuations 改成 callbacks (誤)
2014-01-11 10:41:55	<--	suhorng1 (~suhorng@118-166-47-20.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-11 11:25:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2014-01-11 12:13:14	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-11 12:48:10	-->	b4283 (~b4283@36-238-225-187.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-11 13:34:20	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-11 14:02:01	<--	b4283 (~b4283@36-238-225-187.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-11 14:03:50	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-11 16:27:46	-->	hashcat (~kv2a@36-238-36-8.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-11 17:54:25	-->	b4283 (~b4283@36-238-224-65.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-11 18:00:25	<--	mno2 (~mno2@42.60.173.63) has quit (Ping timeout: 265 seconds)
2014-01-11 18:03:55	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-12 00:13:04	<--	hashcat (~kv2a@36-238-36-8.dynamic-ip.hinet.net) has quit (Ping timeout: 265 seconds)
2014-01-12 00:13:12	<--	b4283 (~b4283@36-238-224-65.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-01-12 01:30:49	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-12 02:31:12	<--	monochrom (trebla@216.138.220.146) has quit (Quit: NO CARRIER)
2014-01-12 02:34:59	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-12 09:22:17	-->	b4283 (~b4283@36-238-128-203.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-12 09:41:41	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-12 10:06:04	<--	b4283 (~b4283@36-238-128-203.dynamic-ip.hinet.net) has quit (Ping timeout: 260 seconds)
2014-01-12 10:22:40	-->	b4283 (~b4283@218-164-200-41.dynamic.hinet.net) has joined #haskell.tw
2014-01-12 10:48:56	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Ping timeout: 260 seconds)
2014-01-12 11:01:22	-->	shik (~shik@140.112.28.60) has joined #haskell.tw
2014-01-12 16:15:31	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-12 16:41:38	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-01-12 16:44:31	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-12 18:20:05	-->	hashcat (~kv2a@36-238-39-197.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-12 19:07:48	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (*.net *.split)
2014-01-12 19:07:48	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-12 19:07:49	<--	shik (~shik@140.112.28.60) has quit (*.net *.split)
2014-01-12 19:07:49	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (*.net *.split)
2014-01-12 19:07:57	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (*.net *.split)
2014-01-12 19:08:03	<--	petercommand (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2014-01-12 19:08:24	<--	hashcat (~kv2a@36-238-39-197.dynamic-ip.hinet.net) has quit (*.net *.split)
2014-01-12 19:08:26	<--	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has quit (*.net *.split)
2014-01-12 19:08:28	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2014-01-12 19:08:31	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-01-12 19:08:34	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-01-12 19:08:36	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-01-12 19:08:37	<--	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has quit (*.net *.split)
2014-01-12 19:09:07	<--	logfat____ (~cinch@home.mno2.org) has quit (*.net *.split)
2014-01-12 19:09:13	<--	chihhsin (~starbops@140.113.121.170) has quit (*.net *.split)
2014-01-12 19:09:15	<--	b4283 (~b4283@218-164-200-41.dynamic.hinet.net) has quit (*.net *.split)
2014-01-12 19:09:18	<--	hychen (uid12518@gateway/web/irccloud.com/x-swrvsdwnrrsxylzl) has quit (*.net *.split)
2014-01-12 19:09:19	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-bvndtperwsmknajr) has quit (*.net *.split)
2014-01-12 19:09:19	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-zkksylyhyjbvwcdv) has quit (*.net *.split)
2014-01-12 19:09:20	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2014-01-12 19:51:41	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-01-12 19:51:41	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-zkksylyhyjbvwcdv) has joined #haskell.tw
2014-01-12 19:51:41	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-bvndtperwsmknajr) has joined #haskell.tw
2014-01-12 19:51:41	-->	hychen (uid12518@gateway/web/irccloud.com/x-swrvsdwnrrsxylzl) has joined #haskell.tw
2014-01-12 19:51:41	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-12 19:51:41	-->	hashcat (~kv2a@36-238-39-197.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-12 19:51:41	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-12 19:51:41	-->	shik (~shik@140.112.28.60) has joined #haskell.tw
2014-01-12 19:51:41	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-12 19:51:41	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-12 19:51:41	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-12 19:51:41	-->	flter (~Albert@Heyayayay.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-12 19:51:41	-->	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-12 19:51:41	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-01-12 19:51:41	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-01-12 19:51:41	-->	chihhsin (~starbops@140.113.121.170) has joined #haskell.tw
2014-01-12 19:51:41	-->	logfat____ (~cinch@home.mno2.org) has joined #haskell.tw
2014-01-12 19:51:41	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-01-12 20:04:11	-->	ozzzzzz (~ozzzzzz@124.64.78.87) has joined #haskell.tw
2014-01-12 20:56:38	-->	b4283 (~b4283@118.150.141.124) has joined #haskell.tw
2014-01-12 21:04:03	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 260 seconds)
2014-01-12 21:04:37	<--	hashcat (~kv2a@36-238-39-197.dynamic-ip.hinet.net) has quit (Ping timeout: 248 seconds)
2014-01-12 21:07:57	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-12 21:12:22	-->	hashcat (~kv2a@118-171-201-229.dynamic.hinet.net) has joined #haskell.tw
2014-01-12 22:29:06	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-13 00:12:29	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-13 01:00:17	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-13 01:16:45	<--	ozzzzzz (~ozzzzzz@124.64.78.87) has quit (Quit: 离开)
2014-01-13 01:33:26	<--	b4283 (~b4283@118.150.141.124) has quit (Remote host closed the connection)
2014-01-13 02:06:07	<--	hashcat (~kv2a@118-171-201-229.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-13 05:29:44	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Remote host closed the connection)
2014-01-13 08:31:35	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-13 09:47:15	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-13 10:08:46	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-13 10:09:47	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2014-01-13 10:12:16	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-13 10:15:37	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-01-13 10:16:00	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-13 13:35:23	<--	mno2 (~mno2@49.128.60.52) has quit (Read error: Connection reset by peer)
2014-01-13 13:46:44	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-13 14:19:52	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-13 14:25:14	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-13 14:26:28	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2014-01-13 14:28:30	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-13 14:32:37	-->	godfat (~Adium@111-248-146-161.dynamic.hinet.net) has joined #haskell.tw
2014-01-13 15:36:14	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Ping timeout: 252 seconds)
2014-01-13 15:42:01	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-13 15:42:05	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Excess Flood)
2014-01-13 15:43:26	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-13 15:43:30	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Excess Flood)
2014-01-13 15:44:40	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-13 15:44:44	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Excess Flood)
2014-01-13 16:43:40	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Read error: Connection reset by peer)
2014-01-13 16:45:34	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-13 18:03:58	-->	godfat1 (~Adium@111-248-146-161.dynamic.hinet.net) has joined #haskell.tw
2014-01-13 18:03:59	<--	godfat (~Adium@111-248-146-161.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-13 18:33:06	-->	hashcat_ (~hashcat_@27.52.63.40) has joined #haskell.tw
2014-01-13 18:33:08	<--	hashcat_ (~hashcat_@27.52.63.40) has quit (Excess Flood)
2014-01-13 19:01:33	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-13 19:43:48	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-13 20:02:34	-->	hashcat (~kv2a@118-171-198-237.dynamic.hinet.net) has joined #haskell.tw
2014-01-13 20:03:55	-->	b4283 (~b4283@218-164-219-90.dynamic.hinet.net) has joined #haskell.tw
2014-01-13 20:34:31	<--	godfat1 (~Adium@111-248-146-161.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-13 21:23:17	-->	suhorng (~suhorng@118-166-47-20.dynamic.hinet.net) has joined #haskell.tw
2014-01-13 21:50:20	-->	godfat (~Adium@1-161-50-90.dynamic.hinet.net) has joined #haskell.tw
2014-01-13 21:51:54	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-13 21:54:39	<--	godfat (~Adium@1-161-50-90.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-01-13 22:07:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-13 22:17:30	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-13 23:34:52	<--	b4283 (~b4283@218-164-219-90.dynamic.hinet.net) has quit (Read error: Operation timed out)
2014-01-13 23:37:43	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-13 23:55:49	<--	hashcat (~kv2a@118-171-198-237.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2014-01-14 00:22:52	<--	suhorng (~suhorng@118-166-47-20.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-14 01:53:20	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-14 04:30:59	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-14 04:34:32	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2014-01-14 04:56:18	-->	vivian (811fe05a@gateway/web/freenode/ip.129.31.224.90) has joined #haskell.tw
2014-01-14 04:56:21	vivian	hi i'm new to this
2014-01-14 04:56:32	vivian	anyone here?
2014-01-14 04:57:39	<--	vivian (811fe05a@gateway/web/freenode/ip.129.31.224.90) has left #haskell.tw
2014-01-14 07:08:43	-->	vivian_ (811fe05a@gateway/web/freenode/ip.129.31.224.90) has joined #haskell.tw
2014-01-14 07:22:44	vivian_	Eq a 點解
2014-01-14 07:33:28	favonia_	vivian_: hi
2014-01-14 07:33:39	favonia_	vivian_: 你來的時間剛好大家都在睡覺
2014-01-14 07:34:36	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 276 seconds)
2014-01-14 07:35:36	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-14 08:08:19	<--	vivian_ (811fe05a@gateway/web/freenode/ip.129.31.224.90) has quit (Ping timeout: 272 seconds)
2014-01-14 09:52:21	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-14 10:19:15	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-14 10:42:03	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2014-01-14 10:47:59	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-14 12:11:00	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 252 seconds)
2014-01-14 12:11:53	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-14 13:47:30	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 252 seconds)
2014-01-14 13:50:10	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-14 14:05:44	CindyLinz	XD
2014-01-14 14:11:16	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-14 14:50:54	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-14 15:54:45	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-14 15:57:08	--	petercommand is now known as Guest46133
2014-01-14 15:57:09	<--	Guest46133 (~peter@unaffiliated/petercommand) has quit (Killed (dickson.freenode.net (Nickname regained by services)))
2014-01-14 15:57:09	--	petercom1and is now known as petercommand
2014-01-14 16:09:39	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Reconnecting)
2014-01-14 16:09:55	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-14 16:32:48	-->	vivian (811fe05a@gateway/web/freenode/ip.129.31.224.90) has joined #haskell.tw
2014-01-14 16:33:13	vivian	class 在HASKELL 有什麼用？
2014-01-14 16:38:45	CindyLinz	vivian: 有不同角度的理解法.. 從比較實作的角度看, 是讓不同的 type 可以對應「同樣」的功能
2014-01-14 16:39:15	CindyLinz	例如說你的 Eq a, 能被放在 a 這位置的 type, 都可以作 (==) 或 (/=) 的比較
2014-01-14 16:40:15	CindyLinz	所以想被放在 a 這位置的 type, 都要準備好它的 (==) 或 (/=) 怎麼作
2014-01-14 16:57:32	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 265 seconds)
2014-01-14 17:01:06	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-14 17:18:56	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-14 17:30:05	vivian	有沒有例子
2014-01-14 17:40:28	CindyLinz	Eq Int ?
2014-01-14 17:40:36	CindyLinz	Eq Char, Eq [Int]
2014-01-14 17:40:59	CindyLinz	你問得好簡短, 猜不太出你想得到怎樣方向的答案 ^^|
2014-01-14 17:41:43	CindyLinz	> 'a' == 'a'
2014-01-14 17:41:44	lambdabot	 True
2014-01-14 17:41:57	CindyLinz	> [3,4,5] == [3,4,5]
2014-01-14 17:41:58	lambdabot	 True
2014-01-14 17:42:07	CindyLinz	> [3,4,5] == [3,4,5,6]
2014-01-14 17:42:08	lambdabot	 False
2014-01-14 17:52:34	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-14 18:05:12	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-14 18:34:40	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-14 18:34:44	<--	mno2 (~mno2@49.128.60.52) has quit (Client Quit)
2014-01-14 18:45:36	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-01-14 18:51:58	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-14 18:52:33	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-14 18:53:41	<--	vivian (811fe05a@gateway/web/freenode/ip.129.31.224.90) has quit (Ping timeout: 272 seconds)
2014-01-14 19:12:37	-->	hashcat (~kv2a@36-238-34-118.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-14 19:47:16	<--	chihhsin (~starbops@140.113.121.170) has quit (Ping timeout: 260 seconds)
2014-01-14 20:12:27	-->	b4283 (~b4283@36-238-135-204.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-14 20:43:48	<--	b4283 (~b4283@36-238-135-204.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-01-14 20:46:28	-->	b4283 (~b4283@36-238-131-62.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-14 20:52:26	-->	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has joined #haskell.tw
2014-01-15 00:23:04	<--	b4283 (~b4283@36-238-131-62.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-01-15 00:31:14	monochrom	我學 SML 在先, 見識過整數加號叫 "+", 浮點加號要叫 "+.", 分數加號要叫 "+/", 自定型態加號要自定符號... 等等等等. 但! 等號卻有特別優待! 自定型態只要用 "eqtype" 就可獲免費等號. 非常不公平, 非常不對稱.
2014-01-15 00:32:35	monochrom	因此一見 Haskell 的 type class 就即刻明, 因為它是我日盼夜盼的.
2014-01-15 01:32:50	CindyLinz	不方便沒關係, 不公平比較令人生氣這樣?
2014-01-15 02:29:00	<--	hashcat (~kv2a@36-238-34-118.dynamic-ip.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-15 09:58:13	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-15 10:54:05	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-15 10:54:38	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-15 15:34:54	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-15 15:36:15	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 245 seconds)
2014-01-15 15:37:00	--	petercom1and is now known as petercommand
2014-01-15 15:46:12	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-15 18:36:55	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2014-01-15 18:36:55	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-15 18:36:55	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-15 18:36:55	--	Nicks #haskell.tw: [a2n b4284 cataska cataska_ chihhsin cibs CindyLinz darkx drbean flter gko godfat1 hychen kanru lambdabot letoh logfat____ mno2 monochrom petercommand shik superbil_c]
2014-01-15 18:36:55	--	Channel #haskell.tw: 22 nicks (0 ops, 0 voices, 22 normals)
2014-01-15 18:37:15	--	Mode #haskell.tw [+cnt]
2014-01-15 18:37:15	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-15 18:46:45	<--	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-15 19:17:10	-->	hashcat (~kv2a@218-173-233-231.dynamic.hinet.net) has joined #haskell.tw
2014-01-15 20:17:47	-->	b4283 (~b4283@218-164-219-139.dynamic.hinet.net) has joined #haskell.tw
2014-01-15 21:16:44	-->	suhorng (~suhorng@118-166-52-246.dynamic.hinet.net) has joined #haskell.tw
2014-01-15 22:39:32	suhorng	話說 Reader monad 的 `ap` 跟 `>>=` 好像是同一個東西!? (參數順序不同而已)
2014-01-15 22:39:41	suhorng	前者是 (r -> a -> b) -> (r -> a) -> (r -> b)
2014-01-15 22:39:56	suhorng	後者是 (r -> a) -> (a -> (r -> b)) -> r -> b
2014-01-15 22:41:57	suhorng	雖然知道好像也沒什麼用XD|||
2014-01-15 23:51:00	<--	suhorng (~suhorng@118-166-52-246.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-16 00:07:26	monochrom	CindyLinz: 關於 "不公平, 不對稱", 我認為 例外=醜陋.
2014-01-16 00:08:08	monochrom	例外是萬惡之源
2014-01-16 00:09:20	monochrom	@type ap
2014-01-16 00:09:21	lambdabot	Monad m => m (a -> b) -> m a -> m b
2014-01-16 00:11:25	monochrom	呀! Reader 的 ap 跟 >>= 型態一樣, 意義不同呀!
2014-01-16 00:12:24	monochrom	呀... 我錯了, 意義都一樣.
2014-01-16 00:19:09	<--	b4283 (~b4283@218-164-219-139.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-16 00:41:15	CindyLinz	monochrom: agree.. QQ # 00:07 < monochrom> CindyLinz: 關於 "不公平, 不對稱", 我認為 例外=醜陋.
2014-01-16 00:41:19	CindyLinz	# 00:08 < monochrom> 例外是萬惡之源
2014-01-16 00:47:30	hashcat	沒有例外的話有點麻煩
2014-01-16 00:48:24	hashcat	代表當下一定要處理掉, 不能讓父程序處理
2014-01-16 00:49:24	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-16 00:50:09	hashcat	職員喬得來的事情, 當然是自己喬掉, 喬不掉就只好問經理, 比自己亂搞好
2014-01-16 00:50:54	CindyLinz	這叫缺陷美啊 XD # 有例外
2014-01-16 00:51:06	hashcat	擴展別人已經寫好的物件導向程序, 要是沒這種機制的話
2014-01-16 00:51:44	CindyLinz	但平常的心態是例外能少則少呀~ 如果把例外當常態... (默)
2014-01-16 00:51:46	hashcat	別人寫得父層的程序就沒辦法幫你搞定了
2014-01-16 00:52:08	CindyLinz	estimate cost 調高一點而已.
2014-01-16 00:52:14	hashcat	又想到當兵時候
2014-01-16 00:53:02	hashcat	什麼事都問長官確認會被電死, 不懂的事自己亂處理也會被電死
2014-01-16 00:53:38	monochrom	hashcat: 我是指程式語言給你的規則裏的例外條文, 例如 "所有 operator 都不能 overload, 唯獨 ==, != 可以 overload"
2014-01-16 00:53:39	hashcat	規模大的協作, 沒例外貌似不方便
2014-01-16 00:54:18	hashcat	哦搞錯了
2014-01-16 00:54:41	monochrom	至於 throw 和 catch, 我是舉腳贊成, 堅決擁護的
2014-01-16 00:55:00	monochrom	http://www.vex.net/~trebla/haskell/exception.xhtml
2014-01-16 00:55:09	hashcat	我被長官電之前也覺得例外不重要 (?
2014-01-16 00:56:06	hashcat	例外丟多了也被電, 退伍後還是沒搞懂標準在哪
2014-01-16 01:20:41	CindyLinz	看 Haskell 的 exception 和 dynamic type, 心中發出一種「哼哼哼」的感覺.. XD
2014-01-16 01:35:29	<--	hashcat (~kv2a@218-173-233-231.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-16 07:19:42	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-16 07:19:42	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-16 07:19:42	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-16 07:19:42	--	Nicks #haskell.tw: [a2n_ cataska cataska_ chihhsin cibs CindyLinz darkx drbean flter gko godfat1 hychen kanru lambdabot letoh logfat____ monochrom petercommand shik superbil_c]
2014-01-16 07:19:42	--	Channel #haskell.tw: 20 nicks (0 ops, 0 voices, 20 normals)
2014-01-16 07:20:02	--	Mode #haskell.tw [+cnt]
2014-01-16 07:20:02	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-16 10:21:01	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-16 10:50:22	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-16 11:05:52	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-01-16 14:17:26	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has quit (Ping timeout: 240 seconds)
2014-01-16 14:25:04	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-01-16 14:54:20	-->	hashcat_ (~hashcat_@27.241.171.150) has joined #haskell.tw
2014-01-16 15:50:00	<--	hashcat_ (~hashcat_@27.241.171.150) has quit (Ping timeout: 265 seconds)
2014-01-16 15:51:00	-->	hashcat_ (~hashcat_@27.241.171.150) has joined #haskell.tw
2014-01-16 16:10:49	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-16 16:40:42	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-16 17:38:23	-->	town55 (~1@118.116.255.195) has joined #haskell.tw
2014-01-16 17:44:06	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-16 17:52:02	-->	hashcat (~kv2a@218-173-237-38.dynamic.hinet.net) has joined #haskell.tw
2014-01-16 18:04:28	<--	mno2 (~mno2@49.128.60.52) has quit (Ping timeout: 246 seconds)
2014-01-16 18:05:45	-->	mno2 (~mno2@49.128.60.52) has joined #haskell.tw
2014-01-16 18:38:19	<--	mno2 (~mno2@49.128.60.52) has quit (Quit: mno2)
2014-01-16 18:50:54	<--	town55 (~1@118.116.255.195) has quit (Ping timeout: 252 seconds)
2014-01-16 18:51:52	-->	town55 (~1@118.116.255.195) has joined #haskell.tw
2014-01-16 18:53:20	<--	town55 (~1@118.116.255.195) has quit (Max SendQ exceeded)
2014-01-16 18:53:48	-->	town55 (~1@118.116.255.195) has joined #haskell.tw
2014-01-16 19:25:10	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-01-16 19:29:30	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-16 19:32:04	hashcat_	有個 ocaml 寫的prolog變種 abella
2014-01-16 19:32:35	hashcat_	用途是定理證明
2014-01-16 19:32:53	hashcat_	abella-prover.org
2014-01-16 20:09:14	-->	b4284 (~b4283@36-238-226-56.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-16 20:44:46	cibs	可以問一下 foldl 和 foldr 嗎~
2014-01-16 20:45:30	cibs	一般好像是講 foldr 從右開始摺，foldl 從左開始摺?
2014-01-16 20:46:19	cibs	可是用 fold 來做 map 的話，這樣做 mapr = foldr (\x acc -> f x : acc ) [] 和 mapl = f = foldl (\acc x -> acc ++ [f x]) []
2014-01-16 20:47:46	cibs	面對 mapl odd [1..] 和 mapr odd [1..]，mapl 會卡住，mapr 才是一個一個數字產生 ( 在 ghci ), 如果用 take 10 也是只有 mapr 才可以拿完
2014-01-16 20:48:17	cibs	可是 [1..] 不是沒有右端？怎麼想都覺得應該是 mapr 才會卡住才對啊 *bang*
2014-01-16 21:13:51	hashcat_	fold怎能做map
2014-01-16 21:14:43	hashcat_	fold會銷毀列表, map保持列表
2014-01-16 21:16:56	hashcat_	哦我看到可以,用列表的列表
2014-01-16 21:25:30	hashcat_	你把表達式的樹狀圖由上而下展開就有解答了
2014-01-16 21:26:04	hashcat_	最上面最先算
2014-01-16 21:27:45	hashcat_	惰性計算使得右邊可以被截掉
2014-01-16 21:28:01	hashcat_	右子樹
2014-01-16 21:40:11	hashcat_	cibs 有人在嘛
2014-01-16 21:41:41	hashcat_	你的誤解應該是把算術的優先順序,當成惰性計算的順序
2014-01-16 21:42:56	hashcat_	我的誤解是忘記列表不是原子型別,可以被建構
2014-01-16 21:48:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-16 21:59:12	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-01-16 22:00:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 260 seconds)
2014-01-16 22:29:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-16 22:47:46	hashcat	我打出來好了
2014-01-16 22:48:09	hashcat	mapr的示意表達式 a:(b:(c:(d: (THUNK)))) 其中a是head最先被計算, 再來b, 依序下去. THUNK的部分是還沒被計算, 可以被惰性計算跺掉的部分
2014-01-16 22:56:46	hashcat	mapl 的話 ( ... ((([] ++ [f a]) ++ [f b]) ++ [f c]) ++ ... ) 反而變成有打出來的部分 ((([] ++ [f a]) ++ [f b]) ++ [f c]) 才是包含在THUNK的部分, 最開始應該要被計算的地方反而變成...打不完
2014-01-16 23:00:33	CindyLinz	嗯嗯, 這邊的「開始」「先後」之類的, 都是打括號的順序
2014-01-16 23:01:42	CindyLinz	而計算的順序是, 需要用到哪, 才算到哪... 所以可以從屁股往回看, 從被取走的資料要真的用到的時候才開始一點一點把結果擠出去
2014-01-16 23:03:58	hashcat	討論這個意外地咬文嚼字
2014-01-16 23:05:36	CindyLinz	XD
2014-01-16 23:09:51	<--	hashcat (~kv2a@218-173-237-38.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-16 23:10:14	-->	hashcat (~kv2a@218-173-237-38.dynamic.hinet.net) has joined #haskell.tw
2014-01-16 23:33:18	<--	town55 (~1@118.116.255.195) has quit (Remote host closed the connection)
2014-01-17 00:22:00	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-17 00:31:15	-->	suhorng (~suhorng@118-166-52-246.dynamic.hinet.net) has joined #haskell.tw
2014-01-17 00:42:13	<--	b4284 (~b4283@36-238-226-56.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-01-17 01:02:57	<--	suhorng (~suhorng@118-166-52-246.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-01-17 01:03:59	<--	hashcat (~kv2a@218-173-237-38.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-17 01:17:34	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-17 01:46:09	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 252 seconds)
2014-01-17 01:48:05	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-17 02:25:32	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2014-01-17 02:27:24	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 252 seconds)
2014-01-17 02:33:39	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-01-17 02:53:47	<--	hashcat_ (~hashcat_@27.241.171.150) has quit (Ping timeout: 272 seconds)
2014-01-17 04:12:58	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 04:12:59	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 04:13:11	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 04:13:12	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 04:13:28	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 04:13:29	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 04:13:50	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 04:13:51	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 05:23:32	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-17 05:35:17	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-01-17 05:47:00	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-17 05:49:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2014-01-17 07:24:59	monochrom	小學中學教 "先乘除, 後加減" 及 "括號先". 這是把 parsing 次序和計算次序混為一談. 當然對大部份人來說沒所謂. 但 Haskell 人不是大部份人. 括號和優先次序其實只講 parsing.
2014-01-17 07:27:12	monochrom	又其實, 即使對大部份人來說, 也不是真的要混為一談吧? 0*(3902834+1632892), 你是不是老老實實先計算 3902834+1632892 ?
2014-01-17 07:28:49	monochrom	可惜中小學是不可能把 parsing 分開出來教的.
2014-01-17 07:30:13	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-17 09:56:49	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2014-01-17 09:57:14	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-17 10:01:09	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-17 10:18:26	--	irc: disconnected from server
2014-01-17 10:23:19	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-17 10:23:19	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-17 10:23:19	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-17 10:23:19	--	Nicks #haskell.tw: [a2n_ b4283 cataska cataska_ chihhsin cibs CindyLinz darkx drbean favonia_ flter gko godfat hychen kanru lambdabot letoh liuzhoou logfat____ mno2 monochrom petercommand shik superbil_c]
2014-01-17 10:23:19	--	Channel #haskell.tw: 24 nicks (0 ops, 0 voices, 24 normals)
2014-01-17 10:23:19	***	Buffer Playback...
2014-01-17 10:23:19	hashcat_	[20:57:39] 好像是
2014-01-17 10:23:19	hashcat_	[20:58:28] 印象中是隨著多核心崛起
2014-01-17 10:23:19	letoh	[20:59:39] 唔  我覺得應該再更早一點?
2014-01-17 10:23:19	letoh	[20:59:39] 說真的就算有多核心了，但真的用 fp 在開發的專案也不多吧? 應該還是用傳統的模型，跟 lock 奮鬥?
2014-01-17 10:23:19	hashcat_	[20:59:39] 猜測是基於可擴展性引入函數式範式, Haskell身為純種而受到關注
2014-01-17 10:23:19	hashcat_	[21:00:00] 我覺得lock比什麼純函數麻煩吧
2014-01-17 10:23:19	letoh	[21:00:20] 很麻煩  但因為大部份的人習慣了
2014-01-17 10:23:19	hashcat_	[21:01:36] FP先天就是可以平行的, 不用鎖來鎖去
2014-01-17 10:23:19	CindyLinz	[21:01:36] 可是我用 Haskell 寫 concurrent 的程式, 用 MVar 感覺跟 lock 沒什麼差啊.. orz
2014-01-17 10:23:19	hashcat_	[21:01:39] 鎖成死鎖和不知道怎開的鎖
2014-01-17 10:23:19	CindyLinz	[21:02:41] 還是我寫的方式不對? @@"
2014-01-17 10:23:19	letoh	[21:02:41] 我沒有特別觀察，不過我猜 fp 這件事，ruby 應該幫上不少忙?
2014-01-17 10:23:19	hashcat_	[21:02:41] CinzyLinz:也可以不用
2014-01-17 10:23:19	letoh	[21:02:41] 或 python (很不想舉它當例子XD
2014-01-17 10:23:19	CindyLinz	[21:02:41] 甚至.. 因為我習慣在 perl 寫 event driven (explicit callback) 的.. 用 MVar 反而更不習慣 orz
2014-01-17 10:23:19	hashcat_	[21:02:41] 對python有偏見
2014-01-17 10:23:19	CindyLinz	[21:02:41] hashcat_: 那用什麼咧? @@"
2014-01-17 10:23:19	CindyLinz	[21:03:39] 在 haskell (GHC) 裡面用了 forkIO.. 後面寫起來整個 fu 就是 multi-thread 的感覺 orz
2014-01-17 10:23:19	suhorng	[21:03:39] 因為 forkIO 就真的是 multi-thread 吧...?
2014-01-17 10:23:19	CindyLinz	[21:04:19] suhorng: 如果把 do-notation 都展開.. 視為 callback 系的嗎? @@"
2014-01-17 10:23:19	suhorng	[21:04:19] 問題是要通信(或sync)的部份有辦法不用鎖嗎...?
2014-01-17 10:23:19	letoh	[21:05:39] actor model 呢?
2014-01-17 10:23:19	hashcat_	[21:05:39] 可能是我都是寫那種不用很多IO的程序, parallel包就很夠了
2014-01-17 10:23:19	suhorng	[21:05:39] 嗯..我不太清楚QQ, 就算用perl寫callback, 不會有同步的問題嗎? 還是同時一定只有一個callback能被執行
2014-01-17 10:23:19	CindyLinz	[21:05:39] 同時只有一個 callback 能被執行
2014-01-17 10:23:19	letoh	[21:06:15] 不用 lock 的情況，最簡單的就用 cooperative model 吧
2014-01-17 10:23:19	suhorng	[21:08:56] 那像 forkIO 就好比同時有很多個callback可能執行？
2014-01-17 10:23:19	CindyLinz	[21:08:56] 而且如果我沒開 -thread
2014-01-17 10:23:19	CindyLinz	[21:08:56] MVar 就直接 dead-lock...
2014-01-17 10:23:19	suhorng	[21:09:24] 悲劇..XD
2014-01-17 10:23:19	CindyLinz	[21:09:39] perl 有人直接寫 user code 做出 condition variable @@"
2014-01-17 10:23:19	CindyLinz	[21:10:10] 所以我那時也覺得 ghc 沒加 -thread 的時候應該也要能動 @@"
2014-01-17 10:23:19	CindyLinz	[21:10:39] 嗯, perl 那個作法有個限制: 在 handler 裡面不可以去 wait 一個 condition variable, 只能放一個 callback 在 condition variable 上面
2014-01-17 10:23:19	letoh	[21:11:17] http://adit.io/posts/2013-05-15-Locks,-Actors,-And-STM-In-Pictures.html
2014-01-17 10:23:19	CindyLinz	[21:11:17] 該 condition variable DONE 的時候會去呼叫放在上面的 callback
2014-01-17 10:23:19	CindyLinz	[21:12:20] ===分隔線===
2014-01-17 10:23:19	CindyLinz	[21:13:40] 那在 ghc 裡面, 不開 -thread 的時候流行怎樣寫 concurrent 程式呢?
2014-01-17 10:23:19	suhorng	[21:14:39] 沒有經驗..
2014-01-17 10:23:19	hashcat_	[21:19:44] 我應該是搞錯了
2014-01-17 10:23:19	hashcat_	[21:20:39] 平行化跟concurrent的概念不一樣
2014-01-17 10:23:19	hashcat_	[21:20:39] concurrency我就不知道了
2014-01-17 10:23:19	hashcat_	[21:23:39] CindyLinz: 你是用STM嘛
2014-01-17 10:23:19	hashcat_	[21:28:35] STM的機制比原來的好
2014-01-17 10:23:19	CindyLinz	[21:44:31] hashcat_: 沒有用 STM.. 嗯, 我不知道 STM 要怎麼運用在 concurrent @@"
2014-01-17 10:23:19	CindyLinz	[21:45:15] 我是說.. 拿來當作 concurrent 程式的主幹..
2014-01-17 10:23:19	hashcat_	[21:49:38] http://en.wikipedia.org/wiki/Concurrent_Haskell 捲到最底下有範例
2014-01-17 10:23:19	hashcat_	[21:54:19] 搞定死鎖和惡性競爭
2014-01-17 10:23:19	hashcat_	[21:57:39] 像是atomically這函數
2014-01-17 10:23:19	hashcat_	[21:58:16] X10也有這機制
2014-01-17 10:23:19	suhorng	[22:31:39] 我電腦上跑 idris REPL 速度好慢 QQ
2014-01-17 10:23:19	suhorng	[22:49:41] 現在 GHC 的 IO 竟然是丟給 ST monad 做
2014-01-17 10:23:19	favonia	[23:03:51] CindyLinz: MVar 不用 -threaded 會炸掉嗎？
2014-01-17 10:23:19	favonia	[23:03:51] CindyLinz: -threaded 應該只跟 OS thread 有關吧...
2014-01-17 10:23:19	favonia	[23:04:49] Haskell thread 本來就可以很多個
2014-01-17 10:23:19	CindyLinz	[23:05:29] hashcat_: 謝謝, 等下來讀 @@"
2014-01-17 10:23:19	CindyLinz	[23:05:29] favonia: 我原本也以為不會炸.....
2014-01-17 10:23:19	CindyLinz	[23:05:45] 不過這應該是一年多前, 可能 7.2 的時候的事
2014-01-17 10:23:19	favonia	[23:10:26] CindyLinz: 你還有程式碼嗎？
2014-01-17 10:23:19	CindyLinz	[23:19:23] favonia: 這邊, 我的 source 就是 http://funth.kktix.cc/events/55c147
2014-01-17 10:23:19	CindyLinz	[23:19:23] 不過我現在也試一下簡單的例子好了..
2014-01-17 10:23:19	CindyLinz	[00:13:07] 暫時試不出來, 真是好消息.. XD
2014-01-17 10:23:19	favonia	[01:29:31] CindyLinz: 現在不能 git clone 都覺得好麻煩（疑
2014-01-17 10:23:19	CindyLinz	[01:56:58] orz
2014-01-17 10:23:19	favonia	[02:20:24] 而且我的 base 好像太新了 囧
2014-01-17 10:23:19	CindyLinz	[02:35:53] 其實我也是 orz
2014-01-17 10:23:19	CindyLinz	[02:36:18] 我剛是把 .cabal 裡面不合的版號都調大, 反正應該沒用到什麼不相容的功能 :p
2014-01-17 10:23:19	_13h	[15:53:34] http://yapb-soc.blogspot.tw/2012/08/implementing-maybe-monad-in-c.html  看了一下這個 blog 上的幾篇文章，都是在做苦工XD
2014-01-17 10:23:19	_13h	[16:04:04] https://github.com/splinterofchaos/Pure
2014-01-17 10:23:19	b4283	[16:05:52] @@
2014-01-17 10:23:19	b4283	[16:06:09] Pure 好像是老牌的 abandonware
2014-01-17 10:23:19	b4283	[16:29:21] oh no，我記錯了，我腦中想的是 Potion
2014-01-17 10:23:19	_13h	[16:30:29] 程式語言的那個 potion ?
2014-01-17 10:23:19	b4283	[16:30:36] _13h: Potion 好像有人接手了！！
2014-01-17 10:23:19	b4283	[16:30:41] https://github.com/perl11/potion
2014-01-17 10:23:19	b4283	[16:30:53] _13h: 對啊就你介紹的那個 prototype lang
2014-01-17 10:23:19	_13h	[16:31:23] 喔  印象中之前有人備份而已，原來另外有人繼續接手了
2014-01-17 10:23:19	b4283	[16:32:12] http://perl11.org/potion/index.html
2014-01-17 10:23:19	_13h	[16:32:20] 不知道 jit 修好了沒... 原作者最後幾版的 jit 有點問題，一跑就 crash XD (但早一點的版本是好的
2014-01-17 10:23:19	suhorng	[22:02:11] 突然發現我不知道怎麼在 Idris 裡寫個 strExplode : (s : String) -> Vect (length s) Char 的函數……
2014-01-17 10:23:19	suhorng	[22:06:18] 阿不對, 是 string 沒得 pattern match..
2014-01-17 10:23:19	hashcat_	[22:07:59] 有那麼悲催
2014-01-17 10:23:19	suhorng	[22:08:32] 好吧, Prelude 裡的 unpack : String -> List Char 前面有個「assert_total」……看來 string 是無法了
2014-01-17 10:23:19	hashcat_	[22:10:01] String不是List of Char阿
2014-01-17 10:23:19	suhorng	[22:10:11] 不是呀
2014-01-17 10:23:19	hashcat_	[22:10:14] 不愧為重視效率的實作
2014-01-17 10:23:19	suhorng	[22:10:19] 真的
2014-01-17 10:23:19	hashcat_	[22:10:32] 感覺像是Hasekll的Text
2014-01-17 10:23:19	hashcat_	[22:11:22] 在想用prolog寫DSL產生Idris程式和證明
2014-01-17 10:23:19	suhorng	[22:11:38] www
2014-01-17 10:23:19	suhorng	[22:11:46] 然後用 Idris 產生 javascript (誤)
2014-01-17 10:23:19	hashcat_	[22:12:25] 直接產生javascript整個有難度
2014-01-17 10:23:19	suhorng	[22:12:46] 所以才透過 idris XD?
2014-01-17 10:23:19	hashcat_	[22:13:05] 昨天我發現一種prolog包忍不住想吹
2014-01-17 10:23:19	hashcat_	[22:13:17] 叫啥CLP(Q,R)
2014-01-17 10:23:19	hashcat_	[22:13:31] Q是有理數, R是實數
2014-01-17 10:23:19	hashcat_	[22:14:04] 在有理數和實數域上做推論
2014-01-17 10:23:19	suhorng	[22:14:29] 0.0
2014-01-17 10:23:19	hashcat_	[22:14:54] clp(z)是在整數域, clp(fd)是有限域
2014-01-17 10:23:19	hashcat_	[22:15:20] 不像其他程序所謂實數都是用浮點數冒充
2014-01-17 10:23:19	hashcat_	[22:18:08] http://www.swi-prolog.org/man/clpqr.html
2014-01-17 10:23:19	hashcat_	[22:20:21] idris也挺好XD
2014-01-17 10:23:19	suhorng	[22:21:04] 竟然有取 inf 跟取 sup
2014-01-17 10:23:19	hashcat_	[22:21:14] 可能可以嵌類似prolog DSL並透過ffi跟prolog串起來
2014-01-17 10:23:19	hashcat_	[22:22:10] 等Idris穩了來試試
2014-01-17 10:23:19	suhorng	[23:13:07] 好難過XD Idris好像比Agda少一些些判斷資訊
2014-01-17 10:23:19	suhorng	[23:13:34] 假如我有個函數
2014-01-17 10:23:19	suhorng	[23:13:34] fn ('d'::xs) = ...1
2014-01-17 10:23:19	suhorng	[23:13:34] fn (x::xs) = ...2
2014-01-17 10:23:19	suhorng	[23:13:50] 在 ...2 的時候他好像沒辦法推出 x /= 'd'
2014-01-17 10:23:19	hashcat_	[23:16:13] 改用prolog算了
2014-01-17 10:23:19	hashcat_	[23:16:18] 不過真的很冷門
2014-01-17 10:23:19	hashcat_	[23:16:21] 暈
2014-01-17 10:23:19	suhorng	[23:21:02] http://stackoverflow.com/questions/17905537/dependently-typed-printf-in-idris 大家都想寫printf
2014-01-17 10:23:19	suhorng	[23:21:12] 我寫不出來...
2014-01-17 10:23:19	suhorng	[23:26:33] 喔不對寫出來了 xDD 可是他過不了totality check (那不就沒用了嗎)
2014-01-17 10:23:19	hashcat_	[23:28:21] 不要check就好, 本來就不一定過得了吧
2014-01-17 10:23:19	suhorng	[23:35:33] https://gist.github.com/suhorng/8301097 我到底寫了什麼糟糕的東西 XDDD
2014-01-17 10:23:19	hashcat	[00:02:28] printf 貌似是那種過陣子就會出現在標準的東西
2014-01-17 10:23:19	favonia	[01:23:33] hashcat: 變成業界標準了
2014-01-17 10:23:19	CindyLinz	[01:28:49] 某領域是超愛做 todo list....
2014-01-17 10:23:19	letoh	[01:29:24] 對啊  為什麼是 todo list ?
2014-01-17 10:23:19	CindyLinz	[01:29:43] 我沒去關心原因.. @@"
2014-01-17 10:23:19	CindyLinz	[01:30:11] 只是聽到說在比可以有什麼 XXX種寫 todo list 的方法.. 就覺得很病態 XDrz
2014-01-17 10:23:19	letoh	[01:32:21] X 種 hello world ? XD
2014-01-17 10:23:19	godfat1	[01:33:02] 我猜是因為好做而且好驗證？
2014-01-17 10:23:19	favonia	[01:39:11] CindyLinz: 你可以私底下丟給我訊息嗎 lol
2014-01-17 10:23:19	favonia	[01:39:30] CindyLinz: 我好想知道該領域喔～～～
2014-01-17 10:23:19	CindyLinz	[01:39:39] 不用私下啊
2014-01-17 10:23:19	CindyLinz	[01:39:45] 就寫網站的啊
2014-01-17 10:23:19	CindyLinz	[01:39:58] 然後我那時候剛好在看 node.js 的東西..
2014-01-17 10:23:19	CindyLinz	[01:40:20] XD
2014-01-17 10:23:19	favonia	[01:40:41] CindyLinz: 你剛才好像講了一個頭會痛的東西，我不太想重複名字
2014-01-17 10:23:19	godfat	[01:40:44] angularjs 或什麼什麼 js framework 等等都滿常用 todo list 當範例
2014-01-17 10:23:19	godfat	[01:40:54] XDDDDDDDD
2014-01-17 10:23:19	CindyLinz	[01:41:24] 呃... @____@
2014-01-17 10:23:19	CindyLinz	[01:41:33] node.js 嗎? 好我幫你講... XD
2014-01-17 10:23:19	letoh	[01:41:45] XDXD
2014-01-17 10:23:19	favonia	[01:42:26] godfat: 我以為該領域會用 login 畫面做例子
2014-01-17 10:23:19	favonia	[01:43:06] 然後改一個參數就有二階段認証之類的（咦
2014-01-17 10:23:19	CindyLinz	[01:43:52] 可能重點會偏到怎麼加密儲存密碼? @@"
2014-01-17 10:23:19	favonia	[01:44:13] 喔
2014-01-17 10:23:19	CindyLinz	[01:44:45] 欸.. 我不是很認真想的 ^^|
2014-01-17 10:23:19	godfat	[01:44:48] XDDDD
2014-01-17 10:23:19	godfat	[01:44:48] javascript can do anything
2014-01-17 10:23:19	godfat	[01:44:48] anything could be done in javascript
2014-01-17 10:23:19	godfat	[01:44:48] welcome to zombo.com
2014-01-17 10:23:19	letoh	[01:44:55] texlive.js – A LaTeX Compiler for Javascript
2014-01-17 10:23:19	CindyLinz	[01:45:39] texlive.js 倒不錯 :p
2014-01-17 10:23:19	letoh	[01:46:22] javascript can do anything... 說組語能做出任何東西沒意義啊....XD
2014-01-17 10:23:19	CindyLinz	[01:46:51] 是因為以前只能在瀏覽器裡跑的關係吧, 突破了就會喊很大聲 :p
2014-01-17 10:23:19	godfat	[01:47:16] http://en.wikipedia.org/wiki/Turing_tarpit
2014-01-17 10:23:19	favonia	[01:48:33] CindyLinz: 自從 javascript 可以啟動 Linux 後
2014-01-17 10:23:19	favonia	[01:48:59] 我覺得是時候在裡面跑 X 了
2014-01-17 10:23:19	favonia	[01:49:15] 最好在裡面再跑個 firefox
2014-01-17 10:23:19	godfat	[01:49:28] we need to go deeper
2014-01-17 10:23:19	letoh	[01:49:32] 然後裡面再跑個 linux ?
2014-01-17 10:23:19	favonia	[01:50:06] letoh: 喔每多跑一輪你的電腦評價就會加一分
2014-01-17 10:23:19	CindyLinz	[01:51:05] ...
2014-01-17 10:23:19	CindyLinz	[01:51:12] 還不如拿來挖礦...... ww
2014-01-17 10:23:19	favonia	[01:51:38] CindyLinz: javascript 沒有 bitcoin 程式嗎？
2014-01-17 10:23:19	favonia	[01:52:05] CindyLinz: http://www.bitcoinplus.com/miner/embeddable
2014-01-17 10:23:19	favonia	[01:52:23] 你只要在最裡層的 firefox 跑這個就好了
2014-01-17 10:23:19	CindyLinz	[01:52:27] favonia: 我是說.. 這樣子層層包來耗效能..... ww
2014-01-17 10:23:19	godfat	[01:53:19] facebook 可以裝這個，然後挖到礦之後寄回給 facebook
2014-01-17 10:23:19	CindyLinz	[01:53:26] (Y)
2014-01-17 10:23:19	CindyLinz	[01:53:37] 用 facebook 對 facebook 說讚.... ww
2014-01-17 10:23:19	godfat	[01:53:43] 一切都是為了 distributed mining
2014-01-17 10:23:19	favonia	[01:53:55] godfat: in javascript
2014-01-17 10:23:19	favonia	[01:54:02] godfat: 你漏掉重要的兩個字
2014-01-17 10:23:19	godfat	[01:54:05] XDDDD
2014-01-17 10:23:19	CindyLinz	[01:54:10] ...........||
2014-01-17 10:23:19	letoh	[01:54:38] 這個字頭就不會痛嗎?
2014-01-17 10:23:19	godfat	[01:54:41] 把這些討論搬到 javascript 討論板上搞不好就變成正向討論
2014-01-17 10:23:19	favonia	[01:54:47] letoh: 麻痹了
2014-01-17 10:23:19	letoh	[01:54:55] XDXD
2014-01-17 10:23:19	CindyLinz	[01:54:55] 我們太不正經了.... QQ
2014-01-17 10:23:19	favonia	[01:55:19] CindyLinz: 我們最正經了～
2014-01-17 10:23:19	letoh	[01:55:35] 其實我覺得剛剛還蠻正向的啊，還能再更正向啊? XD
2014-01-17 10:23:19	godfat	[01:58:03] 我以為都是嘲諷口氣.... XD
2014-01-17 10:23:19	favonia	[01:58:17] letoh: 他的意思是說我們不應該正經的諷刺 javascript
2014-01-17 10:23:19	letoh	[01:58:28] 好吧XD
2014-01-17 10:23:19	favonia	[01:58:35] letoh: 應該要發自內心的愛 javascript
2014-01-17 10:23:19	 *	letoh [01:59:26] 懺悔，下個專案改用 javascript 好了
2014-01-17 10:23:19	favonia	[01:59:27] letoh: 即使不寫 javascript 可能對某些人來說是更正向的事情但那都無關緊要
2014-01-17 10:23:19	letoh	[01:59:35] XDXD
2014-01-17 10:23:19	monochrom	[02:39:43] 哈哈, 原來還有人知道 zombo.com
2014-01-17 10:23:19	godfat	[02:40:23] 我超愛的 XD
2014-01-17 10:23:19	 *	monochrom [02:43:15] 的 javascript 的正向用途: http://www.vex.net/~trebla/homework/epsilon-delta.html  還有 http://www.vex.net/~trebla/homework/extended-euclid.html
2014-01-17 10:23:19	monochrom	[02:43:34] 還有! http://www.vex.net/~trebla/humour/lmcify.html
2014-01-17 10:23:19	favonia	[02:46:39] monochrom: 好吧 http://www.vex.net/~trebla/humour/lmcify.html?t=JavaScript+is+great.
2014-01-17 10:23:19	monochrom	[02:48:39] 對了!
2014-01-17 10:23:19	favonia	[03:41:09] monochrom: ?
2014-01-17 10:23:19	monochrom	[03:41:45] 你懂得用我的 lmcify.html :)
2014-01-17 10:23:19	mno2	[21:22:50] http://www.cs.utexas.edu/users/EWD/OtherDocs/To%20the%20Budget%20Council%20concerning%20Haskell.pdf
2014-01-17 10:23:19	mno2	[21:23:28] 不愧是戰神 Dijkstra (誤)
2014-01-17 10:23:19	monochrom	[06:23:56] 我愛 Dijkstra :)
2014-01-17 10:23:19	monochrom	[06:31:01] 然而 lazy evaluation 是雙刃劍, 即使只談 Dijkstra 所談. 首先我當然跟 Dijkstra 一樣, 鼓勵少想操作, 因此像 Haskell 這樣, 不用想操作而能預測程式給出甚麼答案, 這是大幸. 但我們遲早也要預測程式用幾多時間幾多記憶, 這時難以避免考慮操作, 而 lazy evaluation 是較難跟的操作.操作
2014-01-17 10:23:19	monochrom	[06:34:53] 我已經知道怎樣避免操作而仍能預測時間, 畢竟這是我的博士論文! 而然寫完論文, 還是嘆曰: 不易. 而預測記憶依然遙遙無期.
2014-01-17 10:23:19	monochrom	[06:38:19] 當然, 其實官方從沒公開說 Haskell 是 lazy, 只說 non-strict. 說 non-strict, 就更加斷絕所有考慮操作的希望了! XD
2014-01-17 10:23:19	monochrom	[06:42:37] 最後, 這只是末節. 重點上 Dijkstra 是對的, 教 Haskell 可擴闊視野, 並且鼓勵把程式當嚴謹數式.
2014-01-17 10:23:19	monochrom	[06:46:57] 預測記憶, Haskell 面對的是雙邊戰爭, 是 lazy evaluation 及 garbage collection 兩面夾擊. 注意單單 garbage collection 已不易, 例如 ML 及 Java.
2014-01-17 10:23:19	monochrom	[06:47:38] 惜也! Dijkstra 不在世, 沒見到我的博士論文!
2014-01-17 10:23:19	monochrom	[06:48:01] 否則一定大讚 XD
2014-01-17 10:23:19	CindyLinz	[14:19:35] monochrom: 如果他真的還在世, 你真的敢拿給他看喔? 不是聽說他脾氣超差...? XDD
2014-01-17 10:23:19	godfat1	[14:20:06] XDDDDD
2014-01-17 10:23:19	CindyLinz	[14:21:03] monochrom: 不過, 應該可以不用甩 Haskell 官方說的 non-strict, 直接做 lazy 版, 然後說這個分析方法只適用 lazy-haskell.. 而實際上所有的 haskell 都是 lazy-haskell.. :p
2014-01-17 10:23:19	godfat	[14:22:20] ...=_=... 最終都是實作獲勝的味道
2014-01-17 10:23:19	CindyLinz	[14:39:51] 不是這樣嘛, 只是先顧現實的問題啊~ ^^  non-strict 是一個「非建構性」的定義, 什麼都不能做啊.. XD
2014-01-17 10:23:19	CindyLinz	[14:40:16] 等到有和 lazy 不一樣的 non-strict 出來, 也是可以對它作分析的 ^^
2014-01-17 10:23:19	godfat	[14:40:49] 唔，也是 XD 不過具體而言，還有啥作法嗎？
2014-01-17 10:23:19	CindyLinz	[14:40:56] 提醒提醒~~ 今天晚上是 Functional Thursday 喔~~
2014-01-17 10:23:19	CindyLinz	[14:41:05] 就沒聽過嘛 :p
2014-01-17 10:23:19	godfat	[14:41:10] 今天沒空參加 ><
2014-01-17 10:23:19	CindyLinz	[14:41:29] 我想, eval 完不要把結果記住, 仍然留著 thunk 在那邊也是一個可行的作法? XD
2014-01-17 10:23:19	godfat	[14:42:01] 如果 thunk 是 pure 的，這樣有意義嗎？ XD
2014-01-17 10:23:19	CindyLinz	[14:42:55] 省記憶體.. XD
2014-01-17 10:23:19	godfat	[14:43:12] 結果不是通常比較小嗎？
2014-01-17 10:23:19	CindyLinz	[14:45:05] do { let a = [1..1000000000] ; putStrLn $ show $ sum a ; threadDelay 1000000000 ; putStrLn $ show $ length a }
2014-01-17 10:23:19	CindyLinz	[14:45:24] 通常是啦.. 所以才沒看過有人這樣做 XD
2014-01-17 10:23:19	CindyLinz	[14:46:15] 哎唷.. 嘴砲不要太認真嘛 QQ
2014-01-17 10:23:19	godfat	[14:48:36] XDDDD
2014-01-17 10:23:19	godfat	[14:48:36] 哎唷，不認真我也沒問到這樣的具體例子呀 :P
2014-01-17 10:23:19	godfat	[14:48:36] 也許可以有 annotation 給 compiler/vm 一些提示應該要記 value 還是 thunk, 不保證這樣
2014-01-17 10:23:19	CindyLinz	[14:49:12] 「強烈建議每次重算」
2014-01-17 10:23:19	CindyLinz	[14:50:44] 不知道 GHC 會不會越過 unsafe 的牆來檢查..
2014-01-17 10:23:19	CindyLinz	[14:50:57] 我在想可以用 unsafe 擋著, 叫 GHC 每次都重算
2014-01-17 10:23:19	CindyLinz	[14:51:19] 只是如果 GHC 會爬過牆來檢查說: 你這根本 safe.... 就破功了..
2014-01-17 10:23:19	godfat	[14:51:56] 要怎麼用 unsafe 擋著呀？用 ghc 本身的 api..?
2014-01-17 10:23:19	CindyLinz	[14:53:28] http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/System-IO-Unsafe.html
2014-01-17 10:23:19	CindyLinz	[14:53:50] 然後在裡面 IO 的地方使用 suhorng 上次遇到的問題
2014-01-17 10:23:19	CindyLinz	[14:54:59] # 19:55 < suhorng> 然後我的程式就變成(幾乎)兩倍慢了 囧
2014-01-17 10:23:19	godfat	[14:55:21] 哪個問題..? XD 為 debug 插入 IO?
2014-01-17 10:23:19	godfat	[14:55:21] 可是問題不是在怎麼讓 ghc 丟掉 value 嗎？
2014-01-17 10:23:19	CindyLinz	[14:56:24] ghc 好像還蠻容易丟掉 value 的... @@"
2014-01-17 10:23:19	CindyLinz	[14:56:50] 只要不是在同一層函數裡面用到, 就不會 cache 了的樣子
2014-01-17 10:23:19	CindyLinz	[14:57:23] 像是 fib 0 = 1 ; fib 1 = 1 ; fib n = fib (n - 1) + fib (n - 2) 裡面, f 會一再重算
2014-01-17 10:23:19	CindyLinz	[14:57:44] 但我不知道明確的 rule.. 所以真要應用還不太行
2014-01-17 10:23:19	godfat	[14:58:13] 我內心的想像是 keepThunk :: a -> a
2014-01-17 10:23:19	godfat	[14:58:13] XD
2014-01-17 10:23:19	godfat	[14:58:43] 可能會是 lexical 的...
2014-01-17 10:23:19	CindyLinz	[14:59:04] 目前的應該還不行.. 如果寫成 let a = keepThunk f in (a, a) 的話, a 的結果會被記住, f 還是只有算一次
2014-01-17 10:23:19	CindyLinz	[14:59:24] 但! 如果 f 裡面有 unsafe 的話, 不知道 ghc 會不會就不敢 cache 了 :p
2014-01-17 10:23:19	CindyLinz	[14:59:55] 我猜還是敢.. 不然 unsafe 就很沒用了.. :Q
2014-01-17 10:23:19	godfat	[14:59:59] 也許想說反正你都 unsafe 了，就讓你瞧瞧 unsafe 的真義 XD
2014-01-17 10:23:19	CindyLinz	[15:03:30] 有了
2014-01-17 10:23:19	CindyLinz	[15:03:38] 我作了測試
2014-01-17 10:23:19	CindyLinz	[15:04:48] http://lpaste.net/98225
2014-01-17 10:23:19	CindyLinz	[15:05:01] f 只會 eval 一次, 但 g 會 eval 二次
2014-01-17 10:23:19	godfat	[15:07:36] 唔，然後是不是應該有 jit 讓 g 多跑幾次後他發現其實應該 cache? XD
2014-01-17 10:23:19	CindyLinz	[15:11:33] 覺得好像要做這個已經準備好了, 只是 ghc 那幫高手的風格好學術, 可能不覺得這是重要的事 orz
2014-01-17 10:23:19	CindyLinz	[15:20:10] 不過.. 塞給 g 的參數兩次是不一樣的欸..
2014-01-17 10:23:19	CindyLinz	[15:20:15] 因為那個 callback 不一樣
2014-01-17 10:23:19	CindyLinz	[15:21:02] 它還是可以分析出塞給 next 的 3 沒有 depend on 這個 callback
2014-01-17 10:23:19	CindyLinz	[15:21:10] 那我 trace 放的位置不對...
2014-01-17 10:23:19	CindyLinz	[15:21:46] 我把 trace 移到 3 的位置, 還是有 eval 兩次 ^^
2014-01-17 10:23:19	godfat	[15:23:05] 不過說實在我很難想像好的 jit 應該怎麼做，感覺需要很多 heuristic 去預測什麼時候開始最佳化？
2014-01-17 10:23:19	CindyLinz	[15:24:19] 對啊, 就解決常見的就好.. 應該是個非常不嚴謹, 講不太出可證明的理由的行為.. @@
2014-01-17 10:23:19	CindyLinz	[15:24:39] 和 FP 圈的文化不太合.. XD
2014-01-17 10:23:19	godfat	[15:25:47] ...XDD 也是..
2014-01-17 10:23:19	CindyLinz	[15:28:25] 也許我一兩年前去 #haskell 問說.. 有沒有什麼 generic 的函數把 head :: [Int] -> Int, tail :: [Int] -> [Int] 變成 maybeHead :: [Int] -> Maybe Int 和 maybeTail 的時候..
2014-01-17 10:23:19	CindyLinz	[15:28:41] 有人回答我說 impossible, it's halting problem
2014-01-17 10:23:19	CindyLinz	[15:28:58] 就是個 symbol 了.. o.o
2014-01-17 10:23:19	CindyLinz	[15:29:26] 從實際應用的角度來說, 在 halting problem 之前, 還有很多文章可以作
2014-01-17 10:23:19	godfat	[15:30:02] 好像就是丟到 IO 裡面抓 exception... XD
2014-01-17 10:23:19	CindyLinz	[15:30:10] 像這個問題, 其實可以不用全面性地視為 halting problem, 而視為 non-exhaustive pattern 的問題
2014-01-17 10:23:19	CindyLinz	[15:30:31] non-exhaustive pattern 是可以解的..
2014-01-17 10:23:19	godfat	[15:30:47] 你是說從 input 去看嗎？
2014-01-17 10:23:19	CindyLinz	[15:31:11] 它就是缺 pattern 來 match [] 呀
2014-01-17 10:23:19	CindyLinz	[15:31:58] 只是這種解法不夠全面, 就會上不了 那個 台面.. :Q
2014-01-17 10:23:19	godfat	[15:34:00] 要這樣做似乎就等於要幫 f 補完 case 了？
2014-01-17 10:23:19	godfat	[15:34:15] 是說這樣好像也是一種 exception 的意思
2014-01-17 10:23:19	CindyLinz	[15:35:48] 可以算是 exception, 現狀也是被當成 exception... 不過我覺得這一種 exception 可以適當包裝, 讓它留在 pure...
2014-01-17 10:23:19	CindyLinz	[15:36:03] 我還沒試過把它放在 Maybe Monad 裡面能不能變成 Nothing
2014-01-17 10:23:19	godfat	[15:36:33] 這樣等於是 haskell 語意也變了.. XD
2014-01-17 10:23:19	godfat	[15:37:02] 另一方面，感覺這也是某一種 null pointer
2014-01-17 10:23:19	CindyLinz	[15:38:43] null 可以解決所有的事, 但不一定就要把所有的事都推給 null 啊? ^^
2014-01-17 10:23:19	godfat	[15:39:10] 我的意思是，他的概念其實有點像是 null, 像是可以正常處理例外
2014-01-17 10:23:19	CindyLinz	[15:39:33] 像是 Monad 的 fail?
2014-01-17 10:23:19	godfat	[15:39:47] 或是說，Maybe 其實是某種 Nullable... XD
2014-01-17 10:23:19	CindyLinz	[15:40:00] Monad 的 fail 我覺得就是: monad 內無法處理, 但是 runMonad 的地方 (monad 外面) 可以處理
2014-01-17 10:23:19	godfat	[15:40:18] 嗯，也是像是那樣
2014-01-17 10:23:19	CindyLinz	[15:42:38] 試完了, 不會被當成 failed monad # http://lpaste.net/98227
2014-01-17 10:23:19	CindyLinz	[15:43:42] 記得它的實作是有 pattern match...
2014-01-17 10:23:19	CindyLinz	[15:43:58] head [] = error "empty list"
2014-01-17 10:23:19	CindyLinz	[15:44:07] 這個 error 太兇殘了.. ww
2014-01-17 10:23:19	CindyLinz	[15:44:47] 戳一下就一路捅到 IO 才能處理 orz
2014-01-17 10:23:19	godfat	[15:45:46] XDDDD 這等於是沒有統一方法了
2014-01-17 10:23:19	CindyLinz	[15:46:28] 可是 fail 只能在 Monad 裡面用
2014-01-17 10:23:19	CindyLinz	[15:46:55] throw 更侷限, 只能在特定的 Monad 裡面用
2014-01-17 10:23:19	CindyLinz	[15:47:29] 應該強制把所有的 pure 函數都當成在 Identity a 裡面跑... ww
2014-01-17 10:23:19	CindyLinz	[15:47:43] 這樣就可以 fail 了 :p
2014-01-17 10:23:19	godfat	[15:47:57] 呃.... XD
2014-01-17 10:23:19	CindyLinz	[15:48:20] 現在在 pure 裡面放個 error 是什麼意思嘛.. XD
2014-01-17 10:23:19	godfat	[15:48:35] "please debug your application"
2014-01-17 10:23:19	CindyLinz	[15:49:16] 或說.. error 的 semantic 應該可以由 monad 來定義
2014-01-17 10:23:19	CindyLinz	[15:49:25] 不過這樣就 error = fail 了.. :p
2014-01-17 10:23:19	godfat	[15:49:39] 是啊
2014-01-17 10:23:19	CindyLinz	[15:50:02] 覺得這樣比較對啊.. :Q
2014-01-17 10:23:19	CindyLinz	[15:50:35] pure 函數到處都能用.. 然後我們又希望不要 IO monad 滿天飛
2014-01-17 10:23:19	godfat	[15:50:44] 我想是因為沒有想要整個 haskell 在 monad 裡？
2014-01-17 10:23:19	CindyLinz	[15:50:48] 結果 pure 裡面有一堆東西都是一戳就直達 IO... orz
2014-01-17 10:23:19	godfat	[15:51:17] 不過整個 haskell 都在 monad 好像也是滿有趣的... XD
2014-01-17 10:23:19	CindyLinz	[15:51:23] 整個 haskell 在 monad 裡應該是無可避免的命運吧? XD
2014-01-17 10:23:19	godfat	[15:51:55] 這樣 return a 跟 a 好像也沒分別了？
2014-01-17 10:23:19	CindyLinz	[15:52:12] 髒的是 IO a, 不是所有的 Monad 啊.. QQ  你看 Identity a 多麼純啊 ^^
2014-01-17 10:23:19	godfat	[15:52:15] 或是說 return a 變成 return $ return a 了
2014-01-17 10:23:19	godfat	[15:52:20] XDDDDD
2014-01-17 10:23:19	CindyLinz	[15:52:45] 聽起來不太妙 orz
2014-01-17 10:23:19	CindyLinz	[15:54:06] 還是由 compiler 來施展黑魔法吧, 把 error 當成 fail 來用就好 XD
2014-01-17 10:23:19	godfat	[15:56:23] 不確定這樣會變怎麼樣... XD 可以做成一個 ghc extension 瞧瞧？ XD
2014-01-17 10:23:19	CindyLinz	[15:56:49] syntax 上還是得由 programmer 決定 Identity 有幾層.. 不然最後面套了無窮多層 IdentityT, 這程式寫不了的...
2014-01-17 10:23:19	godfat	[15:57:30] 由 programmer 宣告 type?
2014-01-17 10:23:19	CindyLinz	[15:57:34] 好像可以是一個 per module 的 extension
2014-01-17 10:23:19	CindyLinz	[15:57:46]  global 用可能會和已有的程式不合
2014-01-17 10:23:19	godfat	[15:57:59] 我覺得一定不會合，語意不一樣... XD
2014-01-17 10:23:19	CindyLinz	[15:58:06] 已有的程式可能假設 Nothing 發生時一定是某某問題, 而不是發生這種 list 不夠長的意外
2014-01-17 10:23:19	CindyLinz	[15:58:29] 但可以指定讓某一層 Monad 可以收 error
2014-01-17 10:23:19	CindyLinz	[15:58:44] 好像不用 extension, 用 unsafe 就可以做了?
2014-01-17 10:23:19	CindyLinz	[15:59:21] 用 unsafe IO 裡面擺 catch, 然後再 run Identity..
2014-01-17 10:23:19	CindyLinz	[15:59:48] 那是不是已經有這種 monad 了呢? :p
2014-01-17 10:23:19	godfat	[16:00:23] 聽起來是可行.... XD
2014-01-17 10:23:19	godfat	[16:00:37] 可是不太確定為什麼要這樣用... XD
2014-01-17 10:23:19	CindyLinz	[16:01:40] 想像你寫了個 Monad
2014-01-17 10:23:19	CindyLinz	[16:01:52] 想把所有的東西 run 在這個 Monad 裡面.. 而且, 它不是 IO!
2014-01-17 10:23:19	CindyLinz	[16:02:21] 然後如果你寫的是類似 server 性質的程式, 也許這程式有些地方會出點意外
2014-01-17 10:23:19	CindyLinz	[16:02:34] 但你希望它不會因為不夠嚴重的意外就把整個程式 crash 掉
2014-01-17 10:23:19	CindyLinz	[16:02:48] 那就會在某些地方攔一些救援性質的程式
2014-01-17 10:23:19	godfat	[16:02:56] 是，我唯一想到不希望程式 crash 的真的就 server 之類的 XD
2014-01-17 10:23:19	CindyLinz	[16:03:15] 啊我就一天到晚寫 server 程式嘛, 所以都從這邊開始想啊 ^^|
2014-01-17 10:23:19	godfat	[16:03:19] 像是程式爛了自動重開，是個爛招，但有時候確實想要...
2014-01-17 10:23:19	CindyLinz	[16:03:41] 但我們就會希望不要爛到需要重開的地步, 而是局部 abort 某個 task 就好
2014-01-17 10:23:19	godfat	[16:03:56] 之前也常常覺得自己寫了好髒的東西，覺得把錯誤都藏起來了很討厭，但又不得不這樣做
2014-01-17 10:23:19	CindyLinz	[16:04:15] 就像在這邊.. 希望不要爛到整個 IO thread 要重來, 而是局部處理, 局部修復就好
2014-01-17 10:23:19	CindyLinz	[16:04:31] 像是... Memory 不夠了
2014-01-17 10:23:19	CindyLinz	[16:04:38] 也不用因此就被 kill 9
2014-01-17 10:23:19	CindyLinz	[16:04:54] 我把部分 job 丟掉, 還剩一些可以繼續跑呀~
2014-01-17 10:23:19	godfat	[16:05:01] 來個 safe haskell, 然後這跟大家想的 safe 不一樣，其實是 never crash (but unsafe...)
2014-01-17 10:23:19	CindyLinz	[16:05:12] 「跟大家想的 safe 不一樣」...... wwww
2014-01-17 10:23:19	godfat	[16:06:18] 說來我寫程式也常常覺得滿矛盾的，錯誤就想噴錯，但導致不夠 robust 又不好...
2014-01-17 10:23:19	CindyLinz	[16:06:26] 你可以噴 log
2014-01-17 10:23:19	CindyLinz	[16:06:33] fatal log, 寄信塞爆你信箱...
2014-01-17 10:23:19	godfat	[16:06:34] log 不夠吵... XD
2014-01-17 10:23:19	godfat	[16:06:37] ....XDD...
2014-01-17 10:23:19	CindyLinz	[16:06:42] cc 給董事長
2014-01-17 10:23:19	godfat	[16:07:09] 我現在確實慢慢把程式改成用 email 回報... (其實是丟給另外 service, 他會再寄信)
2014-01-17 10:23:19	CindyLinz	[16:07:11] 或是 cc 到 #haskell channel.. 就會開始有人罵你... XD
2014-01-17 10:23:19	godfat	[16:07:25] cc 給董事長也滿好笑的，還可以 cc 給客戶更猛 (??)
2014-01-17 10:23:19	godfat	[16:07:28] XDDDDDDDDDD
2014-01-17 10:23:19	CindyLinz	[16:07:29] XDD
2014-01-17 10:23:19	godfat	[16:07:34] 不行，社群不能得罪 (??)
2014-01-17 10:23:19	CindyLinz	[16:07:45] 吵過頭了 XD
2014-01-17 10:23:19	CindyLinz	[16:08:28] 我們家的 perl 程式常常在包 eval { }
2014-01-17 10:23:19	CindyLinz	[16:08:38] 類似 java 的 try { } catch all
2014-01-17 10:23:19	godfat	[16:08:59] silently faill...!?
2014-01-17 10:23:19	CindyLinz	[16:09:02] 然後會噴信
2014-01-17 10:23:19	godfat	[16:09:07] 喔喔 XD
2014-01-17 10:23:19	CindyLinz	[16:09:24] 我們實際上有很多壞掉也沒關係, 但不要總是壞掉的服務..
2014-01-17 10:23:19	CindyLinz	[16:09:43] 例如說 PM 辦活動, 玩家玩完一局有機率掉寶
2014-01-17 10:23:19	godfat	[16:09:56] crash = no items
2014-01-17 10:23:19	CindyLinz	[16:09:59] 這種程式常常在改, 因為常常有新活動, 所以也常常錯
2014-01-17 10:23:19	godfat	[16:10:07] XDDD 可以理解...
2014-01-17 10:23:19	CindyLinz	[16:10:11] 如果它出的 exception 讓正常結算都爆掉...
2014-01-17 10:23:19	CindyLinz	[16:10:23] 還不如把這 error 河蟹掉..
2014-01-17 10:23:19	CindyLinz	[16:10:34] 至少正常遊戲可以玩, 只是沒寶..
2014-01-17 10:23:19	CindyLinz	[02:14:06] JVM in TypeScript... orz # https://github.com/int3/doppio
2014-01-17 10:23:19	letoh	[02:15:21] 會不會有人用 (alt)js 搞個 dalvik 以後，整個 android 搬到 nodejs 上跑?
2014-01-17 10:23:19	CindyLinz	[02:20:27] 這樣有... 降低穩定性的好處? orz
2014-01-17 10:23:19	letoh	[02:20:50] 大概吧XD
2014-01-17 10:23:19	favonia	[06:48:38] CindyLinz: 這樣子就有 jpu 出現啦---javascript process unit
2014-01-17 10:23:19	suhorng1	[09:00:07] https://github.com/ekmett/js-parsers/blob/master/parsers.js 竟然是js
2014-01-17 10:23:19	monochrom	[09:03:05] 它的 readme 不是開宗明義說: 給 javascript 用嗎?
2014-01-17 10:23:19	suhorng1	[09:03:39] 對阿對阿
2014-01-17 10:23:19	monochrom	[09:05:42] 其實, 可以說 "parser combinators for javascript" 模梭兩可. 第一可: 用來讀 javascript. 第二可: 用在 javascript 內.
2014-01-17 10:23:19	monochrom	[09:06:49] "for" 字一向都很多問題 :)
2014-01-17 10:23:19	suhorng1	[09:07:10] 也是這樣說啦XD
2014-01-17 10:23:19	suhorng1	[09:07:58] 是想說, 我這學期修了編譯器, 上課講 LL, LR 之類的, 講 LL 時倒是完全沒提到有 parser combinator 這種好用的東西XD 很可惜
2014-01-17 10:23:19	monochrom	[09:08:59] 教師從沒想過 combinator, 或認為講了也沒學生明白
2014-01-17 10:23:19	monochrom	[09:10:14] combinator 這概念需要很強的程式語言才成事. 例如, 用 BASIC 時 combinator 是妄想
2014-01-17 10:23:19	suhorng1	[09:10:26] 真難過
2014-01-17 10:23:19	suhorng1	[09:10:42] 好吧..我們從頭到尾的示範都用 C =_=||| 沒什麼好講的
2014-01-17 10:23:19	monochrom	[09:10:50] 未見過函式語言就跟本不會明 combinator
2014-01-17 10:23:19	suhorng1	[09:11:40] 想說 C++ 至少也有用起來很像的 boost::spirit
2014-01-17 10:23:19	monochrom	[09:11:53] 當然了, C 比 BASIC 好些 :)
2014-01-17 10:23:19	suhorng1	[09:14:12] 裡面講的一些東西感覺就是比較針對 C 實作的問題XD
2014-01-17 10:23:19	suhorng1	[09:15:36] 助教給的程式還手寫vector XDD
2014-01-17 10:23:19	monochrom	[09:18:28] 分得出重點與末節的人有福了
2014-01-17 10:23:19	suhorng1	[09:33:48] 好難過, Appel 的 Modern Compiler Implementation in C, in Java 都有進口代理, 唯獨 in ML 沒有(兩倍價格...)
2014-01-17 10:23:19	monochrom	[09:36:55] 很久以前趁書局不知何解有, 價錢又不貴, 買了 :)
2014-01-17 10:23:19	monochrom	[09:37:15] 不過, 畢竟是加拿大
2014-01-17 10:23:19	suhorng1	[09:38:37] 真的是書局部知道為何有 XD
2014-01-17 10:23:19	monochrom	[09:38:50] 又不過, 加拿大都有弊處. 有一年, 加元對美元甚弱, 書店就大肆加價. 之後, 沒有怎樣減.
2014-01-17 10:23:19	monochrom	[09:39:38] 美元$10 的書賣加元 $15 都試過
2014-01-17 10:23:19	monochrom	[09:43:08] 更加離奇的是, Andrew Gordon 的博士論文, functional programming and input/output, 都在連鎖書店找到
2014-01-17 10:23:19	petercommand	[09:43:51] monochrom: 一般書店?
2014-01-17 10:23:19	monochrom	[09:44:09] (也是馬上買了. 竟讓我碰到, 簡直是天意, 天意不可違!)
2014-01-17 10:23:19	monochrom	[09:44:32] 是呀! 加拿大的連鎖書店 Chapters
2014-01-17 10:23:19	monochrom	[09:45:48] 當然不會每間分店都有. 應該是只一間分店有, 只有一本, 給我遇到了. 天意!
2014-01-17 10:23:19	suhorng1	[09:46:46] 好神奇
2014-01-17 10:23:19	monochrom	[09:47:38] Chapters 是舊名. 現叫 Indigo, 因為轉老闆. 但網站保留舊名, 叫 chapters.indigo.ca
2014-01-17 10:23:19	suhorng1	[09:48:02] (!)
2014-01-17 10:23:19	monochrom	[09:54:33] 我想, 有得解的. 那是2000年左右, 互聯網股泡沫時. 所以, 書店也認為所有電腦書, 不分青紅皀白都有市.
2014-01-17 10:23:19	monochrom	[09:56:17] 事實證明的確有市, 就是我 :)
2014-01-17 10:23:19	monochrom	[10:00:01] 嘩, 即使在 amazon.com, Appel 的 in ML 都很貴. 租都要 us$35, 買就要 us$62. 而且只是軟皮
2014-01-17 10:23:19	monochrom	[10:01:13] 咦, 原來我那時買都貴, cdn$77, 不過我有硬皮 XD
2014-01-17 10:23:19	suhorng1	[10:01:34] in Java也很貴？
2014-01-17 10:23:19	monochrom	[10:01:47] 讓我看看
2014-01-17 10:23:19	suhorng1	[10:01:48] 國際版的才比較便宜..
2014-01-17 10:23:19	monochrom	[10:03:48] in Java 硬皮 us$76, 找不到軟皮.
2014-01-17 10:23:19	monochrom	[10:06:05] 啊, 有第三者在 amazon 寄賣軟皮, 可以低到 us$26
2014-01-17 10:23:19	suhorng1	[10:06:15] 喔喔
2014-01-17 10:23:19	suhorng1	[10:06:39] java還是比較人 QQ
2014-01-17 10:23:19	suhorng1	[10:07:22] 哈哈, amazon在 in ML 書下方推薦的：「Frequently Bought Together: ..in ML + Compiling with Continuations」
2014-01-17 10:23:19	monochrom	[10:08:00] continuation 簡直是 Appel 看家本領啦
2014-01-17 10:23:19	monochrom	[10:15:06] 幾時有 in javascript 呢, 那就功德完滿了 XD
2014-01-17 10:23:19	monochrom	[10:15:27] 呀, 圓滿!
2014-01-17 10:23:19	monochrom	[10:15:51] (死啦, 中文退步了)
2014-01-17 10:23:19	monochrom	[10:18:04] 有了! "compiler implementation in javascript with continuations" 會是驚世駭作! XD
2014-01-17 10:23:19	suhorng1	[10:18:13] wwwwww
2014-01-17 10:23:19	suhorng1	[10:18:30] 把 continuations 改成 callbacks (誤)
2014-01-17 10:23:19	vivian	[04:56:21] hi i'm new to this
2014-01-17 10:23:19	vivian	[04:56:32] anyone here?
2014-01-17 10:23:19	vivian_	[07:22:44] Eq a 點解
2014-01-17 10:23:19	favonia_	[07:33:28] vivian_: hi
2014-01-17 10:23:19	favonia_	[07:33:39] vivian_: 你來的時間剛好大家都在睡覺
2014-01-17 10:23:19	CindyLinz	[14:05:44] XD
2014-01-17 10:23:19	vivian	[16:33:13] class 在HASKELL 有什麼用？
2014-01-17 10:23:19	CindyLinz	[16:38:45] vivian: 有不同角度的理解法.. 從比較實作的角度看, 是讓不同的 type 可以對應「同樣」的功能
2014-01-17 10:23:19	CindyLinz	[16:39:15] 例如說你的 Eq a, 能被放在 a 這位置的 type, 都可以作 (==) 或 (/=) 的比較
2014-01-17 10:23:19	CindyLinz	[16:40:15] 所以想被放在 a 這位置的 type, 都要準備好它的 (==) 或 (/=) 怎麼作
2014-01-17 10:23:19	vivian	[17:30:05] 有沒有例子
2014-01-17 10:23:19	CindyLinz	[17:40:28] Eq Int ?
2014-01-17 10:23:19	CindyLinz	[17:40:36] Eq Char, Eq [Int]
2014-01-17 10:23:19	CindyLinz	[17:40:59] 你問得好簡短, 猜不太出你想得到怎樣方向的答案 ^^|
2014-01-17 10:23:19	CindyLinz	[17:41:43] > 'a' == 'a'
2014-01-17 10:23:19	lambdabot	[17:41:44]  True
2014-01-17 10:23:19	CindyLinz	[17:41:57] > [3,4,5] == [3,4,5]
2014-01-17 10:23:19	lambdabot	[17:41:58]  True
2014-01-17 10:23:19	CindyLinz	[17:42:07] > [3,4,5] == [3,4,5,6]
2014-01-17 10:23:19	lambdabot	[17:42:08]  False
2014-01-17 10:23:19	monochrom	[00:31:14] 我學 SML 在先, 見識過整數加號叫 "+", 浮點加號要叫 "+.", 分數加號要叫 "+/", 自定型態加號要自定符號... 等等等等. 但! 等號卻有特別優待! 自定型態只要用 "eqtype" 就可獲免費等號. 非常不公平, 非常不對稱.
2014-01-17 10:23:19	monochrom	[00:32:35] 因此一見 Haskell 的 type class 就即刻明, 因為它是我日盼夜盼的.
2014-01-17 10:23:19	CindyLinz	[01:32:50] 不方便沒關係, 不公平比較令人生氣這樣?
2014-01-17 10:23:19	suhorng	[22:39:32] 話說 Reader monad 的 `ap` 跟 `>>=` 好像是同一個東西!? (參數順序不同而已)
2014-01-17 10:23:19	suhorng	[22:39:41] 前者是 (r -> a -> b) -> (r -> a) -> (r -> b)
2014-01-17 10:23:19	suhorng	[22:39:56] 後者是 (r -> a) -> (a -> (r -> b)) -> r -> b
2014-01-17 10:23:19	suhorng	[22:41:57] 雖然知道好像也沒什麼用XD|||
2014-01-17 10:23:19	monochrom	[00:07:26] CindyLinz: 關於 "不公平, 不對稱", 我認為 例外=醜陋.
2014-01-17 10:23:19	monochrom	[00:08:08] 例外是萬惡之源
2014-01-17 10:23:19	monochrom	[00:09:20] @type ap
2014-01-17 10:23:19	lambdabot	[00:09:21] Monad m => m (a -> b) -> m a -> m b
2014-01-17 10:23:19	monochrom	[00:11:25] 呀! Reader 的 ap 跟 >>= 型態一樣, 意義不同呀!
2014-01-17 10:23:19	monochrom	[00:12:24] 呀... 我錯了, 意義都一樣.
2014-01-17 10:23:19	CindyLinz	[00:41:15] monochrom: agree.. QQ # 00:07 < monochrom> CindyLinz: 關於 "不公平, 不對稱", 我認為 例外=醜陋.
2014-01-17 10:23:19	CindyLinz	[00:41:19] # 00:08 < monochrom> 例外是萬惡之源
2014-01-17 10:23:19	hashcat	[00:47:30] 沒有例外的話有點麻煩
2014-01-17 10:23:19	hashcat	[00:48:24] 代表當下一定要處理掉, 不能讓父程序處理
2014-01-17 10:23:19	hashcat	[00:50:09] 職員喬得來的事情, 當然是自己喬掉, 喬不掉就只好問經理, 比自己亂搞好
2014-01-17 10:23:19	CindyLinz	[00:50:54] 這叫缺陷美啊 XD # 有例外
2014-01-17 10:23:19	hashcat	[00:51:06] 擴展別人已經寫好的物件導向程序, 要是沒這種機制的話
2014-01-17 10:23:19	CindyLinz	[00:51:44] 但平常的心態是例外能少則少呀~ 如果把例外當常態... (默)
2014-01-17 10:23:19	hashcat	[00:51:46] 別人寫得父層的程序就沒辦法幫你搞定了
2014-01-17 10:23:19	CindyLinz	[00:52:08] estimate cost 調高一點而已.
2014-01-17 10:23:19	hashcat	[00:52:14] 又想到當兵時候
2014-01-17 10:23:19	hashcat	[00:53:02] 什麼事都問長官確認會被電死, 不懂的事自己亂處理也會被電死
2014-01-17 10:23:19	monochrom	[00:53:38] hashcat: 我是指程式語言給你的規則裏的例外條文, 例如 "所有 operator 都不能 overload, 唯獨 ==, != 可以 overload"
2014-01-17 10:23:19	hashcat	[00:53:39] 規模大的協作, 沒例外貌似不方便
2014-01-17 10:23:19	hashcat	[00:54:18] 哦搞錯了
2014-01-17 10:23:19	monochrom	[00:54:41] 至於 throw 和 catch, 我是舉腳贊成, 堅決擁護的
2014-01-17 10:23:19	monochrom	[00:55:00] http://www.vex.net/~trebla/haskell/exception.xhtml
2014-01-17 10:23:19	hashcat	[00:55:09] 我被長官電之前也覺得例外不重要 (?
2014-01-17 10:23:19	hashcat	[00:56:06] 例外丟多了也被電, 退伍後還是沒搞懂標準在哪
2014-01-17 10:23:19	CindyLinz	[01:20:41] 看 Haskell 的 exception 和 dynamic type, 心中發出一種「哼哼哼」的感覺.. XD
2014-01-17 10:23:19	hashcat_	[19:32:04] 有個 ocaml 寫的prolog變種 abella
2014-01-17 10:23:19	hashcat_	[19:32:35] 用途是定理證明
2014-01-17 10:23:19	hashcat_	[19:32:53] abella-prover.org
2014-01-17 10:23:19	cibs	[20:44:46] 可以問一下 foldl 和 foldr 嗎~
2014-01-17 10:23:19	cibs	[20:45:30] 一般好像是講 foldr 從右開始摺，foldl 從左開始摺?
2014-01-17 10:23:19	cibs	[20:46:19] 可是用 fold 來做 map 的話，這樣做 mapr = foldr (\x acc -> f x : acc ) [] 和 mapl = f = foldl (\acc x -> acc ++ [f x]) []
2014-01-17 10:23:19	cibs	[20:47:46] 面對 mapl odd [1..] 和 mapr odd [1..]，mapl 會卡住，mapr 才是一個一個數字產生 ( 在 ghci ), 如果用 take 10 也是只有 mapr 才可以拿完
2014-01-17 10:23:19	cibs	[20:48:17] 可是 [1..] 不是沒有右端？怎麼想都覺得應該是 mapr 才會卡住才對啊 *bang*
2014-01-17 10:23:19	hashcat_	[21:13:51] fold怎能做map
2014-01-17 10:23:19	hashcat_	[21:14:43] fold會銷毀列表, map保持列表
2014-01-17 10:23:19	hashcat_	[21:16:56] 哦我看到可以,用列表的列表
2014-01-17 10:23:19	hashcat_	[21:25:30] 你把表達式的樹狀圖由上而下展開就有解答了
2014-01-17 10:23:19	hashcat_	[21:26:04] 最上面最先算
2014-01-17 10:23:19	hashcat_	[21:27:45] 惰性計算使得右邊可以被截掉
2014-01-17 10:23:19	hashcat_	[21:28:01] 右子樹
2014-01-17 10:23:19	hashcat_	[21:40:11] cibs 有人在嘛
2014-01-17 10:23:19	hashcat_	[21:41:41] 你的誤解應該是把算術的優先順序,當成惰性計算的順序
2014-01-17 10:23:19	hashcat_	[21:42:56] 我的誤解是忘記列表不是原子型別,可以被建構
2014-01-17 10:23:19	hashcat	[22:47:46] 我打出來好了
2014-01-17 10:23:19	hashcat	[22:48:09] mapr的示意表達式 a:(b:(c:(d: (THUNK)))) 其中a是head最先被計算, 再來b, 依序下去. THUNK的部分是還沒被計算, 可以被惰性計算跺掉的部分
2014-01-17 10:23:19	hashcat	[22:56:46] mapl 的話 ( ... ((([] ++ [f a]) ++ [f b]) ++ [f c]) ++ ... ) 反而變成有打出來的部分 ((([] ++ [f a]) ++ [f b]) ++ [f c]) 才是包含在THUNK的部分, 最開始應該要被計算的地方反而變成...打不完
2014-01-17 10:23:19	CindyLinz	[23:00:33] 嗯嗯, 這邊的「開始」「先後」之類的, 都是打括號的順序
2014-01-17 10:23:19	CindyLinz	[23:01:42] 而計算的順序是, 需要用到哪, 才算到哪... 所以可以從屁股往回看, 從被取走的資料要真的用到的時候才開始一點一點把結果擠出去
2014-01-17 10:23:19	hashcat	[23:03:58] 討論這個意外地咬文嚼字
2014-01-17 10:23:19	CindyLinz	[23:05:36] XD
2014-01-17 10:23:19	monochrom	[07:24:59] 小學中學教 "先乘除, 後加減" 及 "括號先". 這是把 parsing 次序和計算次序混為一談. 當然對大部份人來說沒所謂. 但 Haskell 人不是大部份人. 括號和優先次序其實只講 parsing.
2014-01-17 10:23:19	monochrom	[07:27:12] 又其實, 即使對大部份人來說, 也不是真的要混為一談吧? 0*(3902834+1632892), 你是不是老老實實先計算 3902834+1632892 ?
2014-01-17 10:23:19	monochrom	[07:28:49] 可惜中小學是不可能把 parsing 分開出來教的.
2014-01-17 10:23:19	***	Playback Complete.
2014-01-17 10:24:31	--	Mode #haskell.tw [+cnt]
2014-01-17 10:24:31	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-17 11:22:00	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2014-01-17 11:22:51	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-17 11:23:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2014-01-17 11:23:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-17 11:24:18	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-01-17 11:32:48	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-17 11:33:30	CindyLinz	「Haskell 人不是大部份人」... (痛)
2014-01-17 11:40:45	cibs	謝謝 hashcat 和 Cindy 的講解，這樣我懂了 :) 我的確是把計算的順序和取值的順序搞混在一起了。
2014-01-17 11:40:56	cibs	hashcat 目前不在，上線後再謝一次 XD
2014-01-17 11:42:18	CindyLinz	XD
2014-01-17 11:42:30	CindyLinz	不知道 hashcat 會不會看 log..
2014-01-17 11:42:35	CindyLinz	(指指 topic)
2014-01-17 11:44:18	cibs	CindyLinz: 是我的話不會所以我猜大家都不會(誤
2014-01-17 11:45:15	b4283	看 log 跟話題還蠻好用的...
2014-01-17 11:46:01	cibs	糟了原來只有我不會 XD
2014-01-17 11:47:01	CindyLinz	這 channel 一開始就有推這個, 所以不太一樣 ^^|
2014-01-17 11:47:23	CindyLinz	因為 channel 剛開的時候, 發現大部分的人都不會掛在 24h channel 上.. 這樣聊東西會聊不起來
2014-01-17 11:47:39	CindyLinz	所以就放了 log 讓話題可以延續 XD
2014-01-17 11:47:57	CindyLinz	24h 掛在 channel 上... (為什麼會換順序.. orz)
2014-01-17 12:06:22	-->	town55 (~1@171.90.58.10) has joined #haskell.tw
2014-01-17 12:11:48	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2014-01-17 12:38:51	cibs	CindyLinz: 大概妳打字是平行輸出的 (誤
2014-01-17 12:40:12	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-17 12:52:24	-->	godfat (~Adium@111-248-146-161.dynamic.hinet.net) has joined #haskell.tw
2014-01-17 13:27:58	CindyLinz	wwww
2014-01-17 14:03:07	cibs	糟了我又不懂了
2014-01-17 14:03:37	cibs	foldl (\acc x -> odd x : acc) [] [1..] 那像這樣
2014-01-17 14:03:56	cibs	不是也是 a:(b:(c:(d:( THUNK )))) ?
2014-01-17 14:05:59	CindyLinz	想想.. XD
2014-01-17 14:06:51	CindyLinz	會逆序吧
2014-01-17 14:07:19	CindyLinz	> foldl (\acc x -> x : acc) [] [1..5]
2014-01-17 14:07:20	lambdabot	 [5,4,3,2,1]
2014-01-17 14:08:01	cibs	喔喔對可是我是說這樣也會跑不完 @@
2014-01-17 14:08:18	CindyLinz	應該是會跑不完..
2014-01-17 14:08:20	CindyLinz	> foldl (\acc x -> x : acc) [] [1..]
2014-01-17 14:08:23	lambdabot	 mueval-core: Time limit exceeded
2014-01-17 14:08:46	cibs	可是如果也是 a:(b:(c:(THUNK))) 的話為什麼不能被截掉? @@
2014-01-17 14:08:51	CindyLinz	當 haskell 想要取出這整個 foldl 出來的結果(的開頭)的時候
2014-01-17 14:09:09	CindyLinz	從 foldl (\acc x -> x : acc) [] [1..] 開始
2014-01-17 14:10:03	CindyLinz	(這樣寫好長喔.. XD)
2014-01-17 14:10:09	cibs	XD
2014-01-17 14:11:33	CindyLinz	先列一下 foldl 的 source 好了
2014-01-17 14:11:36	CindyLinz	@src foldl
2014-01-17 14:11:36	lambdabot	foldl f z []     = z
2014-01-17 14:11:36	lambdabot	foldl f z (x:xs) = foldl f (f z x) xs
2014-01-17 14:12:07	CindyLinz	foldl (\acc x -> x : acc) [] [1..]   ...(會走第二個 branch 因為 [1..] 不是 [])...
2014-01-17 14:12:30	CindyLinz	= foldl (\acc x -> x : acc) ((\acc x -> x : acc) [] 1) [2..]
2014-01-17 14:13:14	CindyLinz	= fold (\acc x -> x : acc) ((\acc x -> x : acc) ((\acc x -> x : acc) [] 1) 2) [3..]
2014-01-17 14:13:17	CindyLinz	= ...
2014-01-17 14:13:25	CindyLinz	呃 那個 fold 是 foldl
2014-01-17 14:13:32	cibs	嗯嗯我知道
2014-01-17 14:13:42	CindyLinz	因為 haskell 一直看到這個函數是一個函數帶頭的東西
2014-01-17 14:13:50	CindyLinz	所以就只好繼續把這個函數「解開」
2014-01-17 14:14:09	CindyLinz	「解開」也就是把參數「貼」到函數 body 裡面展開
2014-01-17 14:15:02	CindyLinz	你看 foldl 的定義那邊 foldl .... = foldl .... 就注定了它一定要有朝一日走到第一個 branch foldl .... = z 的時候才有機會停下來了
2014-01-17 14:15:36	CindyLinz	能停的條件是: 遇到一個 data constructor 開頭的東西 (例如說 list 用到的 (:)) 或是參數沒給完整的函數
2014-01-17 14:16:27	cibs	感謝，這樣好像清楚多了!!
2014-01-17 14:16:32	cibs	原來可以用 @src XD
2014-01-17 14:16:38	CindyLinz	^^
2014-01-17 14:16:47	CindyLinz	我 @src 也是第一次用... XD
2014-01-17 14:17:09	cibs	@src foldr
2014-01-17 14:17:10	lambdabot	foldr f z []     = z
2014-01-17 14:17:10	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2014-01-17 14:17:14	cibs	拿來比較一下 XD
2014-01-17 14:17:28	CindyLinz	foldr 能不能提早停, 就看這個帶頭的 f 給不給面子了..
2014-01-17 14:18:11	CindyLinz	如果 f 是 (+).. 那它會逼後半的 foldr 表態.. 所以最終也是非得 foldr .... = z 出現才能停
2014-01-17 14:18:46	CindyLinz	嗯嗯, 想想這個「停」也可以說成是: 拿得出能看的成果
2014-01-17 14:19:26	cibs	有有，這樣了解多了!
2014-01-17 14:19:33	CindyLinz	:D
2014-01-17 14:26:46	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-01-17 15:00:58	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-17 15:18:38	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-17 16:05:49	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-17 16:09:02	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 16:09:03	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 16:09:16	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 16:09:18	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 16:09:35	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 16:09:37	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-17 16:09:54	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-17 16:34:10	CindyLinz	更好用的 GDB # http://tech.mozilla.com.tw/posts/3826/cgdb-%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84-gdb
2014-01-17 16:34:19	CindyLinz	我也想要更好用的 GHCi.. QQ
2014-01-17 16:35:06	CindyLinz	不過這功能好像 tmux + vim + ghci extension 寫一寫就好了?
2014-01-17 16:35:28	CindyLinz	如果 ghci 裡面也彩色就更好了 :p
2014-01-17 16:35:44	CindyLinz	使用 haskell.. 人生是彩色的!
2014-01-17 16:46:19	godfat	我之前想做，可是用 ghci 的 api 會造成整個 ghc crash, 查不到文件，source 太多看不懂，求助無門，就放棄了...
2014-01-17 16:59:46	CindyLinz	這是什麼啊... 囧 # 可是用 ghci 的 api 會造成整個 ghc crash
2014-01-17 17:00:10	CindyLinz	那可不可以從 terminal 端套一層來做, parse ghci 的輸出格式..... wwww
2014-01-17 17:00:35	godfat	可以不要嗎... orz
2014-01-17 17:00:40	godfat	https://github.com/godfat/sandbox/blob/master/haskell/ghci.hs
2014-01-17 17:01:17	godfat	上面那段我查 source 弄超久才弄出來的
2014-01-17 17:01:18	godfat	結果會 crash... orz
2014-01-17 17:02:35	CindyLinz	還是很厲害.. @@"
2014-01-17 17:02:59	godfat	crash 得很厲害嗎？ XDD 我猜其實那些東西隨便弄都很容易 crash orz...
2014-01-17 17:03:12	CindyLinz	他說: the 'impossible' happened
2014-01-17 17:03:25	CindyLinz	這就很厲害了啊....
2014-01-17 17:03:42	godfat	XDDDDDD
2014-01-17 17:03:43	godfat	不過我猜用這些跟用 unsafe 大概差不多..
2014-01-17 17:04:06	CindyLinz	幫不上忙 ^^|
2014-01-17 17:06:24	godfat	XD... 真可惜
2014-01-17 17:44:50	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-17 17:45:48	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-17 17:46:40	<--	mno2 (~mno2@42.60.173.63) has quit (Client Quit)
2014-01-17 17:59:22	favonia	the impossible happened!
2014-01-17 18:17:21	letoh	cgdb 沒有更好用啊
2014-01-17 18:18:44	CindyLinz	沒用過的都說好(?)
2014-01-17 18:18:56	letoh	不過我要感謝它
2014-01-17 18:19:02	letoh	讓我遇到 emacs XD
2014-01-17 18:19:05	CindyLinz	wwww
2014-01-17 18:19:22	letoh	就是因為太難用只好改用 emacs
2014-01-17 18:20:52	-->	hashcat (~kv2a@218-173-237-38.dynamic.hinet.net) has joined #haskell.tw
2014-01-17 18:21:06	letoh	如果只需要 source listing 的話， xxgdb 也可以辦到，還可以圖形表示資料結構
2014-01-17 18:21:36	letoh	「我們在開發過程中，常常會使用 GDB 來找 bug，但是它是純文字介面，使用上還是有些不便」  結果找了 cgdb 也是純文字界面啊
2014-01-17 18:22:03	 *	letoh 上課前太無聊  到處挑語病XD
2014-01-17 18:22:25	godfat	XDDDD
2014-01-17 18:23:02	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit
2014-01-17 18:24:45	letoh	剛剛講錯了  好像不是叫 xxgdb.. 而是叫 ddd。xxgdb 我沒用過
2014-01-17 18:25:44	godfat	跟 dd 有關嗎 = =
2014-01-17 18:25:54	letoh	沒有關係耶XD
2014-01-17 18:26:09	godfat	是說我也不懂為啥叫 dd...
2014-01-17 18:26:16	letoh	ddd 像這樣 http://cocoadevcentral.com/articles/imgs/ddd.png
2014-01-17 18:26:39	letoh	我用來推薦給 vs.net 中毒者的工具
2014-01-17 18:26:56	godfat	delete! delete! delete! == ddd
2014-01-17 18:26:56	godfat	燒燬！燒燬！燒燬！ == 燒燒燒
2014-01-17 18:27:02	letoh	XD
2014-01-17 18:29:17	letoh	gdb7 以後搭配 python script 也可以做到類似 ddd 的圖，但對一般使用者來說還是不太方便
2014-01-17 18:30:23	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-17 18:31:37	godfat	細看了一下圖，寫 c 真可怕呀... :o
2014-01-17 18:31:38	godfat	是說 haskell 的 data 應該也可以展開就是了，不知道有沒有這種工具？
2014-01-17 18:52:36	letoh	這算是 runtime 展開的，應該要 runtime 可以拿到這些資訊才可以吧... haskell 可以做到嗎?
2014-01-17 18:52:50	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-17 18:53:59	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-01-17 19:09:19	godfat	既然都有 trace 了... XD
2014-01-17 19:13:14	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-17 19:23:32	<--	godfat (~Adium@111-248-146-161.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-01-17 20:06:31	-->	b4283 (~b4283@218-164-220-33.dynamic.hinet.net) has joined #haskell.tw
2014-01-17 20:19:51	-->	liuzhoou (~liuzhoou@124.78.235.220) has joined #haskell.tw
2014-01-17 20:23:06	-->	godfat (~Adium@1-160-164-119.dynamic.hinet.net) has joined #haskell.tw
2014-01-17 21:05:34	<--	b4283 (~b4283@218-164-220-33.dynamic.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-17 21:22:00	-->	b4283 (~b4283@125-230-252-221.dynamic.hinet.net) has joined #haskell.tw
2014-01-17 23:13:07	CindyLinz	letoh: 我看過一個名字是 vis 開頭的 project # 18:31 < godfat> 是說 haskell 的 data 應該也可以展開就是了，不知道有沒有這種工具？
2014-01-17 23:13:25	CindyLinz	不對 結尾是 vis.. XD
2014-01-17 23:13:40	CindyLinz	http://hackage.haskell.org/package/ghc-vis
2014-01-17 23:14:30	godfat	好像不錯 XD
2014-01-17 23:31:19	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-17 23:32:30	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 245 seconds)
2014-01-17 23:48:16	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-01-18 00:04:33	<--	hashcat (~kv2a@218-173-237-38.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-18 00:28:15	<--	town55 (~1@171.90.58.10) has quit (Read error: Connection reset by peer)
2014-01-18 00:41:46	<--	b4283 (~b4283@125-230-252-221.dynamic.hinet.net) has quit (Read error: Operation timed out)
2014-01-18 00:52:20	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-18 01:11:58	<--	liuzhoou (~liuzhoou@124.78.235.220) has quit (Quit: Leaving...)
2014-01-18 02:43:19	CindyLinz	godfat: 有沒有人 Functional Thursday 要來介紹一下 ghc-vis 啊? :D
2014-01-18 05:07:11	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Remote host closed the connection)
2014-01-18 05:09:55	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-01-18 05:44:18	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 245 seconds)
2014-01-18 07:33:10	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-18 10:30:18	-->	b4283 (~b4283@218-164-127-155.dynamic.hinet.net) has joined #haskell.tw
2014-01-18 10:55:08	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-18 11:55:25	-->	town55 (~1@171.90.58.10) has joined #haskell.tw
2014-01-18 13:29:35	-->	liuzhoou (~liuzhoou@180.157.232.149) has joined #haskell.tw
2014-01-18 15:24:48	<--	liuzhoou (~liuzhoou@180.157.232.149) has quit (Remote host closed the connection)
2014-01-18 15:33:40	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-01-18 15:36:19	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-18 15:37:44	-->	hashcat (~kv2a@218-166-239-224.dynamic.hinet.net) has joined #haskell.tw
2014-01-18 15:44:58	-->	liuzhoou (~liuzhoou@180.157.232.149) has joined #haskell.tw
2014-01-18 16:22:13	-->	letoh_ (~stackvm@203-67-180-246.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-18 16:25:09	<--	letoh (~stackvm@211-74-72-30.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 248 seconds)
2014-01-18 16:29:41	--	letoh_ is now known as letoh
2014-01-18 16:41:44	<--	b4283 (~b4283@218-164-127-155.dynamic.hinet.net) has quit (Remote host closed the connection)
2014-01-18 16:44:50	-->	b4283 (~b4283@36-238-133-173.dynamic-ip.hinet.net) has joined #haskell.tw
2014-01-18 17:39:16	<--	liuzhoou (~liuzhoou@180.157.232.149) has quit (Quit: Leaving...)
2014-01-18 17:48:10	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-18 17:59:15	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Remote host closed the connection)
2014-01-18 18:01:59	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-01-18 18:12:36	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2014-01-18 18:13:22	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-18 19:01:54	-->	b4284 (~b4283@1-174-251-124.dynamic.hinet.net) has joined #haskell.tw
2014-01-18 19:03:25	<--	b4283 (~b4283@36-238-133-173.dynamic-ip.hinet.net) has quit (Ping timeout: 246 seconds)
2014-01-18 19:11:01	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-18 22:00:29	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-18 22:53:26	<--	hashcat (~kv2a@218-166-239-224.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-01-18 23:07:20	-->	cybeliak (~cybeliak@114-34-87-107.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-18 23:08:01	-->	liuzhoou (~liuzhoou@180.157.232.149) has joined #haskell.tw
2014-01-18 23:27:28	<--	town55 (~1@171.90.58.10) has quit (Quit: Leaving)
2014-01-18 23:49:32	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (*.net *.split)
2014-01-18 23:52:04	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-18 23:53:55	<--	letoh (~stackvm@203-67-180-246.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 246 seconds)
2014-01-18 23:56:10	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (*.net *.split)
2014-01-18 23:58:37	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-18 23:59:30	-->	letoh (~stackvm@59-104-108-10.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-19 00:04:50	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-01-19 00:24:12	-->	theogonica (~theogonic@14.0.192.108) has joined #haskell.tw
2014-01-19 00:28:02	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-19 00:34:56	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Quit: Bye)
2014-01-19 00:35:09	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-19 00:35:10	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-19 00:35:23	-->	hashcat_ (~hashcat_@27.245.211.237) has joined #haskell.tw
2014-01-19 00:35:23	<--	hashcat_ (~hashcat_@27.245.211.237) has quit (Excess Flood)
2014-01-19 00:40:13	<--	theogonica (~theogonic@14.0.192.108) has quit
2014-01-19 00:46:22	<--	cybeliak (~cybeliak@114-34-87-107.HINET-IP.hinet.net) has quit (Quit: Leaving)
2014-01-19 00:47:30	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-19 00:58:23	<--	letoh (~stackvm@59-104-108-10.adsl.dynamic.seed.net.tw) has quit (Ping timeout: 252 seconds)
2014-01-19 01:28:59	-->	theogonica_ (~theogonic@14.0.192.108) has joined #haskell.tw
2014-01-19 01:33:25	-->	cybeliak (~cybeliak@114-34-87-107.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-19 01:47:54	<--	b4284 (~b4283@1-174-251-124.dynamic.hinet.net) has quit (Quit: 暫離)
2014-01-19 02:15:37	<--	cybeliak (~cybeliak@114-34-87-107.HINET-IP.hinet.net) has quit (Quit: Leaving)
2014-01-19 02:25:51	<--	liuzhoou (~liuzhoou@180.157.232.149) has quit (Quit: Leaving...)
2014-01-19 02:45:15	<--	theogonica_ (~theogonic@14.0.192.108) has quit
2014-01-19 05:19:10	<--	a2n_ (~a2n@219.85.185.194) has quit (*.net *.split)
2014-01-19 05:20:44	-->	a2n_ (~a2n@219.85.185.194) has joined #haskell.tw
2014-01-19 05:22:13	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-01-19 08:12:55	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-19 08:37:10	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-01-19 10:17:06	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-01-19 10:53:33	<--	chihhsin (~starbops@140-113-121-170.Dorm13.NCTU.edu.tw) has quit (Ping timeout: 276 seconds)
2014-01-19 12:00:20	-->	b4283 (~b4283@218-164-207-178.dynamic.hinet.net) has joined #haskell.tw
2014-01-19 12:51:47	-->	hashcat_ (~hashcat_@27.241.182.185) has joined #haskell.tw
2014-01-19 13:06:29	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-01-19 13:14:36	-->	town55 (~1@139.202.128.110) has joined #haskell.tw
2014-01-19 13:36:05	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2014-01-19 13:45:41	-->	liuzhoou (~liuzhoou@180.157.232.149) has joined #haskell.tw
2014-01-19 13:47:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-19 14:13:57	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-19 14:13:57	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-19 14:13:57	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-19 14:13:57	--	Nicks #haskell.tw: [a2n_ b4283 cataska_ cibs CindyLinz darkx drbean favonia flter gko godfat hashcat_ hychen kanru lambdabot logfat____ mno2 monochrom shik superbil_c town55 weie]
2014-01-19 14:13:57	--	Channel #haskell.tw: 22 nicks (0 ops, 0 voices, 22 normals)
2014-01-19 14:14:17	--	Mode #haskell.tw [+cnt]
2014-01-19 14:14:17	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-19 14:25:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2014-01-19 14:40:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-01-19 14:45:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2014-01-19 15:42:30	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-01-19 15:47:41	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) has joined #haskell.tw
2014-01-19 17:01:13	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2014-01-19 17:01:13	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-19 17:01:13	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-19 17:01:13	--	Nicks #haskell.tw: [a2n_ b4283 cataska_ cibs CindyLinz darkx drbean flter gko godfat hashcat_ hychen kanru lambdabot letoh logfat____ mno2 monochrom petercommand shik superbil_c town55 weie]
2014-01-19 17:01:13	--	Channel #haskell.tw: 23 nicks (0 ops, 0 voices, 23 normals)
2014-01-19 17:01:35	--	Mode #haskell.tw [+cnt]
2014-01-19 17:01:35	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-19 17:48:15	-->	hashcat (~kv2a@218-166-239-224.dynamic.hinet.net) has joined #haskell.tw
2014-01-19 19:08:41	-->	cybeliak (~cybeliak@114-34-87-107.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-19 20:46:53	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-01-19 20:46:53	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-01-19 20:46:53	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-01-19 20:46:53	--	Nicks #haskell.tw: [a2n_ b4283 cataska_ cibs CindyLinz cybeliak darkx drbean flter gko godfat hashcat hashcat_ hychen kanru lambdabot letoh logfat____ mno2 monochrom petercommand shik superbil_c town55 weie]
2014-01-19 20:46:53	--	Channel #haskell.tw: 25 nicks (0 ops, 0 voices, 25 normals)
2014-01-19 20:46:56	--	Mode #haskell.tw [+cnt]
2014-01-19 20:46:56	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-01-19 21:29:42	--	irc: disconnected from server
2014-01-22 21:50:31	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-22 21:50:31	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-22 21:50:31	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-22 21:50:31	--	ニックネーム #haskell.tw: [a2n b4283 banacorn cataska cataska_ cibs CindyLinz cyt93cs darkx drbean flter gko godfat hashcat_ hychen kanru lambdabot letoh liuzhoou logfat____ miaout17 monochrom petercommand shik superbil_c town55 weie yu_lin]
2014-01-22 21:50:31	--	チャンネル #haskell.tw: 28 ニックネーム (0 オペレータ, 0 発言, 28 通常)
2014-01-22 21:50:31	***	Buffer Playback...
2014-01-22 21:50:31	favonia	[01:50:06] letoh: 喔每多跑一輪你的電腦評價就會加一分
2014-01-22 21:50:31	CindyLinz	[01:51:05] ...
2014-01-22 21:50:31	CindyLinz	[01:51:12] 還不如拿來挖礦...... ww
2014-01-22 21:50:31	favonia	[01:51:38] CindyLinz: javascript 沒有 bitcoin 程式嗎？
2014-01-22 21:50:31	favonia	[01:52:05] CindyLinz: http://www.bitcoinplus.com/miner/embeddable
2014-01-22 21:50:31	favonia	[01:52:23] 你只要在最裡層的 firefox 跑這個就好了
2014-01-22 21:50:31	CindyLinz	[01:52:27] favonia: 我是說.. 這樣子層層包來耗效能..... ww
2014-01-22 21:50:31	godfat	[01:53:19] facebook 可以裝這個，然後挖到礦之後寄回給 facebook
2014-01-22 21:50:31	CindyLinz	[01:53:26] (Y)
2014-01-22 21:50:31	CindyLinz	[01:53:37] 用 facebook 對 facebook 說讚.... ww
2014-01-22 21:50:31	godfat	[01:53:43] 一切都是為了 distributed mining
2014-01-22 21:50:31	favonia	[01:53:55] godfat: in javascript
2014-01-22 21:50:31	favonia	[01:54:02] godfat: 你漏掉重要的兩個字
2014-01-22 21:50:31	godfat	[01:54:05] XDDDD
2014-01-22 21:50:31	CindyLinz	[01:54:10] ...........||
2014-01-22 21:50:31	letoh	[01:54:38] 這個字頭就不會痛嗎?
2014-01-22 21:50:31	godfat	[01:54:41] 把這些討論搬到 javascript 討論板上搞不好就變成正向討論
2014-01-22 21:50:31	favonia	[01:54:47] letoh: 麻痹了
2014-01-22 21:50:31	letoh	[01:54:55] XDXD
2014-01-22 21:50:31	CindyLinz	[01:54:55] 我們太不正經了.... QQ
2014-01-22 21:50:31	favonia	[01:55:19] CindyLinz: 我們最正經了～
2014-01-22 21:50:31	letoh	[01:55:35] 其實我覺得剛剛還蠻正向的啊，還能再更正向啊? XD
2014-01-22 21:50:31	godfat	[01:58:03] 我以為都是嘲諷口氣.... XD
2014-01-22 21:50:31	favonia	[01:58:17] letoh: 他的意思是說我們不應該正經的諷刺 javascript
2014-01-22 21:50:31	letoh	[01:58:28] 好吧XD
2014-01-22 21:50:31	favonia	[01:58:35] letoh: 應該要發自內心的愛 javascript
2014-01-22 21:50:31	 *	letoh [01:59:26] 懺悔，下個專案改用 javascript 好了
2014-01-22 21:50:31	favonia	[01:59:27] letoh: 即使不寫 javascript 可能對某些人來說是更正向的事情但那都無關緊要
2014-01-22 21:50:31	letoh	[01:59:35] XDXD
2014-01-22 21:50:31	monochrom	[02:39:43] 哈哈, 原來還有人知道 zombo.com
2014-01-22 21:50:31	godfat	[02:40:23] 我超愛的 XD
2014-01-22 21:50:31	 *	monochrom [02:43:15] 的 javascript 的正向用途: http://www.vex.net/~trebla/homework/epsilon-delta.html  還有 http://www.vex.net/~trebla/homework/extended-euclid.html
2014-01-22 21:50:31	monochrom	[02:43:34] 還有! http://www.vex.net/~trebla/humour/lmcify.html
2014-01-22 21:50:31	favonia	[02:46:39] monochrom: 好吧 http://www.vex.net/~trebla/humour/lmcify.html?t=JavaScript+is+great.
2014-01-22 21:50:31	monochrom	[02:48:39] 對了!
2014-01-22 21:50:31	favonia	[03:41:09] monochrom: ?
2014-01-22 21:50:31	monochrom	[03:41:45] 你懂得用我的 lmcify.html :)
2014-01-22 21:50:31	mno2	[21:22:50] http://www.cs.utexas.edu/users/EWD/OtherDocs/To%20the%20Budget%20Council%20concerning%20Haskell.pdf
2014-01-22 21:50:31	mno2	[21:23:28] 不愧是戰神 Dijkstra (誤)
2014-01-22 21:50:31	monochrom	[06:23:56] 我愛 Dijkstra :)
2014-01-22 21:50:31	monochrom	[06:31:01] 然而 lazy evaluation 是雙刃劍, 即使只談 Dijkstra 所談. 首先我當然跟 Dijkstra 一樣, 鼓勵少想操作, 因此像 Haskell 這樣, 不用想操作而能預測程式給出甚麼答案, 這是大幸. 但我們遲早也要預測程式用幾多時間幾多記憶, 這時難以避免考慮操作, 而 lazy evaluation 是較難跟的操作.操作
2014-01-22 21:50:31	monochrom	[06:34:53] 我已經知道怎樣避免操作而仍能預測時間, 畢竟這是我的博士論文! 而然寫完論文, 還是嘆曰: 不易. 而預測記憶依然遙遙無期.
2014-01-22 21:50:31	monochrom	[06:38:19] 當然, 其實官方從沒公開說 Haskell 是 lazy, 只說 non-strict. 說 non-strict, 就更加斷絕所有考慮操作的希望了! XD
2014-01-22 21:50:31	monochrom	[06:42:37] 最後, 這只是末節. 重點上 Dijkstra 是對的, 教 Haskell 可擴闊視野, 並且鼓勵把程式當嚴謹數式.
2014-01-22 21:50:31	monochrom	[06:46:57] 預測記憶, Haskell 面對的是雙邊戰爭, 是 lazy evaluation 及 garbage collection 兩面夾擊. 注意單單 garbage collection 已不易, 例如 ML 及 Java.
2014-01-22 21:50:31	monochrom	[06:47:38] 惜也! Dijkstra 不在世, 沒見到我的博士論文!
2014-01-22 21:50:31	monochrom	[06:48:01] 否則一定大讚 XD
2014-01-22 21:50:31	CindyLinz	[14:19:35] monochrom: 如果他真的還在世, 你真的敢拿給他看喔? 不是聽說他脾氣超差...? XDD
2014-01-22 21:50:31	godfat1	[14:20:06] XDDDDD
2014-01-22 21:50:31	CindyLinz	[14:21:03] monochrom: 不過, 應該可以不用甩 Haskell 官方說的 non-strict, 直接做 lazy 版, 然後說這個分析方法只適用 lazy-haskell.. 而實際上所有的 haskell 都是 lazy-haskell.. :p
2014-01-22 21:50:31	godfat	[14:22:20] ...=_=... 最終都是實作獲勝的味道
2014-01-22 21:50:31	CindyLinz	[14:39:51] 不是這樣嘛, 只是先顧現實的問題啊~ ^^  non-strict 是一個「非建構性」的定義, 什麼都不能做啊.. XD
2014-01-22 21:50:31	CindyLinz	[14:40:16] 等到有和 lazy 不一樣的 non-strict 出來, 也是可以對它作分析的 ^^
2014-01-22 21:50:31	godfat	[14:40:49] 唔，也是 XD 不過具體而言，還有啥作法嗎？
2014-01-22 21:50:31	CindyLinz	[14:40:56] 提醒提醒~~ 今天晚上是 Functional Thursday 喔~~
2014-01-22 21:50:31	CindyLinz	[14:41:05] 就沒聽過嘛 :p
2014-01-22 21:50:31	godfat	[14:41:10] 今天沒空參加 ><
2014-01-22 21:50:31	CindyLinz	[14:41:29] 我想, eval 完不要把結果記住, 仍然留著 thunk 在那邊也是一個可行的作法? XD
2014-01-22 21:50:31	godfat	[14:42:01] 如果 thunk 是 pure 的，這樣有意義嗎？ XD
2014-01-22 21:50:31	CindyLinz	[14:42:55] 省記憶體.. XD
2014-01-22 21:50:31	godfat	[14:43:12] 結果不是通常比較小嗎？
2014-01-22 21:50:31	CindyLinz	[14:45:05] do { let a = [1..1000000000] ; putStrLn $ show $ sum a ; threadDelay 1000000000 ; putStrLn $ show $ length a }
2014-01-22 21:50:31	CindyLinz	[14:45:24] 通常是啦.. 所以才沒看過有人這樣做 XD
2014-01-22 21:50:31	CindyLinz	[14:46:15] 哎唷.. 嘴砲不要太認真嘛 QQ
2014-01-22 21:50:31	godfat	[14:48:36] XDDDD
2014-01-22 21:50:31	godfat	[14:48:36] 哎唷，不認真我也沒問到這樣的具體例子呀 :P
2014-01-22 21:50:31	godfat	[14:48:36] 也許可以有 annotation 給 compiler/vm 一些提示應該要記 value 還是 thunk, 不保證這樣
2014-01-22 21:50:31	CindyLinz	[14:49:12] 「強烈建議每次重算」
2014-01-22 21:50:31	CindyLinz	[14:50:44] 不知道 GHC 會不會越過 unsafe 的牆來檢查..
2014-01-22 21:50:31	CindyLinz	[14:50:57] 我在想可以用 unsafe 擋著, 叫 GHC 每次都重算
2014-01-22 21:50:31	CindyLinz	[14:51:19] 只是如果 GHC 會爬過牆來檢查說: 你這根本 safe.... 就破功了..
2014-01-22 21:50:31	godfat	[14:51:56] 要怎麼用 unsafe 擋著呀？用 ghc 本身的 api..?
2014-01-22 21:50:31	CindyLinz	[14:53:28] http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/System-IO-Unsafe.html
2014-01-22 21:50:31	CindyLinz	[14:53:50] 然後在裡面 IO 的地方使用 suhorng 上次遇到的問題
2014-01-22 21:50:31	CindyLinz	[14:54:59] # 19:55 < suhorng> 然後我的程式就變成(幾乎)兩倍慢了 囧
2014-01-22 21:50:31	godfat	[14:55:21] 哪個問題..? XD 為 debug 插入 IO?
2014-01-22 21:50:31	godfat	[14:55:21] 可是問題不是在怎麼讓 ghc 丟掉 value 嗎？
2014-01-22 21:50:31	CindyLinz	[14:56:24] ghc 好像還蠻容易丟掉 value 的... @@"
2014-01-22 21:50:31	CindyLinz	[14:56:50] 只要不是在同一層函數裡面用到, 就不會 cache 了的樣子
2014-01-22 21:50:31	CindyLinz	[14:57:23] 像是 fib 0 = 1 ; fib 1 = 1 ; fib n = fib (n - 1) + fib (n - 2) 裡面, f 會一再重算
2014-01-22 21:50:31	CindyLinz	[14:57:44] 但我不知道明確的 rule.. 所以真要應用還不太行
2014-01-22 21:50:31	godfat	[14:58:13] 我內心的想像是 keepThunk :: a -> a
2014-01-22 21:50:31	godfat	[14:58:13] XD
2014-01-22 21:50:31	godfat	[14:58:43] 可能會是 lexical 的...
2014-01-22 21:50:31	CindyLinz	[14:59:04] 目前的應該還不行.. 如果寫成 let a = keepThunk f in (a, a) 的話, a 的結果會被記住, f 還是只有算一次
2014-01-22 21:50:31	CindyLinz	[14:59:24] 但! 如果 f 裡面有 unsafe 的話, 不知道 ghc 會不會就不敢 cache 了 :p
2014-01-22 21:50:31	CindyLinz	[14:59:55] 我猜還是敢.. 不然 unsafe 就很沒用了.. :Q
2014-01-22 21:50:31	godfat	[14:59:59] 也許想說反正你都 unsafe 了，就讓你瞧瞧 unsafe 的真義 XD
2014-01-22 21:50:31	CindyLinz	[15:03:30] 有了
2014-01-22 21:50:31	CindyLinz	[15:03:38] 我作了測試
2014-01-22 21:50:31	CindyLinz	[15:04:48] http://lpaste.net/98225
2014-01-22 21:50:31	CindyLinz	[15:05:01] f 只會 eval 一次, 但 g 會 eval 二次
2014-01-22 21:50:31	godfat	[15:07:36] 唔，然後是不是應該有 jit 讓 g 多跑幾次後他發現其實應該 cache? XD
2014-01-22 21:50:31	CindyLinz	[15:11:33] 覺得好像要做這個已經準備好了, 只是 ghc 那幫高手的風格好學術, 可能不覺得這是重要的事 orz
2014-01-22 21:50:31	CindyLinz	[15:20:10] 不過.. 塞給 g 的參數兩次是不一樣的欸..
2014-01-22 21:50:31	CindyLinz	[15:20:15] 因為那個 callback 不一樣
2014-01-22 21:50:31	CindyLinz	[15:21:02] 它還是可以分析出塞給 next 的 3 沒有 depend on 這個 callback
2014-01-22 21:50:31	CindyLinz	[15:21:10] 那我 trace 放的位置不對...
2014-01-22 21:50:31	CindyLinz	[15:21:46] 我把 trace 移到 3 的位置, 還是有 eval 兩次 ^^
2014-01-22 21:50:31	godfat	[15:23:05] 不過說實在我很難想像好的 jit 應該怎麼做，感覺需要很多 heuristic 去預測什麼時候開始最佳化？
2014-01-22 21:50:31	CindyLinz	[15:24:19] 對啊, 就解決常見的就好.. 應該是個非常不嚴謹, 講不太出可證明的理由的行為.. @@
2014-01-22 21:50:31	CindyLinz	[15:24:39] 和 FP 圈的文化不太合.. XD
2014-01-22 21:50:31	godfat	[15:25:47] ...XDD 也是..
2014-01-22 21:50:31	CindyLinz	[15:28:25] 也許我一兩年前去 #haskell 問說.. 有沒有什麼 generic 的函數把 head :: [Int] -> Int, tail :: [Int] -> [Int] 變成 maybeHead :: [Int] -> Maybe Int 和 maybeTail 的時候..
2014-01-22 21:50:31	CindyLinz	[15:28:41] 有人回答我說 impossible, it's halting problem
2014-01-22 21:50:31	CindyLinz	[15:28:58] 就是個 symbol 了.. o.o
2014-01-22 21:50:31	CindyLinz	[15:29:26] 從實際應用的角度來說, 在 halting problem 之前, 還有很多文章可以作
2014-01-22 21:50:31	godfat	[15:30:02] 好像就是丟到 IO 裡面抓 exception... XD
2014-01-22 21:50:31	CindyLinz	[15:30:10] 像這個問題, 其實可以不用全面性地視為 halting problem, 而視為 non-exhaustive pattern 的問題
2014-01-22 21:50:31	CindyLinz	[15:30:31] non-exhaustive pattern 是可以解的..
2014-01-22 21:50:31	godfat	[15:30:47] 你是說從 input 去看嗎？
2014-01-22 21:50:31	CindyLinz	[15:31:11] 它就是缺 pattern 來 match [] 呀
2014-01-22 21:50:31	CindyLinz	[15:31:58] 只是這種解法不夠全面, 就會上不了 那個 台面.. :Q
2014-01-22 21:50:31	godfat	[15:34:00] 要這樣做似乎就等於要幫 f 補完 case 了？
2014-01-22 21:50:31	godfat	[15:34:15] 是說這樣好像也是一種 exception 的意思
2014-01-22 21:50:31	CindyLinz	[15:35:48] 可以算是 exception, 現狀也是被當成 exception... 不過我覺得這一種 exception 可以適當包裝, 讓它留在 pure...
2014-01-22 21:50:31	CindyLinz	[15:36:03] 我還沒試過把它放在 Maybe Monad 裡面能不能變成 Nothing
2014-01-22 21:50:31	godfat	[15:36:33] 這樣等於是 haskell 語意也變了.. XD
2014-01-22 21:50:31	godfat	[15:37:02] 另一方面，感覺這也是某一種 null pointer
2014-01-22 21:50:31	CindyLinz	[15:38:43] null 可以解決所有的事, 但不一定就要把所有的事都推給 null 啊? ^^
2014-01-22 21:50:31	godfat	[15:39:10] 我的意思是，他的概念其實有點像是 null, 像是可以正常處理例外
2014-01-22 21:50:31	CindyLinz	[15:39:33] 像是 Monad 的 fail?
2014-01-22 21:50:31	godfat	[15:39:47] 或是說，Maybe 其實是某種 Nullable... XD
2014-01-22 21:50:31	CindyLinz	[15:40:00] Monad 的 fail 我覺得就是: monad 內無法處理, 但是 runMonad 的地方 (monad 外面) 可以處理
2014-01-22 21:50:31	godfat	[15:40:18] 嗯，也是像是那樣
2014-01-22 21:50:31	CindyLinz	[15:42:38] 試完了, 不會被當成 failed monad # http://lpaste.net/98227
2014-01-22 21:50:31	CindyLinz	[15:43:42] 記得它的實作是有 pattern match...
2014-01-22 21:50:31	CindyLinz	[15:43:58] head [] = error "empty list"
2014-01-22 21:50:31	CindyLinz	[15:44:07] 這個 error 太兇殘了.. ww
2014-01-22 21:50:31	CindyLinz	[15:44:47] 戳一下就一路捅到 IO 才能處理 orz
2014-01-22 21:50:31	godfat	[15:45:46] XDDDD 這等於是沒有統一方法了
2014-01-22 21:50:31	CindyLinz	[15:46:28] 可是 fail 只能在 Monad 裡面用
2014-01-22 21:50:31	CindyLinz	[15:46:55] throw 更侷限, 只能在特定的 Monad 裡面用
2014-01-22 21:50:31	CindyLinz	[15:47:29] 應該強制把所有的 pure 函數都當成在 Identity a 裡面跑... ww
2014-01-22 21:50:31	CindyLinz	[15:47:43] 這樣就可以 fail 了 :p
2014-01-22 21:50:31	godfat	[15:47:57] 呃.... XD
2014-01-22 21:50:31	CindyLinz	[15:48:20] 現在在 pure 裡面放個 error 是什麼意思嘛.. XD
2014-01-22 21:50:31	godfat	[15:48:35] "please debug your application"
2014-01-22 21:50:31	CindyLinz	[15:49:16] 或說.. error 的 semantic 應該可以由 monad 來定義
2014-01-22 21:50:31	CindyLinz	[15:49:25] 不過這樣就 error = fail 了.. :p
2014-01-22 21:50:31	godfat	[15:49:39] 是啊
2014-01-22 21:50:31	CindyLinz	[15:50:02] 覺得這樣比較對啊.. :Q
2014-01-22 21:50:31	CindyLinz	[15:50:35] pure 函數到處都能用.. 然後我們又希望不要 IO monad 滿天飛
2014-01-22 21:50:31	godfat	[15:50:44] 我想是因為沒有想要整個 haskell 在 monad 裡？
2014-01-22 21:50:31	CindyLinz	[15:50:48] 結果 pure 裡面有一堆東西都是一戳就直達 IO... orz
2014-01-22 21:50:31	godfat	[15:51:17] 不過整個 haskell 都在 monad 好像也是滿有趣的... XD
2014-01-22 21:50:31	CindyLinz	[15:51:23] 整個 haskell 在 monad 裡應該是無可避免的命運吧? XD
2014-01-22 21:50:31	godfat	[15:51:55] 這樣 return a 跟 a 好像也沒分別了？
2014-01-22 21:50:31	CindyLinz	[15:52:12] 髒的是 IO a, 不是所有的 Monad 啊.. QQ  你看 Identity a 多麼純啊 ^^
2014-01-22 21:50:31	godfat	[15:52:15] 或是說 return a 變成 return $ return a 了
2014-01-22 21:50:31	godfat	[15:52:20] XDDDDD
2014-01-22 21:50:31	CindyLinz	[15:52:45] 聽起來不太妙 orz
2014-01-22 21:50:31	CindyLinz	[15:54:06] 還是由 compiler 來施展黑魔法吧, 把 error 當成 fail 來用就好 XD
2014-01-22 21:50:31	godfat	[15:56:23] 不確定這樣會變怎麼樣... XD 可以做成一個 ghc extension 瞧瞧？ XD
2014-01-22 21:50:31	CindyLinz	[15:56:49] syntax 上還是得由 programmer 決定 Identity 有幾層.. 不然最後面套了無窮多層 IdentityT, 這程式寫不了的...
2014-01-22 21:50:31	godfat	[15:57:30] 由 programmer 宣告 type?
2014-01-22 21:50:31	CindyLinz	[15:57:34] 好像可以是一個 per module 的 extension
2014-01-22 21:50:31	CindyLinz	[15:57:46]  global 用可能會和已有的程式不合
2014-01-22 21:50:31	godfat	[15:57:59] 我覺得一定不會合，語意不一樣... XD
2014-01-22 21:50:31	CindyLinz	[15:58:06] 已有的程式可能假設 Nothing 發生時一定是某某問題, 而不是發生這種 list 不夠長的意外
2014-01-22 21:50:31	CindyLinz	[15:58:29] 但可以指定讓某一層 Monad 可以收 error
2014-01-22 21:50:31	CindyLinz	[15:58:44] 好像不用 extension, 用 unsafe 就可以做了?
2014-01-22 21:50:31	CindyLinz	[15:59:21] 用 unsafe IO 裡面擺 catch, 然後再 run Identity..
2014-01-22 21:50:31	CindyLinz	[15:59:48] 那是不是已經有這種 monad 了呢? :p
2014-01-22 21:50:31	godfat	[16:00:23] 聽起來是可行.... XD
2014-01-22 21:50:31	godfat	[16:00:37] 可是不太確定為什麼要這樣用... XD
2014-01-22 21:50:31	CindyLinz	[16:01:40] 想像你寫了個 Monad
2014-01-22 21:50:31	CindyLinz	[16:01:52] 想把所有的東西 run 在這個 Monad 裡面.. 而且, 它不是 IO!
2014-01-22 21:50:31	CindyLinz	[16:02:21] 然後如果你寫的是類似 server 性質的程式, 也許這程式有些地方會出點意外
2014-01-22 21:50:31	CindyLinz	[16:02:34] 但你希望它不會因為不夠嚴重的意外就把整個程式 crash 掉
2014-01-22 21:50:31	CindyLinz	[16:02:48] 那就會在某些地方攔一些救援性質的程式
2014-01-22 21:50:31	godfat	[16:02:56] 是，我唯一想到不希望程式 crash 的真的就 server 之類的 XD
2014-01-22 21:50:31	CindyLinz	[16:03:15] 啊我就一天到晚寫 server 程式嘛, 所以都從這邊開始想啊 ^^|
2014-01-22 21:50:31	godfat	[16:03:19] 像是程式爛了自動重開，是個爛招，但有時候確實想要...
2014-01-22 21:50:31	CindyLinz	[16:03:41] 但我們就會希望不要爛到需要重開的地步, 而是局部 abort 某個 task 就好
2014-01-22 21:50:31	godfat	[16:03:56] 之前也常常覺得自己寫了好髒的東西，覺得把錯誤都藏起來了很討厭，但又不得不這樣做
2014-01-22 21:50:31	CindyLinz	[16:04:15] 就像在這邊.. 希望不要爛到整個 IO thread 要重來, 而是局部處理, 局部修復就好
2014-01-22 21:50:31	CindyLinz	[16:04:31] 像是... Memory 不夠了
2014-01-22 21:50:31	CindyLinz	[16:04:38] 也不用因此就被 kill 9
2014-01-22 21:50:31	CindyLinz	[16:04:54] 我把部分 job 丟掉, 還剩一些可以繼續跑呀~
2014-01-22 21:50:31	godfat	[16:05:01] 來個 safe haskell, 然後這跟大家想的 safe 不一樣，其實是 never crash (but unsafe...)
2014-01-22 21:50:31	CindyLinz	[16:05:12] 「跟大家想的 safe 不一樣」...... wwww
2014-01-22 21:50:31	godfat	[16:06:18] 說來我寫程式也常常覺得滿矛盾的，錯誤就想噴錯，但導致不夠 robust 又不好...
2014-01-22 21:50:31	CindyLinz	[16:06:26] 你可以噴 log
2014-01-22 21:50:31	CindyLinz	[16:06:33] fatal log, 寄信塞爆你信箱...
2014-01-22 21:50:31	godfat	[16:06:34] log 不夠吵... XD
2014-01-22 21:50:31	godfat	[16:06:37] ....XDD...
2014-01-22 21:50:31	CindyLinz	[16:06:42] cc 給董事長
2014-01-22 21:50:31	godfat	[16:07:09] 我現在確實慢慢把程式改成用 email 回報... (其實是丟給另外 service, 他會再寄信)
2014-01-22 21:50:31	CindyLinz	[16:07:11] 或是 cc 到 #haskell channel.. 就會開始有人罵你... XD
2014-01-22 21:50:31	godfat	[16:07:25] cc 給董事長也滿好笑的，還可以 cc 給客戶更猛 (??)
2014-01-22 21:50:31	godfat	[16:07:28] XDDDDDDDDDD
2014-01-22 21:50:31	CindyLinz	[16:07:29] XDD
2014-01-22 21:50:31	godfat	[16:07:34] 不行，社群不能得罪 (??)
2014-01-22 21:50:31	CindyLinz	[16:07:45] 吵過頭了 XD
2014-01-22 21:50:31	CindyLinz	[16:08:28] 我們家的 perl 程式常常在包 eval { }
2014-01-22 21:50:31	CindyLinz	[16:08:38] 類似 java 的 try { } catch all
2014-01-22 21:50:31	godfat	[16:08:59] silently faill...!?
2014-01-22 21:50:31	CindyLinz	[16:09:02] 然後會噴信
2014-01-22 21:50:31	godfat	[16:09:07] 喔喔 XD
2014-01-22 21:50:31	CindyLinz	[16:09:24] 我們實際上有很多壞掉也沒關係, 但不要總是壞掉的服務..
2014-01-22 21:50:31	CindyLinz	[16:09:43] 例如說 PM 辦活動, 玩家玩完一局有機率掉寶
2014-01-22 21:50:31	godfat	[16:09:56] crash = no items
2014-01-22 21:50:31	CindyLinz	[16:09:59] 這種程式常常在改, 因為常常有新活動, 所以也常常錯
2014-01-22 21:50:31	godfat	[16:10:07] XDDD 可以理解...
2014-01-22 21:50:31	CindyLinz	[16:10:11] 如果它出的 exception 讓正常結算都爆掉...
2014-01-22 21:50:31	CindyLinz	[16:10:23] 還不如把這 error 河蟹掉..
2014-01-22 21:50:31	CindyLinz	[16:10:34] 至少正常遊戲可以玩, 只是沒寶..
2014-01-22 21:50:31	CindyLinz	[02:14:06] JVM in TypeScript... orz # https://github.com/int3/doppio
2014-01-22 21:50:31	letoh	[02:15:21] 會不會有人用 (alt)js 搞個 dalvik 以後，整個 android 搬到 nodejs 上跑?
2014-01-22 21:50:31	CindyLinz	[02:20:27] 這樣有... 降低穩定性的好處? orz
2014-01-22 21:50:31	letoh	[02:20:50] 大概吧XD
2014-01-22 21:50:31	favonia	[06:48:38] CindyLinz: 這樣子就有 jpu 出現啦---javascript process unit
2014-01-22 21:50:31	suhorng1	[09:00:07] https://github.com/ekmett/js-parsers/blob/master/parsers.js 竟然是js
2014-01-22 21:50:31	monochrom	[09:03:05] 它的 readme 不是開宗明義說: 給 javascript 用嗎?
2014-01-22 21:50:31	suhorng1	[09:03:39] 對阿對阿
2014-01-22 21:50:31	monochrom	[09:05:42] 其實, 可以說 "parser combinators for javascript" 模梭兩可. 第一可: 用來讀 javascript. 第二可: 用在 javascript 內.
2014-01-22 21:50:31	monochrom	[09:06:49] "for" 字一向都很多問題 :)
2014-01-22 21:50:31	suhorng1	[09:07:10] 也是這樣說啦XD
2014-01-22 21:50:31	suhorng1	[09:07:58] 是想說, 我這學期修了編譯器, 上課講 LL, LR 之類的, 講 LL 時倒是完全沒提到有 parser combinator 這種好用的東西XD 很可惜
2014-01-22 21:50:31	monochrom	[09:08:59] 教師從沒想過 combinator, 或認為講了也沒學生明白
2014-01-22 21:50:31	monochrom	[09:10:14] combinator 這概念需要很強的程式語言才成事. 例如, 用 BASIC 時 combinator 是妄想
2014-01-22 21:50:31	suhorng1	[09:10:26] 真難過
2014-01-22 21:50:31	suhorng1	[09:10:42] 好吧..我們從頭到尾的示範都用 C =_=||| 沒什麼好講的
2014-01-22 21:50:31	monochrom	[09:10:50] 未見過函式語言就跟本不會明 combinator
2014-01-22 21:50:31	suhorng1	[09:11:40] 想說 C++ 至少也有用起來很像的 boost::spirit
2014-01-22 21:50:31	monochrom	[09:11:53] 當然了, C 比 BASIC 好些 :)
2014-01-22 21:50:31	suhorng1	[09:14:12] 裡面講的一些東西感覺就是比較針對 C 實作的問題XD
2014-01-22 21:50:31	suhorng1	[09:15:36] 助教給的程式還手寫vector XDD
2014-01-22 21:50:31	monochrom	[09:18:28] 分得出重點與末節的人有福了
2014-01-22 21:50:31	suhorng1	[09:33:48] 好難過, Appel 的 Modern Compiler Implementation in C, in Java 都有進口代理, 唯獨 in ML 沒有(兩倍價格...)
2014-01-22 21:50:31	monochrom	[09:36:55] 很久以前趁書局不知何解有, 價錢又不貴, 買了 :)
2014-01-22 21:50:31	monochrom	[09:37:15] 不過, 畢竟是加拿大
2014-01-22 21:50:31	suhorng1	[09:38:37] 真的是書局部知道為何有 XD
2014-01-22 21:50:31	monochrom	[09:38:50] 又不過, 加拿大都有弊處. 有一年, 加元對美元甚弱, 書店就大肆加價. 之後, 沒有怎樣減.
2014-01-22 21:50:31	monochrom	[09:39:38] 美元$10 的書賣加元 $15 都試過
2014-01-22 21:50:31	monochrom	[09:43:08] 更加離奇的是, Andrew Gordon 的博士論文, functional programming and input/output, 都在連鎖書店找到
2014-01-22 21:50:31	petercommand	[09:43:51] monochrom: 一般書店?
2014-01-22 21:50:31	monochrom	[09:44:09] (也是馬上買了. 竟讓我碰到, 簡直是天意, 天意不可違!)
2014-01-22 21:50:31	monochrom	[09:44:32] 是呀! 加拿大的連鎖書店 Chapters
2014-01-22 21:50:31	monochrom	[09:45:48] 當然不會每間分店都有. 應該是只一間分店有, 只有一本, 給我遇到了. 天意!
2014-01-22 21:50:31	suhorng1	[09:46:46] 好神奇
2014-01-22 21:50:31	monochrom	[09:47:38] Chapters 是舊名. 現叫 Indigo, 因為轉老闆. 但網站保留舊名, 叫 chapters.indigo.ca
2014-01-22 21:50:31	suhorng1	[09:48:02] (!)
2014-01-22 21:50:31	monochrom	[09:54:33] 我想, 有得解的. 那是2000年左右, 互聯網股泡沫時. 所以, 書店也認為所有電腦書, 不分青紅皀白都有市.
2014-01-22 21:50:31	monochrom	[09:56:17] 事實證明的確有市, 就是我 :)
2014-01-22 21:50:31	monochrom	[10:00:01] 嘩, 即使在 amazon.com, Appel 的 in ML 都很貴. 租都要 us$35, 買就要 us$62. 而且只是軟皮
2014-01-22 21:50:31	monochrom	[10:01:13] 咦, 原來我那時買都貴, cdn$77, 不過我有硬皮 XD
2014-01-22 21:50:31	suhorng1	[10:01:34] in Java也很貴？
2014-01-22 21:50:31	monochrom	[10:01:47] 讓我看看
2014-01-22 21:50:31	suhorng1	[10:01:48] 國際版的才比較便宜..
2014-01-22 21:50:31	monochrom	[10:03:48] in Java 硬皮 us$76, 找不到軟皮.
2014-01-22 21:50:31	monochrom	[10:06:05] 啊, 有第三者在 amazon 寄賣軟皮, 可以低到 us$26
2014-01-22 21:50:31	suhorng1	[10:06:15] 喔喔
2014-01-22 21:50:31	suhorng1	[10:06:39] java還是比較人 QQ
2014-01-22 21:50:31	suhorng1	[10:07:22] 哈哈, amazon在 in ML 書下方推薦的：「Frequently Bought Together: ..in ML + Compiling with Continuations」
2014-01-22 21:50:31	monochrom	[10:08:00] continuation 簡直是 Appel 看家本領啦
2014-01-22 21:50:31	monochrom	[10:15:06] 幾時有 in javascript 呢, 那就功德完滿了 XD
2014-01-22 21:50:31	monochrom	[10:15:27] 呀, 圓滿!
2014-01-22 21:50:31	monochrom	[10:15:51] (死啦, 中文退步了)
2014-01-22 21:50:31	monochrom	[10:18:04] 有了! "compiler implementation in javascript with continuations" 會是驚世駭作! XD
2014-01-22 21:50:31	suhorng1	[10:18:13] wwwwww
2014-01-22 21:50:31	suhorng1	[10:18:30] 把 continuations 改成 callbacks (誤)
2014-01-22 21:50:31	vivian	[04:56:21] hi i'm new to this
2014-01-22 21:50:31	vivian	[04:56:32] anyone here?
2014-01-22 21:50:31	vivian_	[07:22:44] Eq a 點解
2014-01-22 21:50:31	favonia_	[07:33:28] vivian_: hi
2014-01-22 21:50:31	favonia_	[07:33:39] vivian_: 你來的時間剛好大家都在睡覺
2014-01-22 21:50:31	CindyLinz	[14:05:44] XD
2014-01-22 21:50:31	vivian	[16:33:13] class 在HASKELL 有什麼用？
2014-01-22 21:50:31	CindyLinz	[16:38:45] vivian: 有不同角度的理解法.. 從比較實作的角度看, 是讓不同的 type 可以對應「同樣」的功能
2014-01-22 21:50:31	CindyLinz	[16:39:15] 例如說你的 Eq a, 能被放在 a 這位置的 type, 都可以作 (==) 或 (/=) 的比較
2014-01-22 21:50:31	CindyLinz	[16:40:15] 所以想被放在 a 這位置的 type, 都要準備好它的 (==) 或 (/=) 怎麼作
2014-01-22 21:50:31	vivian	[17:30:05] 有沒有例子
2014-01-22 21:50:31	CindyLinz	[17:40:28] Eq Int ?
2014-01-22 21:50:31	CindyLinz	[17:40:36] Eq Char, Eq [Int]
2014-01-22 21:50:31	CindyLinz	[17:40:59] 你問得好簡短, 猜不太出你想得到怎樣方向的答案 ^^|
2014-01-22 21:50:31	CindyLinz	[17:41:43] > 'a' == 'a'
2014-01-22 21:50:31	lambdabot	[17:41:44]  True
2014-01-22 21:50:31	CindyLinz	[17:41:57] > [3,4,5] == [3,4,5]
2014-01-22 21:50:31	lambdabot	[17:41:58]  True
2014-01-22 21:50:31	CindyLinz	[17:42:07] > [3,4,5] == [3,4,5,6]
2014-01-22 21:50:31	lambdabot	[17:42:08]  False
2014-01-22 21:50:31	monochrom	[00:31:14] 我學 SML 在先, 見識過整數加號叫 "+", 浮點加號要叫 "+.", 分數加號要叫 "+/", 自定型態加號要自定符號... 等等等等. 但! 等號卻有特別優待! 自定型態只要用 "eqtype" 就可獲免費等號. 非常不公平, 非常不對稱.
2014-01-22 21:50:31	monochrom	[00:32:35] 因此一見 Haskell 的 type class 就即刻明, 因為它是我日盼夜盼的.
2014-01-22 21:50:31	CindyLinz	[01:32:50] 不方便沒關係, 不公平比較令人生氣這樣?
2014-01-22 21:50:31	suhorng	[22:39:32] 話說 Reader monad 的 `ap` 跟 `>>=` 好像是同一個東西!? (參數順序不同而已)
2014-01-22 21:50:31	suhorng	[22:39:41] 前者是 (r -> a -> b) -> (r -> a) -> (r -> b)
2014-01-22 21:50:31	suhorng	[22:39:56] 後者是 (r -> a) -> (a -> (r -> b)) -> r -> b
2014-01-22 21:50:31	suhorng	[22:41:57] 雖然知道好像也沒什麼用XD|||
2014-01-22 21:50:31	monochrom	[00:07:26] CindyLinz: 關於 "不公平, 不對稱", 我認為 例外=醜陋.
2014-01-22 21:50:31	monochrom	[00:08:08] 例外是萬惡之源
2014-01-22 21:50:31	monochrom	[00:09:20] @type ap
2014-01-22 21:50:31	lambdabot	[00:09:21] Monad m => m (a -> b) -> m a -> m b
2014-01-22 21:50:31	monochrom	[00:11:25] 呀! Reader 的 ap 跟 >>= 型態一樣, 意義不同呀!
2014-01-22 21:50:31	monochrom	[00:12:24] 呀... 我錯了, 意義都一樣.
2014-01-22 21:50:31	CindyLinz	[00:41:15] monochrom: agree.. QQ # 00:07 < monochrom> CindyLinz: 關於 "不公平, 不對稱", 我認為 例外=醜陋.
2014-01-22 21:50:31	CindyLinz	[00:41:19] # 00:08 < monochrom> 例外是萬惡之源
2014-01-22 21:50:31	hashcat	[00:47:30] 沒有例外的話有點麻煩
2014-01-22 21:50:31	hashcat	[00:48:24] 代表當下一定要處理掉, 不能讓父程序處理
2014-01-22 21:50:31	hashcat	[00:50:09] 職員喬得來的事情, 當然是自己喬掉, 喬不掉就只好問經理, 比自己亂搞好
2014-01-22 21:50:31	CindyLinz	[00:50:54] 這叫缺陷美啊 XD # 有例外
2014-01-22 21:50:31	hashcat	[00:51:06] 擴展別人已經寫好的物件導向程序, 要是沒這種機制的話
2014-01-22 21:50:31	CindyLinz	[00:51:44] 但平常的心態是例外能少則少呀~ 如果把例外當常態... (默)
2014-01-22 21:50:31	hashcat	[00:51:46] 別人寫得父層的程序就沒辦法幫你搞定了
2014-01-22 21:50:31	CindyLinz	[00:52:08] estimate cost 調高一點而已.
2014-01-22 21:50:31	hashcat	[00:52:14] 又想到當兵時候
2014-01-22 21:50:31	hashcat	[00:53:02] 什麼事都問長官確認會被電死, 不懂的事自己亂處理也會被電死
2014-01-22 21:50:31	monochrom	[00:53:38] hashcat: 我是指程式語言給你的規則裏的例外條文, 例如 "所有 operator 都不能 overload, 唯獨 ==, != 可以 overload"
2014-01-22 21:50:31	hashcat	[00:53:39] 規模大的協作, 沒例外貌似不方便
2014-01-22 21:50:31	hashcat	[00:54:18] 哦搞錯了
2014-01-22 21:50:31	monochrom	[00:54:41] 至於 throw 和 catch, 我是舉腳贊成, 堅決擁護的
2014-01-22 21:50:31	monochrom	[00:55:00] http://www.vex.net/~trebla/haskell/exception.xhtml
2014-01-22 21:50:31	hashcat	[00:55:09] 我被長官電之前也覺得例外不重要 (?
2014-01-22 21:50:31	hashcat	[00:56:06] 例外丟多了也被電, 退伍後還是沒搞懂標準在哪
2014-01-22 21:50:31	CindyLinz	[01:20:41] 看 Haskell 的 exception 和 dynamic type, 心中發出一種「哼哼哼」的感覺.. XD
2014-01-22 21:50:31	hashcat_	[19:32:04] 有個 ocaml 寫的prolog變種 abella
2014-01-22 21:50:31	hashcat_	[19:32:35] 用途是定理證明
2014-01-22 21:50:31	hashcat_	[19:32:53] abella-prover.org
2014-01-22 21:50:31	cibs	[20:44:46] 可以問一下 foldl 和 foldr 嗎~
2014-01-22 21:50:31	cibs	[20:45:30] 一般好像是講 foldr 從右開始摺，foldl 從左開始摺?
2014-01-22 21:50:31	cibs	[20:46:19] 可是用 fold 來做 map 的話，這樣做 mapr = foldr (\x acc -> f x : acc ) [] 和 mapl = f = foldl (\acc x -> acc ++ [f x]) []
2014-01-22 21:50:31	cibs	[20:47:46] 面對 mapl odd [1..] 和 mapr odd [1..]，mapl 會卡住，mapr 才是一個一個數字產生 ( 在 ghci ), 如果用 take 10 也是只有 mapr 才可以拿完
2014-01-22 21:50:31	cibs	[20:48:17] 可是 [1..] 不是沒有右端？怎麼想都覺得應該是 mapr 才會卡住才對啊 *bang*
2014-01-22 21:50:31	hashcat_	[21:13:51] fold怎能做map
2014-01-22 21:50:31	hashcat_	[21:14:43] fold會銷毀列表, map保持列表
2014-01-22 21:50:31	hashcat_	[21:16:56] 哦我看到可以,用列表的列表
2014-01-22 21:50:31	hashcat_	[21:25:30] 你把表達式的樹狀圖由上而下展開就有解答了
2014-01-22 21:50:31	hashcat_	[21:26:04] 最上面最先算
2014-01-22 21:50:31	hashcat_	[21:27:45] 惰性計算使得右邊可以被截掉
2014-01-22 21:50:31	hashcat_	[21:28:01] 右子樹
2014-01-22 21:50:31	hashcat_	[21:40:11] cibs 有人在嘛
2014-01-22 21:50:31	hashcat_	[21:41:41] 你的誤解應該是把算術的優先順序,當成惰性計算的順序
2014-01-22 21:50:31	hashcat_	[21:42:56] 我的誤解是忘記列表不是原子型別,可以被建構
2014-01-22 21:50:31	hashcat	[22:47:46] 我打出來好了
2014-01-22 21:50:31	hashcat	[22:48:09] mapr的示意表達式 a:(b:(c:(d: (THUNK)))) 其中a是head最先被計算, 再來b, 依序下去. THUNK的部分是還沒被計算, 可以被惰性計算跺掉的部分
2014-01-22 21:50:31	hashcat	[22:56:46] mapl 的話 ( ... ((([] ++ [f a]) ++ [f b]) ++ [f c]) ++ ... ) 反而變成有打出來的部分 ((([] ++ [f a]) ++ [f b]) ++ [f c]) 才是包含在THUNK的部分, 最開始應該要被計算的地方反而變成...打不完
2014-01-22 21:50:31	CindyLinz	[23:00:33] 嗯嗯, 這邊的「開始」「先後」之類的, 都是打括號的順序
2014-01-22 21:50:31	CindyLinz	[23:01:42] 而計算的順序是, 需要用到哪, 才算到哪... 所以可以從屁股往回看, 從被取走的資料要真的用到的時候才開始一點一點把結果擠出去
2014-01-22 21:50:31	hashcat	[23:03:58] 討論這個意外地咬文嚼字
2014-01-22 21:50:31	CindyLinz	[23:05:36] XD
2014-01-22 21:50:31	monochrom	[07:24:59] 小學中學教 "先乘除, 後加減" 及 "括號先". 這是把 parsing 次序和計算次序混為一談. 當然對大部份人來說沒所謂. 但 Haskell 人不是大部份人. 括號和優先次序其實只講 parsing.
2014-01-22 21:50:31	monochrom	[07:27:12] 又其實, 即使對大部份人來說, 也不是真的要混為一談吧? 0*(3902834+1632892), 你是不是老老實實先計算 3902834+1632892 ?
2014-01-22 21:50:31	monochrom	[07:28:49] 可惜中小學是不可能把 parsing 分開出來教的.
2014-01-22 21:50:31	CindyLinz	[11:33:30] 「Haskell 人不是大部份人」... (痛)
2014-01-22 21:50:31	cibs	[11:40:45] 謝謝 hashcat 和 Cindy 的講解，這樣我懂了 :) 我的確是把計算的順序和取值的順序搞混在一起了。
2014-01-22 21:50:31	cibs	[11:40:56] hashcat 目前不在，上線後再謝一次 XD
2014-01-22 21:50:31	CindyLinz	[11:42:18] XD
2014-01-22 21:50:31	CindyLinz	[11:42:30] 不知道 hashcat 會不會看 log..
2014-01-22 21:50:31	CindyLinz	[11:42:35] (指指 topic)
2014-01-22 21:50:31	cibs	[11:44:18] CindyLinz: 是我的話不會所以我猜大家都不會(誤
2014-01-22 21:50:31	b4283	[11:45:15] 看 log 跟話題還蠻好用的...
2014-01-22 21:50:31	cibs	[11:46:01] 糟了原來只有我不會 XD
2014-01-22 21:50:31	CindyLinz	[11:47:01] 這 channel 一開始就有推這個, 所以不太一樣 ^^|
2014-01-22 21:50:31	CindyLinz	[11:47:23] 因為 channel 剛開的時候, 發現大部分的人都不會掛在 24h channel 上.. 這樣聊東西會聊不起來
2014-01-22 21:50:31	CindyLinz	[11:47:39] 所以就放了 log 讓話題可以延續 XD
2014-01-22 21:50:31	CindyLinz	[11:47:57] 24h 掛在 channel 上... (為什麼會換順序.. orz)
2014-01-22 21:50:31	cibs	[12:38:51] CindyLinz: 大概妳打字是平行輸出的 (誤
2014-01-22 21:50:31	CindyLinz	[13:27:58] wwww
2014-01-22 21:50:31	cibs	[14:03:07] 糟了我又不懂了
2014-01-22 21:50:31	cibs	[14:03:37] foldl (\acc x -> odd x : acc) [] [1..] 那像這樣
2014-01-22 21:50:31	cibs	[14:03:56] 不是也是 a:(b:(c:(d:( THUNK )))) ?
2014-01-22 21:50:31	CindyLinz	[14:05:59] 想想.. XD
2014-01-22 21:50:31	CindyLinz	[14:06:51] 會逆序吧
2014-01-22 21:50:31	CindyLinz	[14:07:19] > foldl (\acc x -> x : acc) [] [1..5]
2014-01-22 21:50:31	lambdabot	[14:07:20]  [5,4,3,2,1]
2014-01-22 21:50:31	cibs	[14:08:01] 喔喔對可是我是說這樣也會跑不完 @@
2014-01-22 21:50:31	CindyLinz	[14:08:18] 應該是會跑不完..
2014-01-22 21:50:31	CindyLinz	[14:08:20] > foldl (\acc x -> x : acc) [] [1..]
2014-01-22 21:50:31	lambdabot	[14:08:23]  mueval-core: Time limit exceeded
2014-01-22 21:50:31	cibs	[14:08:46] 可是如果也是 a:(b:(c:(THUNK))) 的話為什麼不能被截掉? @@
2014-01-22 21:50:31	CindyLinz	[14:08:51] 當 haskell 想要取出這整個 foldl 出來的結果(的開頭)的時候
2014-01-22 21:50:31	CindyLinz	[14:09:09] 從 foldl (\acc x -> x : acc) [] [1..] 開始
2014-01-22 21:50:31	CindyLinz	[14:10:03] (這樣寫好長喔.. XD)
2014-01-22 21:50:31	cibs	[14:10:09] XD
2014-01-22 21:50:31	CindyLinz	[14:11:33] 先列一下 foldl 的 source 好了
2014-01-22 21:50:31	CindyLinz	[14:11:36] @src foldl
2014-01-22 21:50:31	lambdabot	[14:11:36] foldl f z []     = z
2014-01-22 21:50:31	lambdabot	[14:11:36] foldl f z (x:xs) = foldl f (f z x) xs
2014-01-22 21:50:31	CindyLinz	[14:12:07] foldl (\acc x -> x : acc) [] [1..]   ...(會走第二個 branch 因為 [1..] 不是 [])...
2014-01-22 21:50:31	CindyLinz	[14:12:30] = foldl (\acc x -> x : acc) ((\acc x -> x : acc) [] 1) [2..]
2014-01-22 21:50:31	CindyLinz	[14:13:14] = fold (\acc x -> x : acc) ((\acc x -> x : acc) ((\acc x -> x : acc) [] 1) 2) [3..]
2014-01-22 21:50:31	CindyLinz	[14:13:17] = ...
2014-01-22 21:50:31	CindyLinz	[14:13:25] 呃 那個 fold 是 foldl
2014-01-22 21:50:31	cibs	[14:13:32] 嗯嗯我知道
2014-01-22 21:50:31	CindyLinz	[14:13:42] 因為 haskell 一直看到這個函數是一個函數帶頭的東西
2014-01-22 21:50:31	CindyLinz	[14:13:50] 所以就只好繼續把這個函數「解開」
2014-01-22 21:50:31	CindyLinz	[14:14:09] 「解開」也就是把參數「貼」到函數 body 裡面展開
2014-01-22 21:50:31	CindyLinz	[14:15:02] 你看 foldl 的定義那邊 foldl .... = foldl .... 就注定了它一定要有朝一日走到第一個 branch foldl .... = z 的時候才有機會停下來了
2014-01-22 21:50:31	CindyLinz	[14:15:36] 能停的條件是: 遇到一個 data constructor 開頭的東西 (例如說 list 用到的 (:)) 或是參數沒給完整的函數
2014-01-22 21:50:31	cibs	[14:16:27] 感謝，這樣好像清楚多了!!
2014-01-22 21:50:31	cibs	[14:16:32] 原來可以用 @src XD
2014-01-22 21:50:31	CindyLinz	[14:16:38] ^^
2014-01-22 21:50:31	CindyLinz	[14:16:47] 我 @src 也是第一次用... XD
2014-01-22 21:50:31	cibs	[14:17:09] @src foldr
2014-01-22 21:50:31	lambdabot	[14:17:10] foldr f z []     = z
2014-01-22 21:50:31	lambdabot	[14:17:10] foldr f z (x:xs) = f x (foldr f z xs)
2014-01-22 21:50:31	cibs	[14:17:14] 拿來比較一下 XD
2014-01-22 21:50:31	CindyLinz	[14:17:28] foldr 能不能提早停, 就看這個帶頭的 f 給不給面子了..
2014-01-22 21:50:31	CindyLinz	[14:18:11] 如果 f 是 (+).. 那它會逼後半的 foldr 表態.. 所以最終也是非得 foldr .... = z 出現才能停
2014-01-22 21:50:31	CindyLinz	[14:18:46] 嗯嗯, 想想這個「停」也可以說成是: 拿得出能看的成果
2014-01-22 21:50:31	cibs	[14:19:26] 有有，這樣了解多了!
2014-01-22 21:50:31	CindyLinz	[14:19:33] :D
2014-01-22 21:50:31	CindyLinz	[16:34:10] 更好用的 GDB # http://tech.mozilla.com.tw/posts/3826/cgdb-%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84-gdb
2014-01-22 21:50:31	CindyLinz	[16:34:19] 我也想要更好用的 GHCi.. QQ
2014-01-22 21:50:31	CindyLinz	[16:35:06] 不過這功能好像 tmux + vim + ghci extension 寫一寫就好了?
2014-01-22 21:50:31	CindyLinz	[16:35:28] 如果 ghci 裡面也彩色就更好了 :p
2014-01-22 21:50:31	CindyLinz	[16:35:44] 使用 haskell.. 人生是彩色的!
2014-01-22 21:50:31	godfat	[16:46:19] 我之前想做，可是用 ghci 的 api 會造成整個 ghc crash, 查不到文件，source 太多看不懂，求助無門，就放棄了...
2014-01-22 21:50:31	CindyLinz	[16:59:46] 這是什麼啊... 囧 # 可是用 ghci 的 api 會造成整個 ghc crash
2014-01-22 21:50:31	CindyLinz	[17:00:10] 那可不可以從 terminal 端套一層來做, parse ghci 的輸出格式..... wwww
2014-01-22 21:50:31	godfat	[17:00:35] 可以不要嗎... orz
2014-01-22 21:50:31	godfat	[17:00:40] https://github.com/godfat/sandbox/blob/master/haskell/ghci.hs
2014-01-22 21:50:31	godfat	[17:01:17] 上面那段我查 source 弄超久才弄出來的
2014-01-22 21:50:31	godfat	[17:01:18] 結果會 crash... orz
2014-01-22 21:50:31	CindyLinz	[17:02:35] 還是很厲害.. @@"
2014-01-22 21:50:31	godfat	[17:02:59] crash 得很厲害嗎？ XDD 我猜其實那些東西隨便弄都很容易 crash orz...
2014-01-22 21:50:31	CindyLinz	[17:03:12] 他說: the 'impossible' happened
2014-01-22 21:50:31	CindyLinz	[17:03:25] 這就很厲害了啊....
2014-01-22 21:50:31	godfat	[17:03:42] XDDDDDD
2014-01-22 21:50:31	godfat	[17:03:43] 不過我猜用這些跟用 unsafe 大概差不多..
2014-01-22 21:50:31	CindyLinz	[17:04:06] 幫不上忙 ^^|
2014-01-22 21:50:31	godfat	[17:06:24] XD... 真可惜
2014-01-22 21:50:31	favonia	[17:59:22] the impossible happened!
2014-01-22 21:50:31	letoh	[18:17:21] cgdb 沒有更好用啊
2014-01-22 21:50:31	CindyLinz	[18:18:44] 沒用過的都說好(?)
2014-01-22 21:50:31	letoh	[18:18:56] 不過我要感謝它
2014-01-22 21:50:31	letoh	[18:19:02] 讓我遇到 emacs XD
2014-01-22 21:50:31	CindyLinz	[18:19:05] wwww
2014-01-22 21:50:31	letoh	[18:19:22] 就是因為太難用只好改用 emacs
2014-01-22 21:50:31	letoh	[18:21:06] 如果只需要 source listing 的話， xxgdb 也可以辦到，還可以圖形表示資料結構
2014-01-22 21:50:31	letoh	[18:21:36] 「我們在開發過程中，常常會使用 GDB 來找 bug，但是它是純文字介面，使用上還是有些不便」  結果找了 cgdb 也是純文字界面啊
2014-01-22 21:50:31	 *	letoh [18:22:03] 上課前太無聊  到處挑語病XD
2014-01-22 21:50:31	godfat	[18:22:25] XDDDD
2014-01-22 21:50:31	letoh	[18:24:45] 剛剛講錯了  好像不是叫 xxgdb.. 而是叫 ddd。xxgdb 我沒用過
2014-01-22 21:50:31	godfat	[18:25:44] 跟 dd 有關嗎 = =
2014-01-22 21:50:31	letoh	[18:25:54] 沒有關係耶XD
2014-01-22 21:50:31	godfat	[18:26:09] 是說我也不懂為啥叫 dd...
2014-01-22 21:50:31	letoh	[18:26:16] ddd 像這樣 http://cocoadevcentral.com/articles/imgs/ddd.png
2014-01-22 21:50:31	letoh	[18:26:39] 我用來推薦給 vs.net 中毒者的工具
2014-01-22 21:50:31	godfat	[18:26:56] delete! delete! delete! == ddd
2014-01-22 21:50:31	godfat	[18:26:56] 燒燬！燒燬！燒燬！ == 燒燒燒
2014-01-22 21:50:31	letoh	[18:27:02] XD
2014-01-22 21:50:31	letoh	[18:29:17] gdb7 以後搭配 python script 也可以做到類似 ddd 的圖，但對一般使用者來說還是不太方便
2014-01-22 21:50:31	godfat	[18:31:37] 細看了一下圖，寫 c 真可怕呀... :o
2014-01-22 21:50:31	godfat	[18:31:38] 是說 haskell 的 data 應該也可以展開就是了，不知道有沒有這種工具？
2014-01-22 21:50:31	letoh	[18:52:36] 這算是 runtime 展開的，應該要 runtime 可以拿到這些資訊才可以吧... haskell 可以做到嗎?
2014-01-22 21:50:31	godfat	[19:09:19] 既然都有 trace 了... XD
2014-01-22 21:50:31	CindyLinz	[23:13:07] letoh: 我看過一個名字是 vis 開頭的 project # 18:31 < godfat> 是說 haskell 的 data 應該也可以展開就是了，不知道有沒有這種工具？
2014-01-22 21:50:31	CindyLinz	[23:13:25] 不對 結尾是 vis.. XD
2014-01-22 21:50:31	CindyLinz	[23:13:40] http://hackage.haskell.org/package/ghc-vis
2014-01-22 21:50:31	godfat	[23:14:30] 好像不錯 XD
2014-01-22 21:50:31	CindyLinz	[02:43:19] godfat: 有沒有人 Functional Thursday 要來介紹一下 ghc-vis 啊? :D
2014-01-22 21:50:31	hashcat	[22:02:56] 整個頻道都是我登入又登出的訊息 ==
2014-01-22 21:50:31	CindyLinz	[22:14:15] XD
2014-01-22 21:50:31	cataska_	[22:16:17] 可以 ignore 登入登出訊息的...
2014-01-22 21:50:31	hashcat	[22:25:32] 不用android上得andchat了
2014-01-22 21:50:31	CindyLinz	[22:27:27] 3G 換基地台的時候就會斷線重登喔?
2014-01-22 21:50:31	hashcat	[22:28:19] 貌似不是
2014-01-22 21:50:31	hashcat	[22:28:24] 是bug
2014-01-22 21:50:31	hashcat	[22:29:38] Excess Flood不知道是啥意思
2014-01-22 21:50:31	hashcat	[22:31:30] 我設定是每五秒重登, 一直跑到最大次數
2014-01-22 21:50:31	hashcat	[22:31:41] 結果就真的給我跑到最大次數
2014-01-22 21:50:31	CindyLinz	[22:34:15] Flood 看起來就..... XD
2014-01-22 21:50:31	hashcat	[22:36:34] 就什麼
2014-01-22 21:50:31	CindyLinz	[22:37:07] 就很兇殘啊 XD
2014-01-22 21:50:31	CindyLinz	[22:37:24] 像是.. 洗頁也叫 flooding.. XD
2014-01-22 21:50:31	CindyLinz	[22:38:04] 然後我們常用一個叫作 ping 的指令嘛, 平常都是一秒發一個
2014-01-22 21:50:31	CindyLinz	[22:38:19] 有個 -f 選項, 說明寫: Flood ping.
2014-01-22 21:50:31	CindyLinz	[22:38:29] 就是極速狂發... XD
2014-01-22 21:50:31	CindyLinz	[22:38:38] 通常是只有 root 可以用
2014-01-22 21:50:31	hashcat	[22:38:49] irc系統覺得我在洗版就是
2014-01-22 21:50:31	CindyLinz	[22:39:16] "it sets interval to zero and outputs packets as fast as they com back or one hundred times per second, whichever is more"
2014-01-22 21:50:31	CindyLinz	[22:40:03] 然後 excess: a. 過量的, 額外的.. XDD
2014-01-22 21:50:31	hashcat	[22:42:19] 原來就是洗版的意思
2014-01-22 21:50:31	petercommand	[23:12:03] ping的--help沒有-f耶XD
2014-01-22 21:50:31	petercommand	[23:12:58] 有點恐怖...
2014-01-22 21:50:31	CindyLinz	[23:34:26] man ping 看的
2014-01-22 21:50:31	monochrom	[01:53:13] 5秒或者太快. 不如試試20秒. (我就起碼45秒)
2014-01-22 21:50:31	CindyLinz	[15:35:18] 有時候覺得寫 Haskell 程式, 用到有點大, 而且不熟悉的 framework, 像在解 puzzle..
2014-01-22 21:50:31	CindyLinz	[15:35:46] 不用去了解其執行的機制過程, 只要找出看起來是我要的 type
2014-01-22 21:50:31	CindyLinz	[15:35:57] 然後找出路徑讓我可以摸得到它
2014-01-22 21:50:31	CindyLinz	[15:36:03] 就完成了...
2014-01-22 21:50:31	monochrom	[23:53:33] 這是因為Haskell准許framework的作者提供準確有意義的type.
2014-01-22 21:50:31	monochrom	[23:55:13] 沒錯! 我特用"准許"一詞, 因為很多其他語言跟本不准許!
2014-01-22 21:50:31	monochrom	[23:58:24] 我們就像秦朝人聽說21世紀有出版自由和全民普選一樣, 聽完覺得21世紀真是"皇恩浩蕩". 我們仍在等候語言對我們略施小惠, 望治之殷.
2014-01-22 21:50:31	hashcat	[00:00:29] 說到意義就想到prolog
2014-01-22 21:50:31	monochrom	[00:00:52] 我們有想過向 Guido von Rossum 說"不"嗎? 我們有想過可以把 Paul Graham 評為"胡說八道"嗎?
2014-01-22 21:50:31	hashcat	[00:01:03] 全民普選跟出版自由都唬爛的
2014-01-22 21:50:31	monochrom	[00:01:12] 哈哈
2014-01-22 21:50:31	hashcat	[00:01:41] 給一群猴子投票權然後控制一群猴子灌票
2014-01-22 21:50:31	hashcat	[00:02:10] 選舉就是拼猴子數量
2014-01-22 21:50:31	hashcat	[00:03:57] 出版有沒自由是要看出版社臉色, 鈔票, 社會秩序維護法跟刑法, 和主管機關臉色
2014-01-22 21:50:31	hashcat	[00:09:35] 不然早就有人出版槍砲製作方法從零開始
2014-01-22 21:50:31	hashcat	[00:10:43] 投票的理由差不多就是按喇叭按得很大聲, 台灣之子情義相挺之類的, 只差沒人說因為馬英九好帥所以投給他
2014-01-22 21:50:31	hashcat	[00:12:21] 古代是明儒暗法, 現在是明民主暗金權和媒體控制
2014-01-22 21:50:31	hashcat	[00:12:44] 扯遠
2014-01-22 21:50:31	banacorn	[21:26:31] 早上好~
2014-01-22 21:50:31	banacorn	[21:28:36] 為什麼我用 LimeChat 會被 freenode.net 拒絕連線? QQ
2014-01-22 21:50:31	yu_lin	[21:35:03] =w=我都用 webchat，沒遇過這種情況
2014-01-22 21:50:31	***	Playback Complete.
2014-01-22 21:50:50	--	モード #haskell.tw [+cnt]
2014-01-22 21:50:50	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-22 21:50:55	--	irc: サーバから切断
2014-01-26 10:12:46	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-26 10:12:46	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-26 10:12:46	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-26 10:12:46	--	ニックネーム #haskell.tw: [a2n cataska cataska_ cibs CindyLinz cyt93cs darkx drbean gko godfat1 hashcat_ hychen kanru lambdabot letoh logfat_____ miaout17 mno2 monochrom petercommand shik superbil_c]
2014-01-26 10:12:46	--	チャンネル #haskell.tw: 22 ニックネーム (0 オペレータ, 0 発言, 22 通常)
2014-01-26 10:12:46	***	Buffer Playback...
2014-01-26 10:12:46	suhorng	[23:46:22] how?!
2014-01-26 10:12:46	hashcat_	[23:47:29] (Test 5)的時候 Test :: Show a => a -> Test 就縮成 Test :: Int -> Test 了
2014-01-26 10:12:46	hashcat_	[23:47:49] (Test True)同理
2014-01-26 10:12:46	suhorng	[23:48:11] 但是 test 不知道呀 @@
2014-01-26 10:12:46	hashcat_	[23:48:19] @@
2014-01-26 10:12:46	hashcat_	[23:48:32] 他幹嘛知道
2014-01-26 10:12:46	hashcat_	[23:48:56] test知道型別是Test就夠了
2014-01-26 10:12:46	hashcat_	[23:49:12] 知道他吃進的型別不是不確定的東西
2014-01-26 10:12:46	suhorng	[23:49:15] 所以這就是動態才能解決的例子不是嗎?
2014-01-26 10:12:46	hashcat_	[23:49:25] 才不是
2014-01-26 10:12:46	suhorng	[23:49:25] 有個知道怎麼調用 print 的方法
2014-01-26 10:12:46	hashcat_	[23:50:24] 額
2014-01-26 10:12:46	hashcat_	[23:50:45] 他也怎會不知道唉
2014-01-26 10:12:46	suhorng	[23:50:47] 就那個派送不一定是靜態就知道的
2014-01-26 10:12:46	hashcat_	[23:50:57] (Test 5)的時候就解決啦
2014-01-26 10:12:46	hashcat_	[23:51:40] 你看下 test (Test a) = print a
2014-01-26 10:12:46	hashcat_	[23:52:18] 當他帶入的時候 test (Test 5) = print 5
2014-01-26 10:12:46	suhorng	[23:52:46] 嗯
2014-01-26 10:12:46	hashcat_	[23:52:54] print不就知道了
2014-01-26 10:12:46	suhorng	[23:53:42] 沒有這種extension的時候，動態可以不需要保留型別資訊的說XD
2014-01-26 10:12:46	hashcat_	[23:54:01] 不知道你在說啥
2014-01-26 10:12:46	hashcat_	[23:55:03] 要是可以動態知道的話, 我在寫haskell加了堆型別是加辛酸的
2014-01-26 10:12:46	suhorng	[23:59:00] 就是說 我在想說
2014-01-26 10:12:46	suhorng	[23:59:36] 像這種case他需要帶一個類似 virtual table 那類的東西
2014-01-26 10:12:46	hashcat_	[23:59:48]  if ch == '5' then test (Test 5) else test (Test True) 展開  if ch == '5' then print 5 else print True
2014-01-26 10:12:46	suhorng	[23:59:51] 這樣才知道動態時到底會調用什麼東西
2014-01-26 10:12:46	suhorng	[00:00:00] 畢竟有些東西可能靜態分析不出來的
2014-01-26 10:12:46	suhorng	[00:00:58] 沒道理把函數inline阿…
2014-01-26 10:12:46	hashcat_	[00:01:30] 不是說他會inline
2014-01-26 10:12:46	hashcat_	[00:01:37] 是說他
2014-01-26 10:12:46	hashcat_	[00:02:02] 這麼說好了
2014-01-26 10:12:46	hashcat_	[00:02:08] 重來
2014-01-26 10:12:46	hashcat_	[00:03:30] 完全想不出怎講
2014-01-26 10:12:46	hashcat_	[00:03:53] 那只是示意他可以從底部往上推上面該有的型別
2014-01-26 10:12:46	suhorng	[00:04:56] 我是想說實作時該怎麼辦
2014-01-26 10:12:46	suhorng	[00:05:04] 這樣好了，我小改一下例子
2014-01-26 10:12:46	hashcat_	[00:05:13] test :: Test -> IO () 的那個型別 Test 雖然沒有變數在上面, 並不代表他會消滅已經推出來的資訊
2014-01-26 10:12:46	suhorng	[00:05:32] 有辦法傳遞過去嗎@@
2014-01-26 10:12:46	hashcat_	[00:05:41] 傳遞什麼
2014-01-26 10:12:46	suhorng	[00:05:57] 型別資訊
2014-01-26 10:12:46	hashcat_	[00:06:35] 他已經知道型別了, 為啥還要裝成不知道阿
2014-01-26 10:12:46	suhorng	[00:06:43] 他無法知道吧？
2014-01-26 10:12:46	hashcat_	[00:07:17] Test的型別只是用來檢查這種組合, 合不合法
2014-01-26 10:12:46	hashcat_	[00:08:03] 對了對了
2014-01-26 10:12:46	hashcat_	[00:08:08] 我想到怎說了
2014-01-26 10:12:46	suhorng	[00:08:20] 聽不懂..
2014-01-26 10:12:46	hashcat_	[00:08:41] (Test 5) 的時候 Test :: Show a => a -> Test 不是就縮成 Test :: Int -> Test 了
2014-01-26 10:12:46	suhorng	[00:08:55] 是
2014-01-26 10:12:46	hashcat_	[00:09:18] 然後 (Test 5) :: Test
2014-01-26 10:12:46	suhorng	[00:09:33] 是
2014-01-26 10:12:46	hashcat_	[00:10:46] 把整個型別寫滿就是 (Test :: Int -> Test) (5::Int) :: Test
2014-01-26 10:12:46	suhorng	[00:11:13] 對
2014-01-26 10:12:46	hashcat_	[00:11:27] 這樣不就知道了
2014-01-26 10:12:46	hashcat_	[00:11:51] 對了對了對了
2014-01-26 10:12:46	hashcat_	[00:11:55] 更好的講法
2014-01-26 10:12:46	hashcat_	[00:12:01] Test 5是偷懶寫法
2014-01-26 10:12:46	hashcat_	[00:12:14] 其實他會換成 (Test :: Int -> Test) (5::Int) :: Test
2014-01-26 10:12:46	suhorng	[00:12:33] 可是要解決 test 用哪一個多載的 print, 不是嗎?
2014-01-26 10:12:46	hashcat_	[00:12:49] 你把他當成那樣就好解識了
2014-01-26 10:12:46	hashcat_	[00:13:58] 再來(test :: Test -> IO ()) ((Test :: Int -> Test) (5::Int))
2014-01-26 10:12:46	hashcat_	[00:14:59] 展開建構子拿掉就是 (print::Show a => a -> IO () )  (5::Int)
2014-01-26 10:12:46	hashcat_	[00:15:21] a就推論出來了
2014-01-26 10:12:46	suhorng	[00:15:30] 靜態的時候展開...?
2014-01-26 10:12:46	hashcat_	[00:15:38] 嗯嗯
2014-01-26 10:12:46	hashcat_	[00:15:50] 5從頭到尾都存在都沒消失
2014-01-26 10:12:46	suhorng	[00:15:55] 這樣不是就得inline才能知道@@?
2014-01-26 10:12:46	hashcat_	[00:16:12] 型別沒有因為躲在Test就死掉
2014-01-26 10:12:46	hashcat_	[00:16:50] 突然想講你把他當inline算了
2014-01-26 10:12:46	suhorng	[00:17:11] 可是實務上沒辦法所有的東西都 inline 推論吧
2014-01-26 10:12:46	hashcat_	[00:17:22] 我亂講的
2014-01-26 10:12:46	hashcat_	[00:17:27] 不是inline啦
2014-01-26 10:12:46	hashcat_	[00:17:41] 是haskell本來就會展開阿
2014-01-26 10:12:46	hashcat_	[00:18:42] 換種講法好了
2014-01-26 10:12:46	CindyLinz	[00:18:44] 超展開... (亂入)
2014-01-26 10:12:46	godfat	[00:18:51] 這個... 做 type checking 時不是就都知道了嗎？這跟 runtime 要不要 inline 應該是兩件事 @@
2014-01-26 10:12:46	suhorng	[00:19:00] 不是執行期才展開嗎QQ？
2014-01-26 10:12:46	CindyLinz	[00:19:02] (我來從頭看... orz)
2014-01-26 10:12:46	suhorng	[00:19:08] 是想說那個type information到底怎麼過去的？
2014-01-26 10:12:46	suhorng	[00:20:52] 小更新code http://ideone.com/9kgrGB
2014-01-26 10:12:46	hashcat_	[00:21:57] (test :: Test -> IO ()) ((Test :: Int -> Test) (5::Int)) 推推推 ((print :: Show a => a -> IO ()) . (Test的解構子 ::  Show a => a -> Test))  ((Test :: Int -> Test) (5::Int))
2014-01-26 10:12:46	hashcat_	[00:22:32] 看到沒
2014-01-26 10:12:46	hashcat_	[00:22:34] 展開了
2014-01-26 10:12:46	hashcat_	[00:22:55] 好像寫錯了 = ='
2014-01-26 10:12:46	hashcat_	[00:23:37] ((print :: Show a => a -> IO ()) . (Test的解構子 ::  Show a => Test -> a))  ((Test :: Int -> Test) (5::Int))
2014-01-26 10:12:46	hashcat_	[00:23:49] Test -> a 寫反
2014-01-26 10:12:46	CindyLinz	[00:24:04] suhorng: 你是不是想舉這樣的例子... data GenList = GNil | GCons (forall a. Show a => a) GenList
2014-01-26 10:12:46	godfat	[00:24:10] compile 時就知道 testTy 'b' = Test True
2014-01-26 10:12:46	godfat	[00:24:11] 然後 runtime 決定用哪個 branch, 如果知道是 'b', 則用 Test True
2014-01-26 10:12:46	godfat	[00:24:11] 這邊 runtime 才知道的是哪個 branch, 但是 compile 時就已經知道 type 了
2014-01-26 10:12:46	hashcat_	[00:24:13] 其實每個建構子都隱含解構子
2014-01-26 10:12:46	suhorng	[00:24:24] 這問題應該說編譯器怎麼實作typeclass
2014-01-26 10:12:46	CindyLinz	[00:24:39] 要開 RankNTypes extension 才能這樣寫..
2014-01-26 10:12:46	suhorng	[00:24:41] 所以總要某個地方帶 branch 資訊？
2014-01-26 10:12:46	suhorng	[00:24:56] CindyLinz: 用 GADTs 可以把那個 forall 藏起來
2014-01-26 10:12:46	CindyLinz	[00:25:12] 嗯
2014-01-26 10:12:46	hashcat_	[00:25:32]  ((print :: Show a => a -> IO ()) . (Test的解構子 ::  Show a => Test -> a))  ((Test :: Int -> Test) (5::Int)) 這就推得出print的型別啦
2014-01-26 10:12:46	suhorng	[00:25:36] （我一直搞不清楚 RankNTypes, ExistentialQuantification 這兩個extension哪裡有差QQ）
2014-01-26 10:12:46	CindyLinz	[00:25:59] runtime 的時候每個 element 都要帶著它怎麼 show 的函數走... 不過 runtime 應該還是不知道它是什麼 type..
2014-01-26 10:12:46	suhorng	[00:26:12] hashcat_: 動態時拿到的有可能是 ((Test :: Int -> Test) (5::Int)) 也有可能是 ((Test :: String -> Test) ("abc"::String)) 呀
2014-01-26 10:12:46	suhorng	[00:26:24] 就有點像 virtual table ...
2014-01-26 10:12:46	hashcat_	[00:26:39] 我都把解構子補進去了..
2014-01-26 10:12:46	CindyLinz	[00:26:43] suhorng: 還有 Rank2Types.. XD
2014-01-26 10:12:46	suhorng	[00:26:49] 因為執行時期應該沒留下型別資訊吧..？ 這某種程度就像留下型別資訊..
2014-01-26 10:12:46	CindyLinz	[00:26:51] 我知道它是 RankNTypes 的子集 :D
2014-01-26 10:12:46	hashcat_	[00:26:58] 用怪招說明他可以推論出來
2014-01-26 10:12:46	suhorng	[00:27:09] Rank2Types感覺有點差別欸
2014-01-26 10:12:46	hashcat_	[00:27:10] 也不算怪招啦
2014-01-26 10:12:46	suhorng	[00:27:21] 不知道是不是在型別推論的地方有差
2014-01-26 10:12:46	hashcat_	[00:27:25] pattern matching不就隱含解構子的存在了
2014-01-26 10:12:46	CindyLinz	[00:27:42] Rank2Type 指的是 forall 可以寫在 -> 的左邊..
2014-01-26 10:12:46	suhorng	[00:27:42] 有很多種不同的解構子？
2014-01-26 10:12:46	hashcat_	[00:27:55] 從別的方面講Haskell既然說他是statically type就不會騙人吧
2014-01-26 10:12:46	hashcat_	[00:28:11] 執行時期是根本沒型別資訊
2014-01-26 10:12:46	hashcat_	[00:28:19] 不像C++還是有保留
2014-01-26 10:12:46	CindyLinz	[00:28:20] Rank3Type (應該沒這 extension, 想 >2 全都用 N types 了吧?)  就是 -> 的左邊如果是個 ( .... -> .... ), 這個裡面的 -> 的左邊可以有 forall.. XD
2014-01-26 10:12:46	suhorng	[00:28:23] CindyLinz: 是想說 rank 2 types 的型別推論是 decidable， > 2 不是 decidable
2014-01-26 10:12:46	suhorng	[00:28:40] RankNTypes 需要寫type signature 這樣 @口@
2014-01-26 10:12:46	CindyLinz	[00:28:47] 反正我寫不出無法 decide 的 type...ww
2014-01-26 10:12:46	CindyLinz	[00:29:07] DFS 50 層內一定解得出來 (逃)
2014-01-26 10:12:46	hashcat_	[00:29:20] statically type是說他沒法斷定型別就不會讓你編譯過
2014-01-26 10:12:46	hashcat_	[00:29:40] 算了最近對haskell沒興趣
2014-01-26 10:12:46	suhorng	[00:29:40] 就..型別是 Test，然後Test有 Class a =>，所以可以編譯過阿XD
2014-01-26 10:12:46	hashcat_	[00:30:11] prolog.tw
2014-01-26 10:12:46	hashcat_	[00:30:24] 成立成立
2014-01-26 10:12:46	hashcat_	[00:31:13] 突然一陣靜默
2014-01-26 10:12:46	suhorng	[00:31:14] DFS 50層 XDDD
2014-01-26 10:12:46	suhorng	[00:31:22] UndecidableInstances！
2014-01-26 10:12:46	CindyLinz	[00:31:53] suhorng: 我覺得差別是... (不考慮 Typeable 和 Dyn 的話) haskell 裡面一般是無法做 C++ 的 typeof(...) 或 x instanceof y 或是 parent class 往 childe class 的轉型
2014-01-26 10:12:46	hashcat_	[00:32:03] 這麼喜歡動態就看prolog吧
2014-01-26 10:12:46	CindyLinz	[00:32:52] 不考慮 Typeable / Dyn 是因為, 我覺得它是 programmer 額外加上的 note. 如果 programmer 惡意亂指定 TyCon, ghc 也會放行
2014-01-26 10:12:46	suhorng	[00:33:02] 會爆炸XD
2014-01-26 10:12:46	CindyLinz	[00:33:16] 會爆嗎? 就會轉出神妙的東西吧? XD
2014-01-26 10:12:46	suhorng	[00:33:32] 可以讓他segmentation fault!
2014-01-26 10:12:46	CindyLinz	[00:34:08] 呃... 能嗎? @_@"
2014-01-26 10:12:46	CindyLinz	[00:34:23] 我以為只是你存了一個 Int 進去, 取了一個 Char 出來...
2014-01-26 10:12:46	CindyLinz	[00:34:44] 或是你惡搞這個 http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Dynamic.html 裡面的 fromDyn 和 fromDynamic
2014-01-26 10:12:46	CindyLinz	[00:34:54] 做出一個希格斯粒子 type... ww
2014-01-26 10:12:46	CindyLinz	[00:35:07] 你想要什 type 元素, 我都能生給你!
2014-01-26 10:12:46	hashcat_	[00:35:38] 原來討論的什麼怎樣了
2014-01-26 10:12:46	CindyLinz	[00:35:57] 耶不行... Dynamic 裡的格式不是我們自訂.. 是被 Typeable 定死了
2014-01-26 10:12:46	CindyLinz	[00:36:00] 那只能選一種 XD
2014-01-26 10:12:46	suhorng	[00:36:11] 神秘
2014-01-26 10:12:46	CindyLinz	[00:36:13] 但應該可以把 Int 總是轉成 Char... XD
2014-01-26 10:12:46	suhorng	[00:36:20] Typeable我記得有讓他壞掉的例子XD
2014-01-26 10:12:46	monochrom	[00:37:01] 爆炸也是神妙的東西啊! XD
2014-01-26 10:12:46	CindyLinz	[00:37:03] 用 TyCon 硬寫一個不存在的 type 應該就死了吧?
2014-01-26 10:12:46	CindyLinz	[00:37:14] 我是還沒用過... ._.
2014-01-26 10:12:46	suhorng	[00:37:31] http://okmij.org/ftp/Haskell/types.html#unsound-typeable
2014-01-26 10:12:46	CindyLinz	[00:38:38] 好切回來一下, 我覺得 Dyn 和 Typeable 不算是 Haskell 語言本身的東西, 是 lib 這樣, 所以和 C++ 的情況不同 ^^|
2014-01-26 10:12:46	CindyLinz	[00:39:19] 但不代表 statically 就知道每一個 rigid type, 有可能只確定到一定是某個 class 的 instance 而已
2014-01-26 10:12:46	suhorng	[00:39:47] 我就在想實作怎麼實作; 假設Haskell98的話
2014-01-26 10:12:46	hashcat	[00:40:01] 睡覺
2014-01-26 10:12:46	monochrom	[00:40:04] 自行寫一個 "newtype I = I Int; newtype C = C Char", 然後為它們寫些壞的 Typeable 碼, 應該就可以透過 I 和 C 互換來把 Int 和 Char 互換.
2014-01-26 10:12:46	CindyLinz	[00:40:05] 晚安 XD
2014-01-26 10:12:46	suhorng	[00:40:06] 每次每個多型函數用的時候我們都知道他被instantiate成什麼type
2014-01-26 10:12:46	suhorng	[00:40:15] XD
2014-01-26 10:12:46	CindyLinz	[00:40:24] 壞的 Typeable 碼... XD
2014-01-26 10:12:46	suhorng	[00:40:30] 所以可以在instantiate的時候直接複製一份code
2014-01-26 10:12:46	suhorng	[00:40:37] 像template那樣
2014-01-26 10:12:46	CindyLinz	[00:40:52] 嗯
2014-01-26 10:12:46	suhorng	[00:41:06] 感覺typeclass也是一樣可以靜態知道可能用哪個多載的函數
2014-01-26 10:12:46	CindyLinz	[00:41:15] 是.... 哪些?
2014-01-26 10:12:46	CindyLinz	[00:41:28] 而不能明確縮小到一個吧 @@"
2014-01-26 10:12:46	CindyLinz	[00:41:53] 如果要能實作 showGenList :: GenList -> String 的話..
2014-01-26 10:12:46	suhorng	[00:42:03] 限定Haskell98 XD
2014-01-26 10:12:46	CindyLinz	[00:42:07] 喔喔
2014-01-26 10:12:46	suhorng	[00:44:06] 如果複製一份code的話這樣不需要實作多型表示(或紀錄 runtime type information)之類..
2014-01-26 10:12:46	CindyLinz	[00:44:35] 可是 Haskell98 好卡欸... ww
2014-01-26 10:12:46	suhorng	[00:44:55] 但是現在這種typeclass感覺就不行了吧, 咦定要在constructor裡面帶一些東西 (像哪個branch之類, 或類似 virtual table 那種東西...)
2014-01-26 10:12:46	suhorng	[00:44:56] XD
2014-01-26 10:12:46	CindyLinz	[00:45:45] 沒有 FlexibleInstances 和 ScopedTypeVariable 我活不下去... QQ
2014-01-26 10:12:46	suhorng	[00:46:29] 說到 scoped type variables 我在想 idris 是怎麼做的 |||
2014-01-26 10:12:46	CindyLinz	[00:46:33] virtual table 應該是把 type 帶進去....
2014-01-26 10:12:46	suhorng	[00:46:41] 嗯
2014-01-26 10:12:46	CindyLinz	[00:46:47] 不過 haskell 可以不用帶 type, 而是把要用到的 member function 帶進去
2014-01-26 10:12:46	CindyLinz	[00:47:23] 而且 haskell 的 class 可以是兩三個以上的 type 交互作用... 好吧, 還是可以用 tuple 的方式一次帶 N 個 type... ww
2014-01-26 10:12:46	suhorng	[00:47:24] 詳細一下？是怎樣XD
2014-01-26 10:12:46	CindyLinz	[00:47:55] 剛剛我講的那個 Show 就是把 show 帶進去呀... Int 的 element 就帶個 Show Int 的 show, Char 的 element 就帶 Show Char 的 show
2014-01-26 10:12:46	CindyLinz	[00:48:29] 然後 showGenList 在跑的時候就是逐個拿 show 出來用.. 而它背後是什麼 type, 可以搞不清楚, 用就對了
2014-01-26 10:12:46	suhorng	[00:48:41] 類似對於每次用的時候
2014-01-26 10:12:46	suhorng	[00:48:46] *用constructor
2014-01-26 10:12:46	suhorng	[00:49:01] 給個資料結構, 對每個instance儲存那個函式？
2014-01-26 10:12:46	CindyLinz	[00:49:15] 嗯, 函數指標之類的東西
2014-01-26 10:12:46	CindyLinz	[00:49:40] 好吧, 其實是會存到一個指向整個 Show Int 的表格
2014-01-26 10:12:46	suhorng	[00:49:56] 好吧, 這個可以靜態弄好, 不用動態建立 XD
2014-01-26 10:12:46	CindyLinz	[00:49:58] 也是 table 等級的東西.... 拆散可能效率也沒比較好
2014-01-26 10:12:46	suhorng	[00:50:19] 喔...突然想到我剛剛那個例子不知道能不能用newtype
2014-01-26 10:12:46	CindyLinz	[00:50:36] 所有的 Show a.. Show Int, Show Char, Show Double 應該都會是長度一樣的 struct
2014-01-26 10:12:46	suhorng	[00:50:39] 嗯
2014-01-26 10:12:46	CindyLinz	[00:51:06] Java 的話就是 parent 短, child 長, 但 prefix 一樣; C++ 應該要有一個很動態的查表吧?
2014-01-26 10:12:46	CindyLinz	[00:51:26] 因為 C++ 有多重繼承, 好麻煩 XD
2014-01-26 10:12:46	suhorng	[00:51:35] XDD
2014-01-26 10:12:46	suhorng	[00:51:42] 沒會過C++的作法
2014-01-26 10:12:46	CindyLinz	[00:51:47] ._.
2014-01-26 10:12:46	CindyLinz	[00:52:17] 哪個例子啊? XD
2014-01-26 10:12:46	suhorng	[00:52:31] data Test where...那個
2014-01-26 10:12:46	suhorng	[00:52:42] 因為想到newtype沒有執行時期constructor
2014-01-26 10:12:46	CindyLinz	[00:53:44] 唔.. 在定義 data 的地方放 class constraint 不是要被 deprecate 了嗎? XD
2014-01-26 10:12:46	suhorng	[00:53:47] 喔 Rank2Types 跟我想的不一樣...
2014-01-26 10:12:46	suhorng	[00:53:54] deprecate？
2014-01-26 10:12:46	suhorng	[00:54:04] 真假=口=
2014-01-26 10:12:46	CindyLinz	[00:54:06] 被說是個設計壞了的功能..
2014-01-26 10:12:46	suhorng	[00:54:16] 因為我還在用 GHC 7.4...
2014-01-26 10:12:46	CindyLinz	[00:54:33] 因為在定義這個 type 用的函數的地方, 再加 constraint 就好了
2014-01-26 10:12:46	suhorng	[00:54:42] 我還以為 GADT 可以隨便放 type signature XDDD 原來不行噢...
2014-01-26 10:12:46	CindyLinz	[00:54:42] 而就算 data 加了... 函數的地方還是要再加
2014-01-26 10:12:46	CindyLinz	[00:54:48] 喔不不, 我不是說 GADT
2014-01-26 10:12:46	suhorng	[00:54:51] !? 這裡不用阿XD
2014-01-26 10:12:46	CindyLinz	[00:55:39] 你這個不就是 data Test = Constructor a 嗎?
2014-01-26 10:12:46	CindyLinz	[00:55:49] 啊, 左邊沒 a.. 那可以放 XD
2014-01-26 10:12:46	suhorng	[00:55:50] 是說這個 http://ideone.com/9kgrGB
2014-01-26 10:12:46	suhorng	[00:55:57] 跟 GenShow 同個東西
2014-01-26 10:12:46	CindyLinz	[00:56:04] 是 forall 型的..
2014-01-26 10:12:46	CindyLinz	[00:56:35] 如果是 Test :: Class a => a -> Test a 應該就會被罵吧?
2014-01-26 10:12:46	suhorng	[00:56:53] XDD
2014-01-26 10:12:46	CindyLinz	[00:57:17] 不過因為是 Test :: Class a => a -> Test 就還好
2014-01-26 10:12:46	CindyLinz	[00:58:52] suhorng: 欸.. newtype 的話你這邊 a 得是個具體的 type 吧?
2014-01-26 10:12:46	CindyLinz	[00:59:07] 好像不用.. orz
2014-01-26 10:12:46	suhorng	[00:59:20] !?
2014-01-26 10:12:46	CindyLinz	[00:59:33] 搞錯
2014-01-26 10:12:46	suhorng	[00:59:43] 剛剛用newtype結果能成功, 不知道怎麼實作的
2014-01-26 10:12:46	suhorng	[00:59:56] 好奇怪, 我原本以為 Rank2Types 不用手動寫型別標記, 結果要
2014-01-26 10:12:46	CindyLinz	[01:02:00] 我以為開那個就是為了寫 forall... 你開了又不想寫是什麼打算啊? @@"
2014-01-26 10:12:46	suhorng	[01:02:47] 原本想讓他 type inference 有 rank 2 type
2014-01-26 10:12:46	CindyLinz	[01:02:56] 喔
2014-01-26 10:12:46	suhorng	[01:02:59] 不過我肯定搞錯了東西...
2014-01-26 10:12:46	CindyLinz	[01:03:14] 嗯, 我看以前你貼的這篇... http://www.vidarholen.net/contents/junk/catbag.html
2014-01-26 10:12:46	CindyLinz	[01:03:30] 如果把 type sig 擦掉, 應該還是可以用.. 可是就沒有他想要的效果了?
2014-01-26 10:12:46	CindyLinz	[01:04:28] 也不對 不是看這篇
2014-01-26 10:12:46	CindyLinz	[01:04:34] 我是去看 ST monad 的 source..
2014-01-26 10:12:46	CindyLinz	[01:04:49] 他 data 左邊的 s, 在右邊也有出現, 就直接當 state
2014-01-26 10:12:46	CindyLinz	[01:05:01] 不過它有在一些地方加 forall..
2014-01-26 10:12:46	suhorng	[01:05:03] 唔
2014-01-26 10:12:46	suhorng	[01:05:05] 嗯....
2014-01-26 10:12:46	CindyLinz	[01:05:14] 如果都沒加的話, 這個 s 應該就可以被摸出去了吧?
2014-01-26 10:12:46	suhorng	[01:05:30] 這樣好像 Rank2Types 是 RankNTypes 的子集沒錯
2014-01-26 10:12:46	suhorng	[01:05:38] 原本以為對型別標記的要求不同
2014-01-26 10:12:46	CindyLinz	[01:05:46] 喔~
2014-01-26 10:12:46	CindyLinz	[01:07:46] 欸我看你給的那個 package Effects
2014-01-26 10:12:46	suhorng	[01:07:54] 嘎嘎
2014-01-26 10:12:46	CindyLinz	[01:08:00] https://hackage.haskell.org/package/effects
2014-01-26 10:12:46	CindyLinz	[01:08:33] 我是這樣理解: 它用起來就像.... 如果用 monad trans 的時候, 都是用 liftIO, liftReader, liftState.. 而不用 lift
2014-01-26 10:12:46	CindyLinz	[01:08:51] 然後它提供兩個額外的工具...
2014-01-26 10:12:46	CindyLinz	[01:09:47] 一個是那個 Effect proxy, 當這一群..... monad trans 疊裡面有出現同一種 monad trans 的時候, 還能夠分得出來 (不然純用 monad trans 的話, 同一類型的只能用到其中一個)
2014-01-26 10:12:46	suhorng	[01:09:52] 額外的工具？
2014-01-26 10:12:46	CindyLinz	[01:10:24] 另一個.. 我猜測應該有, 但還不清楚.. 就是直接用 monad trans, 想隨便用 liftIO, liftReader 這些東西的話
2014-01-26 10:12:46	suhorng	[01:10:29] 他的作法感覺完全跟 monad transformer 不同（用起來不知道|||），從頭到尾只有一個 monad...
2014-01-26 10:12:46	suhorng	[01:10:43] 嗯嗯
2014-01-26 10:12:46	CindyLinz	[01:10:56] 我們要為所有用到的 MonadTrans 們 (假設有 N 種), 去定 N*(N-1) 種 instance
2014-01-26 10:12:46	suhorng	[01:11:12] 對..
2014-01-26 10:12:46	CindyLinz	[01:11:36] 就是 instance ReaderMonad m => ReaderMonad (WriterT w m)
2014-01-26 10:12:46	monochrom	[01:11:56] ST 和 IO 的 所謂 "s -> (# a, s #)", 那個 s 請別當真. 它只是用來哄 optimizer "請不要顛倒次序"
2014-01-26 10:12:46	suhorng	[01:13:06] XD...
2014-01-26 10:12:46	suhorng	[01:13:33] 然後最後其實沒有那個 s 存在 XD?
2014-01-26 10:12:46	CindyLinz	[01:13:52] 這個 N*(N-1) 的麻煩, 如果可以容忍 OverlappingInstances extension 的話, 可以變成 N.. 只是我自己對 OverlappingInstances 有一點怕怕的, 因為它會選到誰, 雖然是明確定義的, 但是從程式碼裡面去讀, 不太明顯 @@"
2014-01-26 10:12:46	CindyLinz	[01:14:30] monochrom: 好 XD
2014-01-26 10:12:46	CindyLinz	[01:14:54] suhorng: 作法還沒讀.. 是從使用的 example.hs 感受的 :p
2014-01-26 10:12:46	suhorng	[01:15:08] 他那個明確定義感覺很模糊阿XDDD
2014-01-26 10:12:46	suhorng	[01:15:14] 之前說的 scoped type variable https://gist.github.com/suhorng/8601726
2014-01-26 10:12:46	suhorng	[01:15:29] 因為 variable 本身就有 scope，所以就有 scoped type variable...各種微妙
2014-01-26 10:12:46	CindyLinz	[01:15:35] 有比 monad is just a monoid... 模糊嗎?
2014-01-26 10:12:46	suhorng	[01:15:56] 這lol monad is just a monoid 感覺可以不模糊
2014-01-26 10:12:46	CindyLinz	[01:16:19] 那個 {b} 是什麼啊?
2014-01-26 10:12:46	suhorng	[01:16:21] // ap1 會 compile error
2014-01-26 10:12:46	suhorng	[01:16:34] implicit argument
2014-01-26 10:12:46	CindyLinz	[01:16:39] 噢 .idr XD
2014-01-26 10:12:46	CindyLinz	[01:16:48] 我應該讀作 forall b. 對吧? XD
2014-01-26 10:12:46	suhorng	[01:17:01] ap1 : (a -> b) -> a -> b 其實會變 ap1 : {a : Type} -> {b : Type} -> ...
2014-01-26 10:12:46	suhorng	[01:17:02] XD
2014-01-26 10:12:46	monochrom	[01:17:03] 即是說, 當你寫 "\s0 -> case getinput s0 of (x, s1) -> case output s1 (x+1) of (_, s2) -> output s2 "bye"", 因著 s0, s1, s2 之間的 data dependency, 所以 optimizer 及 code generator 迫著服從你給的順序, 不能像 pure functional code 那樣"次序沒所謂"
2014-01-26 10:12:46	CindyLinz	[01:17:05] 不對 是寫在下面 orz
2014-01-26 10:12:46	monochrom	[01:17:33] 對的, 最後那個 s 不存在.
2014-01-26 10:12:46	suhorng	[01:17:36] monochrom: 好像有點感覺
2014-01-26 10:12:46	CindyLinz	[01:18:25] 那 suhorng 貼的那個 Bag Cat 就沒這效果了? 它只有防止 Cat 被外面摸到
2014-01-26 10:12:46	suhorng	[01:19:22] 驚
2014-01-26 10:12:46	CindyLinz	[01:21:03] suhorng: 我一次遇到 scoped type variable 是在一個 sig 有 forall 的函數裡面定義內用的 helper, 想這個 helper 的 sig, 而這個 sig 裡面用到那個被 forall 的 type
2014-01-26 10:12:46	CindyLinz	[01:21:17] 沒開這個 ext 的話, compiler 說這兩個 type 是不同個..
2014-01-26 10:12:46	suhorng	[01:21:19] 有遇過!
2014-01-26 10:12:46	suhorng	[01:21:21] 真的 XDDD
2014-01-26 10:12:46	suhorng	[01:21:46] 不過 idris 直接當成一個參數把 type 拿近來..
2014-01-26 10:12:46	CindyLinz	[01:23:20] 預設打開了..
2014-01-26 10:12:46	CindyLinz	[01:23:29] 我覺得它是該開啊... QQ
2014-01-26 10:12:46	suhorng	[01:23:32] 不用打開喔lol
2014-01-26 10:12:46	suhorng	[01:23:34] 不是打開
2014-01-26 10:12:46	suhorng	[01:23:39] 而是像那個 {a}
2014-01-26 10:12:46	CindyLinz	[01:23:44] 只是那如果真要用兩個不一樣的 type, 裡面就要換名字了...
2014-01-26 10:12:46	suhorng	[01:23:57] 普通的variable scope，不是另一個不同的 "type" variable
2014-01-26 10:12:46	CindyLinz	[01:24:41] 就.. 裡面用到同一個名字的時候, 就是在指稱它了
2014-01-26 10:12:46	suhorng	[01:25:15] 就是普通的 variable scoping rule
2014-01-26 10:12:46	suhorng	[01:25:25] 跟 f a = ... where ... = ... a ... 一樣
2014-01-26 10:12:46	CindyLinz	[01:25:34] 你第二行的 {b} 和第一行的 b 是同一個東西嗎?
2014-01-26 10:12:46	suhorng	[01:25:35] 只不過現在這個 a 不一定存值, 也可以是type XD
2014-01-26 10:12:46	suhorng	[01:25:47] 那個code我發現我打錯字..改成 {a} 了
2014-01-26 10:12:46	CindyLinz	[01:26:22] 我是說 ap1 {b} 和 ap1 : ( a -> b ) ...
2014-01-26 10:12:46	suhorng	[01:26:31] 對
2014-01-26 10:12:46	suhorng	[01:26:34] 是同一個東西
2014-01-26 10:12:46	CindyLinz	[01:27:01] 然後因為第二行有 {b}, 所以第三行的 apply 可以用 b 來描述 type?
2014-01-26 10:12:46	suhorng	[01:28:00] 對
2014-01-26 10:12:46	CindyLinz	[01:28:25] 如果第二行沒有 {b}, 那第三行的 b 會被當 free variable (forall) 的意思?
2014-01-26 10:12:46	suhorng	[01:28:35] 對 會變新的
2014-01-26 10:12:46	CindyLinz	[01:28:55] 這樣好像比較好..
2014-01-26 10:12:46	CindyLinz	[01:29:20] ghc ext 那樣是要開就整個 module 全開了.. 所有的 forall 都變成 {x} 宣告
2014-01-26 10:12:46	suhorng	[01:29:38] XDDD
2014-01-26 10:12:46	CindyLinz	[01:30:05] 雖然實際上困擾也沒很大? 反正 a 或 b... 通常也都是沒意義的名字, 換了不會心痛 ww
2014-01-26 10:12:46	suhorng	[01:30:34] 是沒錯
2014-01-26 10:12:46	suhorng	[01:30:44] 但是很有趣w 當type變成可以拿來亂弄以後
2014-01-26 10:12:46	suhorng	[01:30:49] 很多東西可以消失不見
2014-01-26 10:12:46	CindyLinz	[01:31:44] 你是說很多 extension 就沒有存在的必要?
2014-01-26 10:12:46	suhorng	[01:32:41] 好像也不是這樣說 T_T
2014-01-26 10:12:46	suhorng	[01:32:58] 感覺..有些事情有統一的處理方法
2014-01-26 10:12:46	CindyLinz	[01:33:09] 我只是想先聽懂你說「消失」指的是哪方面
2014-01-26 10:12:46	CindyLinz	[01:33:22] 畢竟... Agda 裡面要打的字是變多了, 空格也變多了... XD
2014-01-26 10:12:46	suhorng	[01:33:25] e.g. ScopedTypeVariable
2014-01-26 10:12:46	CindyLinz	[01:33:36] 少一個 extension 沒錯.. XD
2014-01-26 10:12:46	CindyLinz	[01:33:53] 我覺得這一個不算.. XD
2014-01-26 10:12:46	suhorng	[01:33:58] 不少用 typeclass 做的事情也不再需要, 像是 type level list
2014-01-26 10:12:46	CindyLinz	[01:34:19] Haskell 弄成每一個 type var 前面加一下 scoped a. 也行啊? XD
2014-01-26 10:12:46	suhorng	[01:34:49] forall a. 那樣綁起來w？
2014-01-26 10:12:46	CindyLinz	[01:35:29] 對啊多一種修飾字這樣... 畢竟 forall 和 scoped 還是講不同的事 @@"
2014-01-26 10:12:46	suhorng	[01:35:44] 嗯嗯XD
2014-01-26 10:12:46	CindyLinz	[01:36:28] 想到 Agda... 再對照你的心得... 譯: 只要把靈魂賣給惡魔, 就不用學一堆怎麼看天氣和開船的技能了...
2014-01-26 10:12:46	CindyLinz	[01:36:39] (ref: 幽靈船)
2014-01-26 10:12:46	suhorng	[01:36:41] 什麼wwwwwwwww
2014-01-26 10:12:46	suhorng	[01:37:00] 惡魔是dependently typed之類嗎XD
2014-01-26 10:12:46	CindyLinz	[01:37:04] 對啊..
2014-01-26 10:12:46	suhorng	[01:37:11] 我是還不能體會他的好處
2014-01-26 10:12:46	suhorng	[01:37:16] 不過他很好玩XD
2014-01-26 10:12:46	CindyLinz	[01:38:05] 嗯嗯
2014-01-26 10:12:46	CindyLinz	[01:42:17] 然後更之前你丟過一篇也是講 Effect 的 paper, 嗯, 我只有看很前面... 覺得它好像比這個 Effects packet 來得動態
2014-01-26 10:12:46	CindyLinz	[01:42:36] 而且, 沒有去處理疊了兩層同一種 effect 的問題...
2014-01-26 10:12:46	CindyLinz	[01:42:48] 應該說, 好像只是名字像, 其實是在處理不同的東西?
2014-01-26 10:12:46	CindyLinz	[01:43:27] 看 Effects example.hs 裡面, 它會用 with (ref 5) $ \x -> with (ref 7) $ \y -> 這樣來寫
2014-01-26 10:12:46	CindyLinz	[01:43:37] 我覺得 action 本身也不太動態呀..
2014-01-26 10:12:46	CindyLinz	[01:44:00] 而如果要在裡面呼叫會使用這邊 5 或 7 的 action... 應該要把 x 和 y explicitly 傳過去
2014-01-26 10:12:46	CindyLinz	[01:44:35] 嗯, 我還要再繼續讀讀.... ^^|
2014-01-26 10:12:46	suhorng	[01:46:50] 來得動態？
2014-01-26 10:12:46	suhorng	[01:46:58] 我之前丟的那個paper出package了
2014-01-26 10:12:46	suhorng	[01:47:12] http://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html
2014-01-26 10:12:46	suhorng	[01:47:31] 我也想比較，可是還不瞭解這個 Effects 的作法 QQ
2014-01-26 10:12:46	suhorng	[01:47:54] x y 直接傳進去感覺更像用可改的變數XD
2014-01-26 10:12:46	CindyLinz	[01:48:07] 我有點希望 Effects 其實就是 MonadTrans 的某種包裝.... 這樣我就可以已經懂一半了 XD
2014-01-26 10:12:46	CindyLinz	[01:48:28] 不一定能改啦... 如果原本那一項對應的是 Reader 的話, 就是 constant XD
2014-01-26 10:12:46	suhorng	[01:48:46] 喔喔喔對 XDD
2014-01-26 10:12:46	suhorng	[01:49:03] 這兩種好像就是要跟 monad transformer 不同
2014-01-26 10:12:46	suhorng	[01:49:49] https://github.com/suhorng/HaskellExercise/blob/master/effect/TestEffect.hs 這個..老實說他的code真的跟 monad transformer 很像
2014-01-26 10:12:46	CindyLinz	[01:49:58] 你是不是還有貼過誰在 stackoverflow 說, 仍然比較喜歡 Monad Transformer?
2014-01-26 10:12:46	suhorng	[01:50:11] 但是他要加更多type = =|||
2014-01-26 10:12:46	suhorng	[01:50:32] 不太有印象，我貼過得可能是不喜歡這個也不喜歡 monad transformer
2014-01-26 10:12:46	CindyLinz	[01:51:12] 記得人名嗎? XD
2014-01-26 10:12:46	suhorng	[01:51:34] 只記得是 pipes 的作者...orz
2014-01-26 10:12:46	CindyLinz	[01:53:13] QQ
2014-01-26 10:12:46	suhorng	[01:53:20] https://groups.google.com/forum/#!topic/haskell-pipes/BTQsITNwflc 第二篇
2014-01-26 10:12:46	CindyLinz	[01:54:09] 歐! 謝謝~~
2014-01-26 10:12:46	CindyLinz	[01:54:28] 厚剛以為是 stackoverflow... 下了 site:stackoverflow.com 原來就把可能的來源刪了.... orz
2014-01-26 10:12:46	suhorng	[01:55:07] XDD
2014-01-26 10:12:46	suhorng	[02:00:49] 天阿我說錯了orzzz 應該是倒數第二封信, 不是第二封信...
2014-01-26 10:12:46	CindyLinz	[02:04:56] 沒關係.. 一整串下來就會看到了 ^^|
2014-01-26 10:12:46	CindyLinz	[02:06:34] 嗯 看 paper 的時候, 蠻前面就拿類似這種例子出來 demo, 感覺的確有一點不舒服... XD
2014-01-26 10:12:46	hashcat	[22:15:53] idris的effect paper很好懂
2014-01-26 10:12:46	suhorng	[22:35:16] 還沒懂他的作法
2014-01-26 10:12:46	suhorng	[22:36:12] 例如他的choice說是可以在 Maybe 或 List 這兩種 context 中做
2014-01-26 10:12:46	suhorng	[22:36:24] 那如果我還想要 IO 的話該怎麼辦呢?
2014-01-26 10:12:46	suhorng	[22:36:53] 是不是我要自己寫一個 IO (List a) 之類的 context？
2014-01-26 10:12:46	hashcat	[23:01:41] ???
2014-01-26 10:12:46	suhorng	[23:03:16] 如果我想要有 IO 又想要有 Selection 的話該怎麼做呢?
2014-01-26 10:12:46	hashcat	[23:11:53] 有列表儲存各種effect
2014-01-26 10:12:46	hashcat	[23:12:53] http://eb.host.cs.st-andrews.ac.uk/talks/idris-cph-lec3.pdf
2014-01-26 10:12:46	hashcat	[23:13:00] 看第18頁
2014-01-26 10:12:46	hashcat	[23:14:22] 有個參數是List EFF
2014-01-26 10:12:46	hashcat	[23:17:15] 看範例好了 : http://www.cs.st-andrews.ac.uk/~eb/effect-examples.tgz
2014-01-26 10:12:46	hashcat	[23:17:30] Lang.idr我覺得最好懂
2014-01-26 10:12:46	hashcat	[23:20:01] 他裡面的型別是長這樣 eval : Expr -> Eff IO [EXCEPTION String, STDIO, RND, STATE Env] Int
2014-01-26 10:12:46	hashcat	[23:20:23] 來自創新詞: 最終效果, 途中效果
2014-01-26 10:12:46	hashcat	[23:24:30] IO 跟 Int 可以想成以前的monad
2014-01-26 10:12:46	hashcat	[23:24:33] IO Int
2014-01-26 10:12:46	hashcat	[23:25:06] 中間那個列表是附加於途中的效果, 像是會扔exception, 有隨機數等
2014-01-26 10:12:46	hashcat	[23:26:11] 主效果 IO 附屬效果 [EXCEPTION String, STDIO, RND, STATE Env] 返回 Int
2014-01-26 10:12:46	hashcat	[23:26:26] 這樣講不知道行不行
2014-01-26 10:12:46	hashcat	[23:27:29] 再看下宣告
2014-01-26 10:12:46	hashcat	[23:27:32] data EffM : (m : Type -> Type) ->
2014-01-26 10:12:46	hashcat	[23:27:34] (es : List EFFECT) ->
2014-01-26 10:12:46	hashcat	[23:27:35] (es' : List EFFECT) -> (a : Type) -> Type
2014-01-26 10:12:46	hashcat	[23:28:12] 這裡 m 意思就等同以前 monad 裡的 m 的常用用法
2014-01-26 10:12:46	hashcat	[23:28:34] a 也等同以前 monad 裡的 a 的常用用法
2014-01-26 10:12:46	suhorng	[23:29:21] 嗯嗯!
2014-01-26 10:12:46	hashcat	[23:29:25] 多出兩個(es : List EFFECT) , (es' : List EFFECT) 就是附屬的效果類似 monad transformer
2014-01-26 10:12:46	hashcat	[23:29:42] 補充下前者是不可變狀態, 後者是可變狀態
2014-01-26 10:12:46	hashcat	[23:30:02] Eff 就是 EffM 少了可變狀態
2014-01-26 10:12:46	suhorng	[23:30:11] 嗯哼
2014-01-26 10:12:46	hashcat	[23:30:43] 繼續研究prolog
2014-01-26 10:12:46	hashcat	[23:30:50] 置入行銷
2014-01-26 10:12:46	suhorng	[23:31:48] XDDD
2014-01-26 10:12:46	hashcat	[23:32:27] 很故意的講出來
2014-01-26 10:12:46	CindyLinz	[23:33:49] 途中效果裡面列的東西, 其順序應該是有影響的?
2014-01-26 10:12:46	hashcat	[23:33:49] 發現超恐怖的東西
2014-01-26 10:12:46	hashcat	[23:34:15] 天網出現之日指日可待
2014-01-26 10:12:46	CindyLinz	[23:34:20] ..
2014-01-26 10:12:46	hashcat	[23:34:30] http://www.cs.ox.ac.uk/activities/machlearn/Aleph/aleph_toc.html
2014-01-26 10:12:46	hashcat	[23:34:52] 我想不按原文翻譯成歸納邏輯理論自動建造機
2014-01-26 10:12:46	hashcat	[23:35:31] 原文是Aleph is an Inductive Logic Programming (ILP) system that supersedes P-Progol.
2014-01-26 10:12:46	CindyLinz	[23:36:00] 會學習會推論不可怕啊.. 天網出現的那一瞬間是出現自覺.. XD
2014-01-26 10:12:46	hashcat	[23:36:17] 機率跟歸納都有了, 整合起來要是加上前端視覺模式識別
2014-01-26 10:12:46	hashcat	[23:36:53] 征服銀河系的就不是人啦, 是歸納邏輯系統
2014-01-26 10:12:46	suhorng	[23:37:01] CindyLinz: 我覺得有點難說..他的作法會不會影響/如何影響實在不像 monad transformer 那樣看容易看出來....
2014-01-26 10:12:46	hashcat	[23:38:02] suhorng: 我怎覺得是 Effect 比較容易一目了然
2014-01-26 10:12:46	CindyLinz	[23:38:12] suhorng: 昨天看了 Pipes 作者對於可以隨意換順序的 Effect 的擔心... 我覺得如果可以隨意換順序的模型, 最好把 Exception 分出去, 不要混一起 ^^|
2014-01-26 10:12:46	suhorng	[23:38:17] 昨天貼的那封信我把他改成用 extensible-effects package, 結果不管 runError 跟 runState 誰先誰後跑出來結果都是 2
2014-01-26 10:12:46	suhorng	[23:39:03] 不同作法之下效果跟 monad transformer 完全不同XD|||
2014-01-26 10:12:46	suhorng	[23:39:04] 不只 exception，可能還要包含任何會影響control的東西，像是 x <- [1..10] 這一類東西
2014-01-26 10:12:46	hashcat	[23:39:33] 設計上跟順序無關才合情合理
2014-01-26 10:12:46	hashcat	[23:39:54] Monad跟Effect作用就是嵌入個語言
2014-01-26 10:12:46	suhorng	[23:40:00] hashcat: 像 s -> Either String (a, s) 跟 a -> (Either String a, s) 還可以人眼看出來, Effects 該怎磨勘呢?
2014-01-26 10:12:46	suhorng	[23:40:05] 不可能無關吧
2014-01-26 10:12:46	hashcat	[23:40:32] 拿設計一個語言來說, 沒人會想說什麼語言特性跟加入那個特性順序有關系吧
2014-01-26 10:12:46	CindyLinz	[23:40:33] 差別在... action 的長相來決定順序, 還是呼叫的地方決定順序 :Q
2014-01-26 10:12:46	suhorng	[23:41:06] 像 MTL 跟 extensible-effects 都是呼叫的地方決定順序
2014-01-26 10:12:46	suhorng	[23:41:20] 但是他們 "不同順序" 造成的影響很不一樣
2014-01-26 10:12:46	CindyLinz	[23:41:36] hashcat: 但是執行到一半發生 exception 了, 那麼 exception 之前已經做了的動作要仍舊保持, 還是 rollback, 是要規定一下的...
2014-01-26 10:12:46	hashcat	[23:41:43] 所有的效果 "同時" 發生, 前後無關才合情合理
2014-01-26 10:12:46	CindyLinz	[23:42:09] suhorng: MTL 是指.. liftIO 的寫法, 而不是 lift 的寫法?
2014-01-26 10:12:46	suhorng	[23:42:26] effects之間怎麼互動沒有一定怎樣才是對的吧? 可以選一種拿來作準 不過其他種也不能說錯
2014-01-26 10:12:46	hashcat	[23:42:28] 嗯嗯
2014-01-26 10:12:46	suhorng	[23:42:41] CindyLinz: 是指 monad transformers
2014-01-26 10:12:46	CindyLinz	[23:43:13] suhorng: monad trans 的 lift . lift . lift 的寫法.. 是定義 action 的地方就決定順序了啊.
2014-01-26 10:12:46	CindyLinz	[23:43:36] 看 lift 用了幾層, 就決定那一層一定要是什麼呀
2014-01-26 10:12:46	suhorng	[23:43:55] 假設使用typeclass自動推論要lift幾層的那種好了~
2014-01-26 10:12:46	CindyLinz	[23:44:10] XD 那就是 liftIO, liftWriter 的寫法嘛 :p
2014-01-26 10:12:46	suhorng	[23:44:24] 就是 mtl package 做的事呀Q_Q
2014-01-26 10:12:46	suhorng	[23:44:54] 大概我有弄混
2014-01-26 10:12:46	CindyLinz	[23:44:59] 嗯嗯, 要標明 不準直接用 lift.. :p
2014-01-26 10:12:46	hashcat	[23:46:31] 問下
2014-01-26 10:12:46	hashcat	[23:46:47] haskell在工作使用情形如何
2014-01-26 10:12:46	CindyLinz	[23:47:40] mno2: (戳戳)
2014-01-26 10:12:46	suhorng	[23:47:54] 可能要去 haskell.sg meetup (誤)
2014-01-26 10:12:46	mno2	[23:48:36] CindyLinz: ?
2014-01-26 10:12:46	CindyLinz	[23:49:07] mno2: # 23:46 < hashcat> haskell在工作使用情形如何
2014-01-26 10:12:46	mno2	[23:50:42] http://functionaljobs.com/jobs/8678-haskell-developer-at-zalora  可以參考 JD
2014-01-26 10:12:46	hashcat	[23:52:40] 亂丟垃圾會重杖打屁股的地方
2014-01-26 10:12:46	CindyLinz	[23:53:10] 可以 remote..
2014-01-26 10:12:46	CindyLinz	[23:53:18] 所以可以繼續亂丟垃圾(?
2014-01-26 10:12:46	mno2	[23:53:45] 丟垃圾？
2014-01-26 10:12:46	CindyLinz	[23:54:10] 他應該是說街上亂丟東西 XD
2014-01-26 10:12:46	mno2	[23:54:42] 喔喔
2014-01-26 10:12:46	hashcat	[23:55:07] 不是我想找, 只是想了解這裡的人有沒啥用到
2014-01-26 10:12:46	hashcat	[23:55:25] 我是完全沒用上
2014-01-26 10:12:46	CindyLinz	[23:56:07] 我用到一半
2014-01-26 10:12:46	hashcat	[23:56:19] 做什麼的
2014-01-26 10:12:46	CindyLinz	[23:56:25] 因為沒有時間壓力, 所以常常會跑去弄別的..
2014-01-26 10:12:46	hashcat	[23:56:58] 聽起來像無業遊民
2014-01-26 10:12:46	CindyLinz	[23:57:04] 資料結構, Augmented RB tree, 要拿來作即時的名次
2014-01-26 10:12:46	CindyLinz	[23:57:31] 應該剩介面整理.. 然後就擺了一陣子 orz # https://github.com/CindyLinz/Haskell-AugmentedRBTree
2014-01-26 10:12:46	CindyLinz	[23:59:03] 現在在弄 Haskell 與 Perl 介接.. 也許就能沿用我們公司原有的, 用 perl 寫的 socket 介面
2014-01-26 10:12:46	hashcat	[23:59:24] 同樣都沒實用, FP的對象我決定轉移到idris了
2014-01-26 10:12:46	CindyLinz	[00:00:19] haskell 接 perl 目前實驗了一些些會動, 要開始寫正經一點的了 :p  https://github.com/CindyLinz/Haskell-Perl
2014-01-26 10:12:46	hashcat	[00:00:23] 你是後端啥都能用就是
2014-01-26 10:12:46	CindyLinz	[00:00:55] 什麼意思??
2014-01-26 10:12:46	hashcat	[00:01:07] 就是前端 perl
2014-01-26 10:12:46	CindyLinz	[00:01:11] Non-windows only
2014-01-26 10:12:46	hashcat	[00:01:23] 後端什麼語言都沒限制
2014-01-26 10:12:46	CindyLinz	[00:01:40] 其實前端也沒限制.... socket 出去就行
2014-01-26 10:12:46	CindyLinz	[00:02:05] 只是一定要透過 socket 的話, 整合性比較差, 必須是本身足夠完整的子系統才行
2014-01-26 10:12:46	hashcat	[00:02:17] 啥麼公司做什麼的
2014-01-26 10:12:46	CindyLinz	[00:02:17] 如果能揉在一起的話, 只換一個函數塞進去都行
2014-01-26 10:12:46	CindyLinz	[00:02:55] 營運自己開發的遊戲的公司~ http://www.gamesofa.com/
2014-01-26 10:12:46	hashcat	[00:04:07] 哦
2014-01-26 10:12:46	hashcat	[00:04:14] 原來是王老闆
2014-01-26 10:12:46	CindyLinz	[00:04:29] 啊? 老闆不姓王啊 @_@"
2014-01-26 10:12:46	hashcat	[00:04:54] 當我沒說好了
2014-01-26 10:12:46	CindyLinz	[00:05:35] @@"
2014-01-26 10:12:46	hashcat	[00:07:29] 我看成你是老闆
2014-01-26 10:12:46	CindyLinz	[00:08:46] ._.
2014-01-26 10:12:46	CindyLinz	[00:09:20] 那句的「自己」指的是公司不是我啦.. XD
2014-01-26 10:12:46	hashcat	[00:10:12] 想不出自己還能是啥
2014-01-26 10:12:46	hashcat	[00:11:40] 還有這種用法
2014-01-26 10:12:46	hashcat	[00:11:53] 公司自己
2014-01-26 10:12:46	CindyLinz	[00:13:19] 我玩遊戲不夠重度... 如果遊戲是我設計.... 應該會作出只有我自己想玩的遊戲
2014-01-26 10:12:46	CindyLinz	[00:13:33] 而且我自己也玩一陣子就膩了..ww
2014-01-26 10:12:46	petercommand	[00:13:38] CindyLinz: XD
2014-01-26 10:12:46	CindyLinz	[00:14:24] 前一陣子發現一個無邊界的多人踩地雷遊戲覺得很好玩... http://mienfield.com/
2014-01-26 10:12:46	CindyLinz	[00:14:34] 結果只有我覺得好玩....持續兩天 orz
2014-01-26 10:12:46	hashcat	[00:16:32] 整個創意100分, 有趣0分的遊戲
2014-01-26 10:12:46	CindyLinz	[00:16:49] 有必要說這麼狠嗎.....QQ
2014-01-26 10:12:46	hashcat	[00:18:01] 不過還是可以理解, 就跟我寫prolog的時候一樣
2014-01-26 10:12:46	hashcat	[00:18:27] 結果只有我覺得好玩....持續三個月 orz
2014-01-26 10:12:46	hashcat	[00:20:24] 擴展perl可以用haskell, 表示擴展python可以用idris
2014-01-26 10:12:46	hashcat	[00:21:31] =D
2014-01-26 10:12:46	hashcat	[00:34:06] 問了下idris還只能在單核跑 ==
2014-01-26 10:12:46	CindyLinz	[00:44:17] 這是什麼推論啊.... XD
2014-01-26 10:12:46	hashcat	[00:45:47] 在跟idriser討論加進平行化, 能不就像是在產生的C code加上openmp pragma
2014-01-26 10:12:46	CindyLinz	[00:47:07] 嗯, 有很多系統呼叫要換用加上 _r 自尾的版本
2014-01-26 10:12:46	CindyLinz	[00:47:10] 嗯, 有很多系統呼叫要換用加上 _r 字尾的版本
2014-01-26 10:12:46	hashcat	[00:49:11] _r是啥?
2014-01-26 10:12:46	CindyLinz	[00:50:19] 很多 C 的標準 lib 函數, 例如說 string.h 裡面的 strtok, 會用到自己內建的 static 的 buffer
2014-01-26 10:12:46	CindyLinz	[00:50:41] 而 strtok_r 可以由呼叫端給 buffer
2014-01-26 10:12:46	CindyLinz	[00:51:14] 用內建 static buffer 在 multi-thread 的時候, 如果發生不同的 thread 都去採同一個 static buffer 會悲劇
2014-01-26 10:12:46	hashcat	[00:55:48] 哦
2014-01-26 10:12:46	hashcat	[00:56:55] 睡覺
2014-01-26 10:12:46	CindyLinz	[01:52:51] Dryman 寫的 Monad 教學 http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/
2014-01-26 10:12:46	CindyLinz	[01:52:54] 還沒看 :p
2014-01-26 10:12:46	CindyLinz	[01:55:02] 這張圖解不錯 ^^ http://www.idryman.org/images/monad/monad-structure.png
2014-01-26 10:12:46	***	Playback Complete.
2014-01-26 10:13:03	--	モード #haskell.tw [+cnt]
2014-01-26 10:13:03	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-26 10:58:12	-->	liuzhoou (~liuzhoou@125.215.44.36) が #haskell.tw に参加
2014-01-26 11:16:46	-->	yyyg (~androirc@171.90.59.209) が #haskell.tw に参加
2014-01-26 12:13:00	-->	b4283 (~b4283@36-238-233-136.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-26 12:54:56	<--	yyyg (~androirc@171.90.59.209) が終了 (Read error: Connection reset by peer)
2014-01-26 13:45:38	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-01-26 14:10:19	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Read error: Connection reset by peer)
2014-01-26 14:13:40	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-01-26 14:27:04	-->	town77 (~androirc@114.242.249.132) が #haskell.tw に参加
2014-01-26 14:27:33	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 252 seconds)
2014-01-26 14:33:38	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-26 14:38:08	<--	town77 (~androirc@114.242.249.132) が終了 (Ping timeout: 260 seconds)
2014-01-26 14:53:44	-->	town77 (~androirc@61.148.244.143) が #haskell.tw に参加
2014-01-26 15:20:28	<--	town77 (~androirc@61.148.244.143) が終了 (Remote host closed the connection)
2014-01-26 15:23:14	-->	town77 (~androirc@61.148.244.143) が #haskell.tw に参加
2014-01-26 15:39:35	<--	town77 (~androirc@61.148.244.143) が終了 (Ping timeout: 245 seconds)
2014-01-26 18:05:29	<--	liuzhoou (~liuzhoou@125.215.44.36) が終了
2014-01-26 18:25:09	-->	town77 (~androirc@61.148.242.245) が #haskell.tw に参加
2014-01-26 18:51:33	<--	town77 (~androirc@61.148.242.245) が終了 (Ping timeout: 252 seconds)
2014-01-26 21:49:27	-->	town55 (~1@171.90.49.216) が #haskell.tw に参加
2014-01-26 21:51:14	<--	b4283 (~b4283@36-238-233-136.dynamic-ip.hinet.net) が終了 (Ping timeout: 264 seconds)
2014-01-26 22:55:56	-->	b4283 (~b4283@118.150.148.244) が #haskell.tw に参加
2014-01-26 22:57:07	-->	suhorng (~suhorng@118-166-51-186.dynamic.hinet.net) が #haskell.tw に参加
2014-01-26 23:04:29	<--	town55 (~1@171.90.49.216) が終了 (Ping timeout: 240 seconds)
2014-01-26 23:18:17	-->	hashcat (~kv2a@36-238-32-169.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-26 23:45:03	<--	suhorng (~suhorng@118-166-51-186.dynamic.hinet.net) が終了 (Ping timeout: 272 seconds)
2014-01-27 00:30:55	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-01-27 00:35:42	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-27 00:39:40	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Remote host closed the connection)
2014-01-27 00:46:33	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-01-27 01:02:48	-->	banacorn (31da4fe8@gateway/web/freenode/ip.49.218.79.232) が #haskell.tw に参加
2014-01-27 01:02:55	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-01-27 01:07:44	<--	hashcat (~kv2a@36-238-32-169.dynamic-ip.hinet.net) が終了 (Quit: Konversation terminated!)
2014-01-27 01:13:26	<--	b4283 (~b4283@118.150.148.244) が終了 (Remote host closed the connection)
2014-01-27 02:16:03	<--	banacorn (31da4fe8@gateway/web/freenode/ip.49.218.79.232) が終了 (Ping timeout: 245 seconds)
2014-01-27 05:30:07	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Quit: Leaving...)
2014-01-27 08:51:03	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-27 10:19:00	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-27 10:42:57	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-01-27 10:46:31	-->	liuzhoou (~liuzhoou@125.215.44.36) が #haskell.tw に参加
2014-01-27 12:05:22	-->	suhorng (~suhorng@118-166-51-186.dynamic.hinet.net) が #haskell.tw に参加
2014-01-27 12:46:29	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Ping timeout: 248 seconds)
2014-01-27 12:57:44	<--	suhorng (~suhorng@118-166-51-186.dynamic.hinet.net) が #haskell.tw から退出
2014-01-27 13:28:19	-->	godfat (~Adium@36-225-54-157.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-27 14:00:49	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-27 14:24:29	-->	town55 (~1@171.208.10.128) が #haskell.tw に参加
2014-01-27 14:25:12	<--	town55 (~1@171.208.10.128) が終了 (Max SendQ exceeded)
2014-01-27 14:26:05	-->	town55 (~1@171.208.10.128) が #haskell.tw に参加
2014-01-27 15:05:51	CindyLinz	嗯, GHC 的 MultiParamClasses extension 也很重要....
2014-01-27 15:07:10	CindyLinz	TypeSynonymInstances 非必要.. 但我也是覺得沒有會很苦命 XD
2014-01-27 15:17:21	--	irc: サーバから切断
2014-01-27 20:13:59	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-27 20:13:59	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-27 20:13:59	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-27 20:13:59	--	ニックネーム #haskell.tw: [a2n b4283 cataska cataska_ cibs CindyLinz cyt93cs darkx drbean gko hashcat_ hychen kanru lambdabot letoh logfat_____ miaout17 mno2 monochrom petercommand shik superbil_c]
2014-01-27 20:13:59	--	チャンネル #haskell.tw: 22 ニックネーム (0 オペレータ, 0 発言, 22 通常)
2014-01-27 20:13:59	***	Buffer Playback...
2014-01-27 20:13:59	hashcat_	[00:25:32]  ((print :: Show a => a -> IO ()) . (Test的解構子 ::  Show a => Test -> a))  ((Test :: Int -> Test) (5::Int)) 這就推得出print的型別啦
2014-01-27 20:13:59	suhorng	[00:25:36] （我一直搞不清楚 RankNTypes, ExistentialQuantification 這兩個extension哪裡有差QQ）
2014-01-27 20:13:59	CindyLinz	[00:25:59] runtime 的時候每個 element 都要帶著它怎麼 show 的函數走... 不過 runtime 應該還是不知道它是什麼 type..
2014-01-27 20:13:59	suhorng	[00:26:12] hashcat_: 動態時拿到的有可能是 ((Test :: Int -> Test) (5::Int)) 也有可能是 ((Test :: String -> Test) ("abc"::String)) 呀
2014-01-27 20:13:59	suhorng	[00:26:24] 就有點像 virtual table ...
2014-01-27 20:13:59	hashcat_	[00:26:39] 我都把解構子補進去了..
2014-01-27 20:13:59	CindyLinz	[00:26:43] suhorng: 還有 Rank2Types.. XD
2014-01-27 20:13:59	suhorng	[00:26:49] 因為執行時期應該沒留下型別資訊吧..？ 這某種程度就像留下型別資訊..
2014-01-27 20:13:59	CindyLinz	[00:26:51] 我知道它是 RankNTypes 的子集 :D
2014-01-27 20:13:59	hashcat_	[00:26:58] 用怪招說明他可以推論出來
2014-01-27 20:13:59	suhorng	[00:27:09] Rank2Types感覺有點差別欸
2014-01-27 20:13:59	hashcat_	[00:27:10] 也不算怪招啦
2014-01-27 20:13:59	suhorng	[00:27:21] 不知道是不是在型別推論的地方有差
2014-01-27 20:13:59	hashcat_	[00:27:25] pattern matching不就隱含解構子的存在了
2014-01-27 20:13:59	CindyLinz	[00:27:42] Rank2Type 指的是 forall 可以寫在 -> 的左邊..
2014-01-27 20:13:59	suhorng	[00:27:42] 有很多種不同的解構子？
2014-01-27 20:13:59	hashcat_	[00:27:55] 從別的方面講Haskell既然說他是statically type就不會騙人吧
2014-01-27 20:13:59	hashcat_	[00:28:11] 執行時期是根本沒型別資訊
2014-01-27 20:13:59	hashcat_	[00:28:19] 不像C++還是有保留
2014-01-27 20:13:59	CindyLinz	[00:28:20] Rank3Type (應該沒這 extension, 想 >2 全都用 N types 了吧?)  就是 -> 的左邊如果是個 ( .... -> .... ), 這個裡面的 -> 的左邊可以有 forall.. XD
2014-01-27 20:13:59	suhorng	[00:28:23] CindyLinz: 是想說 rank 2 types 的型別推論是 decidable， > 2 不是 decidable
2014-01-27 20:13:59	suhorng	[00:28:40] RankNTypes 需要寫type signature 這樣 @口@
2014-01-27 20:13:59	CindyLinz	[00:28:47] 反正我寫不出無法 decide 的 type...ww
2014-01-27 20:13:59	CindyLinz	[00:29:07] DFS 50 層內一定解得出來 (逃)
2014-01-27 20:13:59	hashcat_	[00:29:20] statically type是說他沒法斷定型別就不會讓你編譯過
2014-01-27 20:13:59	hashcat_	[00:29:40] 算了最近對haskell沒興趣
2014-01-27 20:13:59	suhorng	[00:29:40] 就..型別是 Test，然後Test有 Class a =>，所以可以編譯過阿XD
2014-01-27 20:13:59	hashcat_	[00:30:11] prolog.tw
2014-01-27 20:13:59	hashcat_	[00:30:24] 成立成立
2014-01-27 20:13:59	hashcat_	[00:31:13] 突然一陣靜默
2014-01-27 20:13:59	suhorng	[00:31:14] DFS 50層 XDDD
2014-01-27 20:13:59	suhorng	[00:31:22] UndecidableInstances！
2014-01-27 20:13:59	CindyLinz	[00:31:53] suhorng: 我覺得差別是... (不考慮 Typeable 和 Dyn 的話) haskell 裡面一般是無法做 C++ 的 typeof(...) 或 x instanceof y 或是 parent class 往 childe class 的轉型
2014-01-27 20:13:59	hashcat_	[00:32:03] 這麼喜歡動態就看prolog吧
2014-01-27 20:13:59	CindyLinz	[00:32:52] 不考慮 Typeable / Dyn 是因為, 我覺得它是 programmer 額外加上的 note. 如果 programmer 惡意亂指定 TyCon, ghc 也會放行
2014-01-27 20:13:59	suhorng	[00:33:02] 會爆炸XD
2014-01-27 20:13:59	CindyLinz	[00:33:16] 會爆嗎? 就會轉出神妙的東西吧? XD
2014-01-27 20:13:59	suhorng	[00:33:32] 可以讓他segmentation fault!
2014-01-27 20:13:59	CindyLinz	[00:34:08] 呃... 能嗎? @_@"
2014-01-27 20:13:59	CindyLinz	[00:34:23] 我以為只是你存了一個 Int 進去, 取了一個 Char 出來...
2014-01-27 20:13:59	CindyLinz	[00:34:44] 或是你惡搞這個 http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Dynamic.html 裡面的 fromDyn 和 fromDynamic
2014-01-27 20:13:59	CindyLinz	[00:34:54] 做出一個希格斯粒子 type... ww
2014-01-27 20:13:59	CindyLinz	[00:35:07] 你想要什 type 元素, 我都能生給你!
2014-01-27 20:13:59	hashcat_	[00:35:38] 原來討論的什麼怎樣了
2014-01-27 20:13:59	CindyLinz	[00:35:57] 耶不行... Dynamic 裡的格式不是我們自訂.. 是被 Typeable 定死了
2014-01-27 20:13:59	CindyLinz	[00:36:00] 那只能選一種 XD
2014-01-27 20:13:59	suhorng	[00:36:11] 神秘
2014-01-27 20:13:59	CindyLinz	[00:36:13] 但應該可以把 Int 總是轉成 Char... XD
2014-01-27 20:13:59	suhorng	[00:36:20] Typeable我記得有讓他壞掉的例子XD
2014-01-27 20:13:59	monochrom	[00:37:01] 爆炸也是神妙的東西啊! XD
2014-01-27 20:13:59	CindyLinz	[00:37:03] 用 TyCon 硬寫一個不存在的 type 應該就死了吧?
2014-01-27 20:13:59	CindyLinz	[00:37:14] 我是還沒用過... ._.
2014-01-27 20:13:59	suhorng	[00:37:31] http://okmij.org/ftp/Haskell/types.html#unsound-typeable
2014-01-27 20:13:59	CindyLinz	[00:38:38] 好切回來一下, 我覺得 Dyn 和 Typeable 不算是 Haskell 語言本身的東西, 是 lib 這樣, 所以和 C++ 的情況不同 ^^|
2014-01-27 20:13:59	CindyLinz	[00:39:19] 但不代表 statically 就知道每一個 rigid type, 有可能只確定到一定是某個 class 的 instance 而已
2014-01-27 20:13:59	suhorng	[00:39:47] 我就在想實作怎麼實作; 假設Haskell98的話
2014-01-27 20:13:59	hashcat	[00:40:01] 睡覺
2014-01-27 20:13:59	monochrom	[00:40:04] 自行寫一個 "newtype I = I Int; newtype C = C Char", 然後為它們寫些壞的 Typeable 碼, 應該就可以透過 I 和 C 互換來把 Int 和 Char 互換.
2014-01-27 20:13:59	CindyLinz	[00:40:05] 晚安 XD
2014-01-27 20:13:59	suhorng	[00:40:06] 每次每個多型函數用的時候我們都知道他被instantiate成什麼type
2014-01-27 20:13:59	suhorng	[00:40:15] XD
2014-01-27 20:13:59	CindyLinz	[00:40:24] 壞的 Typeable 碼... XD
2014-01-27 20:13:59	suhorng	[00:40:30] 所以可以在instantiate的時候直接複製一份code
2014-01-27 20:13:59	suhorng	[00:40:37] 像template那樣
2014-01-27 20:13:59	CindyLinz	[00:40:52] 嗯
2014-01-27 20:13:59	suhorng	[00:41:06] 感覺typeclass也是一樣可以靜態知道可能用哪個多載的函數
2014-01-27 20:13:59	CindyLinz	[00:41:15] 是.... 哪些?
2014-01-27 20:13:59	CindyLinz	[00:41:28] 而不能明確縮小到一個吧 @@"
2014-01-27 20:13:59	CindyLinz	[00:41:53] 如果要能實作 showGenList :: GenList -> String 的話..
2014-01-27 20:13:59	suhorng	[00:42:03] 限定Haskell98 XD
2014-01-27 20:13:59	CindyLinz	[00:42:07] 喔喔
2014-01-27 20:13:59	suhorng	[00:44:06] 如果複製一份code的話這樣不需要實作多型表示(或紀錄 runtime type information)之類..
2014-01-27 20:13:59	CindyLinz	[00:44:35] 可是 Haskell98 好卡欸... ww
2014-01-27 20:13:59	suhorng	[00:44:55] 但是現在這種typeclass感覺就不行了吧, 咦定要在constructor裡面帶一些東西 (像哪個branch之類, 或類似 virtual table 那種東西...)
2014-01-27 20:13:59	suhorng	[00:44:56] XD
2014-01-27 20:13:59	CindyLinz	[00:45:45] 沒有 FlexibleInstances 和 ScopedTypeVariable 我活不下去... QQ
2014-01-27 20:13:59	suhorng	[00:46:29] 說到 scoped type variables 我在想 idris 是怎麼做的 |||
2014-01-27 20:13:59	CindyLinz	[00:46:33] virtual table 應該是把 type 帶進去....
2014-01-27 20:13:59	suhorng	[00:46:41] 嗯
2014-01-27 20:13:59	CindyLinz	[00:46:47] 不過 haskell 可以不用帶 type, 而是把要用到的 member function 帶進去
2014-01-27 20:13:59	CindyLinz	[00:47:23] 而且 haskell 的 class 可以是兩三個以上的 type 交互作用... 好吧, 還是可以用 tuple 的方式一次帶 N 個 type... ww
2014-01-27 20:13:59	suhorng	[00:47:24] 詳細一下？是怎樣XD
2014-01-27 20:13:59	CindyLinz	[00:47:55] 剛剛我講的那個 Show 就是把 show 帶進去呀... Int 的 element 就帶個 Show Int 的 show, Char 的 element 就帶 Show Char 的 show
2014-01-27 20:13:59	CindyLinz	[00:48:29] 然後 showGenList 在跑的時候就是逐個拿 show 出來用.. 而它背後是什麼 type, 可以搞不清楚, 用就對了
2014-01-27 20:13:59	suhorng	[00:48:41] 類似對於每次用的時候
2014-01-27 20:13:59	suhorng	[00:48:46] *用constructor
2014-01-27 20:13:59	suhorng	[00:49:01] 給個資料結構, 對每個instance儲存那個函式？
2014-01-27 20:13:59	CindyLinz	[00:49:15] 嗯, 函數指標之類的東西
2014-01-27 20:13:59	CindyLinz	[00:49:40] 好吧, 其實是會存到一個指向整個 Show Int 的表格
2014-01-27 20:13:59	suhorng	[00:49:56] 好吧, 這個可以靜態弄好, 不用動態建立 XD
2014-01-27 20:13:59	CindyLinz	[00:49:58] 也是 table 等級的東西.... 拆散可能效率也沒比較好
2014-01-27 20:13:59	suhorng	[00:50:19] 喔...突然想到我剛剛那個例子不知道能不能用newtype
2014-01-27 20:13:59	CindyLinz	[00:50:36] 所有的 Show a.. Show Int, Show Char, Show Double 應該都會是長度一樣的 struct
2014-01-27 20:13:59	suhorng	[00:50:39] 嗯
2014-01-27 20:13:59	CindyLinz	[00:51:06] Java 的話就是 parent 短, child 長, 但 prefix 一樣; C++ 應該要有一個很動態的查表吧?
2014-01-27 20:13:59	CindyLinz	[00:51:26] 因為 C++ 有多重繼承, 好麻煩 XD
2014-01-27 20:13:59	suhorng	[00:51:35] XDD
2014-01-27 20:13:59	suhorng	[00:51:42] 沒會過C++的作法
2014-01-27 20:13:59	CindyLinz	[00:51:47] ._.
2014-01-27 20:13:59	CindyLinz	[00:52:17] 哪個例子啊? XD
2014-01-27 20:13:59	suhorng	[00:52:31] data Test where...那個
2014-01-27 20:13:59	suhorng	[00:52:42] 因為想到newtype沒有執行時期constructor
2014-01-27 20:13:59	CindyLinz	[00:53:44] 唔.. 在定義 data 的地方放 class constraint 不是要被 deprecate 了嗎? XD
2014-01-27 20:13:59	suhorng	[00:53:47] 喔 Rank2Types 跟我想的不一樣...
2014-01-27 20:13:59	suhorng	[00:53:54] deprecate？
2014-01-27 20:13:59	suhorng	[00:54:04] 真假=口=
2014-01-27 20:13:59	CindyLinz	[00:54:06] 被說是個設計壞了的功能..
2014-01-27 20:13:59	suhorng	[00:54:16] 因為我還在用 GHC 7.4...
2014-01-27 20:13:59	CindyLinz	[00:54:33] 因為在定義這個 type 用的函數的地方, 再加 constraint 就好了
2014-01-27 20:13:59	suhorng	[00:54:42] 我還以為 GADT 可以隨便放 type signature XDDD 原來不行噢...
2014-01-27 20:13:59	CindyLinz	[00:54:42] 而就算 data 加了... 函數的地方還是要再加
2014-01-27 20:13:59	CindyLinz	[00:54:48] 喔不不, 我不是說 GADT
2014-01-27 20:13:59	suhorng	[00:54:51] !? 這裡不用阿XD
2014-01-27 20:13:59	CindyLinz	[00:55:39] 你這個不就是 data Test = Constructor a 嗎?
2014-01-27 20:13:59	CindyLinz	[00:55:49] 啊, 左邊沒 a.. 那可以放 XD
2014-01-27 20:13:59	suhorng	[00:55:50] 是說這個 http://ideone.com/9kgrGB
2014-01-27 20:13:59	suhorng	[00:55:57] 跟 GenShow 同個東西
2014-01-27 20:13:59	CindyLinz	[00:56:04] 是 forall 型的..
2014-01-27 20:13:59	CindyLinz	[00:56:35] 如果是 Test :: Class a => a -> Test a 應該就會被罵吧?
2014-01-27 20:13:59	suhorng	[00:56:53] XDD
2014-01-27 20:13:59	CindyLinz	[00:57:17] 不過因為是 Test :: Class a => a -> Test 就還好
2014-01-27 20:13:59	CindyLinz	[00:58:52] suhorng: 欸.. newtype 的話你這邊 a 得是個具體的 type 吧?
2014-01-27 20:13:59	CindyLinz	[00:59:07] 好像不用.. orz
2014-01-27 20:13:59	suhorng	[00:59:20] !?
2014-01-27 20:13:59	CindyLinz	[00:59:33] 搞錯
2014-01-27 20:13:59	suhorng	[00:59:43] 剛剛用newtype結果能成功, 不知道怎麼實作的
2014-01-27 20:13:59	suhorng	[00:59:56] 好奇怪, 我原本以為 Rank2Types 不用手動寫型別標記, 結果要
2014-01-27 20:13:59	CindyLinz	[01:02:00] 我以為開那個就是為了寫 forall... 你開了又不想寫是什麼打算啊? @@"
2014-01-27 20:13:59	suhorng	[01:02:47] 原本想讓他 type inference 有 rank 2 type
2014-01-27 20:13:59	CindyLinz	[01:02:56] 喔
2014-01-27 20:13:59	suhorng	[01:02:59] 不過我肯定搞錯了東西...
2014-01-27 20:13:59	CindyLinz	[01:03:14] 嗯, 我看以前你貼的這篇... http://www.vidarholen.net/contents/junk/catbag.html
2014-01-27 20:13:59	CindyLinz	[01:03:30] 如果把 type sig 擦掉, 應該還是可以用.. 可是就沒有他想要的效果了?
2014-01-27 20:13:59	CindyLinz	[01:04:28] 也不對 不是看這篇
2014-01-27 20:13:59	CindyLinz	[01:04:34] 我是去看 ST monad 的 source..
2014-01-27 20:13:59	CindyLinz	[01:04:49] 他 data 左邊的 s, 在右邊也有出現, 就直接當 state
2014-01-27 20:13:59	CindyLinz	[01:05:01] 不過它有在一些地方加 forall..
2014-01-27 20:13:59	suhorng	[01:05:03] 唔
2014-01-27 20:13:59	suhorng	[01:05:05] 嗯....
2014-01-27 20:13:59	CindyLinz	[01:05:14] 如果都沒加的話, 這個 s 應該就可以被摸出去了吧?
2014-01-27 20:13:59	suhorng	[01:05:30] 這樣好像 Rank2Types 是 RankNTypes 的子集沒錯
2014-01-27 20:13:59	suhorng	[01:05:38] 原本以為對型別標記的要求不同
2014-01-27 20:13:59	CindyLinz	[01:05:46] 喔~
2014-01-27 20:13:59	CindyLinz	[01:07:46] 欸我看你給的那個 package Effects
2014-01-27 20:13:59	suhorng	[01:07:54] 嘎嘎
2014-01-27 20:13:59	CindyLinz	[01:08:00] https://hackage.haskell.org/package/effects
2014-01-27 20:13:59	CindyLinz	[01:08:33] 我是這樣理解: 它用起來就像.... 如果用 monad trans 的時候, 都是用 liftIO, liftReader, liftState.. 而不用 lift
2014-01-27 20:13:59	CindyLinz	[01:08:51] 然後它提供兩個額外的工具...
2014-01-27 20:13:59	CindyLinz	[01:09:47] 一個是那個 Effect proxy, 當這一群..... monad trans 疊裡面有出現同一種 monad trans 的時候, 還能夠分得出來 (不然純用 monad trans 的話, 同一類型的只能用到其中一個)
2014-01-27 20:13:59	suhorng	[01:09:52] 額外的工具？
2014-01-27 20:13:59	CindyLinz	[01:10:24] 另一個.. 我猜測應該有, 但還不清楚.. 就是直接用 monad trans, 想隨便用 liftIO, liftReader 這些東西的話
2014-01-27 20:13:59	suhorng	[01:10:29] 他的作法感覺完全跟 monad transformer 不同（用起來不知道|||），從頭到尾只有一個 monad...
2014-01-27 20:13:59	suhorng	[01:10:43] 嗯嗯
2014-01-27 20:13:59	CindyLinz	[01:10:56] 我們要為所有用到的 MonadTrans 們 (假設有 N 種), 去定 N*(N-1) 種 instance
2014-01-27 20:13:59	suhorng	[01:11:12] 對..
2014-01-27 20:13:59	CindyLinz	[01:11:36] 就是 instance ReaderMonad m => ReaderMonad (WriterT w m)
2014-01-27 20:13:59	monochrom	[01:11:56] ST 和 IO 的 所謂 "s -> (# a, s #)", 那個 s 請別當真. 它只是用來哄 optimizer "請不要顛倒次序"
2014-01-27 20:13:59	suhorng	[01:13:06] XD...
2014-01-27 20:13:59	suhorng	[01:13:33] 然後最後其實沒有那個 s 存在 XD?
2014-01-27 20:13:59	CindyLinz	[01:13:52] 這個 N*(N-1) 的麻煩, 如果可以容忍 OverlappingInstances extension 的話, 可以變成 N.. 只是我自己對 OverlappingInstances 有一點怕怕的, 因為它會選到誰, 雖然是明確定義的, 但是從程式碼裡面去讀, 不太明顯 @@"
2014-01-27 20:13:59	CindyLinz	[01:14:30] monochrom: 好 XD
2014-01-27 20:13:59	CindyLinz	[01:14:54] suhorng: 作法還沒讀.. 是從使用的 example.hs 感受的 :p
2014-01-27 20:13:59	suhorng	[01:15:08] 他那個明確定義感覺很模糊阿XDDD
2014-01-27 20:13:59	suhorng	[01:15:14] 之前說的 scoped type variable https://gist.github.com/suhorng/8601726
2014-01-27 20:13:59	suhorng	[01:15:29] 因為 variable 本身就有 scope，所以就有 scoped type variable...各種微妙
2014-01-27 20:13:59	CindyLinz	[01:15:35] 有比 monad is just a monoid... 模糊嗎?
2014-01-27 20:13:59	suhorng	[01:15:56] 這lol monad is just a monoid 感覺可以不模糊
2014-01-27 20:13:59	CindyLinz	[01:16:19] 那個 {b} 是什麼啊?
2014-01-27 20:13:59	suhorng	[01:16:21] // ap1 會 compile error
2014-01-27 20:13:59	suhorng	[01:16:34] implicit argument
2014-01-27 20:13:59	CindyLinz	[01:16:39] 噢 .idr XD
2014-01-27 20:13:59	CindyLinz	[01:16:48] 我應該讀作 forall b. 對吧? XD
2014-01-27 20:13:59	suhorng	[01:17:01] ap1 : (a -> b) -> a -> b 其實會變 ap1 : {a : Type} -> {b : Type} -> ...
2014-01-27 20:13:59	suhorng	[01:17:02] XD
2014-01-27 20:13:59	monochrom	[01:17:03] 即是說, 當你寫 "\s0 -> case getinput s0 of (x, s1) -> case output s1 (x+1) of (_, s2) -> output s2 "bye"", 因著 s0, s1, s2 之間的 data dependency, 所以 optimizer 及 code generator 迫著服從你給的順序, 不能像 pure functional code 那樣"次序沒所謂"
2014-01-27 20:13:59	CindyLinz	[01:17:05] 不對 是寫在下面 orz
2014-01-27 20:13:59	monochrom	[01:17:33] 對的, 最後那個 s 不存在.
2014-01-27 20:13:59	suhorng	[01:17:36] monochrom: 好像有點感覺
2014-01-27 20:13:59	CindyLinz	[01:18:25] 那 suhorng 貼的那個 Bag Cat 就沒這效果了? 它只有防止 Cat 被外面摸到
2014-01-27 20:13:59	suhorng	[01:19:22] 驚
2014-01-27 20:13:59	CindyLinz	[01:21:03] suhorng: 我一次遇到 scoped type variable 是在一個 sig 有 forall 的函數裡面定義內用的 helper, 想這個 helper 的 sig, 而這個 sig 裡面用到那個被 forall 的 type
2014-01-27 20:13:59	CindyLinz	[01:21:17] 沒開這個 ext 的話, compiler 說這兩個 type 是不同個..
2014-01-27 20:13:59	suhorng	[01:21:19] 有遇過!
2014-01-27 20:13:59	suhorng	[01:21:21] 真的 XDDD
2014-01-27 20:13:59	suhorng	[01:21:46] 不過 idris 直接當成一個參數把 type 拿近來..
2014-01-27 20:13:59	CindyLinz	[01:23:20] 預設打開了..
2014-01-27 20:13:59	CindyLinz	[01:23:29] 我覺得它是該開啊... QQ
2014-01-27 20:13:59	suhorng	[01:23:32] 不用打開喔lol
2014-01-27 20:13:59	suhorng	[01:23:34] 不是打開
2014-01-27 20:13:59	suhorng	[01:23:39] 而是像那個 {a}
2014-01-27 20:13:59	CindyLinz	[01:23:44] 只是那如果真要用兩個不一樣的 type, 裡面就要換名字了...
2014-01-27 20:13:59	suhorng	[01:23:57] 普通的variable scope，不是另一個不同的 "type" variable
2014-01-27 20:13:59	CindyLinz	[01:24:41] 就.. 裡面用到同一個名字的時候, 就是在指稱它了
2014-01-27 20:13:59	suhorng	[01:25:15] 就是普通的 variable scoping rule
2014-01-27 20:13:59	suhorng	[01:25:25] 跟 f a = ... where ... = ... a ... 一樣
2014-01-27 20:13:59	CindyLinz	[01:25:34] 你第二行的 {b} 和第一行的 b 是同一個東西嗎?
2014-01-27 20:13:59	suhorng	[01:25:35] 只不過現在這個 a 不一定存值, 也可以是type XD
2014-01-27 20:13:59	suhorng	[01:25:47] 那個code我發現我打錯字..改成 {a} 了
2014-01-27 20:13:59	CindyLinz	[01:26:22] 我是說 ap1 {b} 和 ap1 : ( a -> b ) ...
2014-01-27 20:13:59	suhorng	[01:26:31] 對
2014-01-27 20:13:59	suhorng	[01:26:34] 是同一個東西
2014-01-27 20:13:59	CindyLinz	[01:27:01] 然後因為第二行有 {b}, 所以第三行的 apply 可以用 b 來描述 type?
2014-01-27 20:13:59	suhorng	[01:28:00] 對
2014-01-27 20:13:59	CindyLinz	[01:28:25] 如果第二行沒有 {b}, 那第三行的 b 會被當 free variable (forall) 的意思?
2014-01-27 20:13:59	suhorng	[01:28:35] 對 會變新的
2014-01-27 20:13:59	CindyLinz	[01:28:55] 這樣好像比較好..
2014-01-27 20:13:59	CindyLinz	[01:29:20] ghc ext 那樣是要開就整個 module 全開了.. 所有的 forall 都變成 {x} 宣告
2014-01-27 20:13:59	suhorng	[01:29:38] XDDD
2014-01-27 20:13:59	CindyLinz	[01:30:05] 雖然實際上困擾也沒很大? 反正 a 或 b... 通常也都是沒意義的名字, 換了不會心痛 ww
2014-01-27 20:13:59	suhorng	[01:30:34] 是沒錯
2014-01-27 20:13:59	suhorng	[01:30:44] 但是很有趣w 當type變成可以拿來亂弄以後
2014-01-27 20:13:59	suhorng	[01:30:49] 很多東西可以消失不見
2014-01-27 20:13:59	CindyLinz	[01:31:44] 你是說很多 extension 就沒有存在的必要?
2014-01-27 20:13:59	suhorng	[01:32:41] 好像也不是這樣說 T_T
2014-01-27 20:13:59	suhorng	[01:32:58] 感覺..有些事情有統一的處理方法
2014-01-27 20:13:59	CindyLinz	[01:33:09] 我只是想先聽懂你說「消失」指的是哪方面
2014-01-27 20:13:59	CindyLinz	[01:33:22] 畢竟... Agda 裡面要打的字是變多了, 空格也變多了... XD
2014-01-27 20:13:59	suhorng	[01:33:25] e.g. ScopedTypeVariable
2014-01-27 20:13:59	CindyLinz	[01:33:36] 少一個 extension 沒錯.. XD
2014-01-27 20:13:59	CindyLinz	[01:33:53] 我覺得這一個不算.. XD
2014-01-27 20:13:59	suhorng	[01:33:58] 不少用 typeclass 做的事情也不再需要, 像是 type level list
2014-01-27 20:13:59	CindyLinz	[01:34:19] Haskell 弄成每一個 type var 前面加一下 scoped a. 也行啊? XD
2014-01-27 20:13:59	suhorng	[01:34:49] forall a. 那樣綁起來w？
2014-01-27 20:13:59	CindyLinz	[01:35:29] 對啊多一種修飾字這樣... 畢竟 forall 和 scoped 還是講不同的事 @@"
2014-01-27 20:13:59	suhorng	[01:35:44] 嗯嗯XD
2014-01-27 20:13:59	CindyLinz	[01:36:28] 想到 Agda... 再對照你的心得... 譯: 只要把靈魂賣給惡魔, 就不用學一堆怎麼看天氣和開船的技能了...
2014-01-27 20:13:59	CindyLinz	[01:36:39] (ref: 幽靈船)
2014-01-27 20:13:59	suhorng	[01:36:41] 什麼wwwwwwwww
2014-01-27 20:13:59	suhorng	[01:37:00] 惡魔是dependently typed之類嗎XD
2014-01-27 20:13:59	CindyLinz	[01:37:04] 對啊..
2014-01-27 20:13:59	suhorng	[01:37:11] 我是還不能體會他的好處
2014-01-27 20:13:59	suhorng	[01:37:16] 不過他很好玩XD
2014-01-27 20:13:59	CindyLinz	[01:38:05] 嗯嗯
2014-01-27 20:13:59	CindyLinz	[01:42:17] 然後更之前你丟過一篇也是講 Effect 的 paper, 嗯, 我只有看很前面... 覺得它好像比這個 Effects packet 來得動態
2014-01-27 20:13:59	CindyLinz	[01:42:36] 而且, 沒有去處理疊了兩層同一種 effect 的問題...
2014-01-27 20:13:59	CindyLinz	[01:42:48] 應該說, 好像只是名字像, 其實是在處理不同的東西?
2014-01-27 20:13:59	CindyLinz	[01:43:27] 看 Effects example.hs 裡面, 它會用 with (ref 5) $ \x -> with (ref 7) $ \y -> 這樣來寫
2014-01-27 20:13:59	CindyLinz	[01:43:37] 我覺得 action 本身也不太動態呀..
2014-01-27 20:13:59	CindyLinz	[01:44:00] 而如果要在裡面呼叫會使用這邊 5 或 7 的 action... 應該要把 x 和 y explicitly 傳過去
2014-01-27 20:13:59	CindyLinz	[01:44:35] 嗯, 我還要再繼續讀讀.... ^^|
2014-01-27 20:13:59	suhorng	[01:46:50] 來得動態？
2014-01-27 20:13:59	suhorng	[01:46:58] 我之前丟的那個paper出package了
2014-01-27 20:13:59	suhorng	[01:47:12] http://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html
2014-01-27 20:13:59	suhorng	[01:47:31] 我也想比較，可是還不瞭解這個 Effects 的作法 QQ
2014-01-27 20:13:59	suhorng	[01:47:54] x y 直接傳進去感覺更像用可改的變數XD
2014-01-27 20:13:59	CindyLinz	[01:48:07] 我有點希望 Effects 其實就是 MonadTrans 的某種包裝.... 這樣我就可以已經懂一半了 XD
2014-01-27 20:13:59	CindyLinz	[01:48:28] 不一定能改啦... 如果原本那一項對應的是 Reader 的話, 就是 constant XD
2014-01-27 20:13:59	suhorng	[01:48:46] 喔喔喔對 XDD
2014-01-27 20:13:59	suhorng	[01:49:03] 這兩種好像就是要跟 monad transformer 不同
2014-01-27 20:13:59	suhorng	[01:49:49] https://github.com/suhorng/HaskellExercise/blob/master/effect/TestEffect.hs 這個..老實說他的code真的跟 monad transformer 很像
2014-01-27 20:13:59	CindyLinz	[01:49:58] 你是不是還有貼過誰在 stackoverflow 說, 仍然比較喜歡 Monad Transformer?
2014-01-27 20:13:59	suhorng	[01:50:11] 但是他要加更多type = =|||
2014-01-27 20:13:59	suhorng	[01:50:32] 不太有印象，我貼過得可能是不喜歡這個也不喜歡 monad transformer
2014-01-27 20:13:59	CindyLinz	[01:51:12] 記得人名嗎? XD
2014-01-27 20:13:59	suhorng	[01:51:34] 只記得是 pipes 的作者...orz
2014-01-27 20:13:59	CindyLinz	[01:53:13] QQ
2014-01-27 20:13:59	suhorng	[01:53:20] https://groups.google.com/forum/#!topic/haskell-pipes/BTQsITNwflc 第二篇
2014-01-27 20:13:59	CindyLinz	[01:54:09] 歐! 謝謝~~
2014-01-27 20:13:59	CindyLinz	[01:54:28] 厚剛以為是 stackoverflow... 下了 site:stackoverflow.com 原來就把可能的來源刪了.... orz
2014-01-27 20:13:59	suhorng	[01:55:07] XDD
2014-01-27 20:13:59	suhorng	[02:00:49] 天阿我說錯了orzzz 應該是倒數第二封信, 不是第二封信...
2014-01-27 20:13:59	CindyLinz	[02:04:56] 沒關係.. 一整串下來就會看到了 ^^|
2014-01-27 20:13:59	CindyLinz	[02:06:34] 嗯 看 paper 的時候, 蠻前面就拿類似這種例子出來 demo, 感覺的確有一點不舒服... XD
2014-01-27 20:13:59	hashcat	[22:15:53] idris的effect paper很好懂
2014-01-27 20:13:59	suhorng	[22:35:16] 還沒懂他的作法
2014-01-27 20:13:59	suhorng	[22:36:12] 例如他的choice說是可以在 Maybe 或 List 這兩種 context 中做
2014-01-27 20:13:59	suhorng	[22:36:24] 那如果我還想要 IO 的話該怎麼辦呢?
2014-01-27 20:13:59	suhorng	[22:36:53] 是不是我要自己寫一個 IO (List a) 之類的 context？
2014-01-27 20:13:59	hashcat	[23:01:41] ???
2014-01-27 20:13:59	suhorng	[23:03:16] 如果我想要有 IO 又想要有 Selection 的話該怎麼做呢?
2014-01-27 20:13:59	hashcat	[23:11:53] 有列表儲存各種effect
2014-01-27 20:13:59	hashcat	[23:12:53] http://eb.host.cs.st-andrews.ac.uk/talks/idris-cph-lec3.pdf
2014-01-27 20:13:59	hashcat	[23:13:00] 看第18頁
2014-01-27 20:13:59	hashcat	[23:14:22] 有個參數是List EFF
2014-01-27 20:13:59	hashcat	[23:17:15] 看範例好了 : http://www.cs.st-andrews.ac.uk/~eb/effect-examples.tgz
2014-01-27 20:13:59	hashcat	[23:17:30] Lang.idr我覺得最好懂
2014-01-27 20:13:59	hashcat	[23:20:01] 他裡面的型別是長這樣 eval : Expr -> Eff IO [EXCEPTION String, STDIO, RND, STATE Env] Int
2014-01-27 20:13:59	hashcat	[23:20:23] 來自創新詞: 最終效果, 途中效果
2014-01-27 20:13:59	hashcat	[23:24:30] IO 跟 Int 可以想成以前的monad
2014-01-27 20:13:59	hashcat	[23:24:33] IO Int
2014-01-27 20:13:59	hashcat	[23:25:06] 中間那個列表是附加於途中的效果, 像是會扔exception, 有隨機數等
2014-01-27 20:13:59	hashcat	[23:26:11] 主效果 IO 附屬效果 [EXCEPTION String, STDIO, RND, STATE Env] 返回 Int
2014-01-27 20:13:59	hashcat	[23:26:26] 這樣講不知道行不行
2014-01-27 20:13:59	hashcat	[23:27:29] 再看下宣告
2014-01-27 20:13:59	hashcat	[23:27:32] data EffM : (m : Type -> Type) ->
2014-01-27 20:13:59	hashcat	[23:27:34] (es : List EFFECT) ->
2014-01-27 20:13:59	hashcat	[23:27:35] (es' : List EFFECT) -> (a : Type) -> Type
2014-01-27 20:13:59	hashcat	[23:28:12] 這裡 m 意思就等同以前 monad 裡的 m 的常用用法
2014-01-27 20:13:59	hashcat	[23:28:34] a 也等同以前 monad 裡的 a 的常用用法
2014-01-27 20:13:59	suhorng	[23:29:21] 嗯嗯!
2014-01-27 20:13:59	hashcat	[23:29:25] 多出兩個(es : List EFFECT) , (es' : List EFFECT) 就是附屬的效果類似 monad transformer
2014-01-27 20:13:59	hashcat	[23:29:42] 補充下前者是不可變狀態, 後者是可變狀態
2014-01-27 20:13:59	hashcat	[23:30:02] Eff 就是 EffM 少了可變狀態
2014-01-27 20:13:59	suhorng	[23:30:11] 嗯哼
2014-01-27 20:13:59	hashcat	[23:30:43] 繼續研究prolog
2014-01-27 20:13:59	hashcat	[23:30:50] 置入行銷
2014-01-27 20:13:59	suhorng	[23:31:48] XDDD
2014-01-27 20:13:59	hashcat	[23:32:27] 很故意的講出來
2014-01-27 20:13:59	CindyLinz	[23:33:49] 途中效果裡面列的東西, 其順序應該是有影響的?
2014-01-27 20:13:59	hashcat	[23:33:49] 發現超恐怖的東西
2014-01-27 20:13:59	hashcat	[23:34:15] 天網出現之日指日可待
2014-01-27 20:13:59	CindyLinz	[23:34:20] ..
2014-01-27 20:13:59	hashcat	[23:34:30] http://www.cs.ox.ac.uk/activities/machlearn/Aleph/aleph_toc.html
2014-01-27 20:13:59	hashcat	[23:34:52] 我想不按原文翻譯成歸納邏輯理論自動建造機
2014-01-27 20:13:59	hashcat	[23:35:31] 原文是Aleph is an Inductive Logic Programming (ILP) system that supersedes P-Progol.
2014-01-27 20:13:59	CindyLinz	[23:36:00] 會學習會推論不可怕啊.. 天網出現的那一瞬間是出現自覺.. XD
2014-01-27 20:13:59	hashcat	[23:36:17] 機率跟歸納都有了, 整合起來要是加上前端視覺模式識別
2014-01-27 20:13:59	hashcat	[23:36:53] 征服銀河系的就不是人啦, 是歸納邏輯系統
2014-01-27 20:13:59	suhorng	[23:37:01] CindyLinz: 我覺得有點難說..他的作法會不會影響/如何影響實在不像 monad transformer 那樣看容易看出來....
2014-01-27 20:13:59	hashcat	[23:38:02] suhorng: 我怎覺得是 Effect 比較容易一目了然
2014-01-27 20:13:59	CindyLinz	[23:38:12] suhorng: 昨天看了 Pipes 作者對於可以隨意換順序的 Effect 的擔心... 我覺得如果可以隨意換順序的模型, 最好把 Exception 分出去, 不要混一起 ^^|
2014-01-27 20:13:59	suhorng	[23:38:17] 昨天貼的那封信我把他改成用 extensible-effects package, 結果不管 runError 跟 runState 誰先誰後跑出來結果都是 2
2014-01-27 20:13:59	suhorng	[23:39:03] 不同作法之下效果跟 monad transformer 完全不同XD|||
2014-01-27 20:13:59	suhorng	[23:39:04] 不只 exception，可能還要包含任何會影響control的東西，像是 x <- [1..10] 這一類東西
2014-01-27 20:13:59	hashcat	[23:39:33] 設計上跟順序無關才合情合理
2014-01-27 20:13:59	hashcat	[23:39:54] Monad跟Effect作用就是嵌入個語言
2014-01-27 20:13:59	suhorng	[23:40:00] hashcat: 像 s -> Either String (a, s) 跟 a -> (Either String a, s) 還可以人眼看出來, Effects 該怎磨勘呢?
2014-01-27 20:13:59	suhorng	[23:40:05] 不可能無關吧
2014-01-27 20:13:59	hashcat	[23:40:32] 拿設計一個語言來說, 沒人會想說什麼語言特性跟加入那個特性順序有關系吧
2014-01-27 20:13:59	CindyLinz	[23:40:33] 差別在... action 的長相來決定順序, 還是呼叫的地方決定順序 :Q
2014-01-27 20:13:59	suhorng	[23:41:06] 像 MTL 跟 extensible-effects 都是呼叫的地方決定順序
2014-01-27 20:13:59	suhorng	[23:41:20] 但是他們 "不同順序" 造成的影響很不一樣
2014-01-27 20:13:59	CindyLinz	[23:41:36] hashcat: 但是執行到一半發生 exception 了, 那麼 exception 之前已經做了的動作要仍舊保持, 還是 rollback, 是要規定一下的...
2014-01-27 20:13:59	hashcat	[23:41:43] 所有的效果 "同時" 發生, 前後無關才合情合理
2014-01-27 20:13:59	CindyLinz	[23:42:09] suhorng: MTL 是指.. liftIO 的寫法, 而不是 lift 的寫法?
2014-01-27 20:13:59	suhorng	[23:42:26] effects之間怎麼互動沒有一定怎樣才是對的吧? 可以選一種拿來作準 不過其他種也不能說錯
2014-01-27 20:13:59	hashcat	[23:42:28] 嗯嗯
2014-01-27 20:13:59	suhorng	[23:42:41] CindyLinz: 是指 monad transformers
2014-01-27 20:13:59	CindyLinz	[23:43:13] suhorng: monad trans 的 lift . lift . lift 的寫法.. 是定義 action 的地方就決定順序了啊.
2014-01-27 20:13:59	CindyLinz	[23:43:36] 看 lift 用了幾層, 就決定那一層一定要是什麼呀
2014-01-27 20:13:59	suhorng	[23:43:55] 假設使用typeclass自動推論要lift幾層的那種好了~
2014-01-27 20:13:59	CindyLinz	[23:44:10] XD 那就是 liftIO, liftWriter 的寫法嘛 :p
2014-01-27 20:13:59	suhorng	[23:44:24] 就是 mtl package 做的事呀Q_Q
2014-01-27 20:13:59	suhorng	[23:44:54] 大概我有弄混
2014-01-27 20:13:59	CindyLinz	[23:44:59] 嗯嗯, 要標明 不準直接用 lift.. :p
2014-01-27 20:13:59	hashcat	[23:46:31] 問下
2014-01-27 20:13:59	hashcat	[23:46:47] haskell在工作使用情形如何
2014-01-27 20:13:59	CindyLinz	[23:47:40] mno2: (戳戳)
2014-01-27 20:13:59	suhorng	[23:47:54] 可能要去 haskell.sg meetup (誤)
2014-01-27 20:13:59	mno2	[23:48:36] CindyLinz: ?
2014-01-27 20:13:59	CindyLinz	[23:49:07] mno2: # 23:46 < hashcat> haskell在工作使用情形如何
2014-01-27 20:13:59	mno2	[23:50:42] http://functionaljobs.com/jobs/8678-haskell-developer-at-zalora  可以參考 JD
2014-01-27 20:13:59	hashcat	[23:52:40] 亂丟垃圾會重杖打屁股的地方
2014-01-27 20:13:59	CindyLinz	[23:53:10] 可以 remote..
2014-01-27 20:13:59	CindyLinz	[23:53:18] 所以可以繼續亂丟垃圾(?
2014-01-27 20:13:59	mno2	[23:53:45] 丟垃圾？
2014-01-27 20:13:59	CindyLinz	[23:54:10] 他應該是說街上亂丟東西 XD
2014-01-27 20:13:59	mno2	[23:54:42] 喔喔
2014-01-27 20:13:59	hashcat	[23:55:07] 不是我想找, 只是想了解這裡的人有沒啥用到
2014-01-27 20:13:59	hashcat	[23:55:25] 我是完全沒用上
2014-01-27 20:13:59	CindyLinz	[23:56:07] 我用到一半
2014-01-27 20:13:59	hashcat	[23:56:19] 做什麼的
2014-01-27 20:13:59	CindyLinz	[23:56:25] 因為沒有時間壓力, 所以常常會跑去弄別的..
2014-01-27 20:13:59	hashcat	[23:56:58] 聽起來像無業遊民
2014-01-27 20:13:59	CindyLinz	[23:57:04] 資料結構, Augmented RB tree, 要拿來作即時的名次
2014-01-27 20:13:59	CindyLinz	[23:57:31] 應該剩介面整理.. 然後就擺了一陣子 orz # https://github.com/CindyLinz/Haskell-AugmentedRBTree
2014-01-27 20:13:59	CindyLinz	[23:59:03] 現在在弄 Haskell 與 Perl 介接.. 也許就能沿用我們公司原有的, 用 perl 寫的 socket 介面
2014-01-27 20:13:59	hashcat	[23:59:24] 同樣都沒實用, FP的對象我決定轉移到idris了
2014-01-27 20:13:59	CindyLinz	[00:00:19] haskell 接 perl 目前實驗了一些些會動, 要開始寫正經一點的了 :p  https://github.com/CindyLinz/Haskell-Perl
2014-01-27 20:13:59	hashcat	[00:00:23] 你是後端啥都能用就是
2014-01-27 20:13:59	CindyLinz	[00:00:55] 什麼意思??
2014-01-27 20:13:59	hashcat	[00:01:07] 就是前端 perl
2014-01-27 20:13:59	CindyLinz	[00:01:11] Non-windows only
2014-01-27 20:13:59	hashcat	[00:01:23] 後端什麼語言都沒限制
2014-01-27 20:13:59	CindyLinz	[00:01:40] 其實前端也沒限制.... socket 出去就行
2014-01-27 20:13:59	CindyLinz	[00:02:05] 只是一定要透過 socket 的話, 整合性比較差, 必須是本身足夠完整的子系統才行
2014-01-27 20:13:59	hashcat	[00:02:17] 啥麼公司做什麼的
2014-01-27 20:13:59	CindyLinz	[00:02:17] 如果能揉在一起的話, 只換一個函數塞進去都行
2014-01-27 20:13:59	CindyLinz	[00:02:55] 營運自己開發的遊戲的公司~ http://www.gamesofa.com/
2014-01-27 20:13:59	hashcat	[00:04:07] 哦
2014-01-27 20:13:59	hashcat	[00:04:14] 原來是王老闆
2014-01-27 20:13:59	CindyLinz	[00:04:29] 啊? 老闆不姓王啊 @_@"
2014-01-27 20:13:59	hashcat	[00:04:54] 當我沒說好了
2014-01-27 20:13:59	CindyLinz	[00:05:35] @@"
2014-01-27 20:13:59	hashcat	[00:07:29] 我看成你是老闆
2014-01-27 20:13:59	CindyLinz	[00:08:46] ._.
2014-01-27 20:13:59	CindyLinz	[00:09:20] 那句的「自己」指的是公司不是我啦.. XD
2014-01-27 20:13:59	hashcat	[00:10:12] 想不出自己還能是啥
2014-01-27 20:13:59	hashcat	[00:11:40] 還有這種用法
2014-01-27 20:13:59	hashcat	[00:11:53] 公司自己
2014-01-27 20:13:59	CindyLinz	[00:13:19] 我玩遊戲不夠重度... 如果遊戲是我設計.... 應該會作出只有我自己想玩的遊戲
2014-01-27 20:13:59	CindyLinz	[00:13:33] 而且我自己也玩一陣子就膩了..ww
2014-01-27 20:13:59	petercommand	[00:13:38] CindyLinz: XD
2014-01-27 20:13:59	CindyLinz	[00:14:24] 前一陣子發現一個無邊界的多人踩地雷遊戲覺得很好玩... http://mienfield.com/
2014-01-27 20:13:59	CindyLinz	[00:14:34] 結果只有我覺得好玩....持續兩天 orz
2014-01-27 20:13:59	hashcat	[00:16:32] 整個創意100分, 有趣0分的遊戲
2014-01-27 20:13:59	CindyLinz	[00:16:49] 有必要說這麼狠嗎.....QQ
2014-01-27 20:13:59	hashcat	[00:18:01] 不過還是可以理解, 就跟我寫prolog的時候一樣
2014-01-27 20:13:59	hashcat	[00:18:27] 結果只有我覺得好玩....持續三個月 orz
2014-01-27 20:13:59	hashcat	[00:20:24] 擴展perl可以用haskell, 表示擴展python可以用idris
2014-01-27 20:13:59	hashcat	[00:21:31] =D
2014-01-27 20:13:59	hashcat	[00:34:06] 問了下idris還只能在單核跑 ==
2014-01-27 20:13:59	CindyLinz	[00:44:17] 這是什麼推論啊.... XD
2014-01-27 20:13:59	hashcat	[00:45:47] 在跟idriser討論加進平行化, 能不就像是在產生的C code加上openmp pragma
2014-01-27 20:13:59	CindyLinz	[00:47:07] 嗯, 有很多系統呼叫要換用加上 _r 自尾的版本
2014-01-27 20:13:59	CindyLinz	[00:47:10] 嗯, 有很多系統呼叫要換用加上 _r 字尾的版本
2014-01-27 20:13:59	hashcat	[00:49:11] _r是啥?
2014-01-27 20:13:59	CindyLinz	[00:50:19] 很多 C 的標準 lib 函數, 例如說 string.h 裡面的 strtok, 會用到自己內建的 static 的 buffer
2014-01-27 20:13:59	CindyLinz	[00:50:41] 而 strtok_r 可以由呼叫端給 buffer
2014-01-27 20:13:59	CindyLinz	[00:51:14] 用內建 static buffer 在 multi-thread 的時候, 如果發生不同的 thread 都去採同一個 static buffer 會悲劇
2014-01-27 20:13:59	hashcat	[00:55:48] 哦
2014-01-27 20:13:59	hashcat	[00:56:55] 睡覺
2014-01-27 20:13:59	CindyLinz	[01:52:51] Dryman 寫的 Monad 教學 http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/
2014-01-27 20:13:59	CindyLinz	[01:52:54] 還沒看 :p
2014-01-27 20:13:59	CindyLinz	[01:55:02] 這張圖解不錯 ^^ http://www.idryman.org/images/monad/monad-structure.png
2014-01-27 20:13:59	CindyLinz	[15:05:51] 嗯, GHC 的 MultiParamClasses extension 也很重要....
2014-01-27 20:13:59	CindyLinz	[15:07:10] TypeSynonymInstances 非必要.. 但我也是覺得沒有會很苦命 XD
2014-01-27 20:13:59	CindyLinz	[15:40:26] 問問題...
2014-01-27 20:13:59	CindyLinz	[15:40:38] Foreign.C.String 裡面有個 newCString
2014-01-27 20:13:59	CindyLinz	[15:41:02] 是 String -> IO (CString)  其中 type CString = Ptr CChar
2014-01-27 20:13:59	CindyLinz	[15:41:25] 這邊給出來的 CString 是需要自己手動去 free 的
2014-01-27 20:13:59	CindyLinz	[15:41:45] 另外有個 withCString
2014-01-27 20:13:59	CindyLinz	[15:41:48] :t withCSTring
2014-01-27 20:13:59	lambdabot	[15:41:49] Not in scope: `withCSTring'
2014-01-27 20:13:59	CindyLinz	[15:41:52] :t withCString
2014-01-27 20:13:59	lambdabot	[15:41:53] Not in scope: `withCString'
2014-01-27 20:13:59	CindyLinz	[15:41:56] orz
2014-01-27 20:13:59	CindyLinz	[15:42:12] withCString :: String -> (CString -> IO a) -> IO a
2014-01-27 20:13:59	CindyLinz	[15:42:31] 它會在我第二個參數的 action 用完以後自動幫我回收.... (很開心)
2014-01-27 20:13:59	CindyLinz	[15:43:24] 現在的問題是, 我是在一個底下墊 MonadIO 的 monad transformer 裡面做事情
2014-01-27 20:13:59	CindyLinz	[15:43:37] 那個 CString 是要在這個 monad transformer 裡面用的
2014-01-27 20:13:59	CindyLinz	[15:43:56] 如果我用 liftIO $ withCString str $ \cstr -> do ... 的話
2014-01-27 20:13:59	CindyLinz	[15:44:18] 最後面那個 action 是 IO a, 沒辦法用我 monad transformer 的函數 @@"
2014-01-27 20:13:59	CindyLinz	[15:44:48] 所以現在只能用 newCString 這種, 然後最後再自己記得 free 掉 @@"
2014-01-27 20:13:59	CindyLinz	[15:45:26] 我要怎麼使用這種 bracket 長相的用法呢?
2014-01-27 20:13:59	godfat	[15:45:50] 弄個 withCStringM ...?
2014-01-27 20:13:59	CindyLinz	[15:46:25] 好兇 XD
2014-01-27 20:13:59	CindyLinz	[15:47:04] 把那些 IO a 都換成 MonadIO m => m a 的版本?
2014-01-27 20:13:59	godfat	[15:47:48] 之類的... XD
2014-01-27 20:13:59	CindyLinz	[15:50:42] mmm
2014-01-27 20:13:59	CindyLinz	[15:51:35] 那麼, 我要怎麼處理 exception 呢? 希望裡面 throw exception 的時候, 我可以先 free 了, 再 re-throw..
2014-01-27 20:13:59	CindyLinz	[15:51:54] Control.Exception 裡面的 catch, try 看起來都是 IO a 的 @@"
2014-01-27 20:13:59	suhorng	[15:53:29] 咦？我以為 IO a 的 catch try 是 Prelude 的
2014-01-27 20:13:59	godfat	[15:53:39] 這些都重做好像工程有點大，而且不見得能做..? XD
2014-01-27 20:13:59	godfat	[15:53:40] 欸，說真的有時候覺得 ghc 的 api 有些缺東缺西...
2014-01-27 20:13:59	godfat	[15:53:40] 雖然好像大多都是 IO 的部份
2014-01-27 20:13:59	suhorng	[15:54:09] 喔喔 是說 IO (Either...)
2014-01-27 20:13:59	CindyLinz	[15:54:12] 好像, 在 IO a 那邊我重新 run 自己的 monad transformer 是一種作法.. 不過我的 monad transformer 有模仿 ST 那樣, 有一個 forall s. 在裡面, 而且我的 run 會做一些應該不能在前一個 run 結束以前再 run 第二次的動作 @@"
2014-01-27 20:13:59	CindyLinz	[15:54:55] suhorng: 原本是 Prelude, 不過 GHC (或 Haskell2010?) 有把它做得更完整. Prelude 還是能用就是
2014-01-27 20:13:59	CindyLinz	[15:55:13] 現在有做成像 Java 樹狀的 exception 家族那樣
2014-01-27 20:13:59	suhorng	[15:55:53] 嗯嗯
2014-01-27 20:13:59	CindyLinz	[15:56:17] 我想想看我能不能分出一個類似 re-run 的函數出來, 讓它不要做原本 run 會有的初始化和結束的部分, 只是讓它可以套在 IO 裡面..
2014-01-27 20:13:59	CindyLinz	[15:57:45] GHC api 都喜歡著重: 這邊是個 Monoid!, 這邊有個 Dual!, 這是個最小的 FixPoint!..... ww
2014-01-27 20:13:59	godfat	[15:58:54] 不知道該說啥
2014-01-27 20:13:59	godfat	[15:58:54] 有時候寫寫 ruby 會想說能用 haskell 多好啊
2014-01-27 20:13:59	godfat	[15:58:54] 可是實際上真的要用又一堆問題 orz
2014-01-27 20:13:59	CindyLinz	[16:00:38] godfat: 工程師! 快來吧~~~ (招手)
2014-01-27 20:13:59	godfat	[16:01:03] 這有點雞蛋問題呀... ~.~
2014-01-27 20:13:59	godfat	[16:01:18] 尤其一堆「工程師」都保守到不行...
2014-01-27 20:13:59	CindyLinz	[16:02:02] 昨天跟 wens 聊天, 講到 perl 的過去版本相容性非常好.. 甚至 doc 裡面還會寫: 這邊會有這樣這樣的行為, 它是一個 unfixable bug, 因為如果修掉了, 會使得很多 third-party lib 壞掉.
2014-01-27 20:13:59	CindyLinz	[16:02:33] 然後想到, Larry Wall 以前是 system admin. system admin 最需要相容性了.. XD
2014-01-27 20:13:59	CindyLinz	[16:02:53] 所以要工程師跳進來 Haskell, 才會讓它適合工程師用 :D
2014-01-27 20:13:59	CindyLinz	[16:03:20] 不能都是數學家這樣... ^^|
2014-01-27 20:13:59	suhorng	[16:05:17] http://www.reddit.com/r/haskell/comments/1br0ls/haskell_beats_c_using_generalised_stream_fusion/ 看看這個能不能吸引一點工程師好了 (炸)
2014-01-27 20:13:59	CindyLinz	[16:10:53] godfat: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-27 20:13:59	CindyLinz	[16:11:26] suhorng: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-27 20:13:59	CindyLinz	[16:11:35] 見者有份歐~~ (咦)
2014-01-27 20:13:59	suhorng	[16:15:41] 好難..XD
2014-01-27 20:13:59	CindyLinz	[16:17:43] ~_~
2014-01-27 20:13:59	godfat	[16:20:40] 所以說起來， sysadmin 用的語言應該要跟 app programmer 不一樣才對 XD
2014-01-27 20:13:59	godfat	[16:20:41] 後者可以用相容性低的東西...
2014-01-27 20:13:59	godfat	[16:20:41] XDDDD 最近太忙了，都沒空玩 haskell... ~.~
2014-01-27 20:13:59	suhorng	[16:21:21] exception真的有辦法解決嗎..?
2014-01-27 20:13:59	CindyLinz	[16:21:35] 解決?
2014-01-27 20:13:59	CindyLinz	[16:21:49] 給 godfat 一個 exception, 他就有空玩 haskell 了這樣?
2014-01-27 20:13:59	godfat	[16:22:00] XDDDD
2014-01-27 20:13:59	suhorng	[16:22:03] XDDD
2014-01-27 20:13:59	CindyLinz	[16:23:13] suhorng: 你問的是什麼啦 XD
2014-01-27 20:13:59	suhorng	[16:24:02] 我想想 ~"~
2014-01-27 20:13:59	CindyLinz	[16:26:27] 我剛剛遇到的情況, 嗯, 可以用純的 unXxxT 解決
2014-01-27 20:13:59	CindyLinz	[16:27:37] 假設我的 monad trans 是 newtype XxxT .... = XxxT { unXxxT :: xxState -> m (xxState, a) }
2014-01-27 20:13:59	CindyLinz	[16:29:23] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT cstr act xxState
2014-01-27 20:13:59	CindyLinz	[16:30:28] 因為我是寫這個 monad trans 的人, 所以我可以直接拿到 xxState
2014-01-27 20:13:59	suhorng	[16:31:06] 唔...實在想不到 exception 能怎麼配上 MonadIO
2014-01-27 20:13:59	suhorng	[16:31:09] 嗯嗯
2014-01-27 20:13:59	CindyLinz	[16:31:38] 這樣就算是有處理到 exception 啦 ^^   因為那個 withCString 就是會處理 exception 的
2014-01-27 20:13:59	CindyLinz	[16:31:52] 而 bracket 應該也可以一樣的包法
2014-01-27 20:13:59	CindyLinz	[16:32:26] 我這個方法, 不適用任意的 MonadIO.. 我得拿得到 internal state 才行 :Q
2014-01-27 20:13:59	suhorng	[16:32:28] 喔~
2014-01-27 20:13:59	suhorng	[16:32:47] 遇到奇怪的 MonadIO 的話也不行XD
2014-01-27 20:13:59	CindyLinz	[16:33:09] 嗯, 有可能是 monad trans 提供者才能做..
2014-01-27 20:13:59	CindyLinz	[16:36:54] 咦.. 寫錯了..
2014-01-27 20:13:59	CindyLinz	[16:37:09] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-27 20:13:59	CindyLinz	[16:37:12] 這樣才對
2014-01-27 20:13:59	CindyLinz	[17:05:00] 突然覺得自己現在竟然能很順地寫出這種東西很不可思議.. # liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-27 20:13:59	CindyLinz	[17:05:13] 以前讀別人的 code 寫這東西超崩潰的...ww
2014-01-27 20:13:59	kanru	[17:06:43] XDD
2014-01-27 20:13:59	suhorng	[18:02:30] 嗯... try :: Exception e => IO a -> IO (Either e a)  這類函式是不是真的沒辦法變成 MonadIO m => m a -> m (Either e a) ...？
2014-01-27 20:13:59	suhorng	[18:06:48] 好像真的無可避免
2014-01-27 20:13:59	CindyLinz	[18:10:12] 好像應該要舉一個反例出來證明變不出來...
2014-01-27 20:13:59	suhorng	[18:10:30] 我好像笨了
2014-01-27 20:13:59	suhorng	[18:10:35] 好像可以
2014-01-27 20:13:59	suhorng	[18:11:32] ..不對 不可以那樣做 XDDDD 可以弄出 type correct 但是沒有 try 效果的 Exception e => m a -> m (Either e a)
2014-01-27 20:13:59	CindyLinz	[18:12:30] tryM :: MonadIO m => m a -> m (Either e a)    tryM = tryM ? (誤)
2014-01-27 20:13:59	suhorng	[18:14:19] \ma -> do { a <- ma; liftIO (try (return a)) }，我剛剛竟然在想這個，真是太呆了
2014-01-27 20:13:59	CindyLinz	[18:15:52] 那個 try 就是這個 tryM 哄? XD
2014-01-27 20:13:59	CindyLinz	[18:16:05] 那的確就是 tryM = tryM... XD
2014-01-27 20:13:59	suhorng	[18:17:19] 不是吧Q_Q 這個是 tryM = liftM Right
2014-01-27 20:13:59	CindyLinz	[18:18:25] 喔喔.. 事情都在前面的 a <- ma 做完了 XD
2014-01-27 20:13:59	CindyLinz	[18:18:56] a <- ma 地方可以確認這個 ma 會 return
2014-01-27 20:13:59	***	Playback Complete.
2014-01-27 20:14:17	--	モード #haskell.tw [+cnt]
2014-01-27 20:14:17	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-27 20:24:47	-->	town55 (~1@118.116.243.25) が #haskell.tw に参加
2014-01-27 20:26:54	<--	town55 (~1@118.116.243.25) が終了 (Max SendQ exceeded)
2014-01-27 20:27:48	-->	town55 (~1@118.116.243.25) が #haskell.tw に参加
2014-01-27 20:30:12	<--	town55 (~1@118.116.243.25) が終了 (Max SendQ exceeded)
2014-01-27 20:31:04	-->	town55 (~1@118.116.243.25) が #haskell.tw に参加
2014-01-27 20:32:52	<--	town55 (~1@118.116.243.25) が終了 (Max SendQ exceeded)
2014-01-27 20:33:38	-->	town55 (~1@118.116.243.25) が #haskell.tw に参加
2014-01-27 21:32:15	<--	town55 (~1@118.116.243.25) が終了 (Ping timeout: 272 seconds)
2014-01-27 21:49:27	-->	hashcat (~kv2a@36-238-32-169.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-27 21:54:54	-->	town55 (~1@139.202.132.214) が #haskell.tw に参加
2014-01-27 21:56:19	<--	town55 (~1@139.202.132.214) が終了 (Max SendQ exceeded)
2014-01-27 21:57:22	-->	town55 (~1@139.202.132.214) が #haskell.tw に参加
2014-01-27 21:58:54	<--	town55 (~1@139.202.132.214) が終了 (Max SendQ exceeded)
2014-01-27 22:00:04	-->	town55 (~1@139.202.132.214) が #haskell.tw に参加
2014-01-27 22:06:34	--	irc: サーバから切断
2014-01-28 09:22:45	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-28 09:22:45	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-28 09:22:45	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-28 09:22:45	--	ニックネーム #haskell.tw: [a2n cataska cataska_ cibs CindyLinz cyt93cs darkx drbean gko godfat1 hychen kanru lambdabot letoh logfat_____ miaout17 mno2 monochrom petercommand shik superbil_c]
2014-01-28 09:22:45	--	チャンネル #haskell.tw: 21 ニックネーム (0 オペレータ, 0 発言, 21 通常)
2014-01-28 09:22:45	***	Buffer Playback...
2014-01-28 09:22:45	hashcat_	[00:26:58] 用怪招說明他可以推論出來
2014-01-28 09:22:45	suhorng	[00:27:09] Rank2Types感覺有點差別欸
2014-01-28 09:22:45	hashcat_	[00:27:10] 也不算怪招啦
2014-01-28 09:22:45	suhorng	[00:27:21] 不知道是不是在型別推論的地方有差
2014-01-28 09:22:45	hashcat_	[00:27:25] pattern matching不就隱含解構子的存在了
2014-01-28 09:22:45	CindyLinz	[00:27:42] Rank2Type 指的是 forall 可以寫在 -> 的左邊..
2014-01-28 09:22:45	suhorng	[00:27:42] 有很多種不同的解構子？
2014-01-28 09:22:45	hashcat_	[00:27:55] 從別的方面講Haskell既然說他是statically type就不會騙人吧
2014-01-28 09:22:45	hashcat_	[00:28:11] 執行時期是根本沒型別資訊
2014-01-28 09:22:45	hashcat_	[00:28:19] 不像C++還是有保留
2014-01-28 09:22:45	CindyLinz	[00:28:20] Rank3Type (應該沒這 extension, 想 >2 全都用 N types 了吧?)  就是 -> 的左邊如果是個 ( .... -> .... ), 這個裡面的 -> 的左邊可以有 forall.. XD
2014-01-28 09:22:45	suhorng	[00:28:23] CindyLinz: 是想說 rank 2 types 的型別推論是 decidable， > 2 不是 decidable
2014-01-28 09:22:45	suhorng	[00:28:40] RankNTypes 需要寫type signature 這樣 @口@
2014-01-28 09:22:45	CindyLinz	[00:28:47] 反正我寫不出無法 decide 的 type...ww
2014-01-28 09:22:45	CindyLinz	[00:29:07] DFS 50 層內一定解得出來 (逃)
2014-01-28 09:22:45	hashcat_	[00:29:20] statically type是說他沒法斷定型別就不會讓你編譯過
2014-01-28 09:22:45	hashcat_	[00:29:40] 算了最近對haskell沒興趣
2014-01-28 09:22:45	suhorng	[00:29:40] 就..型別是 Test，然後Test有 Class a =>，所以可以編譯過阿XD
2014-01-28 09:22:45	hashcat_	[00:30:11] prolog.tw
2014-01-28 09:22:45	hashcat_	[00:30:24] 成立成立
2014-01-28 09:22:45	hashcat_	[00:31:13] 突然一陣靜默
2014-01-28 09:22:45	suhorng	[00:31:14] DFS 50層 XDDD
2014-01-28 09:22:45	suhorng	[00:31:22] UndecidableInstances！
2014-01-28 09:22:45	CindyLinz	[00:31:53] suhorng: 我覺得差別是... (不考慮 Typeable 和 Dyn 的話) haskell 裡面一般是無法做 C++ 的 typeof(...) 或 x instanceof y 或是 parent class 往 childe class 的轉型
2014-01-28 09:22:45	hashcat_	[00:32:03] 這麼喜歡動態就看prolog吧
2014-01-28 09:22:45	CindyLinz	[00:32:52] 不考慮 Typeable / Dyn 是因為, 我覺得它是 programmer 額外加上的 note. 如果 programmer 惡意亂指定 TyCon, ghc 也會放行
2014-01-28 09:22:45	suhorng	[00:33:02] 會爆炸XD
2014-01-28 09:22:45	CindyLinz	[00:33:16] 會爆嗎? 就會轉出神妙的東西吧? XD
2014-01-28 09:22:45	suhorng	[00:33:32] 可以讓他segmentation fault!
2014-01-28 09:22:45	CindyLinz	[00:34:08] 呃... 能嗎? @_@"
2014-01-28 09:22:45	CindyLinz	[00:34:23] 我以為只是你存了一個 Int 進去, 取了一個 Char 出來...
2014-01-28 09:22:45	CindyLinz	[00:34:44] 或是你惡搞這個 http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Dynamic.html 裡面的 fromDyn 和 fromDynamic
2014-01-28 09:22:45	CindyLinz	[00:34:54] 做出一個希格斯粒子 type... ww
2014-01-28 09:22:45	CindyLinz	[00:35:07] 你想要什 type 元素, 我都能生給你!
2014-01-28 09:22:45	hashcat_	[00:35:38] 原來討論的什麼怎樣了
2014-01-28 09:22:45	CindyLinz	[00:35:57] 耶不行... Dynamic 裡的格式不是我們自訂.. 是被 Typeable 定死了
2014-01-28 09:22:45	CindyLinz	[00:36:00] 那只能選一種 XD
2014-01-28 09:22:45	suhorng	[00:36:11] 神秘
2014-01-28 09:22:45	CindyLinz	[00:36:13] 但應該可以把 Int 總是轉成 Char... XD
2014-01-28 09:22:45	suhorng	[00:36:20] Typeable我記得有讓他壞掉的例子XD
2014-01-28 09:22:45	monochrom	[00:37:01] 爆炸也是神妙的東西啊! XD
2014-01-28 09:22:45	CindyLinz	[00:37:03] 用 TyCon 硬寫一個不存在的 type 應該就死了吧?
2014-01-28 09:22:45	CindyLinz	[00:37:14] 我是還沒用過... ._.
2014-01-28 09:22:45	suhorng	[00:37:31] http://okmij.org/ftp/Haskell/types.html#unsound-typeable
2014-01-28 09:22:45	CindyLinz	[00:38:38] 好切回來一下, 我覺得 Dyn 和 Typeable 不算是 Haskell 語言本身的東西, 是 lib 這樣, 所以和 C++ 的情況不同 ^^|
2014-01-28 09:22:45	CindyLinz	[00:39:19] 但不代表 statically 就知道每一個 rigid type, 有可能只確定到一定是某個 class 的 instance 而已
2014-01-28 09:22:45	suhorng	[00:39:47] 我就在想實作怎麼實作; 假設Haskell98的話
2014-01-28 09:22:45	hashcat	[00:40:01] 睡覺
2014-01-28 09:22:45	monochrom	[00:40:04] 自行寫一個 "newtype I = I Int; newtype C = C Char", 然後為它們寫些壞的 Typeable 碼, 應該就可以透過 I 和 C 互換來把 Int 和 Char 互換.
2014-01-28 09:22:45	CindyLinz	[00:40:05] 晚安 XD
2014-01-28 09:22:45	suhorng	[00:40:06] 每次每個多型函數用的時候我們都知道他被instantiate成什麼type
2014-01-28 09:22:45	suhorng	[00:40:15] XD
2014-01-28 09:22:45	CindyLinz	[00:40:24] 壞的 Typeable 碼... XD
2014-01-28 09:22:45	suhorng	[00:40:30] 所以可以在instantiate的時候直接複製一份code
2014-01-28 09:22:45	suhorng	[00:40:37] 像template那樣
2014-01-28 09:22:45	CindyLinz	[00:40:52] 嗯
2014-01-28 09:22:45	suhorng	[00:41:06] 感覺typeclass也是一樣可以靜態知道可能用哪個多載的函數
2014-01-28 09:22:45	CindyLinz	[00:41:15] 是.... 哪些?
2014-01-28 09:22:45	CindyLinz	[00:41:28] 而不能明確縮小到一個吧 @@"
2014-01-28 09:22:45	CindyLinz	[00:41:53] 如果要能實作 showGenList :: GenList -> String 的話..
2014-01-28 09:22:45	suhorng	[00:42:03] 限定Haskell98 XD
2014-01-28 09:22:45	CindyLinz	[00:42:07] 喔喔
2014-01-28 09:22:45	suhorng	[00:44:06] 如果複製一份code的話這樣不需要實作多型表示(或紀錄 runtime type information)之類..
2014-01-28 09:22:45	CindyLinz	[00:44:35] 可是 Haskell98 好卡欸... ww
2014-01-28 09:22:45	suhorng	[00:44:55] 但是現在這種typeclass感覺就不行了吧, 咦定要在constructor裡面帶一些東西 (像哪個branch之類, 或類似 virtual table 那種東西...)
2014-01-28 09:22:45	suhorng	[00:44:56] XD
2014-01-28 09:22:45	CindyLinz	[00:45:45] 沒有 FlexibleInstances 和 ScopedTypeVariable 我活不下去... QQ
2014-01-28 09:22:45	suhorng	[00:46:29] 說到 scoped type variables 我在想 idris 是怎麼做的 |||
2014-01-28 09:22:45	CindyLinz	[00:46:33] virtual table 應該是把 type 帶進去....
2014-01-28 09:22:45	suhorng	[00:46:41] 嗯
2014-01-28 09:22:45	CindyLinz	[00:46:47] 不過 haskell 可以不用帶 type, 而是把要用到的 member function 帶進去
2014-01-28 09:22:45	CindyLinz	[00:47:23] 而且 haskell 的 class 可以是兩三個以上的 type 交互作用... 好吧, 還是可以用 tuple 的方式一次帶 N 個 type... ww
2014-01-28 09:22:45	suhorng	[00:47:24] 詳細一下？是怎樣XD
2014-01-28 09:22:45	CindyLinz	[00:47:55] 剛剛我講的那個 Show 就是把 show 帶進去呀... Int 的 element 就帶個 Show Int 的 show, Char 的 element 就帶 Show Char 的 show
2014-01-28 09:22:45	CindyLinz	[00:48:29] 然後 showGenList 在跑的時候就是逐個拿 show 出來用.. 而它背後是什麼 type, 可以搞不清楚, 用就對了
2014-01-28 09:22:45	suhorng	[00:48:41] 類似對於每次用的時候
2014-01-28 09:22:45	suhorng	[00:48:46] *用constructor
2014-01-28 09:22:45	suhorng	[00:49:01] 給個資料結構, 對每個instance儲存那個函式？
2014-01-28 09:22:45	CindyLinz	[00:49:15] 嗯, 函數指標之類的東西
2014-01-28 09:22:45	CindyLinz	[00:49:40] 好吧, 其實是會存到一個指向整個 Show Int 的表格
2014-01-28 09:22:45	suhorng	[00:49:56] 好吧, 這個可以靜態弄好, 不用動態建立 XD
2014-01-28 09:22:45	CindyLinz	[00:49:58] 也是 table 等級的東西.... 拆散可能效率也沒比較好
2014-01-28 09:22:45	suhorng	[00:50:19] 喔...突然想到我剛剛那個例子不知道能不能用newtype
2014-01-28 09:22:45	CindyLinz	[00:50:36] 所有的 Show a.. Show Int, Show Char, Show Double 應該都會是長度一樣的 struct
2014-01-28 09:22:45	suhorng	[00:50:39] 嗯
2014-01-28 09:22:45	CindyLinz	[00:51:06] Java 的話就是 parent 短, child 長, 但 prefix 一樣; C++ 應該要有一個很動態的查表吧?
2014-01-28 09:22:45	CindyLinz	[00:51:26] 因為 C++ 有多重繼承, 好麻煩 XD
2014-01-28 09:22:45	suhorng	[00:51:35] XDD
2014-01-28 09:22:45	suhorng	[00:51:42] 沒會過C++的作法
2014-01-28 09:22:45	CindyLinz	[00:51:47] ._.
2014-01-28 09:22:45	CindyLinz	[00:52:17] 哪個例子啊? XD
2014-01-28 09:22:45	suhorng	[00:52:31] data Test where...那個
2014-01-28 09:22:45	suhorng	[00:52:42] 因為想到newtype沒有執行時期constructor
2014-01-28 09:22:45	CindyLinz	[00:53:44] 唔.. 在定義 data 的地方放 class constraint 不是要被 deprecate 了嗎? XD
2014-01-28 09:22:45	suhorng	[00:53:47] 喔 Rank2Types 跟我想的不一樣...
2014-01-28 09:22:45	suhorng	[00:53:54] deprecate？
2014-01-28 09:22:45	suhorng	[00:54:04] 真假=口=
2014-01-28 09:22:45	CindyLinz	[00:54:06] 被說是個設計壞了的功能..
2014-01-28 09:22:45	suhorng	[00:54:16] 因為我還在用 GHC 7.4...
2014-01-28 09:22:45	CindyLinz	[00:54:33] 因為在定義這個 type 用的函數的地方, 再加 constraint 就好了
2014-01-28 09:22:45	suhorng	[00:54:42] 我還以為 GADT 可以隨便放 type signature XDDD 原來不行噢...
2014-01-28 09:22:45	CindyLinz	[00:54:42] 而就算 data 加了... 函數的地方還是要再加
2014-01-28 09:22:45	CindyLinz	[00:54:48] 喔不不, 我不是說 GADT
2014-01-28 09:22:45	suhorng	[00:54:51] !? 這裡不用阿XD
2014-01-28 09:22:45	CindyLinz	[00:55:39] 你這個不就是 data Test = Constructor a 嗎?
2014-01-28 09:22:45	CindyLinz	[00:55:49] 啊, 左邊沒 a.. 那可以放 XD
2014-01-28 09:22:45	suhorng	[00:55:50] 是說這個 http://ideone.com/9kgrGB
2014-01-28 09:22:45	suhorng	[00:55:57] 跟 GenShow 同個東西
2014-01-28 09:22:45	CindyLinz	[00:56:04] 是 forall 型的..
2014-01-28 09:22:45	CindyLinz	[00:56:35] 如果是 Test :: Class a => a -> Test a 應該就會被罵吧?
2014-01-28 09:22:45	suhorng	[00:56:53] XDD
2014-01-28 09:22:45	CindyLinz	[00:57:17] 不過因為是 Test :: Class a => a -> Test 就還好
2014-01-28 09:22:45	CindyLinz	[00:58:52] suhorng: 欸.. newtype 的話你這邊 a 得是個具體的 type 吧?
2014-01-28 09:22:45	CindyLinz	[00:59:07] 好像不用.. orz
2014-01-28 09:22:45	suhorng	[00:59:20] !?
2014-01-28 09:22:45	CindyLinz	[00:59:33] 搞錯
2014-01-28 09:22:45	suhorng	[00:59:43] 剛剛用newtype結果能成功, 不知道怎麼實作的
2014-01-28 09:22:45	suhorng	[00:59:56] 好奇怪, 我原本以為 Rank2Types 不用手動寫型別標記, 結果要
2014-01-28 09:22:45	CindyLinz	[01:02:00] 我以為開那個就是為了寫 forall... 你開了又不想寫是什麼打算啊? @@"
2014-01-28 09:22:45	suhorng	[01:02:47] 原本想讓他 type inference 有 rank 2 type
2014-01-28 09:22:45	CindyLinz	[01:02:56] 喔
2014-01-28 09:22:45	suhorng	[01:02:59] 不過我肯定搞錯了東西...
2014-01-28 09:22:45	CindyLinz	[01:03:14] 嗯, 我看以前你貼的這篇... http://www.vidarholen.net/contents/junk/catbag.html
2014-01-28 09:22:45	CindyLinz	[01:03:30] 如果把 type sig 擦掉, 應該還是可以用.. 可是就沒有他想要的效果了?
2014-01-28 09:22:45	CindyLinz	[01:04:28] 也不對 不是看這篇
2014-01-28 09:22:45	CindyLinz	[01:04:34] 我是去看 ST monad 的 source..
2014-01-28 09:22:45	CindyLinz	[01:04:49] 他 data 左邊的 s, 在右邊也有出現, 就直接當 state
2014-01-28 09:22:45	CindyLinz	[01:05:01] 不過它有在一些地方加 forall..
2014-01-28 09:22:45	suhorng	[01:05:03] 唔
2014-01-28 09:22:45	suhorng	[01:05:05] 嗯....
2014-01-28 09:22:45	CindyLinz	[01:05:14] 如果都沒加的話, 這個 s 應該就可以被摸出去了吧?
2014-01-28 09:22:45	suhorng	[01:05:30] 這樣好像 Rank2Types 是 RankNTypes 的子集沒錯
2014-01-28 09:22:45	suhorng	[01:05:38] 原本以為對型別標記的要求不同
2014-01-28 09:22:45	CindyLinz	[01:05:46] 喔~
2014-01-28 09:22:45	CindyLinz	[01:07:46] 欸我看你給的那個 package Effects
2014-01-28 09:22:45	suhorng	[01:07:54] 嘎嘎
2014-01-28 09:22:45	CindyLinz	[01:08:00] https://hackage.haskell.org/package/effects
2014-01-28 09:22:45	CindyLinz	[01:08:33] 我是這樣理解: 它用起來就像.... 如果用 monad trans 的時候, 都是用 liftIO, liftReader, liftState.. 而不用 lift
2014-01-28 09:22:45	CindyLinz	[01:08:51] 然後它提供兩個額外的工具...
2014-01-28 09:22:45	CindyLinz	[01:09:47] 一個是那個 Effect proxy, 當這一群..... monad trans 疊裡面有出現同一種 monad trans 的時候, 還能夠分得出來 (不然純用 monad trans 的話, 同一類型的只能用到其中一個)
2014-01-28 09:22:45	suhorng	[01:09:52] 額外的工具？
2014-01-28 09:22:45	CindyLinz	[01:10:24] 另一個.. 我猜測應該有, 但還不清楚.. 就是直接用 monad trans, 想隨便用 liftIO, liftReader 這些東西的話
2014-01-28 09:22:45	suhorng	[01:10:29] 他的作法感覺完全跟 monad transformer 不同（用起來不知道|||），從頭到尾只有一個 monad...
2014-01-28 09:22:45	suhorng	[01:10:43] 嗯嗯
2014-01-28 09:22:45	CindyLinz	[01:10:56] 我們要為所有用到的 MonadTrans 們 (假設有 N 種), 去定 N*(N-1) 種 instance
2014-01-28 09:22:45	suhorng	[01:11:12] 對..
2014-01-28 09:22:45	CindyLinz	[01:11:36] 就是 instance ReaderMonad m => ReaderMonad (WriterT w m)
2014-01-28 09:22:45	monochrom	[01:11:56] ST 和 IO 的 所謂 "s -> (# a, s #)", 那個 s 請別當真. 它只是用來哄 optimizer "請不要顛倒次序"
2014-01-28 09:22:45	suhorng	[01:13:06] XD...
2014-01-28 09:22:45	suhorng	[01:13:33] 然後最後其實沒有那個 s 存在 XD?
2014-01-28 09:22:45	CindyLinz	[01:13:52] 這個 N*(N-1) 的麻煩, 如果可以容忍 OverlappingInstances extension 的話, 可以變成 N.. 只是我自己對 OverlappingInstances 有一點怕怕的, 因為它會選到誰, 雖然是明確定義的, 但是從程式碼裡面去讀, 不太明顯 @@"
2014-01-28 09:22:45	CindyLinz	[01:14:30] monochrom: 好 XD
2014-01-28 09:22:45	CindyLinz	[01:14:54] suhorng: 作法還沒讀.. 是從使用的 example.hs 感受的 :p
2014-01-28 09:22:45	suhorng	[01:15:08] 他那個明確定義感覺很模糊阿XDDD
2014-01-28 09:22:45	suhorng	[01:15:14] 之前說的 scoped type variable https://gist.github.com/suhorng/8601726
2014-01-28 09:22:45	suhorng	[01:15:29] 因為 variable 本身就有 scope，所以就有 scoped type variable...各種微妙
2014-01-28 09:22:45	CindyLinz	[01:15:35] 有比 monad is just a monoid... 模糊嗎?
2014-01-28 09:22:45	suhorng	[01:15:56] 這lol monad is just a monoid 感覺可以不模糊
2014-01-28 09:22:45	CindyLinz	[01:16:19] 那個 {b} 是什麼啊?
2014-01-28 09:22:45	suhorng	[01:16:21] // ap1 會 compile error
2014-01-28 09:22:45	suhorng	[01:16:34] implicit argument
2014-01-28 09:22:45	CindyLinz	[01:16:39] 噢 .idr XD
2014-01-28 09:22:45	CindyLinz	[01:16:48] 我應該讀作 forall b. 對吧? XD
2014-01-28 09:22:45	suhorng	[01:17:01] ap1 : (a -> b) -> a -> b 其實會變 ap1 : {a : Type} -> {b : Type} -> ...
2014-01-28 09:22:45	suhorng	[01:17:02] XD
2014-01-28 09:22:45	monochrom	[01:17:03] 即是說, 當你寫 "\s0 -> case getinput s0 of (x, s1) -> case output s1 (x+1) of (_, s2) -> output s2 "bye"", 因著 s0, s1, s2 之間的 data dependency, 所以 optimizer 及 code generator 迫著服從你給的順序, 不能像 pure functional code 那樣"次序沒所謂"
2014-01-28 09:22:45	CindyLinz	[01:17:05] 不對 是寫在下面 orz
2014-01-28 09:22:45	monochrom	[01:17:33] 對的, 最後那個 s 不存在.
2014-01-28 09:22:45	suhorng	[01:17:36] monochrom: 好像有點感覺
2014-01-28 09:22:45	CindyLinz	[01:18:25] 那 suhorng 貼的那個 Bag Cat 就沒這效果了? 它只有防止 Cat 被外面摸到
2014-01-28 09:22:45	suhorng	[01:19:22] 驚
2014-01-28 09:22:45	CindyLinz	[01:21:03] suhorng: 我一次遇到 scoped type variable 是在一個 sig 有 forall 的函數裡面定義內用的 helper, 想這個 helper 的 sig, 而這個 sig 裡面用到那個被 forall 的 type
2014-01-28 09:22:45	CindyLinz	[01:21:17] 沒開這個 ext 的話, compiler 說這兩個 type 是不同個..
2014-01-28 09:22:45	suhorng	[01:21:19] 有遇過!
2014-01-28 09:22:45	suhorng	[01:21:21] 真的 XDDD
2014-01-28 09:22:45	suhorng	[01:21:46] 不過 idris 直接當成一個參數把 type 拿近來..
2014-01-28 09:22:45	CindyLinz	[01:23:20] 預設打開了..
2014-01-28 09:22:45	CindyLinz	[01:23:29] 我覺得它是該開啊... QQ
2014-01-28 09:22:45	suhorng	[01:23:32] 不用打開喔lol
2014-01-28 09:22:45	suhorng	[01:23:34] 不是打開
2014-01-28 09:22:45	suhorng	[01:23:39] 而是像那個 {a}
2014-01-28 09:22:45	CindyLinz	[01:23:44] 只是那如果真要用兩個不一樣的 type, 裡面就要換名字了...
2014-01-28 09:22:45	suhorng	[01:23:57] 普通的variable scope，不是另一個不同的 "type" variable
2014-01-28 09:22:45	CindyLinz	[01:24:41] 就.. 裡面用到同一個名字的時候, 就是在指稱它了
2014-01-28 09:22:45	suhorng	[01:25:15] 就是普通的 variable scoping rule
2014-01-28 09:22:45	suhorng	[01:25:25] 跟 f a = ... where ... = ... a ... 一樣
2014-01-28 09:22:45	CindyLinz	[01:25:34] 你第二行的 {b} 和第一行的 b 是同一個東西嗎?
2014-01-28 09:22:45	suhorng	[01:25:35] 只不過現在這個 a 不一定存值, 也可以是type XD
2014-01-28 09:22:45	suhorng	[01:25:47] 那個code我發現我打錯字..改成 {a} 了
2014-01-28 09:22:45	CindyLinz	[01:26:22] 我是說 ap1 {b} 和 ap1 : ( a -> b ) ...
2014-01-28 09:22:45	suhorng	[01:26:31] 對
2014-01-28 09:22:45	suhorng	[01:26:34] 是同一個東西
2014-01-28 09:22:45	CindyLinz	[01:27:01] 然後因為第二行有 {b}, 所以第三行的 apply 可以用 b 來描述 type?
2014-01-28 09:22:45	suhorng	[01:28:00] 對
2014-01-28 09:22:45	CindyLinz	[01:28:25] 如果第二行沒有 {b}, 那第三行的 b 會被當 free variable (forall) 的意思?
2014-01-28 09:22:45	suhorng	[01:28:35] 對 會變新的
2014-01-28 09:22:45	CindyLinz	[01:28:55] 這樣好像比較好..
2014-01-28 09:22:45	CindyLinz	[01:29:20] ghc ext 那樣是要開就整個 module 全開了.. 所有的 forall 都變成 {x} 宣告
2014-01-28 09:22:45	suhorng	[01:29:38] XDDD
2014-01-28 09:22:45	CindyLinz	[01:30:05] 雖然實際上困擾也沒很大? 反正 a 或 b... 通常也都是沒意義的名字, 換了不會心痛 ww
2014-01-28 09:22:45	suhorng	[01:30:34] 是沒錯
2014-01-28 09:22:45	suhorng	[01:30:44] 但是很有趣w 當type變成可以拿來亂弄以後
2014-01-28 09:22:45	suhorng	[01:30:49] 很多東西可以消失不見
2014-01-28 09:22:45	CindyLinz	[01:31:44] 你是說很多 extension 就沒有存在的必要?
2014-01-28 09:22:45	suhorng	[01:32:41] 好像也不是這樣說 T_T
2014-01-28 09:22:45	suhorng	[01:32:58] 感覺..有些事情有統一的處理方法
2014-01-28 09:22:45	CindyLinz	[01:33:09] 我只是想先聽懂你說「消失」指的是哪方面
2014-01-28 09:22:45	CindyLinz	[01:33:22] 畢竟... Agda 裡面要打的字是變多了, 空格也變多了... XD
2014-01-28 09:22:45	suhorng	[01:33:25] e.g. ScopedTypeVariable
2014-01-28 09:22:45	CindyLinz	[01:33:36] 少一個 extension 沒錯.. XD
2014-01-28 09:22:45	CindyLinz	[01:33:53] 我覺得這一個不算.. XD
2014-01-28 09:22:45	suhorng	[01:33:58] 不少用 typeclass 做的事情也不再需要, 像是 type level list
2014-01-28 09:22:45	CindyLinz	[01:34:19] Haskell 弄成每一個 type var 前面加一下 scoped a. 也行啊? XD
2014-01-28 09:22:45	suhorng	[01:34:49] forall a. 那樣綁起來w？
2014-01-28 09:22:45	CindyLinz	[01:35:29] 對啊多一種修飾字這樣... 畢竟 forall 和 scoped 還是講不同的事 @@"
2014-01-28 09:22:45	suhorng	[01:35:44] 嗯嗯XD
2014-01-28 09:22:45	CindyLinz	[01:36:28] 想到 Agda... 再對照你的心得... 譯: 只要把靈魂賣給惡魔, 就不用學一堆怎麼看天氣和開船的技能了...
2014-01-28 09:22:45	CindyLinz	[01:36:39] (ref: 幽靈船)
2014-01-28 09:22:45	suhorng	[01:36:41] 什麼wwwwwwwww
2014-01-28 09:22:45	suhorng	[01:37:00] 惡魔是dependently typed之類嗎XD
2014-01-28 09:22:45	CindyLinz	[01:37:04] 對啊..
2014-01-28 09:22:45	suhorng	[01:37:11] 我是還不能體會他的好處
2014-01-28 09:22:45	suhorng	[01:37:16] 不過他很好玩XD
2014-01-28 09:22:45	CindyLinz	[01:38:05] 嗯嗯
2014-01-28 09:22:45	CindyLinz	[01:42:17] 然後更之前你丟過一篇也是講 Effect 的 paper, 嗯, 我只有看很前面... 覺得它好像比這個 Effects packet 來得動態
2014-01-28 09:22:45	CindyLinz	[01:42:36] 而且, 沒有去處理疊了兩層同一種 effect 的問題...
2014-01-28 09:22:45	CindyLinz	[01:42:48] 應該說, 好像只是名字像, 其實是在處理不同的東西?
2014-01-28 09:22:45	CindyLinz	[01:43:27] 看 Effects example.hs 裡面, 它會用 with (ref 5) $ \x -> with (ref 7) $ \y -> 這樣來寫
2014-01-28 09:22:45	CindyLinz	[01:43:37] 我覺得 action 本身也不太動態呀..
2014-01-28 09:22:45	CindyLinz	[01:44:00] 而如果要在裡面呼叫會使用這邊 5 或 7 的 action... 應該要把 x 和 y explicitly 傳過去
2014-01-28 09:22:45	CindyLinz	[01:44:35] 嗯, 我還要再繼續讀讀.... ^^|
2014-01-28 09:22:45	suhorng	[01:46:50] 來得動態？
2014-01-28 09:22:45	suhorng	[01:46:58] 我之前丟的那個paper出package了
2014-01-28 09:22:45	suhorng	[01:47:12] http://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html
2014-01-28 09:22:45	suhorng	[01:47:31] 我也想比較，可是還不瞭解這個 Effects 的作法 QQ
2014-01-28 09:22:45	suhorng	[01:47:54] x y 直接傳進去感覺更像用可改的變數XD
2014-01-28 09:22:45	CindyLinz	[01:48:07] 我有點希望 Effects 其實就是 MonadTrans 的某種包裝.... 這樣我就可以已經懂一半了 XD
2014-01-28 09:22:45	CindyLinz	[01:48:28] 不一定能改啦... 如果原本那一項對應的是 Reader 的話, 就是 constant XD
2014-01-28 09:22:45	suhorng	[01:48:46] 喔喔喔對 XDD
2014-01-28 09:22:45	suhorng	[01:49:03] 這兩種好像就是要跟 monad transformer 不同
2014-01-28 09:22:45	suhorng	[01:49:49] https://github.com/suhorng/HaskellExercise/blob/master/effect/TestEffect.hs 這個..老實說他的code真的跟 monad transformer 很像
2014-01-28 09:22:45	CindyLinz	[01:49:58] 你是不是還有貼過誰在 stackoverflow 說, 仍然比較喜歡 Monad Transformer?
2014-01-28 09:22:45	suhorng	[01:50:11] 但是他要加更多type = =|||
2014-01-28 09:22:45	suhorng	[01:50:32] 不太有印象，我貼過得可能是不喜歡這個也不喜歡 monad transformer
2014-01-28 09:22:45	CindyLinz	[01:51:12] 記得人名嗎? XD
2014-01-28 09:22:45	suhorng	[01:51:34] 只記得是 pipes 的作者...orz
2014-01-28 09:22:45	CindyLinz	[01:53:13] QQ
2014-01-28 09:22:45	suhorng	[01:53:20] https://groups.google.com/forum/#!topic/haskell-pipes/BTQsITNwflc 第二篇
2014-01-28 09:22:45	CindyLinz	[01:54:09] 歐! 謝謝~~
2014-01-28 09:22:45	CindyLinz	[01:54:28] 厚剛以為是 stackoverflow... 下了 site:stackoverflow.com 原來就把可能的來源刪了.... orz
2014-01-28 09:22:45	suhorng	[01:55:07] XDD
2014-01-28 09:22:45	suhorng	[02:00:49] 天阿我說錯了orzzz 應該是倒數第二封信, 不是第二封信...
2014-01-28 09:22:45	CindyLinz	[02:04:56] 沒關係.. 一整串下來就會看到了 ^^|
2014-01-28 09:22:45	CindyLinz	[02:06:34] 嗯 看 paper 的時候, 蠻前面就拿類似這種例子出來 demo, 感覺的確有一點不舒服... XD
2014-01-28 09:22:45	hashcat	[22:15:53] idris的effect paper很好懂
2014-01-28 09:22:45	suhorng	[22:35:16] 還沒懂他的作法
2014-01-28 09:22:45	suhorng	[22:36:12] 例如他的choice說是可以在 Maybe 或 List 這兩種 context 中做
2014-01-28 09:22:45	suhorng	[22:36:24] 那如果我還想要 IO 的話該怎麼辦呢?
2014-01-28 09:22:45	suhorng	[22:36:53] 是不是我要自己寫一個 IO (List a) 之類的 context？
2014-01-28 09:22:45	hashcat	[23:01:41] ???
2014-01-28 09:22:45	suhorng	[23:03:16] 如果我想要有 IO 又想要有 Selection 的話該怎麼做呢?
2014-01-28 09:22:45	hashcat	[23:11:53] 有列表儲存各種effect
2014-01-28 09:22:45	hashcat	[23:12:53] http://eb.host.cs.st-andrews.ac.uk/talks/idris-cph-lec3.pdf
2014-01-28 09:22:45	hashcat	[23:13:00] 看第18頁
2014-01-28 09:22:45	hashcat	[23:14:22] 有個參數是List EFF
2014-01-28 09:22:45	hashcat	[23:17:15] 看範例好了 : http://www.cs.st-andrews.ac.uk/~eb/effect-examples.tgz
2014-01-28 09:22:45	hashcat	[23:17:30] Lang.idr我覺得最好懂
2014-01-28 09:22:45	hashcat	[23:20:01] 他裡面的型別是長這樣 eval : Expr -> Eff IO [EXCEPTION String, STDIO, RND, STATE Env] Int
2014-01-28 09:22:45	hashcat	[23:20:23] 來自創新詞: 最終效果, 途中效果
2014-01-28 09:22:45	hashcat	[23:24:30] IO 跟 Int 可以想成以前的monad
2014-01-28 09:22:45	hashcat	[23:24:33] IO Int
2014-01-28 09:22:45	hashcat	[23:25:06] 中間那個列表是附加於途中的效果, 像是會扔exception, 有隨機數等
2014-01-28 09:22:45	hashcat	[23:26:11] 主效果 IO 附屬效果 [EXCEPTION String, STDIO, RND, STATE Env] 返回 Int
2014-01-28 09:22:45	hashcat	[23:26:26] 這樣講不知道行不行
2014-01-28 09:22:45	hashcat	[23:27:29] 再看下宣告
2014-01-28 09:22:45	hashcat	[23:27:32] data EffM : (m : Type -> Type) ->
2014-01-28 09:22:45	hashcat	[23:27:34] (es : List EFFECT) ->
2014-01-28 09:22:45	hashcat	[23:27:35] (es' : List EFFECT) -> (a : Type) -> Type
2014-01-28 09:22:45	hashcat	[23:28:12] 這裡 m 意思就等同以前 monad 裡的 m 的常用用法
2014-01-28 09:22:45	hashcat	[23:28:34] a 也等同以前 monad 裡的 a 的常用用法
2014-01-28 09:22:45	suhorng	[23:29:21] 嗯嗯!
2014-01-28 09:22:45	hashcat	[23:29:25] 多出兩個(es : List EFFECT) , (es' : List EFFECT) 就是附屬的效果類似 monad transformer
2014-01-28 09:22:45	hashcat	[23:29:42] 補充下前者是不可變狀態, 後者是可變狀態
2014-01-28 09:22:45	hashcat	[23:30:02] Eff 就是 EffM 少了可變狀態
2014-01-28 09:22:45	suhorng	[23:30:11] 嗯哼
2014-01-28 09:22:45	hashcat	[23:30:43] 繼續研究prolog
2014-01-28 09:22:45	hashcat	[23:30:50] 置入行銷
2014-01-28 09:22:45	suhorng	[23:31:48] XDDD
2014-01-28 09:22:45	hashcat	[23:32:27] 很故意的講出來
2014-01-28 09:22:45	CindyLinz	[23:33:49] 途中效果裡面列的東西, 其順序應該是有影響的?
2014-01-28 09:22:45	hashcat	[23:33:49] 發現超恐怖的東西
2014-01-28 09:22:45	hashcat	[23:34:15] 天網出現之日指日可待
2014-01-28 09:22:45	CindyLinz	[23:34:20] ..
2014-01-28 09:22:45	hashcat	[23:34:30] http://www.cs.ox.ac.uk/activities/machlearn/Aleph/aleph_toc.html
2014-01-28 09:22:45	hashcat	[23:34:52] 我想不按原文翻譯成歸納邏輯理論自動建造機
2014-01-28 09:22:45	hashcat	[23:35:31] 原文是Aleph is an Inductive Logic Programming (ILP) system that supersedes P-Progol.
2014-01-28 09:22:45	CindyLinz	[23:36:00] 會學習會推論不可怕啊.. 天網出現的那一瞬間是出現自覺.. XD
2014-01-28 09:22:45	hashcat	[23:36:17] 機率跟歸納都有了, 整合起來要是加上前端視覺模式識別
2014-01-28 09:22:45	hashcat	[23:36:53] 征服銀河系的就不是人啦, 是歸納邏輯系統
2014-01-28 09:22:45	suhorng	[23:37:01] CindyLinz: 我覺得有點難說..他的作法會不會影響/如何影響實在不像 monad transformer 那樣看容易看出來....
2014-01-28 09:22:45	hashcat	[23:38:02] suhorng: 我怎覺得是 Effect 比較容易一目了然
2014-01-28 09:22:45	CindyLinz	[23:38:12] suhorng: 昨天看了 Pipes 作者對於可以隨意換順序的 Effect 的擔心... 我覺得如果可以隨意換順序的模型, 最好把 Exception 分出去, 不要混一起 ^^|
2014-01-28 09:22:45	suhorng	[23:38:17] 昨天貼的那封信我把他改成用 extensible-effects package, 結果不管 runError 跟 runState 誰先誰後跑出來結果都是 2
2014-01-28 09:22:45	suhorng	[23:39:03] 不同作法之下效果跟 monad transformer 完全不同XD|||
2014-01-28 09:22:45	suhorng	[23:39:04] 不只 exception，可能還要包含任何會影響control的東西，像是 x <- [1..10] 這一類東西
2014-01-28 09:22:45	hashcat	[23:39:33] 設計上跟順序無關才合情合理
2014-01-28 09:22:45	hashcat	[23:39:54] Monad跟Effect作用就是嵌入個語言
2014-01-28 09:22:45	suhorng	[23:40:00] hashcat: 像 s -> Either String (a, s) 跟 a -> (Either String a, s) 還可以人眼看出來, Effects 該怎磨勘呢?
2014-01-28 09:22:45	suhorng	[23:40:05] 不可能無關吧
2014-01-28 09:22:45	hashcat	[23:40:32] 拿設計一個語言來說, 沒人會想說什麼語言特性跟加入那個特性順序有關系吧
2014-01-28 09:22:45	CindyLinz	[23:40:33] 差別在... action 的長相來決定順序, 還是呼叫的地方決定順序 :Q
2014-01-28 09:22:45	suhorng	[23:41:06] 像 MTL 跟 extensible-effects 都是呼叫的地方決定順序
2014-01-28 09:22:45	suhorng	[23:41:20] 但是他們 "不同順序" 造成的影響很不一樣
2014-01-28 09:22:45	CindyLinz	[23:41:36] hashcat: 但是執行到一半發生 exception 了, 那麼 exception 之前已經做了的動作要仍舊保持, 還是 rollback, 是要規定一下的...
2014-01-28 09:22:45	hashcat	[23:41:43] 所有的效果 "同時" 發生, 前後無關才合情合理
2014-01-28 09:22:45	CindyLinz	[23:42:09] suhorng: MTL 是指.. liftIO 的寫法, 而不是 lift 的寫法?
2014-01-28 09:22:45	suhorng	[23:42:26] effects之間怎麼互動沒有一定怎樣才是對的吧? 可以選一種拿來作準 不過其他種也不能說錯
2014-01-28 09:22:45	hashcat	[23:42:28] 嗯嗯
2014-01-28 09:22:45	suhorng	[23:42:41] CindyLinz: 是指 monad transformers
2014-01-28 09:22:45	CindyLinz	[23:43:13] suhorng: monad trans 的 lift . lift . lift 的寫法.. 是定義 action 的地方就決定順序了啊.
2014-01-28 09:22:45	CindyLinz	[23:43:36] 看 lift 用了幾層, 就決定那一層一定要是什麼呀
2014-01-28 09:22:45	suhorng	[23:43:55] 假設使用typeclass自動推論要lift幾層的那種好了~
2014-01-28 09:22:45	CindyLinz	[23:44:10] XD 那就是 liftIO, liftWriter 的寫法嘛 :p
2014-01-28 09:22:45	suhorng	[23:44:24] 就是 mtl package 做的事呀Q_Q
2014-01-28 09:22:45	suhorng	[23:44:54] 大概我有弄混
2014-01-28 09:22:45	CindyLinz	[23:44:59] 嗯嗯, 要標明 不準直接用 lift.. :p
2014-01-28 09:22:45	hashcat	[23:46:31] 問下
2014-01-28 09:22:45	hashcat	[23:46:47] haskell在工作使用情形如何
2014-01-28 09:22:45	CindyLinz	[23:47:40] mno2: (戳戳)
2014-01-28 09:22:45	suhorng	[23:47:54] 可能要去 haskell.sg meetup (誤)
2014-01-28 09:22:45	mno2	[23:48:36] CindyLinz: ?
2014-01-28 09:22:45	CindyLinz	[23:49:07] mno2: # 23:46 < hashcat> haskell在工作使用情形如何
2014-01-28 09:22:45	mno2	[23:50:42] http://functionaljobs.com/jobs/8678-haskell-developer-at-zalora  可以參考 JD
2014-01-28 09:22:45	hashcat	[23:52:40] 亂丟垃圾會重杖打屁股的地方
2014-01-28 09:22:45	CindyLinz	[23:53:10] 可以 remote..
2014-01-28 09:22:45	CindyLinz	[23:53:18] 所以可以繼續亂丟垃圾(?
2014-01-28 09:22:45	mno2	[23:53:45] 丟垃圾？
2014-01-28 09:22:45	CindyLinz	[23:54:10] 他應該是說街上亂丟東西 XD
2014-01-28 09:22:45	mno2	[23:54:42] 喔喔
2014-01-28 09:22:45	hashcat	[23:55:07] 不是我想找, 只是想了解這裡的人有沒啥用到
2014-01-28 09:22:45	hashcat	[23:55:25] 我是完全沒用上
2014-01-28 09:22:45	CindyLinz	[23:56:07] 我用到一半
2014-01-28 09:22:45	hashcat	[23:56:19] 做什麼的
2014-01-28 09:22:45	CindyLinz	[23:56:25] 因為沒有時間壓力, 所以常常會跑去弄別的..
2014-01-28 09:22:45	hashcat	[23:56:58] 聽起來像無業遊民
2014-01-28 09:22:45	CindyLinz	[23:57:04] 資料結構, Augmented RB tree, 要拿來作即時的名次
2014-01-28 09:22:45	CindyLinz	[23:57:31] 應該剩介面整理.. 然後就擺了一陣子 orz # https://github.com/CindyLinz/Haskell-AugmentedRBTree
2014-01-28 09:22:45	CindyLinz	[23:59:03] 現在在弄 Haskell 與 Perl 介接.. 也許就能沿用我們公司原有的, 用 perl 寫的 socket 介面
2014-01-28 09:22:45	hashcat	[23:59:24] 同樣都沒實用, FP的對象我決定轉移到idris了
2014-01-28 09:22:45	CindyLinz	[00:00:19] haskell 接 perl 目前實驗了一些些會動, 要開始寫正經一點的了 :p  https://github.com/CindyLinz/Haskell-Perl
2014-01-28 09:22:45	hashcat	[00:00:23] 你是後端啥都能用就是
2014-01-28 09:22:45	CindyLinz	[00:00:55] 什麼意思??
2014-01-28 09:22:45	hashcat	[00:01:07] 就是前端 perl
2014-01-28 09:22:45	CindyLinz	[00:01:11] Non-windows only
2014-01-28 09:22:45	hashcat	[00:01:23] 後端什麼語言都沒限制
2014-01-28 09:22:45	CindyLinz	[00:01:40] 其實前端也沒限制.... socket 出去就行
2014-01-28 09:22:45	CindyLinz	[00:02:05] 只是一定要透過 socket 的話, 整合性比較差, 必須是本身足夠完整的子系統才行
2014-01-28 09:22:45	hashcat	[00:02:17] 啥麼公司做什麼的
2014-01-28 09:22:45	CindyLinz	[00:02:17] 如果能揉在一起的話, 只換一個函數塞進去都行
2014-01-28 09:22:45	CindyLinz	[00:02:55] 營運自己開發的遊戲的公司~ http://www.gamesofa.com/
2014-01-28 09:22:45	hashcat	[00:04:07] 哦
2014-01-28 09:22:45	hashcat	[00:04:14] 原來是王老闆
2014-01-28 09:22:45	CindyLinz	[00:04:29] 啊? 老闆不姓王啊 @_@"
2014-01-28 09:22:45	hashcat	[00:04:54] 當我沒說好了
2014-01-28 09:22:45	CindyLinz	[00:05:35] @@"
2014-01-28 09:22:45	hashcat	[00:07:29] 我看成你是老闆
2014-01-28 09:22:45	CindyLinz	[00:08:46] ._.
2014-01-28 09:22:45	CindyLinz	[00:09:20] 那句的「自己」指的是公司不是我啦.. XD
2014-01-28 09:22:45	hashcat	[00:10:12] 想不出自己還能是啥
2014-01-28 09:22:45	hashcat	[00:11:40] 還有這種用法
2014-01-28 09:22:45	hashcat	[00:11:53] 公司自己
2014-01-28 09:22:45	CindyLinz	[00:13:19] 我玩遊戲不夠重度... 如果遊戲是我設計.... 應該會作出只有我自己想玩的遊戲
2014-01-28 09:22:45	CindyLinz	[00:13:33] 而且我自己也玩一陣子就膩了..ww
2014-01-28 09:22:45	petercommand	[00:13:38] CindyLinz: XD
2014-01-28 09:22:45	CindyLinz	[00:14:24] 前一陣子發現一個無邊界的多人踩地雷遊戲覺得很好玩... http://mienfield.com/
2014-01-28 09:22:45	CindyLinz	[00:14:34] 結果只有我覺得好玩....持續兩天 orz
2014-01-28 09:22:45	hashcat	[00:16:32] 整個創意100分, 有趣0分的遊戲
2014-01-28 09:22:45	CindyLinz	[00:16:49] 有必要說這麼狠嗎.....QQ
2014-01-28 09:22:45	hashcat	[00:18:01] 不過還是可以理解, 就跟我寫prolog的時候一樣
2014-01-28 09:22:45	hashcat	[00:18:27] 結果只有我覺得好玩....持續三個月 orz
2014-01-28 09:22:45	hashcat	[00:20:24] 擴展perl可以用haskell, 表示擴展python可以用idris
2014-01-28 09:22:45	hashcat	[00:21:31] =D
2014-01-28 09:22:45	hashcat	[00:34:06] 問了下idris還只能在單核跑 ==
2014-01-28 09:22:45	CindyLinz	[00:44:17] 這是什麼推論啊.... XD
2014-01-28 09:22:45	hashcat	[00:45:47] 在跟idriser討論加進平行化, 能不就像是在產生的C code加上openmp pragma
2014-01-28 09:22:45	CindyLinz	[00:47:07] 嗯, 有很多系統呼叫要換用加上 _r 自尾的版本
2014-01-28 09:22:45	CindyLinz	[00:47:10] 嗯, 有很多系統呼叫要換用加上 _r 字尾的版本
2014-01-28 09:22:45	hashcat	[00:49:11] _r是啥?
2014-01-28 09:22:45	CindyLinz	[00:50:19] 很多 C 的標準 lib 函數, 例如說 string.h 裡面的 strtok, 會用到自己內建的 static 的 buffer
2014-01-28 09:22:45	CindyLinz	[00:50:41] 而 strtok_r 可以由呼叫端給 buffer
2014-01-28 09:22:45	CindyLinz	[00:51:14] 用內建 static buffer 在 multi-thread 的時候, 如果發生不同的 thread 都去採同一個 static buffer 會悲劇
2014-01-28 09:22:45	hashcat	[00:55:48] 哦
2014-01-28 09:22:45	hashcat	[00:56:55] 睡覺
2014-01-28 09:22:45	CindyLinz	[01:52:51] Dryman 寫的 Monad 教學 http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/
2014-01-28 09:22:45	CindyLinz	[01:52:54] 還沒看 :p
2014-01-28 09:22:45	CindyLinz	[01:55:02] 這張圖解不錯 ^^ http://www.idryman.org/images/monad/monad-structure.png
2014-01-28 09:22:45	CindyLinz	[15:05:51] 嗯, GHC 的 MultiParamClasses extension 也很重要....
2014-01-28 09:22:45	CindyLinz	[15:07:10] TypeSynonymInstances 非必要.. 但我也是覺得沒有會很苦命 XD
2014-01-28 09:22:45	CindyLinz	[15:40:26] 問問題...
2014-01-28 09:22:45	CindyLinz	[15:40:38] Foreign.C.String 裡面有個 newCString
2014-01-28 09:22:45	CindyLinz	[15:41:02] 是 String -> IO (CString)  其中 type CString = Ptr CChar
2014-01-28 09:22:45	CindyLinz	[15:41:25] 這邊給出來的 CString 是需要自己手動去 free 的
2014-01-28 09:22:45	CindyLinz	[15:41:45] 另外有個 withCString
2014-01-28 09:22:45	CindyLinz	[15:41:48] :t withCSTring
2014-01-28 09:22:45	lambdabot	[15:41:49] Not in scope: `withCSTring'
2014-01-28 09:22:45	CindyLinz	[15:41:52] :t withCString
2014-01-28 09:22:45	lambdabot	[15:41:53] Not in scope: `withCString'
2014-01-28 09:22:45	CindyLinz	[15:41:56] orz
2014-01-28 09:22:45	CindyLinz	[15:42:12] withCString :: String -> (CString -> IO a) -> IO a
2014-01-28 09:22:45	CindyLinz	[15:42:31] 它會在我第二個參數的 action 用完以後自動幫我回收.... (很開心)
2014-01-28 09:22:45	CindyLinz	[15:43:24] 現在的問題是, 我是在一個底下墊 MonadIO 的 monad transformer 裡面做事情
2014-01-28 09:22:45	CindyLinz	[15:43:37] 那個 CString 是要在這個 monad transformer 裡面用的
2014-01-28 09:22:45	CindyLinz	[15:43:56] 如果我用 liftIO $ withCString str $ \cstr -> do ... 的話
2014-01-28 09:22:45	CindyLinz	[15:44:18] 最後面那個 action 是 IO a, 沒辦法用我 monad transformer 的函數 @@"
2014-01-28 09:22:45	CindyLinz	[15:44:48] 所以現在只能用 newCString 這種, 然後最後再自己記得 free 掉 @@"
2014-01-28 09:22:45	CindyLinz	[15:45:26] 我要怎麼使用這種 bracket 長相的用法呢?
2014-01-28 09:22:45	godfat	[15:45:50] 弄個 withCStringM ...?
2014-01-28 09:22:45	CindyLinz	[15:46:25] 好兇 XD
2014-01-28 09:22:45	CindyLinz	[15:47:04] 把那些 IO a 都換成 MonadIO m => m a 的版本?
2014-01-28 09:22:45	godfat	[15:47:48] 之類的... XD
2014-01-28 09:22:45	CindyLinz	[15:50:42] mmm
2014-01-28 09:22:45	CindyLinz	[15:51:35] 那麼, 我要怎麼處理 exception 呢? 希望裡面 throw exception 的時候, 我可以先 free 了, 再 re-throw..
2014-01-28 09:22:45	CindyLinz	[15:51:54] Control.Exception 裡面的 catch, try 看起來都是 IO a 的 @@"
2014-01-28 09:22:45	suhorng	[15:53:29] 咦？我以為 IO a 的 catch try 是 Prelude 的
2014-01-28 09:22:45	godfat	[15:53:39] 這些都重做好像工程有點大，而且不見得能做..? XD
2014-01-28 09:22:45	godfat	[15:53:40] 欸，說真的有時候覺得 ghc 的 api 有些缺東缺西...
2014-01-28 09:22:45	godfat	[15:53:40] 雖然好像大多都是 IO 的部份
2014-01-28 09:22:45	suhorng	[15:54:09] 喔喔 是說 IO (Either...)
2014-01-28 09:22:45	CindyLinz	[15:54:12] 好像, 在 IO a 那邊我重新 run 自己的 monad transformer 是一種作法.. 不過我的 monad transformer 有模仿 ST 那樣, 有一個 forall s. 在裡面, 而且我的 run 會做一些應該不能在前一個 run 結束以前再 run 第二次的動作 @@"
2014-01-28 09:22:45	CindyLinz	[15:54:55] suhorng: 原本是 Prelude, 不過 GHC (或 Haskell2010?) 有把它做得更完整. Prelude 還是能用就是
2014-01-28 09:22:45	CindyLinz	[15:55:13] 現在有做成像 Java 樹狀的 exception 家族那樣
2014-01-28 09:22:45	suhorng	[15:55:53] 嗯嗯
2014-01-28 09:22:45	CindyLinz	[15:56:17] 我想想看我能不能分出一個類似 re-run 的函數出來, 讓它不要做原本 run 會有的初始化和結束的部分, 只是讓它可以套在 IO 裡面..
2014-01-28 09:22:45	CindyLinz	[15:57:45] GHC api 都喜歡著重: 這邊是個 Monoid!, 這邊有個 Dual!, 這是個最小的 FixPoint!..... ww
2014-01-28 09:22:45	godfat	[15:58:54] 不知道該說啥
2014-01-28 09:22:45	godfat	[15:58:54] 有時候寫寫 ruby 會想說能用 haskell 多好啊
2014-01-28 09:22:45	godfat	[15:58:54] 可是實際上真的要用又一堆問題 orz
2014-01-28 09:22:45	CindyLinz	[16:00:38] godfat: 工程師! 快來吧~~~ (招手)
2014-01-28 09:22:45	godfat	[16:01:03] 這有點雞蛋問題呀... ~.~
2014-01-28 09:22:45	godfat	[16:01:18] 尤其一堆「工程師」都保守到不行...
2014-01-28 09:22:45	CindyLinz	[16:02:02] 昨天跟 wens 聊天, 講到 perl 的過去版本相容性非常好.. 甚至 doc 裡面還會寫: 這邊會有這樣這樣的行為, 它是一個 unfixable bug, 因為如果修掉了, 會使得很多 third-party lib 壞掉.
2014-01-28 09:22:45	CindyLinz	[16:02:33] 然後想到, Larry Wall 以前是 system admin. system admin 最需要相容性了.. XD
2014-01-28 09:22:45	CindyLinz	[16:02:53] 所以要工程師跳進來 Haskell, 才會讓它適合工程師用 :D
2014-01-28 09:22:45	CindyLinz	[16:03:20] 不能都是數學家這樣... ^^|
2014-01-28 09:22:45	suhorng	[16:05:17] http://www.reddit.com/r/haskell/comments/1br0ls/haskell_beats_c_using_generalised_stream_fusion/ 看看這個能不能吸引一點工程師好了 (炸)
2014-01-28 09:22:45	CindyLinz	[16:10:53] godfat: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-28 09:22:45	CindyLinz	[16:11:26] suhorng: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-28 09:22:45	CindyLinz	[16:11:35] 見者有份歐~~ (咦)
2014-01-28 09:22:45	suhorng	[16:15:41] 好難..XD
2014-01-28 09:22:45	CindyLinz	[16:17:43] ~_~
2014-01-28 09:22:45	godfat	[16:20:40] 所以說起來， sysadmin 用的語言應該要跟 app programmer 不一樣才對 XD
2014-01-28 09:22:45	godfat	[16:20:41] 後者可以用相容性低的東西...
2014-01-28 09:22:45	godfat	[16:20:41] XDDDD 最近太忙了，都沒空玩 haskell... ~.~
2014-01-28 09:22:45	suhorng	[16:21:21] exception真的有辦法解決嗎..?
2014-01-28 09:22:45	CindyLinz	[16:21:35] 解決?
2014-01-28 09:22:45	CindyLinz	[16:21:49] 給 godfat 一個 exception, 他就有空玩 haskell 了這樣?
2014-01-28 09:22:45	godfat	[16:22:00] XDDDD
2014-01-28 09:22:45	suhorng	[16:22:03] XDDD
2014-01-28 09:22:45	CindyLinz	[16:23:13] suhorng: 你問的是什麼啦 XD
2014-01-28 09:22:45	suhorng	[16:24:02] 我想想 ~"~
2014-01-28 09:22:45	CindyLinz	[16:26:27] 我剛剛遇到的情況, 嗯, 可以用純的 unXxxT 解決
2014-01-28 09:22:45	CindyLinz	[16:27:37] 假設我的 monad trans 是 newtype XxxT .... = XxxT { unXxxT :: xxState -> m (xxState, a) }
2014-01-28 09:22:45	CindyLinz	[16:29:23] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT cstr act xxState
2014-01-28 09:22:45	CindyLinz	[16:30:28] 因為我是寫這個 monad trans 的人, 所以我可以直接拿到 xxState
2014-01-28 09:22:45	suhorng	[16:31:06] 唔...實在想不到 exception 能怎麼配上 MonadIO
2014-01-28 09:22:45	suhorng	[16:31:09] 嗯嗯
2014-01-28 09:22:45	CindyLinz	[16:31:38] 這樣就算是有處理到 exception 啦 ^^   因為那個 withCString 就是會處理 exception 的
2014-01-28 09:22:45	CindyLinz	[16:31:52] 而 bracket 應該也可以一樣的包法
2014-01-28 09:22:45	CindyLinz	[16:32:26] 我這個方法, 不適用任意的 MonadIO.. 我得拿得到 internal state 才行 :Q
2014-01-28 09:22:45	suhorng	[16:32:28] 喔~
2014-01-28 09:22:45	suhorng	[16:32:47] 遇到奇怪的 MonadIO 的話也不行XD
2014-01-28 09:22:45	CindyLinz	[16:33:09] 嗯, 有可能是 monad trans 提供者才能做..
2014-01-28 09:22:45	CindyLinz	[16:36:54] 咦.. 寫錯了..
2014-01-28 09:22:45	CindyLinz	[16:37:09] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-28 09:22:45	CindyLinz	[16:37:12] 這樣才對
2014-01-28 09:22:45	CindyLinz	[17:05:00] 突然覺得自己現在竟然能很順地寫出這種東西很不可思議.. # liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-28 09:22:45	CindyLinz	[17:05:13] 以前讀別人的 code 寫這東西超崩潰的...ww
2014-01-28 09:22:45	kanru	[17:06:43] XDD
2014-01-28 09:22:45	suhorng	[18:02:30] 嗯... try :: Exception e => IO a -> IO (Either e a)  這類函式是不是真的沒辦法變成 MonadIO m => m a -> m (Either e a) ...？
2014-01-28 09:22:45	suhorng	[18:06:48] 好像真的無可避免
2014-01-28 09:22:45	CindyLinz	[18:10:12] 好像應該要舉一個反例出來證明變不出來...
2014-01-28 09:22:45	suhorng	[18:10:30] 我好像笨了
2014-01-28 09:22:45	suhorng	[18:10:35] 好像可以
2014-01-28 09:22:45	suhorng	[18:11:32] ..不對 不可以那樣做 XDDDD 可以弄出 type correct 但是沒有 try 效果的 Exception e => m a -> m (Either e a)
2014-01-28 09:22:45	CindyLinz	[18:12:30] tryM :: MonadIO m => m a -> m (Either e a)    tryM = tryM ? (誤)
2014-01-28 09:22:45	suhorng	[18:14:19] \ma -> do { a <- ma; liftIO (try (return a)) }，我剛剛竟然在想這個，真是太呆了
2014-01-28 09:22:45	CindyLinz	[18:15:52] 那個 try 就是這個 tryM 哄? XD
2014-01-28 09:22:45	CindyLinz	[18:16:05] 那的確就是 tryM = tryM... XD
2014-01-28 09:22:45	suhorng	[18:17:19] 不是吧Q_Q 這個是 tryM = liftM Right
2014-01-28 09:22:45	CindyLinz	[18:18:25] 喔喔.. 事情都在前面的 a <- ma 做完了 XD
2014-01-28 09:22:45	CindyLinz	[18:18:56] a <- ma 地方可以確認這個 ma 會 return
2014-01-28 09:22:45	CindyLinz	[23:22:57] 我想從 haskell pass 一個 list 給 C 函數跑迴圈.. 有沒有什麼辦法不要「複製」出東西的方法啊 @@"
2014-01-28 09:22:45	CindyLinz	[23:24:14] 只能一開始就選別的 container 像是 storable array 或 storable vector 嗎...
2014-01-28 09:22:45	hashcat_	[23:32:54] list 是有點複雜的結構  就算傳指標過去也不堪c直接用
2014-01-28 09:22:45	CindyLinz	[23:33:27] 只是好奇能不能 access ghc internal.. XD
2014-01-28 09:22:45	hashcat_	[23:34:29] 破壞haskell封裝
2014-01-28 09:22:45	CindyLinz	[23:38:50] 在 C 層次了誰管它什麼封裝啊.... ww
2014-01-28 09:22:45	CindyLinz	[23:39:15] 這邊是公海.. (咦)
2014-01-28 09:22:45	hashcat_	[23:43:38] 指標傳過去後我就沒輒
2014-01-28 09:22:45	hashcat_	[23:44:00] list沒有對應的ctype
2014-01-28 09:22:45	***	Playback Complete.
2014-01-28 09:23:03	--	モード #haskell.tw [+cnt]
2014-01-28 09:23:03	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-28 09:29:13	-->	liuzhoou (~liuzhoou@125.215.44.36) が #haskell.tw に参加
2014-01-28 10:00:12	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-28 10:01:31	-->	frankbutt (~frankbutt@66.172.11.32) が #haskell.tw に参加
2014-01-28 10:01:32	<--	frankbutt (~frankbutt@66.172.11.32) が #haskell.tw から退出
2014-01-28 10:54:26	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-01-28 11:55:19	--	irc: サーバから切断
2014-01-28 12:39:03	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-28 12:39:03	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-28 12:39:03	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-28 12:39:03	--	ニックネーム #haskell.tw: [a2n b4283 cataska cataska_ cibs CindyLinz cyt93cs darkx drbean gko godfat1 hychen lambdabot letoh logfat_____ miaout17 mno2 monochrom petercommand shik superbil_c town55 weie]
2014-01-28 12:39:03	--	チャンネル #haskell.tw: 23 ニックネーム (0 オペレータ, 0 発言, 23 通常)
2014-01-28 12:39:03	***	Buffer Playback...
2014-01-28 12:39:03	hashcat_	[00:26:58] 用怪招說明他可以推論出來
2014-01-28 12:39:03	suhorng	[00:27:09] Rank2Types感覺有點差別欸
2014-01-28 12:39:03	hashcat_	[00:27:10] 也不算怪招啦
2014-01-28 12:39:03	suhorng	[00:27:21] 不知道是不是在型別推論的地方有差
2014-01-28 12:39:03	hashcat_	[00:27:25] pattern matching不就隱含解構子的存在了
2014-01-28 12:39:03	CindyLinz	[00:27:42] Rank2Type 指的是 forall 可以寫在 -> 的左邊..
2014-01-28 12:39:03	suhorng	[00:27:42] 有很多種不同的解構子？
2014-01-28 12:39:03	hashcat_	[00:27:55] 從別的方面講Haskell既然說他是statically type就不會騙人吧
2014-01-28 12:39:03	hashcat_	[00:28:11] 執行時期是根本沒型別資訊
2014-01-28 12:39:03	hashcat_	[00:28:19] 不像C++還是有保留
2014-01-28 12:39:03	CindyLinz	[00:28:20] Rank3Type (應該沒這 extension, 想 >2 全都用 N types 了吧?)  就是 -> 的左邊如果是個 ( .... -> .... ), 這個裡面的 -> 的左邊可以有 forall.. XD
2014-01-28 12:39:03	suhorng	[00:28:23] CindyLinz: 是想說 rank 2 types 的型別推論是 decidable， > 2 不是 decidable
2014-01-28 12:39:03	suhorng	[00:28:40] RankNTypes 需要寫type signature 這樣 @口@
2014-01-28 12:39:03	CindyLinz	[00:28:47] 反正我寫不出無法 decide 的 type...ww
2014-01-28 12:39:03	CindyLinz	[00:29:07] DFS 50 層內一定解得出來 (逃)
2014-01-28 12:39:03	hashcat_	[00:29:20] statically type是說他沒法斷定型別就不會讓你編譯過
2014-01-28 12:39:03	hashcat_	[00:29:40] 算了最近對haskell沒興趣
2014-01-28 12:39:03	suhorng	[00:29:40] 就..型別是 Test，然後Test有 Class a =>，所以可以編譯過阿XD
2014-01-28 12:39:03	hashcat_	[00:30:11] prolog.tw
2014-01-28 12:39:03	hashcat_	[00:30:24] 成立成立
2014-01-28 12:39:03	hashcat_	[00:31:13] 突然一陣靜默
2014-01-28 12:39:03	suhorng	[00:31:14] DFS 50層 XDDD
2014-01-28 12:39:03	suhorng	[00:31:22] UndecidableInstances！
2014-01-28 12:39:03	CindyLinz	[00:31:53] suhorng: 我覺得差別是... (不考慮 Typeable 和 Dyn 的話) haskell 裡面一般是無法做 C++ 的 typeof(...) 或 x instanceof y 或是 parent class 往 childe class 的轉型
2014-01-28 12:39:03	hashcat_	[00:32:03] 這麼喜歡動態就看prolog吧
2014-01-28 12:39:03	CindyLinz	[00:32:52] 不考慮 Typeable / Dyn 是因為, 我覺得它是 programmer 額外加上的 note. 如果 programmer 惡意亂指定 TyCon, ghc 也會放行
2014-01-28 12:39:03	suhorng	[00:33:02] 會爆炸XD
2014-01-28 12:39:03	CindyLinz	[00:33:16] 會爆嗎? 就會轉出神妙的東西吧? XD
2014-01-28 12:39:03	suhorng	[00:33:32] 可以讓他segmentation fault!
2014-01-28 12:39:03	CindyLinz	[00:34:08] 呃... 能嗎? @_@"
2014-01-28 12:39:03	CindyLinz	[00:34:23] 我以為只是你存了一個 Int 進去, 取了一個 Char 出來...
2014-01-28 12:39:03	CindyLinz	[00:34:44] 或是你惡搞這個 http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Dynamic.html 裡面的 fromDyn 和 fromDynamic
2014-01-28 12:39:03	CindyLinz	[00:34:54] 做出一個希格斯粒子 type... ww
2014-01-28 12:39:03	CindyLinz	[00:35:07] 你想要什 type 元素, 我都能生給你!
2014-01-28 12:39:03	hashcat_	[00:35:38] 原來討論的什麼怎樣了
2014-01-28 12:39:03	CindyLinz	[00:35:57] 耶不行... Dynamic 裡的格式不是我們自訂.. 是被 Typeable 定死了
2014-01-28 12:39:03	CindyLinz	[00:36:00] 那只能選一種 XD
2014-01-28 12:39:03	suhorng	[00:36:11] 神秘
2014-01-28 12:39:03	CindyLinz	[00:36:13] 但應該可以把 Int 總是轉成 Char... XD
2014-01-28 12:39:03	suhorng	[00:36:20] Typeable我記得有讓他壞掉的例子XD
2014-01-28 12:39:03	monochrom	[00:37:01] 爆炸也是神妙的東西啊! XD
2014-01-28 12:39:03	CindyLinz	[00:37:03] 用 TyCon 硬寫一個不存在的 type 應該就死了吧?
2014-01-28 12:39:03	CindyLinz	[00:37:14] 我是還沒用過... ._.
2014-01-28 12:39:03	suhorng	[00:37:31] http://okmij.org/ftp/Haskell/types.html#unsound-typeable
2014-01-28 12:39:03	CindyLinz	[00:38:38] 好切回來一下, 我覺得 Dyn 和 Typeable 不算是 Haskell 語言本身的東西, 是 lib 這樣, 所以和 C++ 的情況不同 ^^|
2014-01-28 12:39:03	CindyLinz	[00:39:19] 但不代表 statically 就知道每一個 rigid type, 有可能只確定到一定是某個 class 的 instance 而已
2014-01-28 12:39:03	suhorng	[00:39:47] 我就在想實作怎麼實作; 假設Haskell98的話
2014-01-28 12:39:03	hashcat	[00:40:01] 睡覺
2014-01-28 12:39:03	monochrom	[00:40:04] 自行寫一個 "newtype I = I Int; newtype C = C Char", 然後為它們寫些壞的 Typeable 碼, 應該就可以透過 I 和 C 互換來把 Int 和 Char 互換.
2014-01-28 12:39:03	CindyLinz	[00:40:05] 晚安 XD
2014-01-28 12:39:03	suhorng	[00:40:06] 每次每個多型函數用的時候我們都知道他被instantiate成什麼type
2014-01-28 12:39:03	suhorng	[00:40:15] XD
2014-01-28 12:39:03	CindyLinz	[00:40:24] 壞的 Typeable 碼... XD
2014-01-28 12:39:03	suhorng	[00:40:30] 所以可以在instantiate的時候直接複製一份code
2014-01-28 12:39:03	suhorng	[00:40:37] 像template那樣
2014-01-28 12:39:03	CindyLinz	[00:40:52] 嗯
2014-01-28 12:39:03	suhorng	[00:41:06] 感覺typeclass也是一樣可以靜態知道可能用哪個多載的函數
2014-01-28 12:39:03	CindyLinz	[00:41:15] 是.... 哪些?
2014-01-28 12:39:03	CindyLinz	[00:41:28] 而不能明確縮小到一個吧 @@"
2014-01-28 12:39:03	CindyLinz	[00:41:53] 如果要能實作 showGenList :: GenList -> String 的話..
2014-01-28 12:39:03	suhorng	[00:42:03] 限定Haskell98 XD
2014-01-28 12:39:03	CindyLinz	[00:42:07] 喔喔
2014-01-28 12:39:03	suhorng	[00:44:06] 如果複製一份code的話這樣不需要實作多型表示(或紀錄 runtime type information)之類..
2014-01-28 12:39:03	CindyLinz	[00:44:35] 可是 Haskell98 好卡欸... ww
2014-01-28 12:39:03	suhorng	[00:44:55] 但是現在這種typeclass感覺就不行了吧, 咦定要在constructor裡面帶一些東西 (像哪個branch之類, 或類似 virtual table 那種東西...)
2014-01-28 12:39:03	suhorng	[00:44:56] XD
2014-01-28 12:39:03	CindyLinz	[00:45:45] 沒有 FlexibleInstances 和 ScopedTypeVariable 我活不下去... QQ
2014-01-28 12:39:03	suhorng	[00:46:29] 說到 scoped type variables 我在想 idris 是怎麼做的 |||
2014-01-28 12:39:03	CindyLinz	[00:46:33] virtual table 應該是把 type 帶進去....
2014-01-28 12:39:03	suhorng	[00:46:41] 嗯
2014-01-28 12:39:03	CindyLinz	[00:46:47] 不過 haskell 可以不用帶 type, 而是把要用到的 member function 帶進去
2014-01-28 12:39:03	CindyLinz	[00:47:23] 而且 haskell 的 class 可以是兩三個以上的 type 交互作用... 好吧, 還是可以用 tuple 的方式一次帶 N 個 type... ww
2014-01-28 12:39:03	suhorng	[00:47:24] 詳細一下？是怎樣XD
2014-01-28 12:39:03	CindyLinz	[00:47:55] 剛剛我講的那個 Show 就是把 show 帶進去呀... Int 的 element 就帶個 Show Int 的 show, Char 的 element 就帶 Show Char 的 show
2014-01-28 12:39:03	CindyLinz	[00:48:29] 然後 showGenList 在跑的時候就是逐個拿 show 出來用.. 而它背後是什麼 type, 可以搞不清楚, 用就對了
2014-01-28 12:39:03	suhorng	[00:48:41] 類似對於每次用的時候
2014-01-28 12:39:03	suhorng	[00:48:46] *用constructor
2014-01-28 12:39:03	suhorng	[00:49:01] 給個資料結構, 對每個instance儲存那個函式？
2014-01-28 12:39:03	CindyLinz	[00:49:15] 嗯, 函數指標之類的東西
2014-01-28 12:39:03	CindyLinz	[00:49:40] 好吧, 其實是會存到一個指向整個 Show Int 的表格
2014-01-28 12:39:03	suhorng	[00:49:56] 好吧, 這個可以靜態弄好, 不用動態建立 XD
2014-01-28 12:39:03	CindyLinz	[00:49:58] 也是 table 等級的東西.... 拆散可能效率也沒比較好
2014-01-28 12:39:03	suhorng	[00:50:19] 喔...突然想到我剛剛那個例子不知道能不能用newtype
2014-01-28 12:39:03	CindyLinz	[00:50:36] 所有的 Show a.. Show Int, Show Char, Show Double 應該都會是長度一樣的 struct
2014-01-28 12:39:03	suhorng	[00:50:39] 嗯
2014-01-28 12:39:03	CindyLinz	[00:51:06] Java 的話就是 parent 短, child 長, 但 prefix 一樣; C++ 應該要有一個很動態的查表吧?
2014-01-28 12:39:03	CindyLinz	[00:51:26] 因為 C++ 有多重繼承, 好麻煩 XD
2014-01-28 12:39:03	suhorng	[00:51:35] XDD
2014-01-28 12:39:03	suhorng	[00:51:42] 沒會過C++的作法
2014-01-28 12:39:03	CindyLinz	[00:51:47] ._.
2014-01-28 12:39:03	CindyLinz	[00:52:17] 哪個例子啊? XD
2014-01-28 12:39:03	suhorng	[00:52:31] data Test where...那個
2014-01-28 12:39:03	suhorng	[00:52:42] 因為想到newtype沒有執行時期constructor
2014-01-28 12:39:03	CindyLinz	[00:53:44] 唔.. 在定義 data 的地方放 class constraint 不是要被 deprecate 了嗎? XD
2014-01-28 12:39:03	suhorng	[00:53:47] 喔 Rank2Types 跟我想的不一樣...
2014-01-28 12:39:03	suhorng	[00:53:54] deprecate？
2014-01-28 12:39:03	suhorng	[00:54:04] 真假=口=
2014-01-28 12:39:03	CindyLinz	[00:54:06] 被說是個設計壞了的功能..
2014-01-28 12:39:03	suhorng	[00:54:16] 因為我還在用 GHC 7.4...
2014-01-28 12:39:03	CindyLinz	[00:54:33] 因為在定義這個 type 用的函數的地方, 再加 constraint 就好了
2014-01-28 12:39:03	suhorng	[00:54:42] 我還以為 GADT 可以隨便放 type signature XDDD 原來不行噢...
2014-01-28 12:39:03	CindyLinz	[00:54:42] 而就算 data 加了... 函數的地方還是要再加
2014-01-28 12:39:03	CindyLinz	[00:54:48] 喔不不, 我不是說 GADT
2014-01-28 12:39:03	suhorng	[00:54:51] !? 這裡不用阿XD
2014-01-28 12:39:03	CindyLinz	[00:55:39] 你這個不就是 data Test = Constructor a 嗎?
2014-01-28 12:39:03	CindyLinz	[00:55:49] 啊, 左邊沒 a.. 那可以放 XD
2014-01-28 12:39:03	suhorng	[00:55:50] 是說這個 http://ideone.com/9kgrGB
2014-01-28 12:39:03	suhorng	[00:55:57] 跟 GenShow 同個東西
2014-01-28 12:39:03	CindyLinz	[00:56:04] 是 forall 型的..
2014-01-28 12:39:03	CindyLinz	[00:56:35] 如果是 Test :: Class a => a -> Test a 應該就會被罵吧?
2014-01-28 12:39:03	suhorng	[00:56:53] XDD
2014-01-28 12:39:03	CindyLinz	[00:57:17] 不過因為是 Test :: Class a => a -> Test 就還好
2014-01-28 12:39:03	CindyLinz	[00:58:52] suhorng: 欸.. newtype 的話你這邊 a 得是個具體的 type 吧?
2014-01-28 12:39:03	CindyLinz	[00:59:07] 好像不用.. orz
2014-01-28 12:39:03	suhorng	[00:59:20] !?
2014-01-28 12:39:03	CindyLinz	[00:59:33] 搞錯
2014-01-28 12:39:03	suhorng	[00:59:43] 剛剛用newtype結果能成功, 不知道怎麼實作的
2014-01-28 12:39:03	suhorng	[00:59:56] 好奇怪, 我原本以為 Rank2Types 不用手動寫型別標記, 結果要
2014-01-28 12:39:03	CindyLinz	[01:02:00] 我以為開那個就是為了寫 forall... 你開了又不想寫是什麼打算啊? @@"
2014-01-28 12:39:03	suhorng	[01:02:47] 原本想讓他 type inference 有 rank 2 type
2014-01-28 12:39:03	CindyLinz	[01:02:56] 喔
2014-01-28 12:39:03	suhorng	[01:02:59] 不過我肯定搞錯了東西...
2014-01-28 12:39:03	CindyLinz	[01:03:14] 嗯, 我看以前你貼的這篇... http://www.vidarholen.net/contents/junk/catbag.html
2014-01-28 12:39:03	CindyLinz	[01:03:30] 如果把 type sig 擦掉, 應該還是可以用.. 可是就沒有他想要的效果了?
2014-01-28 12:39:03	CindyLinz	[01:04:28] 也不對 不是看這篇
2014-01-28 12:39:03	CindyLinz	[01:04:34] 我是去看 ST monad 的 source..
2014-01-28 12:39:03	CindyLinz	[01:04:49] 他 data 左邊的 s, 在右邊也有出現, 就直接當 state
2014-01-28 12:39:03	CindyLinz	[01:05:01] 不過它有在一些地方加 forall..
2014-01-28 12:39:03	suhorng	[01:05:03] 唔
2014-01-28 12:39:03	suhorng	[01:05:05] 嗯....
2014-01-28 12:39:03	CindyLinz	[01:05:14] 如果都沒加的話, 這個 s 應該就可以被摸出去了吧?
2014-01-28 12:39:03	suhorng	[01:05:30] 這樣好像 Rank2Types 是 RankNTypes 的子集沒錯
2014-01-28 12:39:03	suhorng	[01:05:38] 原本以為對型別標記的要求不同
2014-01-28 12:39:03	CindyLinz	[01:05:46] 喔~
2014-01-28 12:39:03	CindyLinz	[01:07:46] 欸我看你給的那個 package Effects
2014-01-28 12:39:03	suhorng	[01:07:54] 嘎嘎
2014-01-28 12:39:03	CindyLinz	[01:08:00] https://hackage.haskell.org/package/effects
2014-01-28 12:39:03	CindyLinz	[01:08:33] 我是這樣理解: 它用起來就像.... 如果用 monad trans 的時候, 都是用 liftIO, liftReader, liftState.. 而不用 lift
2014-01-28 12:39:03	CindyLinz	[01:08:51] 然後它提供兩個額外的工具...
2014-01-28 12:39:03	CindyLinz	[01:09:47] 一個是那個 Effect proxy, 當這一群..... monad trans 疊裡面有出現同一種 monad trans 的時候, 還能夠分得出來 (不然純用 monad trans 的話, 同一類型的只能用到其中一個)
2014-01-28 12:39:03	suhorng	[01:09:52] 額外的工具？
2014-01-28 12:39:03	CindyLinz	[01:10:24] 另一個.. 我猜測應該有, 但還不清楚.. 就是直接用 monad trans, 想隨便用 liftIO, liftReader 這些東西的話
2014-01-28 12:39:03	suhorng	[01:10:29] 他的作法感覺完全跟 monad transformer 不同（用起來不知道|||），從頭到尾只有一個 monad...
2014-01-28 12:39:03	suhorng	[01:10:43] 嗯嗯
2014-01-28 12:39:03	CindyLinz	[01:10:56] 我們要為所有用到的 MonadTrans 們 (假設有 N 種), 去定 N*(N-1) 種 instance
2014-01-28 12:39:03	suhorng	[01:11:12] 對..
2014-01-28 12:39:03	CindyLinz	[01:11:36] 就是 instance ReaderMonad m => ReaderMonad (WriterT w m)
2014-01-28 12:39:03	monochrom	[01:11:56] ST 和 IO 的 所謂 "s -> (# a, s #)", 那個 s 請別當真. 它只是用來哄 optimizer "請不要顛倒次序"
2014-01-28 12:39:03	suhorng	[01:13:06] XD...
2014-01-28 12:39:03	suhorng	[01:13:33] 然後最後其實沒有那個 s 存在 XD?
2014-01-28 12:39:03	CindyLinz	[01:13:52] 這個 N*(N-1) 的麻煩, 如果可以容忍 OverlappingInstances extension 的話, 可以變成 N.. 只是我自己對 OverlappingInstances 有一點怕怕的, 因為它會選到誰, 雖然是明確定義的, 但是從程式碼裡面去讀, 不太明顯 @@"
2014-01-28 12:39:03	CindyLinz	[01:14:30] monochrom: 好 XD
2014-01-28 12:39:03	CindyLinz	[01:14:54] suhorng: 作法還沒讀.. 是從使用的 example.hs 感受的 :p
2014-01-28 12:39:03	suhorng	[01:15:08] 他那個明確定義感覺很模糊阿XDDD
2014-01-28 12:39:03	suhorng	[01:15:14] 之前說的 scoped type variable https://gist.github.com/suhorng/8601726
2014-01-28 12:39:03	suhorng	[01:15:29] 因為 variable 本身就有 scope，所以就有 scoped type variable...各種微妙
2014-01-28 12:39:03	CindyLinz	[01:15:35] 有比 monad is just a monoid... 模糊嗎?
2014-01-28 12:39:03	suhorng	[01:15:56] 這lol monad is just a monoid 感覺可以不模糊
2014-01-28 12:39:03	CindyLinz	[01:16:19] 那個 {b} 是什麼啊?
2014-01-28 12:39:03	suhorng	[01:16:21] // ap1 會 compile error
2014-01-28 12:39:03	suhorng	[01:16:34] implicit argument
2014-01-28 12:39:03	CindyLinz	[01:16:39] 噢 .idr XD
2014-01-28 12:39:03	CindyLinz	[01:16:48] 我應該讀作 forall b. 對吧? XD
2014-01-28 12:39:03	suhorng	[01:17:01] ap1 : (a -> b) -> a -> b 其實會變 ap1 : {a : Type} -> {b : Type} -> ...
2014-01-28 12:39:03	suhorng	[01:17:02] XD
2014-01-28 12:39:03	monochrom	[01:17:03] 即是說, 當你寫 "\s0 -> case getinput s0 of (x, s1) -> case output s1 (x+1) of (_, s2) -> output s2 "bye"", 因著 s0, s1, s2 之間的 data dependency, 所以 optimizer 及 code generator 迫著服從你給的順序, 不能像 pure functional code 那樣"次序沒所謂"
2014-01-28 12:39:03	CindyLinz	[01:17:05] 不對 是寫在下面 orz
2014-01-28 12:39:03	monochrom	[01:17:33] 對的, 最後那個 s 不存在.
2014-01-28 12:39:03	suhorng	[01:17:36] monochrom: 好像有點感覺
2014-01-28 12:39:03	CindyLinz	[01:18:25] 那 suhorng 貼的那個 Bag Cat 就沒這效果了? 它只有防止 Cat 被外面摸到
2014-01-28 12:39:03	suhorng	[01:19:22] 驚
2014-01-28 12:39:03	CindyLinz	[01:21:03] suhorng: 我一次遇到 scoped type variable 是在一個 sig 有 forall 的函數裡面定義內用的 helper, 想這個 helper 的 sig, 而這個 sig 裡面用到那個被 forall 的 type
2014-01-28 12:39:03	CindyLinz	[01:21:17] 沒開這個 ext 的話, compiler 說這兩個 type 是不同個..
2014-01-28 12:39:03	suhorng	[01:21:19] 有遇過!
2014-01-28 12:39:03	suhorng	[01:21:21] 真的 XDDD
2014-01-28 12:39:03	suhorng	[01:21:46] 不過 idris 直接當成一個參數把 type 拿近來..
2014-01-28 12:39:03	CindyLinz	[01:23:20] 預設打開了..
2014-01-28 12:39:03	CindyLinz	[01:23:29] 我覺得它是該開啊... QQ
2014-01-28 12:39:03	suhorng	[01:23:32] 不用打開喔lol
2014-01-28 12:39:03	suhorng	[01:23:34] 不是打開
2014-01-28 12:39:03	suhorng	[01:23:39] 而是像那個 {a}
2014-01-28 12:39:03	CindyLinz	[01:23:44] 只是那如果真要用兩個不一樣的 type, 裡面就要換名字了...
2014-01-28 12:39:03	suhorng	[01:23:57] 普通的variable scope，不是另一個不同的 "type" variable
2014-01-28 12:39:03	CindyLinz	[01:24:41] 就.. 裡面用到同一個名字的時候, 就是在指稱它了
2014-01-28 12:39:03	suhorng	[01:25:15] 就是普通的 variable scoping rule
2014-01-28 12:39:03	suhorng	[01:25:25] 跟 f a = ... where ... = ... a ... 一樣
2014-01-28 12:39:03	CindyLinz	[01:25:34] 你第二行的 {b} 和第一行的 b 是同一個東西嗎?
2014-01-28 12:39:03	suhorng	[01:25:35] 只不過現在這個 a 不一定存值, 也可以是type XD
2014-01-28 12:39:03	suhorng	[01:25:47] 那個code我發現我打錯字..改成 {a} 了
2014-01-28 12:39:03	CindyLinz	[01:26:22] 我是說 ap1 {b} 和 ap1 : ( a -> b ) ...
2014-01-28 12:39:03	suhorng	[01:26:31] 對
2014-01-28 12:39:03	suhorng	[01:26:34] 是同一個東西
2014-01-28 12:39:03	CindyLinz	[01:27:01] 然後因為第二行有 {b}, 所以第三行的 apply 可以用 b 來描述 type?
2014-01-28 12:39:03	suhorng	[01:28:00] 對
2014-01-28 12:39:03	CindyLinz	[01:28:25] 如果第二行沒有 {b}, 那第三行的 b 會被當 free variable (forall) 的意思?
2014-01-28 12:39:03	suhorng	[01:28:35] 對 會變新的
2014-01-28 12:39:03	CindyLinz	[01:28:55] 這樣好像比較好..
2014-01-28 12:39:03	CindyLinz	[01:29:20] ghc ext 那樣是要開就整個 module 全開了.. 所有的 forall 都變成 {x} 宣告
2014-01-28 12:39:03	suhorng	[01:29:38] XDDD
2014-01-28 12:39:03	CindyLinz	[01:30:05] 雖然實際上困擾也沒很大? 反正 a 或 b... 通常也都是沒意義的名字, 換了不會心痛 ww
2014-01-28 12:39:03	suhorng	[01:30:34] 是沒錯
2014-01-28 12:39:03	suhorng	[01:30:44] 但是很有趣w 當type變成可以拿來亂弄以後
2014-01-28 12:39:03	suhorng	[01:30:49] 很多東西可以消失不見
2014-01-28 12:39:03	CindyLinz	[01:31:44] 你是說很多 extension 就沒有存在的必要?
2014-01-28 12:39:03	suhorng	[01:32:41] 好像也不是這樣說 T_T
2014-01-28 12:39:03	suhorng	[01:32:58] 感覺..有些事情有統一的處理方法
2014-01-28 12:39:03	CindyLinz	[01:33:09] 我只是想先聽懂你說「消失」指的是哪方面
2014-01-28 12:39:03	CindyLinz	[01:33:22] 畢竟... Agda 裡面要打的字是變多了, 空格也變多了... XD
2014-01-28 12:39:03	suhorng	[01:33:25] e.g. ScopedTypeVariable
2014-01-28 12:39:03	CindyLinz	[01:33:36] 少一個 extension 沒錯.. XD
2014-01-28 12:39:03	CindyLinz	[01:33:53] 我覺得這一個不算.. XD
2014-01-28 12:39:03	suhorng	[01:33:58] 不少用 typeclass 做的事情也不再需要, 像是 type level list
2014-01-28 12:39:03	CindyLinz	[01:34:19] Haskell 弄成每一個 type var 前面加一下 scoped a. 也行啊? XD
2014-01-28 12:39:03	suhorng	[01:34:49] forall a. 那樣綁起來w？
2014-01-28 12:39:03	CindyLinz	[01:35:29] 對啊多一種修飾字這樣... 畢竟 forall 和 scoped 還是講不同的事 @@"
2014-01-28 12:39:03	suhorng	[01:35:44] 嗯嗯XD
2014-01-28 12:39:03	CindyLinz	[01:36:28] 想到 Agda... 再對照你的心得... 譯: 只要把靈魂賣給惡魔, 就不用學一堆怎麼看天氣和開船的技能了...
2014-01-28 12:39:03	CindyLinz	[01:36:39] (ref: 幽靈船)
2014-01-28 12:39:03	suhorng	[01:36:41] 什麼wwwwwwwww
2014-01-28 12:39:03	suhorng	[01:37:00] 惡魔是dependently typed之類嗎XD
2014-01-28 12:39:03	CindyLinz	[01:37:04] 對啊..
2014-01-28 12:39:03	suhorng	[01:37:11] 我是還不能體會他的好處
2014-01-28 12:39:03	suhorng	[01:37:16] 不過他很好玩XD
2014-01-28 12:39:03	CindyLinz	[01:38:05] 嗯嗯
2014-01-28 12:39:03	CindyLinz	[01:42:17] 然後更之前你丟過一篇也是講 Effect 的 paper, 嗯, 我只有看很前面... 覺得它好像比這個 Effects packet 來得動態
2014-01-28 12:39:03	CindyLinz	[01:42:36] 而且, 沒有去處理疊了兩層同一種 effect 的問題...
2014-01-28 12:39:03	CindyLinz	[01:42:48] 應該說, 好像只是名字像, 其實是在處理不同的東西?
2014-01-28 12:39:03	CindyLinz	[01:43:27] 看 Effects example.hs 裡面, 它會用 with (ref 5) $ \x -> with (ref 7) $ \y -> 這樣來寫
2014-01-28 12:39:03	CindyLinz	[01:43:37] 我覺得 action 本身也不太動態呀..
2014-01-28 12:39:03	CindyLinz	[01:44:00] 而如果要在裡面呼叫會使用這邊 5 或 7 的 action... 應該要把 x 和 y explicitly 傳過去
2014-01-28 12:39:03	CindyLinz	[01:44:35] 嗯, 我還要再繼續讀讀.... ^^|
2014-01-28 12:39:03	suhorng	[01:46:50] 來得動態？
2014-01-28 12:39:03	suhorng	[01:46:58] 我之前丟的那個paper出package了
2014-01-28 12:39:03	suhorng	[01:47:12] http://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html
2014-01-28 12:39:03	suhorng	[01:47:31] 我也想比較，可是還不瞭解這個 Effects 的作法 QQ
2014-01-28 12:39:03	suhorng	[01:47:54] x y 直接傳進去感覺更像用可改的變數XD
2014-01-28 12:39:03	CindyLinz	[01:48:07] 我有點希望 Effects 其實就是 MonadTrans 的某種包裝.... 這樣我就可以已經懂一半了 XD
2014-01-28 12:39:03	CindyLinz	[01:48:28] 不一定能改啦... 如果原本那一項對應的是 Reader 的話, 就是 constant XD
2014-01-28 12:39:03	suhorng	[01:48:46] 喔喔喔對 XDD
2014-01-28 12:39:03	suhorng	[01:49:03] 這兩種好像就是要跟 monad transformer 不同
2014-01-28 12:39:03	suhorng	[01:49:49] https://github.com/suhorng/HaskellExercise/blob/master/effect/TestEffect.hs 這個..老實說他的code真的跟 monad transformer 很像
2014-01-28 12:39:03	CindyLinz	[01:49:58] 你是不是還有貼過誰在 stackoverflow 說, 仍然比較喜歡 Monad Transformer?
2014-01-28 12:39:03	suhorng	[01:50:11] 但是他要加更多type = =|||
2014-01-28 12:39:03	suhorng	[01:50:32] 不太有印象，我貼過得可能是不喜歡這個也不喜歡 monad transformer
2014-01-28 12:39:03	CindyLinz	[01:51:12] 記得人名嗎? XD
2014-01-28 12:39:03	suhorng	[01:51:34] 只記得是 pipes 的作者...orz
2014-01-28 12:39:03	CindyLinz	[01:53:13] QQ
2014-01-28 12:39:03	suhorng	[01:53:20] https://groups.google.com/forum/#!topic/haskell-pipes/BTQsITNwflc 第二篇
2014-01-28 12:39:03	CindyLinz	[01:54:09] 歐! 謝謝~~
2014-01-28 12:39:03	CindyLinz	[01:54:28] 厚剛以為是 stackoverflow... 下了 site:stackoverflow.com 原來就把可能的來源刪了.... orz
2014-01-28 12:39:03	suhorng	[01:55:07] XDD
2014-01-28 12:39:03	suhorng	[02:00:49] 天阿我說錯了orzzz 應該是倒數第二封信, 不是第二封信...
2014-01-28 12:39:03	CindyLinz	[02:04:56] 沒關係.. 一整串下來就會看到了 ^^|
2014-01-28 12:39:03	CindyLinz	[02:06:34] 嗯 看 paper 的時候, 蠻前面就拿類似這種例子出來 demo, 感覺的確有一點不舒服... XD
2014-01-28 12:39:03	hashcat	[22:15:53] idris的effect paper很好懂
2014-01-28 12:39:03	suhorng	[22:35:16] 還沒懂他的作法
2014-01-28 12:39:03	suhorng	[22:36:12] 例如他的choice說是可以在 Maybe 或 List 這兩種 context 中做
2014-01-28 12:39:03	suhorng	[22:36:24] 那如果我還想要 IO 的話該怎麼辦呢?
2014-01-28 12:39:03	suhorng	[22:36:53] 是不是我要自己寫一個 IO (List a) 之類的 context？
2014-01-28 12:39:03	hashcat	[23:01:41] ???
2014-01-28 12:39:03	suhorng	[23:03:16] 如果我想要有 IO 又想要有 Selection 的話該怎麼做呢?
2014-01-28 12:39:03	hashcat	[23:11:53] 有列表儲存各種effect
2014-01-28 12:39:03	hashcat	[23:12:53] http://eb.host.cs.st-andrews.ac.uk/talks/idris-cph-lec3.pdf
2014-01-28 12:39:03	hashcat	[23:13:00] 看第18頁
2014-01-28 12:39:03	hashcat	[23:14:22] 有個參數是List EFF
2014-01-28 12:39:03	hashcat	[23:17:15] 看範例好了 : http://www.cs.st-andrews.ac.uk/~eb/effect-examples.tgz
2014-01-28 12:39:03	hashcat	[23:17:30] Lang.idr我覺得最好懂
2014-01-28 12:39:03	hashcat	[23:20:01] 他裡面的型別是長這樣 eval : Expr -> Eff IO [EXCEPTION String, STDIO, RND, STATE Env] Int
2014-01-28 12:39:03	hashcat	[23:20:23] 來自創新詞: 最終效果, 途中效果
2014-01-28 12:39:03	hashcat	[23:24:30] IO 跟 Int 可以想成以前的monad
2014-01-28 12:39:03	hashcat	[23:24:33] IO Int
2014-01-28 12:39:03	hashcat	[23:25:06] 中間那個列表是附加於途中的效果, 像是會扔exception, 有隨機數等
2014-01-28 12:39:03	hashcat	[23:26:11] 主效果 IO 附屬效果 [EXCEPTION String, STDIO, RND, STATE Env] 返回 Int
2014-01-28 12:39:03	hashcat	[23:26:26] 這樣講不知道行不行
2014-01-28 12:39:03	hashcat	[23:27:29] 再看下宣告
2014-01-28 12:39:03	hashcat	[23:27:32] data EffM : (m : Type -> Type) ->
2014-01-28 12:39:03	hashcat	[23:27:34] (es : List EFFECT) ->
2014-01-28 12:39:03	hashcat	[23:27:35] (es' : List EFFECT) -> (a : Type) -> Type
2014-01-28 12:39:03	hashcat	[23:28:12] 這裡 m 意思就等同以前 monad 裡的 m 的常用用法
2014-01-28 12:39:03	hashcat	[23:28:34] a 也等同以前 monad 裡的 a 的常用用法
2014-01-28 12:39:03	suhorng	[23:29:21] 嗯嗯!
2014-01-28 12:39:03	hashcat	[23:29:25] 多出兩個(es : List EFFECT) , (es' : List EFFECT) 就是附屬的效果類似 monad transformer
2014-01-28 12:39:03	hashcat	[23:29:42] 補充下前者是不可變狀態, 後者是可變狀態
2014-01-28 12:39:03	hashcat	[23:30:02] Eff 就是 EffM 少了可變狀態
2014-01-28 12:39:03	suhorng	[23:30:11] 嗯哼
2014-01-28 12:39:03	hashcat	[23:30:43] 繼續研究prolog
2014-01-28 12:39:03	hashcat	[23:30:50] 置入行銷
2014-01-28 12:39:03	suhorng	[23:31:48] XDDD
2014-01-28 12:39:03	hashcat	[23:32:27] 很故意的講出來
2014-01-28 12:39:03	CindyLinz	[23:33:49] 途中效果裡面列的東西, 其順序應該是有影響的?
2014-01-28 12:39:03	hashcat	[23:33:49] 發現超恐怖的東西
2014-01-28 12:39:03	hashcat	[23:34:15] 天網出現之日指日可待
2014-01-28 12:39:03	CindyLinz	[23:34:20] ..
2014-01-28 12:39:03	hashcat	[23:34:30] http://www.cs.ox.ac.uk/activities/machlearn/Aleph/aleph_toc.html
2014-01-28 12:39:03	hashcat	[23:34:52] 我想不按原文翻譯成歸納邏輯理論自動建造機
2014-01-28 12:39:03	hashcat	[23:35:31] 原文是Aleph is an Inductive Logic Programming (ILP) system that supersedes P-Progol.
2014-01-28 12:39:03	CindyLinz	[23:36:00] 會學習會推論不可怕啊.. 天網出現的那一瞬間是出現自覺.. XD
2014-01-28 12:39:03	hashcat	[23:36:17] 機率跟歸納都有了, 整合起來要是加上前端視覺模式識別
2014-01-28 12:39:03	hashcat	[23:36:53] 征服銀河系的就不是人啦, 是歸納邏輯系統
2014-01-28 12:39:03	suhorng	[23:37:01] CindyLinz: 我覺得有點難說..他的作法會不會影響/如何影響實在不像 monad transformer 那樣看容易看出來....
2014-01-28 12:39:03	hashcat	[23:38:02] suhorng: 我怎覺得是 Effect 比較容易一目了然
2014-01-28 12:39:03	CindyLinz	[23:38:12] suhorng: 昨天看了 Pipes 作者對於可以隨意換順序的 Effect 的擔心... 我覺得如果可以隨意換順序的模型, 最好把 Exception 分出去, 不要混一起 ^^|
2014-01-28 12:39:03	suhorng	[23:38:17] 昨天貼的那封信我把他改成用 extensible-effects package, 結果不管 runError 跟 runState 誰先誰後跑出來結果都是 2
2014-01-28 12:39:03	suhorng	[23:39:03] 不同作法之下效果跟 monad transformer 完全不同XD|||
2014-01-28 12:39:03	suhorng	[23:39:04] 不只 exception，可能還要包含任何會影響control的東西，像是 x <- [1..10] 這一類東西
2014-01-28 12:39:03	hashcat	[23:39:33] 設計上跟順序無關才合情合理
2014-01-28 12:39:03	hashcat	[23:39:54] Monad跟Effect作用就是嵌入個語言
2014-01-28 12:39:03	suhorng	[23:40:00] hashcat: 像 s -> Either String (a, s) 跟 a -> (Either String a, s) 還可以人眼看出來, Effects 該怎磨勘呢?
2014-01-28 12:39:03	suhorng	[23:40:05] 不可能無關吧
2014-01-28 12:39:03	hashcat	[23:40:32] 拿設計一個語言來說, 沒人會想說什麼語言特性跟加入那個特性順序有關系吧
2014-01-28 12:39:03	CindyLinz	[23:40:33] 差別在... action 的長相來決定順序, 還是呼叫的地方決定順序 :Q
2014-01-28 12:39:03	suhorng	[23:41:06] 像 MTL 跟 extensible-effects 都是呼叫的地方決定順序
2014-01-28 12:39:03	suhorng	[23:41:20] 但是他們 "不同順序" 造成的影響很不一樣
2014-01-28 12:39:03	CindyLinz	[23:41:36] hashcat: 但是執行到一半發生 exception 了, 那麼 exception 之前已經做了的動作要仍舊保持, 還是 rollback, 是要規定一下的...
2014-01-28 12:39:03	hashcat	[23:41:43] 所有的效果 "同時" 發生, 前後無關才合情合理
2014-01-28 12:39:03	CindyLinz	[23:42:09] suhorng: MTL 是指.. liftIO 的寫法, 而不是 lift 的寫法?
2014-01-28 12:39:03	suhorng	[23:42:26] effects之間怎麼互動沒有一定怎樣才是對的吧? 可以選一種拿來作準 不過其他種也不能說錯
2014-01-28 12:39:03	hashcat	[23:42:28] 嗯嗯
2014-01-28 12:39:03	suhorng	[23:42:41] CindyLinz: 是指 monad transformers
2014-01-28 12:39:03	CindyLinz	[23:43:13] suhorng: monad trans 的 lift . lift . lift 的寫法.. 是定義 action 的地方就決定順序了啊.
2014-01-28 12:39:03	CindyLinz	[23:43:36] 看 lift 用了幾層, 就決定那一層一定要是什麼呀
2014-01-28 12:39:03	suhorng	[23:43:55] 假設使用typeclass自動推論要lift幾層的那種好了~
2014-01-28 12:39:03	CindyLinz	[23:44:10] XD 那就是 liftIO, liftWriter 的寫法嘛 :p
2014-01-28 12:39:03	suhorng	[23:44:24] 就是 mtl package 做的事呀Q_Q
2014-01-28 12:39:03	suhorng	[23:44:54] 大概我有弄混
2014-01-28 12:39:03	CindyLinz	[23:44:59] 嗯嗯, 要標明 不準直接用 lift.. :p
2014-01-28 12:39:03	hashcat	[23:46:31] 問下
2014-01-28 12:39:03	hashcat	[23:46:47] haskell在工作使用情形如何
2014-01-28 12:39:03	CindyLinz	[23:47:40] mno2: (戳戳)
2014-01-28 12:39:03	suhorng	[23:47:54] 可能要去 haskell.sg meetup (誤)
2014-01-28 12:39:03	mno2	[23:48:36] CindyLinz: ?
2014-01-28 12:39:03	CindyLinz	[23:49:07] mno2: # 23:46 < hashcat> haskell在工作使用情形如何
2014-01-28 12:39:03	mno2	[23:50:42] http://functionaljobs.com/jobs/8678-haskell-developer-at-zalora  可以參考 JD
2014-01-28 12:39:03	hashcat	[23:52:40] 亂丟垃圾會重杖打屁股的地方
2014-01-28 12:39:03	CindyLinz	[23:53:10] 可以 remote..
2014-01-28 12:39:03	CindyLinz	[23:53:18] 所以可以繼續亂丟垃圾(?
2014-01-28 12:39:03	mno2	[23:53:45] 丟垃圾？
2014-01-28 12:39:03	CindyLinz	[23:54:10] 他應該是說街上亂丟東西 XD
2014-01-28 12:39:03	mno2	[23:54:42] 喔喔
2014-01-28 12:39:03	hashcat	[23:55:07] 不是我想找, 只是想了解這裡的人有沒啥用到
2014-01-28 12:39:03	hashcat	[23:55:25] 我是完全沒用上
2014-01-28 12:39:03	CindyLinz	[23:56:07] 我用到一半
2014-01-28 12:39:03	hashcat	[23:56:19] 做什麼的
2014-01-28 12:39:03	CindyLinz	[23:56:25] 因為沒有時間壓力, 所以常常會跑去弄別的..
2014-01-28 12:39:03	hashcat	[23:56:58] 聽起來像無業遊民
2014-01-28 12:39:03	CindyLinz	[23:57:04] 資料結構, Augmented RB tree, 要拿來作即時的名次
2014-01-28 12:39:03	CindyLinz	[23:57:31] 應該剩介面整理.. 然後就擺了一陣子 orz # https://github.com/CindyLinz/Haskell-AugmentedRBTree
2014-01-28 12:39:03	CindyLinz	[23:59:03] 現在在弄 Haskell 與 Perl 介接.. 也許就能沿用我們公司原有的, 用 perl 寫的 socket 介面
2014-01-28 12:39:03	hashcat	[23:59:24] 同樣都沒實用, FP的對象我決定轉移到idris了
2014-01-28 12:39:03	CindyLinz	[00:00:19] haskell 接 perl 目前實驗了一些些會動, 要開始寫正經一點的了 :p  https://github.com/CindyLinz/Haskell-Perl
2014-01-28 12:39:03	hashcat	[00:00:23] 你是後端啥都能用就是
2014-01-28 12:39:03	CindyLinz	[00:00:55] 什麼意思??
2014-01-28 12:39:03	hashcat	[00:01:07] 就是前端 perl
2014-01-28 12:39:03	CindyLinz	[00:01:11] Non-windows only
2014-01-28 12:39:03	hashcat	[00:01:23] 後端什麼語言都沒限制
2014-01-28 12:39:03	CindyLinz	[00:01:40] 其實前端也沒限制.... socket 出去就行
2014-01-28 12:39:03	CindyLinz	[00:02:05] 只是一定要透過 socket 的話, 整合性比較差, 必須是本身足夠完整的子系統才行
2014-01-28 12:39:03	hashcat	[00:02:17] 啥麼公司做什麼的
2014-01-28 12:39:03	CindyLinz	[00:02:17] 如果能揉在一起的話, 只換一個函數塞進去都行
2014-01-28 12:39:03	CindyLinz	[00:02:55] 營運自己開發的遊戲的公司~ http://www.gamesofa.com/
2014-01-28 12:39:03	hashcat	[00:04:07] 哦
2014-01-28 12:39:03	hashcat	[00:04:14] 原來是王老闆
2014-01-28 12:39:03	CindyLinz	[00:04:29] 啊? 老闆不姓王啊 @_@"
2014-01-28 12:39:03	hashcat	[00:04:54] 當我沒說好了
2014-01-28 12:39:03	CindyLinz	[00:05:35] @@"
2014-01-28 12:39:03	hashcat	[00:07:29] 我看成你是老闆
2014-01-28 12:39:03	CindyLinz	[00:08:46] ._.
2014-01-28 12:39:03	CindyLinz	[00:09:20] 那句的「自己」指的是公司不是我啦.. XD
2014-01-28 12:39:03	hashcat	[00:10:12] 想不出自己還能是啥
2014-01-28 12:39:03	hashcat	[00:11:40] 還有這種用法
2014-01-28 12:39:03	hashcat	[00:11:53] 公司自己
2014-01-28 12:39:03	CindyLinz	[00:13:19] 我玩遊戲不夠重度... 如果遊戲是我設計.... 應該會作出只有我自己想玩的遊戲
2014-01-28 12:39:03	CindyLinz	[00:13:33] 而且我自己也玩一陣子就膩了..ww
2014-01-28 12:39:03	petercommand	[00:13:38] CindyLinz: XD
2014-01-28 12:39:03	CindyLinz	[00:14:24] 前一陣子發現一個無邊界的多人踩地雷遊戲覺得很好玩... http://mienfield.com/
2014-01-28 12:39:03	CindyLinz	[00:14:34] 結果只有我覺得好玩....持續兩天 orz
2014-01-28 12:39:03	hashcat	[00:16:32] 整個創意100分, 有趣0分的遊戲
2014-01-28 12:39:03	CindyLinz	[00:16:49] 有必要說這麼狠嗎.....QQ
2014-01-28 12:39:03	hashcat	[00:18:01] 不過還是可以理解, 就跟我寫prolog的時候一樣
2014-01-28 12:39:03	hashcat	[00:18:27] 結果只有我覺得好玩....持續三個月 orz
2014-01-28 12:39:03	hashcat	[00:20:24] 擴展perl可以用haskell, 表示擴展python可以用idris
2014-01-28 12:39:03	hashcat	[00:21:31] =D
2014-01-28 12:39:03	hashcat	[00:34:06] 問了下idris還只能在單核跑 ==
2014-01-28 12:39:03	CindyLinz	[00:44:17] 這是什麼推論啊.... XD
2014-01-28 12:39:03	hashcat	[00:45:47] 在跟idriser討論加進平行化, 能不就像是在產生的C code加上openmp pragma
2014-01-28 12:39:03	CindyLinz	[00:47:07] 嗯, 有很多系統呼叫要換用加上 _r 自尾的版本
2014-01-28 12:39:03	CindyLinz	[00:47:10] 嗯, 有很多系統呼叫要換用加上 _r 字尾的版本
2014-01-28 12:39:03	hashcat	[00:49:11] _r是啥?
2014-01-28 12:39:03	CindyLinz	[00:50:19] 很多 C 的標準 lib 函數, 例如說 string.h 裡面的 strtok, 會用到自己內建的 static 的 buffer
2014-01-28 12:39:03	CindyLinz	[00:50:41] 而 strtok_r 可以由呼叫端給 buffer
2014-01-28 12:39:03	CindyLinz	[00:51:14] 用內建 static buffer 在 multi-thread 的時候, 如果發生不同的 thread 都去採同一個 static buffer 會悲劇
2014-01-28 12:39:03	hashcat	[00:55:48] 哦
2014-01-28 12:39:03	hashcat	[00:56:55] 睡覺
2014-01-28 12:39:03	CindyLinz	[01:52:51] Dryman 寫的 Monad 教學 http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/
2014-01-28 12:39:03	CindyLinz	[01:52:54] 還沒看 :p
2014-01-28 12:39:03	CindyLinz	[01:55:02] 這張圖解不錯 ^^ http://www.idryman.org/images/monad/monad-structure.png
2014-01-28 12:39:03	CindyLinz	[15:05:51] 嗯, GHC 的 MultiParamClasses extension 也很重要....
2014-01-28 12:39:03	CindyLinz	[15:07:10] TypeSynonymInstances 非必要.. 但我也是覺得沒有會很苦命 XD
2014-01-28 12:39:03	CindyLinz	[15:40:26] 問問題...
2014-01-28 12:39:03	CindyLinz	[15:40:38] Foreign.C.String 裡面有個 newCString
2014-01-28 12:39:03	CindyLinz	[15:41:02] 是 String -> IO (CString)  其中 type CString = Ptr CChar
2014-01-28 12:39:03	CindyLinz	[15:41:25] 這邊給出來的 CString 是需要自己手動去 free 的
2014-01-28 12:39:03	CindyLinz	[15:41:45] 另外有個 withCString
2014-01-28 12:39:03	CindyLinz	[15:41:48] :t withCSTring
2014-01-28 12:39:03	lambdabot	[15:41:49] Not in scope: `withCSTring'
2014-01-28 12:39:03	CindyLinz	[15:41:52] :t withCString
2014-01-28 12:39:03	lambdabot	[15:41:53] Not in scope: `withCString'
2014-01-28 12:39:03	CindyLinz	[15:41:56] orz
2014-01-28 12:39:03	CindyLinz	[15:42:12] withCString :: String -> (CString -> IO a) -> IO a
2014-01-28 12:39:03	CindyLinz	[15:42:31] 它會在我第二個參數的 action 用完以後自動幫我回收.... (很開心)
2014-01-28 12:39:03	CindyLinz	[15:43:24] 現在的問題是, 我是在一個底下墊 MonadIO 的 monad transformer 裡面做事情
2014-01-28 12:39:03	CindyLinz	[15:43:37] 那個 CString 是要在這個 monad transformer 裡面用的
2014-01-28 12:39:03	CindyLinz	[15:43:56] 如果我用 liftIO $ withCString str $ \cstr -> do ... 的話
2014-01-28 12:39:03	CindyLinz	[15:44:18] 最後面那個 action 是 IO a, 沒辦法用我 monad transformer 的函數 @@"
2014-01-28 12:39:03	CindyLinz	[15:44:48] 所以現在只能用 newCString 這種, 然後最後再自己記得 free 掉 @@"
2014-01-28 12:39:03	CindyLinz	[15:45:26] 我要怎麼使用這種 bracket 長相的用法呢?
2014-01-28 12:39:03	godfat	[15:45:50] 弄個 withCStringM ...?
2014-01-28 12:39:03	CindyLinz	[15:46:25] 好兇 XD
2014-01-28 12:39:03	CindyLinz	[15:47:04] 把那些 IO a 都換成 MonadIO m => m a 的版本?
2014-01-28 12:39:03	godfat	[15:47:48] 之類的... XD
2014-01-28 12:39:03	CindyLinz	[15:50:42] mmm
2014-01-28 12:39:03	CindyLinz	[15:51:35] 那麼, 我要怎麼處理 exception 呢? 希望裡面 throw exception 的時候, 我可以先 free 了, 再 re-throw..
2014-01-28 12:39:03	CindyLinz	[15:51:54] Control.Exception 裡面的 catch, try 看起來都是 IO a 的 @@"
2014-01-28 12:39:03	suhorng	[15:53:29] 咦？我以為 IO a 的 catch try 是 Prelude 的
2014-01-28 12:39:03	godfat	[15:53:39] 這些都重做好像工程有點大，而且不見得能做..? XD
2014-01-28 12:39:03	godfat	[15:53:40] 欸，說真的有時候覺得 ghc 的 api 有些缺東缺西...
2014-01-28 12:39:03	godfat	[15:53:40] 雖然好像大多都是 IO 的部份
2014-01-28 12:39:03	suhorng	[15:54:09] 喔喔 是說 IO (Either...)
2014-01-28 12:39:03	CindyLinz	[15:54:12] 好像, 在 IO a 那邊我重新 run 自己的 monad transformer 是一種作法.. 不過我的 monad transformer 有模仿 ST 那樣, 有一個 forall s. 在裡面, 而且我的 run 會做一些應該不能在前一個 run 結束以前再 run 第二次的動作 @@"
2014-01-28 12:39:03	CindyLinz	[15:54:55] suhorng: 原本是 Prelude, 不過 GHC (或 Haskell2010?) 有把它做得更完整. Prelude 還是能用就是
2014-01-28 12:39:03	CindyLinz	[15:55:13] 現在有做成像 Java 樹狀的 exception 家族那樣
2014-01-28 12:39:03	suhorng	[15:55:53] 嗯嗯
2014-01-28 12:39:03	CindyLinz	[15:56:17] 我想想看我能不能分出一個類似 re-run 的函數出來, 讓它不要做原本 run 會有的初始化和結束的部分, 只是讓它可以套在 IO 裡面..
2014-01-28 12:39:03	CindyLinz	[15:57:45] GHC api 都喜歡著重: 這邊是個 Monoid!, 這邊有個 Dual!, 這是個最小的 FixPoint!..... ww
2014-01-28 12:39:03	godfat	[15:58:54] 不知道該說啥
2014-01-28 12:39:03	godfat	[15:58:54] 有時候寫寫 ruby 會想說能用 haskell 多好啊
2014-01-28 12:39:03	godfat	[15:58:54] 可是實際上真的要用又一堆問題 orz
2014-01-28 12:39:03	CindyLinz	[16:00:38] godfat: 工程師! 快來吧~~~ (招手)
2014-01-28 12:39:03	godfat	[16:01:03] 這有點雞蛋問題呀... ~.~
2014-01-28 12:39:03	godfat	[16:01:18] 尤其一堆「工程師」都保守到不行...
2014-01-28 12:39:03	CindyLinz	[16:02:02] 昨天跟 wens 聊天, 講到 perl 的過去版本相容性非常好.. 甚至 doc 裡面還會寫: 這邊會有這樣這樣的行為, 它是一個 unfixable bug, 因為如果修掉了, 會使得很多 third-party lib 壞掉.
2014-01-28 12:39:03	CindyLinz	[16:02:33] 然後想到, Larry Wall 以前是 system admin. system admin 最需要相容性了.. XD
2014-01-28 12:39:03	CindyLinz	[16:02:53] 所以要工程師跳進來 Haskell, 才會讓它適合工程師用 :D
2014-01-28 12:39:03	CindyLinz	[16:03:20] 不能都是數學家這樣... ^^|
2014-01-28 12:39:03	suhorng	[16:05:17] http://www.reddit.com/r/haskell/comments/1br0ls/haskell_beats_c_using_generalised_stream_fusion/ 看看這個能不能吸引一點工程師好了 (炸)
2014-01-28 12:39:03	CindyLinz	[16:10:53] godfat: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-28 12:39:03	CindyLinz	[16:11:26] suhorng: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-28 12:39:03	CindyLinz	[16:11:35] 見者有份歐~~ (咦)
2014-01-28 12:39:03	suhorng	[16:15:41] 好難..XD
2014-01-28 12:39:03	CindyLinz	[16:17:43] ~_~
2014-01-28 12:39:03	godfat	[16:20:40] 所以說起來， sysadmin 用的語言應該要跟 app programmer 不一樣才對 XD
2014-01-28 12:39:03	godfat	[16:20:41] 後者可以用相容性低的東西...
2014-01-28 12:39:03	godfat	[16:20:41] XDDDD 最近太忙了，都沒空玩 haskell... ~.~
2014-01-28 12:39:03	suhorng	[16:21:21] exception真的有辦法解決嗎..?
2014-01-28 12:39:03	CindyLinz	[16:21:35] 解決?
2014-01-28 12:39:03	CindyLinz	[16:21:49] 給 godfat 一個 exception, 他就有空玩 haskell 了這樣?
2014-01-28 12:39:03	godfat	[16:22:00] XDDDD
2014-01-28 12:39:03	suhorng	[16:22:03] XDDD
2014-01-28 12:39:03	CindyLinz	[16:23:13] suhorng: 你問的是什麼啦 XD
2014-01-28 12:39:03	suhorng	[16:24:02] 我想想 ~"~
2014-01-28 12:39:03	CindyLinz	[16:26:27] 我剛剛遇到的情況, 嗯, 可以用純的 unXxxT 解決
2014-01-28 12:39:03	CindyLinz	[16:27:37] 假設我的 monad trans 是 newtype XxxT .... = XxxT { unXxxT :: xxState -> m (xxState, a) }
2014-01-28 12:39:03	CindyLinz	[16:29:23] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT cstr act xxState
2014-01-28 12:39:03	CindyLinz	[16:30:28] 因為我是寫這個 monad trans 的人, 所以我可以直接拿到 xxState
2014-01-28 12:39:03	suhorng	[16:31:06] 唔...實在想不到 exception 能怎麼配上 MonadIO
2014-01-28 12:39:03	suhorng	[16:31:09] 嗯嗯
2014-01-28 12:39:03	CindyLinz	[16:31:38] 這樣就算是有處理到 exception 啦 ^^   因為那個 withCString 就是會處理 exception 的
2014-01-28 12:39:03	CindyLinz	[16:31:52] 而 bracket 應該也可以一樣的包法
2014-01-28 12:39:03	CindyLinz	[16:32:26] 我這個方法, 不適用任意的 MonadIO.. 我得拿得到 internal state 才行 :Q
2014-01-28 12:39:03	suhorng	[16:32:28] 喔~
2014-01-28 12:39:03	suhorng	[16:32:47] 遇到奇怪的 MonadIO 的話也不行XD
2014-01-28 12:39:03	CindyLinz	[16:33:09] 嗯, 有可能是 monad trans 提供者才能做..
2014-01-28 12:39:03	CindyLinz	[16:36:54] 咦.. 寫錯了..
2014-01-28 12:39:03	CindyLinz	[16:37:09] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-28 12:39:03	CindyLinz	[16:37:12] 這樣才對
2014-01-28 12:39:03	CindyLinz	[17:05:00] 突然覺得自己現在竟然能很順地寫出這種東西很不可思議.. # liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-28 12:39:03	CindyLinz	[17:05:13] 以前讀別人的 code 寫這東西超崩潰的...ww
2014-01-28 12:39:03	kanru	[17:06:43] XDD
2014-01-28 12:39:03	suhorng	[18:02:30] 嗯... try :: Exception e => IO a -> IO (Either e a)  這類函式是不是真的沒辦法變成 MonadIO m => m a -> m (Either e a) ...？
2014-01-28 12:39:03	suhorng	[18:06:48] 好像真的無可避免
2014-01-28 12:39:03	CindyLinz	[18:10:12] 好像應該要舉一個反例出來證明變不出來...
2014-01-28 12:39:03	suhorng	[18:10:30] 我好像笨了
2014-01-28 12:39:03	suhorng	[18:10:35] 好像可以
2014-01-28 12:39:03	suhorng	[18:11:32] ..不對 不可以那樣做 XDDDD 可以弄出 type correct 但是沒有 try 效果的 Exception e => m a -> m (Either e a)
2014-01-28 12:39:03	CindyLinz	[18:12:30] tryM :: MonadIO m => m a -> m (Either e a)    tryM = tryM ? (誤)
2014-01-28 12:39:03	suhorng	[18:14:19] \ma -> do { a <- ma; liftIO (try (return a)) }，我剛剛竟然在想這個，真是太呆了
2014-01-28 12:39:03	CindyLinz	[18:15:52] 那個 try 就是這個 tryM 哄? XD
2014-01-28 12:39:03	CindyLinz	[18:16:05] 那的確就是 tryM = tryM... XD
2014-01-28 12:39:03	suhorng	[18:17:19] 不是吧Q_Q 這個是 tryM = liftM Right
2014-01-28 12:39:03	CindyLinz	[18:18:25] 喔喔.. 事情都在前面的 a <- ma 做完了 XD
2014-01-28 12:39:03	CindyLinz	[18:18:56] a <- ma 地方可以確認這個 ma 會 return
2014-01-28 12:39:03	CindyLinz	[23:22:57] 我想從 haskell pass 一個 list 給 C 函數跑迴圈.. 有沒有什麼辦法不要「複製」出東西的方法啊 @@"
2014-01-28 12:39:03	CindyLinz	[23:24:14] 只能一開始就選別的 container 像是 storable array 或 storable vector 嗎...
2014-01-28 12:39:04	hashcat_	[23:32:54] list 是有點複雜的結構  就算傳指標過去也不堪c直接用
2014-01-28 12:39:04	CindyLinz	[23:33:27] 只是好奇能不能 access ghc internal.. XD
2014-01-28 12:39:04	hashcat_	[23:34:29] 破壞haskell封裝
2014-01-28 12:39:04	CindyLinz	[23:38:50] 在 C 層次了誰管它什麼封裝啊.... ww
2014-01-28 12:39:04	CindyLinz	[23:39:15] 這邊是公海.. (咦)
2014-01-28 12:39:04	hashcat_	[23:43:38] 指標傳過去後我就沒輒
2014-01-28 12:39:04	hashcat_	[23:44:00] list沒有對應的ctype
2014-01-28 12:39:04	***	Playback Complete.
2014-01-28 12:39:24	--	モード #haskell.tw [+cnt]
2014-01-28 12:39:24	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-28 13:01:00	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-28 13:28:46	-->	hashcat_ (~hashcat_@27.241.138.81) が #haskell.tw に参加
2014-01-28 14:38:13	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Quit: leaving)
2014-01-28 14:41:08	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-01-28 15:05:51	--	irc: サーバから切断
2014-01-28 20:56:58	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-28 20:56:58	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-28 20:56:58	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-28 20:56:58	--	ニックネーム #haskell.tw: [a2n cataska cataska_ cibs CindyLinz cyt93cs darkx drbean gko hashcat_ hychen kanru lambdabot letoh logfat_____ miaout17 monochrom petercommand shik superbil_c town77 weie]
2014-01-28 20:56:58	--	チャンネル #haskell.tw: 22 ニックネーム (0 オペレータ, 0 発言, 22 通常)
2014-01-28 20:56:58	***	Buffer Playback...
2014-01-28 20:56:58	hashcat_	[00:26:58] 用怪招說明他可以推論出來
2014-01-28 20:56:58	suhorng	[00:27:09] Rank2Types感覺有點差別欸
2014-01-28 20:56:58	hashcat_	[00:27:10] 也不算怪招啦
2014-01-28 20:56:58	suhorng	[00:27:21] 不知道是不是在型別推論的地方有差
2014-01-28 20:56:58	hashcat_	[00:27:25] pattern matching不就隱含解構子的存在了
2014-01-28 20:56:58	CindyLinz	[00:27:42] Rank2Type 指的是 forall 可以寫在 -> 的左邊..
2014-01-28 20:56:58	suhorng	[00:27:42] 有很多種不同的解構子？
2014-01-28 20:56:58	hashcat_	[00:27:55] 從別的方面講Haskell既然說他是statically type就不會騙人吧
2014-01-28 20:56:58	hashcat_	[00:28:11] 執行時期是根本沒型別資訊
2014-01-28 20:56:58	hashcat_	[00:28:19] 不像C++還是有保留
2014-01-28 20:56:58	CindyLinz	[00:28:20] Rank3Type (應該沒這 extension, 想 >2 全都用 N types 了吧?)  就是 -> 的左邊如果是個 ( .... -> .... ), 這個裡面的 -> 的左邊可以有 forall.. XD
2014-01-28 20:56:58	suhorng	[00:28:23] CindyLinz: 是想說 rank 2 types 的型別推論是 decidable， > 2 不是 decidable
2014-01-28 20:56:58	suhorng	[00:28:40] RankNTypes 需要寫type signature 這樣 @口@
2014-01-28 20:56:58	CindyLinz	[00:28:47] 反正我寫不出無法 decide 的 type...ww
2014-01-28 20:56:58	CindyLinz	[00:29:07] DFS 50 層內一定解得出來 (逃)
2014-01-28 20:56:58	hashcat_	[00:29:20] statically type是說他沒法斷定型別就不會讓你編譯過
2014-01-28 20:56:58	hashcat_	[00:29:40] 算了最近對haskell沒興趣
2014-01-28 20:56:58	suhorng	[00:29:40] 就..型別是 Test，然後Test有 Class a =>，所以可以編譯過阿XD
2014-01-28 20:56:58	hashcat_	[00:30:11] prolog.tw
2014-01-28 20:56:58	hashcat_	[00:30:24] 成立成立
2014-01-28 20:56:58	hashcat_	[00:31:13] 突然一陣靜默
2014-01-28 20:56:58	suhorng	[00:31:14] DFS 50層 XDDD
2014-01-28 20:56:58	suhorng	[00:31:22] UndecidableInstances！
2014-01-28 20:56:58	CindyLinz	[00:31:53] suhorng: 我覺得差別是... (不考慮 Typeable 和 Dyn 的話) haskell 裡面一般是無法做 C++ 的 typeof(...) 或 x instanceof y 或是 parent class 往 childe class 的轉型
2014-01-28 20:56:58	hashcat_	[00:32:03] 這麼喜歡動態就看prolog吧
2014-01-28 20:56:58	CindyLinz	[00:32:52] 不考慮 Typeable / Dyn 是因為, 我覺得它是 programmer 額外加上的 note. 如果 programmer 惡意亂指定 TyCon, ghc 也會放行
2014-01-28 20:56:58	suhorng	[00:33:02] 會爆炸XD
2014-01-28 20:56:58	CindyLinz	[00:33:16] 會爆嗎? 就會轉出神妙的東西吧? XD
2014-01-28 20:56:58	suhorng	[00:33:32] 可以讓他segmentation fault!
2014-01-28 20:56:58	CindyLinz	[00:34:08] 呃... 能嗎? @_@"
2014-01-28 20:56:58	CindyLinz	[00:34:23] 我以為只是你存了一個 Int 進去, 取了一個 Char 出來...
2014-01-28 20:56:58	CindyLinz	[00:34:44] 或是你惡搞這個 http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Dynamic.html 裡面的 fromDyn 和 fromDynamic
2014-01-28 20:56:58	CindyLinz	[00:34:54] 做出一個希格斯粒子 type... ww
2014-01-28 20:56:58	CindyLinz	[00:35:07] 你想要什 type 元素, 我都能生給你!
2014-01-28 20:56:58	hashcat_	[00:35:38] 原來討論的什麼怎樣了
2014-01-28 20:56:58	CindyLinz	[00:35:57] 耶不行... Dynamic 裡的格式不是我們自訂.. 是被 Typeable 定死了
2014-01-28 20:56:58	CindyLinz	[00:36:00] 那只能選一種 XD
2014-01-28 20:56:58	suhorng	[00:36:11] 神秘
2014-01-28 20:56:58	CindyLinz	[00:36:13] 但應該可以把 Int 總是轉成 Char... XD
2014-01-28 20:56:58	suhorng	[00:36:20] Typeable我記得有讓他壞掉的例子XD
2014-01-28 20:56:58	monochrom	[00:37:01] 爆炸也是神妙的東西啊! XD
2014-01-28 20:56:58	CindyLinz	[00:37:03] 用 TyCon 硬寫一個不存在的 type 應該就死了吧?
2014-01-28 20:56:58	CindyLinz	[00:37:14] 我是還沒用過... ._.
2014-01-28 20:56:58	suhorng	[00:37:31] http://okmij.org/ftp/Haskell/types.html#unsound-typeable
2014-01-28 20:56:58	CindyLinz	[00:38:38] 好切回來一下, 我覺得 Dyn 和 Typeable 不算是 Haskell 語言本身的東西, 是 lib 這樣, 所以和 C++ 的情況不同 ^^|
2014-01-28 20:56:58	CindyLinz	[00:39:19] 但不代表 statically 就知道每一個 rigid type, 有可能只確定到一定是某個 class 的 instance 而已
2014-01-28 20:56:58	suhorng	[00:39:47] 我就在想實作怎麼實作; 假設Haskell98的話
2014-01-28 20:56:58	hashcat	[00:40:01] 睡覺
2014-01-28 20:56:58	monochrom	[00:40:04] 自行寫一個 "newtype I = I Int; newtype C = C Char", 然後為它們寫些壞的 Typeable 碼, 應該就可以透過 I 和 C 互換來把 Int 和 Char 互換.
2014-01-28 20:56:58	CindyLinz	[00:40:05] 晚安 XD
2014-01-28 20:56:58	suhorng	[00:40:06] 每次每個多型函數用的時候我們都知道他被instantiate成什麼type
2014-01-28 20:56:58	suhorng	[00:40:15] XD
2014-01-28 20:56:58	CindyLinz	[00:40:24] 壞的 Typeable 碼... XD
2014-01-28 20:56:58	suhorng	[00:40:30] 所以可以在instantiate的時候直接複製一份code
2014-01-28 20:56:58	suhorng	[00:40:37] 像template那樣
2014-01-28 20:56:58	CindyLinz	[00:40:52] 嗯
2014-01-28 20:56:58	suhorng	[00:41:06] 感覺typeclass也是一樣可以靜態知道可能用哪個多載的函數
2014-01-28 20:56:58	CindyLinz	[00:41:15] 是.... 哪些?
2014-01-28 20:56:58	CindyLinz	[00:41:28] 而不能明確縮小到一個吧 @@"
2014-01-28 20:56:58	CindyLinz	[00:41:53] 如果要能實作 showGenList :: GenList -> String 的話..
2014-01-28 20:56:58	suhorng	[00:42:03] 限定Haskell98 XD
2014-01-28 20:56:58	CindyLinz	[00:42:07] 喔喔
2014-01-28 20:56:58	suhorng	[00:44:06] 如果複製一份code的話這樣不需要實作多型表示(或紀錄 runtime type information)之類..
2014-01-28 20:56:58	CindyLinz	[00:44:35] 可是 Haskell98 好卡欸... ww
2014-01-28 20:56:58	suhorng	[00:44:55] 但是現在這種typeclass感覺就不行了吧, 咦定要在constructor裡面帶一些東西 (像哪個branch之類, 或類似 virtual table 那種東西...)
2014-01-28 20:56:58	suhorng	[00:44:56] XD
2014-01-28 20:56:58	CindyLinz	[00:45:45] 沒有 FlexibleInstances 和 ScopedTypeVariable 我活不下去... QQ
2014-01-28 20:56:58	suhorng	[00:46:29] 說到 scoped type variables 我在想 idris 是怎麼做的 |||
2014-01-28 20:56:58	CindyLinz	[00:46:33] virtual table 應該是把 type 帶進去....
2014-01-28 20:56:58	suhorng	[00:46:41] 嗯
2014-01-28 20:56:58	CindyLinz	[00:46:47] 不過 haskell 可以不用帶 type, 而是把要用到的 member function 帶進去
2014-01-28 20:56:58	CindyLinz	[00:47:23] 而且 haskell 的 class 可以是兩三個以上的 type 交互作用... 好吧, 還是可以用 tuple 的方式一次帶 N 個 type... ww
2014-01-28 20:56:58	suhorng	[00:47:24] 詳細一下？是怎樣XD
2014-01-28 20:56:58	CindyLinz	[00:47:55] 剛剛我講的那個 Show 就是把 show 帶進去呀... Int 的 element 就帶個 Show Int 的 show, Char 的 element 就帶 Show Char 的 show
2014-01-28 20:56:58	CindyLinz	[00:48:29] 然後 showGenList 在跑的時候就是逐個拿 show 出來用.. 而它背後是什麼 type, 可以搞不清楚, 用就對了
2014-01-28 20:56:58	suhorng	[00:48:41] 類似對於每次用的時候
2014-01-28 20:56:58	suhorng	[00:48:46] *用constructor
2014-01-28 20:56:58	suhorng	[00:49:01] 給個資料結構, 對每個instance儲存那個函式？
2014-01-28 20:56:58	CindyLinz	[00:49:15] 嗯, 函數指標之類的東西
2014-01-28 20:56:58	CindyLinz	[00:49:40] 好吧, 其實是會存到一個指向整個 Show Int 的表格
2014-01-28 20:56:58	suhorng	[00:49:56] 好吧, 這個可以靜態弄好, 不用動態建立 XD
2014-01-28 20:56:58	CindyLinz	[00:49:58] 也是 table 等級的東西.... 拆散可能效率也沒比較好
2014-01-28 20:56:58	suhorng	[00:50:19] 喔...突然想到我剛剛那個例子不知道能不能用newtype
2014-01-28 20:56:58	CindyLinz	[00:50:36] 所有的 Show a.. Show Int, Show Char, Show Double 應該都會是長度一樣的 struct
2014-01-28 20:56:58	suhorng	[00:50:39] 嗯
2014-01-28 20:56:58	CindyLinz	[00:51:06] Java 的話就是 parent 短, child 長, 但 prefix 一樣; C++ 應該要有一個很動態的查表吧?
2014-01-28 20:56:58	CindyLinz	[00:51:26] 因為 C++ 有多重繼承, 好麻煩 XD
2014-01-28 20:56:58	suhorng	[00:51:35] XDD
2014-01-28 20:56:58	suhorng	[00:51:42] 沒會過C++的作法
2014-01-28 20:56:58	CindyLinz	[00:51:47] ._.
2014-01-28 20:56:58	CindyLinz	[00:52:17] 哪個例子啊? XD
2014-01-28 20:56:58	suhorng	[00:52:31] data Test where...那個
2014-01-28 20:56:58	suhorng	[00:52:42] 因為想到newtype沒有執行時期constructor
2014-01-28 20:56:58	CindyLinz	[00:53:44] 唔.. 在定義 data 的地方放 class constraint 不是要被 deprecate 了嗎? XD
2014-01-28 20:56:58	suhorng	[00:53:47] 喔 Rank2Types 跟我想的不一樣...
2014-01-28 20:56:58	suhorng	[00:53:54] deprecate？
2014-01-28 20:56:58	suhorng	[00:54:04] 真假=口=
2014-01-28 20:56:58	CindyLinz	[00:54:06] 被說是個設計壞了的功能..
2014-01-28 20:56:58	suhorng	[00:54:16] 因為我還在用 GHC 7.4...
2014-01-28 20:56:58	CindyLinz	[00:54:33] 因為在定義這個 type 用的函數的地方, 再加 constraint 就好了
2014-01-28 20:56:58	suhorng	[00:54:42] 我還以為 GADT 可以隨便放 type signature XDDD 原來不行噢...
2014-01-28 20:56:58	CindyLinz	[00:54:42] 而就算 data 加了... 函數的地方還是要再加
2014-01-28 20:56:58	CindyLinz	[00:54:48] 喔不不, 我不是說 GADT
2014-01-28 20:56:58	suhorng	[00:54:51] !? 這裡不用阿XD
2014-01-28 20:56:58	CindyLinz	[00:55:39] 你這個不就是 data Test = Constructor a 嗎?
2014-01-28 20:56:58	CindyLinz	[00:55:49] 啊, 左邊沒 a.. 那可以放 XD
2014-01-28 20:56:58	suhorng	[00:55:50] 是說這個 http://ideone.com/9kgrGB
2014-01-28 20:56:58	suhorng	[00:55:57] 跟 GenShow 同個東西
2014-01-28 20:56:58	CindyLinz	[00:56:04] 是 forall 型的..
2014-01-28 20:56:58	CindyLinz	[00:56:35] 如果是 Test :: Class a => a -> Test a 應該就會被罵吧?
2014-01-28 20:56:58	suhorng	[00:56:53] XDD
2014-01-28 20:56:58	CindyLinz	[00:57:17] 不過因為是 Test :: Class a => a -> Test 就還好
2014-01-28 20:56:58	CindyLinz	[00:58:52] suhorng: 欸.. newtype 的話你這邊 a 得是個具體的 type 吧?
2014-01-28 20:56:58	CindyLinz	[00:59:07] 好像不用.. orz
2014-01-28 20:56:58	suhorng	[00:59:20] !?
2014-01-28 20:56:58	CindyLinz	[00:59:33] 搞錯
2014-01-28 20:56:58	suhorng	[00:59:43] 剛剛用newtype結果能成功, 不知道怎麼實作的
2014-01-28 20:56:58	suhorng	[00:59:56] 好奇怪, 我原本以為 Rank2Types 不用手動寫型別標記, 結果要
2014-01-28 20:56:58	CindyLinz	[01:02:00] 我以為開那個就是為了寫 forall... 你開了又不想寫是什麼打算啊? @@"
2014-01-28 20:56:58	suhorng	[01:02:47] 原本想讓他 type inference 有 rank 2 type
2014-01-28 20:56:58	CindyLinz	[01:02:56] 喔
2014-01-28 20:56:58	suhorng	[01:02:59] 不過我肯定搞錯了東西...
2014-01-28 20:56:58	CindyLinz	[01:03:14] 嗯, 我看以前你貼的這篇... http://www.vidarholen.net/contents/junk/catbag.html
2014-01-28 20:56:58	CindyLinz	[01:03:30] 如果把 type sig 擦掉, 應該還是可以用.. 可是就沒有他想要的效果了?
2014-01-28 20:56:58	CindyLinz	[01:04:28] 也不對 不是看這篇
2014-01-28 20:56:58	CindyLinz	[01:04:34] 我是去看 ST monad 的 source..
2014-01-28 20:56:58	CindyLinz	[01:04:49] 他 data 左邊的 s, 在右邊也有出現, 就直接當 state
2014-01-28 20:56:58	CindyLinz	[01:05:01] 不過它有在一些地方加 forall..
2014-01-28 20:56:58	suhorng	[01:05:03] 唔
2014-01-28 20:56:58	suhorng	[01:05:05] 嗯....
2014-01-28 20:56:58	CindyLinz	[01:05:14] 如果都沒加的話, 這個 s 應該就可以被摸出去了吧?
2014-01-28 20:56:58	suhorng	[01:05:30] 這樣好像 Rank2Types 是 RankNTypes 的子集沒錯
2014-01-28 20:56:58	suhorng	[01:05:38] 原本以為對型別標記的要求不同
2014-01-28 20:56:58	CindyLinz	[01:05:46] 喔~
2014-01-28 20:56:58	CindyLinz	[01:07:46] 欸我看你給的那個 package Effects
2014-01-28 20:56:58	suhorng	[01:07:54] 嘎嘎
2014-01-28 20:56:58	CindyLinz	[01:08:00] https://hackage.haskell.org/package/effects
2014-01-28 20:56:58	CindyLinz	[01:08:33] 我是這樣理解: 它用起來就像.... 如果用 monad trans 的時候, 都是用 liftIO, liftReader, liftState.. 而不用 lift
2014-01-28 20:56:58	CindyLinz	[01:08:51] 然後它提供兩個額外的工具...
2014-01-28 20:56:58	CindyLinz	[01:09:47] 一個是那個 Effect proxy, 當這一群..... monad trans 疊裡面有出現同一種 monad trans 的時候, 還能夠分得出來 (不然純用 monad trans 的話, 同一類型的只能用到其中一個)
2014-01-28 20:56:58	suhorng	[01:09:52] 額外的工具？
2014-01-28 20:56:58	CindyLinz	[01:10:24] 另一個.. 我猜測應該有, 但還不清楚.. 就是直接用 monad trans, 想隨便用 liftIO, liftReader 這些東西的話
2014-01-28 20:56:58	suhorng	[01:10:29] 他的作法感覺完全跟 monad transformer 不同（用起來不知道|||），從頭到尾只有一個 monad...
2014-01-28 20:56:58	suhorng	[01:10:43] 嗯嗯
2014-01-28 20:56:58	CindyLinz	[01:10:56] 我們要為所有用到的 MonadTrans 們 (假設有 N 種), 去定 N*(N-1) 種 instance
2014-01-28 20:56:58	suhorng	[01:11:12] 對..
2014-01-28 20:56:58	CindyLinz	[01:11:36] 就是 instance ReaderMonad m => ReaderMonad (WriterT w m)
2014-01-28 20:56:58	monochrom	[01:11:56] ST 和 IO 的 所謂 "s -> (# a, s #)", 那個 s 請別當真. 它只是用來哄 optimizer "請不要顛倒次序"
2014-01-28 20:56:58	suhorng	[01:13:06] XD...
2014-01-28 20:56:58	suhorng	[01:13:33] 然後最後其實沒有那個 s 存在 XD?
2014-01-28 20:56:58	CindyLinz	[01:13:52] 這個 N*(N-1) 的麻煩, 如果可以容忍 OverlappingInstances extension 的話, 可以變成 N.. 只是我自己對 OverlappingInstances 有一點怕怕的, 因為它會選到誰, 雖然是明確定義的, 但是從程式碼裡面去讀, 不太明顯 @@"
2014-01-28 20:56:58	CindyLinz	[01:14:30] monochrom: 好 XD
2014-01-28 20:56:58	CindyLinz	[01:14:54] suhorng: 作法還沒讀.. 是從使用的 example.hs 感受的 :p
2014-01-28 20:56:58	suhorng	[01:15:08] 他那個明確定義感覺很模糊阿XDDD
2014-01-28 20:56:58	suhorng	[01:15:14] 之前說的 scoped type variable https://gist.github.com/suhorng/8601726
2014-01-28 20:56:58	suhorng	[01:15:29] 因為 variable 本身就有 scope，所以就有 scoped type variable...各種微妙
2014-01-28 20:56:58	CindyLinz	[01:15:35] 有比 monad is just a monoid... 模糊嗎?
2014-01-28 20:56:58	suhorng	[01:15:56] 這lol monad is just a monoid 感覺可以不模糊
2014-01-28 20:56:58	CindyLinz	[01:16:19] 那個 {b} 是什麼啊?
2014-01-28 20:56:58	suhorng	[01:16:21] // ap1 會 compile error
2014-01-28 20:56:58	suhorng	[01:16:34] implicit argument
2014-01-28 20:56:58	CindyLinz	[01:16:39] 噢 .idr XD
2014-01-28 20:56:58	CindyLinz	[01:16:48] 我應該讀作 forall b. 對吧? XD
2014-01-28 20:56:58	suhorng	[01:17:01] ap1 : (a -> b) -> a -> b 其實會變 ap1 : {a : Type} -> {b : Type} -> ...
2014-01-28 20:56:58	suhorng	[01:17:02] XD
2014-01-28 20:56:58	monochrom	[01:17:03] 即是說, 當你寫 "\s0 -> case getinput s0 of (x, s1) -> case output s1 (x+1) of (_, s2) -> output s2 "bye"", 因著 s0, s1, s2 之間的 data dependency, 所以 optimizer 及 code generator 迫著服從你給的順序, 不能像 pure functional code 那樣"次序沒所謂"
2014-01-28 20:56:58	CindyLinz	[01:17:05] 不對 是寫在下面 orz
2014-01-28 20:56:58	monochrom	[01:17:33] 對的, 最後那個 s 不存在.
2014-01-28 20:56:58	suhorng	[01:17:36] monochrom: 好像有點感覺
2014-01-28 20:56:58	CindyLinz	[01:18:25] 那 suhorng 貼的那個 Bag Cat 就沒這效果了? 它只有防止 Cat 被外面摸到
2014-01-28 20:56:58	suhorng	[01:19:22] 驚
2014-01-28 20:56:58	CindyLinz	[01:21:03] suhorng: 我一次遇到 scoped type variable 是在一個 sig 有 forall 的函數裡面定義內用的 helper, 想這個 helper 的 sig, 而這個 sig 裡面用到那個被 forall 的 type
2014-01-28 20:56:58	CindyLinz	[01:21:17] 沒開這個 ext 的話, compiler 說這兩個 type 是不同個..
2014-01-28 20:56:58	suhorng	[01:21:19] 有遇過!
2014-01-28 20:56:58	suhorng	[01:21:21] 真的 XDDD
2014-01-28 20:56:58	suhorng	[01:21:46] 不過 idris 直接當成一個參數把 type 拿近來..
2014-01-28 20:56:58	CindyLinz	[01:23:20] 預設打開了..
2014-01-28 20:56:58	CindyLinz	[01:23:29] 我覺得它是該開啊... QQ
2014-01-28 20:56:58	suhorng	[01:23:32] 不用打開喔lol
2014-01-28 20:56:58	suhorng	[01:23:34] 不是打開
2014-01-28 20:56:58	suhorng	[01:23:39] 而是像那個 {a}
2014-01-28 20:56:58	CindyLinz	[01:23:44] 只是那如果真要用兩個不一樣的 type, 裡面就要換名字了...
2014-01-28 20:56:58	suhorng	[01:23:57] 普通的variable scope，不是另一個不同的 "type" variable
2014-01-28 20:56:58	CindyLinz	[01:24:41] 就.. 裡面用到同一個名字的時候, 就是在指稱它了
2014-01-28 20:56:58	suhorng	[01:25:15] 就是普通的 variable scoping rule
2014-01-28 20:56:58	suhorng	[01:25:25] 跟 f a = ... where ... = ... a ... 一樣
2014-01-28 20:56:58	CindyLinz	[01:25:34] 你第二行的 {b} 和第一行的 b 是同一個東西嗎?
2014-01-28 20:56:58	suhorng	[01:25:35] 只不過現在這個 a 不一定存值, 也可以是type XD
2014-01-28 20:56:58	suhorng	[01:25:47] 那個code我發現我打錯字..改成 {a} 了
2014-01-28 20:56:58	CindyLinz	[01:26:22] 我是說 ap1 {b} 和 ap1 : ( a -> b ) ...
2014-01-28 20:56:58	suhorng	[01:26:31] 對
2014-01-28 20:56:58	suhorng	[01:26:34] 是同一個東西
2014-01-28 20:56:58	CindyLinz	[01:27:01] 然後因為第二行有 {b}, 所以第三行的 apply 可以用 b 來描述 type?
2014-01-28 20:56:58	suhorng	[01:28:00] 對
2014-01-28 20:56:58	CindyLinz	[01:28:25] 如果第二行沒有 {b}, 那第三行的 b 會被當 free variable (forall) 的意思?
2014-01-28 20:56:58	suhorng	[01:28:35] 對 會變新的
2014-01-28 20:56:58	CindyLinz	[01:28:55] 這樣好像比較好..
2014-01-28 20:56:58	CindyLinz	[01:29:20] ghc ext 那樣是要開就整個 module 全開了.. 所有的 forall 都變成 {x} 宣告
2014-01-28 20:56:58	suhorng	[01:29:38] XDDD
2014-01-28 20:56:58	CindyLinz	[01:30:05] 雖然實際上困擾也沒很大? 反正 a 或 b... 通常也都是沒意義的名字, 換了不會心痛 ww
2014-01-28 20:56:58	suhorng	[01:30:34] 是沒錯
2014-01-28 20:56:58	suhorng	[01:30:44] 但是很有趣w 當type變成可以拿來亂弄以後
2014-01-28 20:56:58	suhorng	[01:30:49] 很多東西可以消失不見
2014-01-28 20:56:58	CindyLinz	[01:31:44] 你是說很多 extension 就沒有存在的必要?
2014-01-28 20:56:58	suhorng	[01:32:41] 好像也不是這樣說 T_T
2014-01-28 20:56:58	suhorng	[01:32:58] 感覺..有些事情有統一的處理方法
2014-01-28 20:56:58	CindyLinz	[01:33:09] 我只是想先聽懂你說「消失」指的是哪方面
2014-01-28 20:56:58	CindyLinz	[01:33:22] 畢竟... Agda 裡面要打的字是變多了, 空格也變多了... XD
2014-01-28 20:56:58	suhorng	[01:33:25] e.g. ScopedTypeVariable
2014-01-28 20:56:58	CindyLinz	[01:33:36] 少一個 extension 沒錯.. XD
2014-01-28 20:56:58	CindyLinz	[01:33:53] 我覺得這一個不算.. XD
2014-01-28 20:56:58	suhorng	[01:33:58] 不少用 typeclass 做的事情也不再需要, 像是 type level list
2014-01-28 20:56:58	CindyLinz	[01:34:19] Haskell 弄成每一個 type var 前面加一下 scoped a. 也行啊? XD
2014-01-28 20:56:58	suhorng	[01:34:49] forall a. 那樣綁起來w？
2014-01-28 20:56:58	CindyLinz	[01:35:29] 對啊多一種修飾字這樣... 畢竟 forall 和 scoped 還是講不同的事 @@"
2014-01-28 20:56:58	suhorng	[01:35:44] 嗯嗯XD
2014-01-28 20:56:58	CindyLinz	[01:36:28] 想到 Agda... 再對照你的心得... 譯: 只要把靈魂賣給惡魔, 就不用學一堆怎麼看天氣和開船的技能了...
2014-01-28 20:56:58	CindyLinz	[01:36:39] (ref: 幽靈船)
2014-01-28 20:56:58	suhorng	[01:36:41] 什麼wwwwwwwww
2014-01-28 20:56:58	suhorng	[01:37:00] 惡魔是dependently typed之類嗎XD
2014-01-28 20:56:58	CindyLinz	[01:37:04] 對啊..
2014-01-28 20:56:58	suhorng	[01:37:11] 我是還不能體會他的好處
2014-01-28 20:56:58	suhorng	[01:37:16] 不過他很好玩XD
2014-01-28 20:56:58	CindyLinz	[01:38:05] 嗯嗯
2014-01-28 20:56:58	CindyLinz	[01:42:17] 然後更之前你丟過一篇也是講 Effect 的 paper, 嗯, 我只有看很前面... 覺得它好像比這個 Effects packet 來得動態
2014-01-28 20:56:58	CindyLinz	[01:42:36] 而且, 沒有去處理疊了兩層同一種 effect 的問題...
2014-01-28 20:56:58	CindyLinz	[01:42:48] 應該說, 好像只是名字像, 其實是在處理不同的東西?
2014-01-28 20:56:58	CindyLinz	[01:43:27] 看 Effects example.hs 裡面, 它會用 with (ref 5) $ \x -> with (ref 7) $ \y -> 這樣來寫
2014-01-28 20:56:58	CindyLinz	[01:43:37] 我覺得 action 本身也不太動態呀..
2014-01-28 20:56:58	CindyLinz	[01:44:00] 而如果要在裡面呼叫會使用這邊 5 或 7 的 action... 應該要把 x 和 y explicitly 傳過去
2014-01-28 20:56:58	CindyLinz	[01:44:35] 嗯, 我還要再繼續讀讀.... ^^|
2014-01-28 20:56:58	suhorng	[01:46:50] 來得動態？
2014-01-28 20:56:58	suhorng	[01:46:58] 我之前丟的那個paper出package了
2014-01-28 20:56:58	suhorng	[01:47:12] http://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html
2014-01-28 20:56:58	suhorng	[01:47:31] 我也想比較，可是還不瞭解這個 Effects 的作法 QQ
2014-01-28 20:56:58	suhorng	[01:47:54] x y 直接傳進去感覺更像用可改的變數XD
2014-01-28 20:56:58	CindyLinz	[01:48:07] 我有點希望 Effects 其實就是 MonadTrans 的某種包裝.... 這樣我就可以已經懂一半了 XD
2014-01-28 20:56:58	CindyLinz	[01:48:28] 不一定能改啦... 如果原本那一項對應的是 Reader 的話, 就是 constant XD
2014-01-28 20:56:58	suhorng	[01:48:46] 喔喔喔對 XDD
2014-01-28 20:56:58	suhorng	[01:49:03] 這兩種好像就是要跟 monad transformer 不同
2014-01-28 20:56:58	suhorng	[01:49:49] https://github.com/suhorng/HaskellExercise/blob/master/effect/TestEffect.hs 這個..老實說他的code真的跟 monad transformer 很像
2014-01-28 20:56:58	CindyLinz	[01:49:58] 你是不是還有貼過誰在 stackoverflow 說, 仍然比較喜歡 Monad Transformer?
2014-01-28 20:56:58	suhorng	[01:50:11] 但是他要加更多type = =|||
2014-01-28 20:56:58	suhorng	[01:50:32] 不太有印象，我貼過得可能是不喜歡這個也不喜歡 monad transformer
2014-01-28 20:56:58	CindyLinz	[01:51:12] 記得人名嗎? XD
2014-01-28 20:56:58	suhorng	[01:51:34] 只記得是 pipes 的作者...orz
2014-01-28 20:56:58	CindyLinz	[01:53:13] QQ
2014-01-28 20:56:58	suhorng	[01:53:20] https://groups.google.com/forum/#!topic/haskell-pipes/BTQsITNwflc 第二篇
2014-01-28 20:56:58	CindyLinz	[01:54:09] 歐! 謝謝~~
2014-01-28 20:56:58	CindyLinz	[01:54:28] 厚剛以為是 stackoverflow... 下了 site:stackoverflow.com 原來就把可能的來源刪了.... orz
2014-01-28 20:56:58	suhorng	[01:55:07] XDD
2014-01-28 20:56:58	suhorng	[02:00:49] 天阿我說錯了orzzz 應該是倒數第二封信, 不是第二封信...
2014-01-28 20:56:58	CindyLinz	[02:04:56] 沒關係.. 一整串下來就會看到了 ^^|
2014-01-28 20:56:58	CindyLinz	[02:06:34] 嗯 看 paper 的時候, 蠻前面就拿類似這種例子出來 demo, 感覺的確有一點不舒服... XD
2014-01-28 20:56:58	hashcat	[22:15:53] idris的effect paper很好懂
2014-01-28 20:56:58	suhorng	[22:35:16] 還沒懂他的作法
2014-01-28 20:56:58	suhorng	[22:36:12] 例如他的choice說是可以在 Maybe 或 List 這兩種 context 中做
2014-01-28 20:56:58	suhorng	[22:36:24] 那如果我還想要 IO 的話該怎麼辦呢?
2014-01-28 20:56:58	suhorng	[22:36:53] 是不是我要自己寫一個 IO (List a) 之類的 context？
2014-01-28 20:56:58	hashcat	[23:01:41] ???
2014-01-28 20:56:58	suhorng	[23:03:16] 如果我想要有 IO 又想要有 Selection 的話該怎麼做呢?
2014-01-28 20:56:58	hashcat	[23:11:53] 有列表儲存各種effect
2014-01-28 20:56:58	hashcat	[23:12:53] http://eb.host.cs.st-andrews.ac.uk/talks/idris-cph-lec3.pdf
2014-01-28 20:56:58	hashcat	[23:13:00] 看第18頁
2014-01-28 20:56:58	hashcat	[23:14:22] 有個參數是List EFF
2014-01-28 20:56:58	hashcat	[23:17:15] 看範例好了 : http://www.cs.st-andrews.ac.uk/~eb/effect-examples.tgz
2014-01-28 20:56:58	hashcat	[23:17:30] Lang.idr我覺得最好懂
2014-01-28 20:56:58	hashcat	[23:20:01] 他裡面的型別是長這樣 eval : Expr -> Eff IO [EXCEPTION String, STDIO, RND, STATE Env] Int
2014-01-28 20:56:58	hashcat	[23:20:23] 來自創新詞: 最終效果, 途中效果
2014-01-28 20:56:58	hashcat	[23:24:30] IO 跟 Int 可以想成以前的monad
2014-01-28 20:56:58	hashcat	[23:24:33] IO Int
2014-01-28 20:56:58	hashcat	[23:25:06] 中間那個列表是附加於途中的效果, 像是會扔exception, 有隨機數等
2014-01-28 20:56:58	hashcat	[23:26:11] 主效果 IO 附屬效果 [EXCEPTION String, STDIO, RND, STATE Env] 返回 Int
2014-01-28 20:56:58	hashcat	[23:26:26] 這樣講不知道行不行
2014-01-28 20:56:58	hashcat	[23:27:29] 再看下宣告
2014-01-28 20:56:58	hashcat	[23:27:32] data EffM : (m : Type -> Type) ->
2014-01-28 20:56:58	hashcat	[23:27:34] (es : List EFFECT) ->
2014-01-28 20:56:58	hashcat	[23:27:35] (es' : List EFFECT) -> (a : Type) -> Type
2014-01-28 20:56:58	hashcat	[23:28:12] 這裡 m 意思就等同以前 monad 裡的 m 的常用用法
2014-01-28 20:56:58	hashcat	[23:28:34] a 也等同以前 monad 裡的 a 的常用用法
2014-01-28 20:56:58	suhorng	[23:29:21] 嗯嗯!
2014-01-28 20:56:58	hashcat	[23:29:25] 多出兩個(es : List EFFECT) , (es' : List EFFECT) 就是附屬的效果類似 monad transformer
2014-01-28 20:56:58	hashcat	[23:29:42] 補充下前者是不可變狀態, 後者是可變狀態
2014-01-28 20:56:58	hashcat	[23:30:02] Eff 就是 EffM 少了可變狀態
2014-01-28 20:56:58	suhorng	[23:30:11] 嗯哼
2014-01-28 20:56:58	hashcat	[23:30:43] 繼續研究prolog
2014-01-28 20:56:58	hashcat	[23:30:50] 置入行銷
2014-01-28 20:56:58	suhorng	[23:31:48] XDDD
2014-01-28 20:56:58	hashcat	[23:32:27] 很故意的講出來
2014-01-28 20:56:58	CindyLinz	[23:33:49] 途中效果裡面列的東西, 其順序應該是有影響的?
2014-01-28 20:56:58	hashcat	[23:33:49] 發現超恐怖的東西
2014-01-28 20:56:58	hashcat	[23:34:15] 天網出現之日指日可待
2014-01-28 20:56:58	CindyLinz	[23:34:20] ..
2014-01-28 20:56:58	hashcat	[23:34:30] http://www.cs.ox.ac.uk/activities/machlearn/Aleph/aleph_toc.html
2014-01-28 20:56:58	hashcat	[23:34:52] 我想不按原文翻譯成歸納邏輯理論自動建造機
2014-01-28 20:56:58	hashcat	[23:35:31] 原文是Aleph is an Inductive Logic Programming (ILP) system that supersedes P-Progol.
2014-01-28 20:56:58	CindyLinz	[23:36:00] 會學習會推論不可怕啊.. 天網出現的那一瞬間是出現自覺.. XD
2014-01-28 20:56:58	hashcat	[23:36:17] 機率跟歸納都有了, 整合起來要是加上前端視覺模式識別
2014-01-28 20:56:58	hashcat	[23:36:53] 征服銀河系的就不是人啦, 是歸納邏輯系統
2014-01-28 20:56:58	suhorng	[23:37:01] CindyLinz: 我覺得有點難說..他的作法會不會影響/如何影響實在不像 monad transformer 那樣看容易看出來....
2014-01-28 20:56:58	hashcat	[23:38:02] suhorng: 我怎覺得是 Effect 比較容易一目了然
2014-01-28 20:56:58	CindyLinz	[23:38:12] suhorng: 昨天看了 Pipes 作者對於可以隨意換順序的 Effect 的擔心... 我覺得如果可以隨意換順序的模型, 最好把 Exception 分出去, 不要混一起 ^^|
2014-01-28 20:56:58	suhorng	[23:38:17] 昨天貼的那封信我把他改成用 extensible-effects package, 結果不管 runError 跟 runState 誰先誰後跑出來結果都是 2
2014-01-28 20:56:58	suhorng	[23:39:03] 不同作法之下效果跟 monad transformer 完全不同XD|||
2014-01-28 20:56:58	suhorng	[23:39:04] 不只 exception，可能還要包含任何會影響control的東西，像是 x <- [1..10] 這一類東西
2014-01-28 20:56:58	hashcat	[23:39:33] 設計上跟順序無關才合情合理
2014-01-28 20:56:58	hashcat	[23:39:54] Monad跟Effect作用就是嵌入個語言
2014-01-28 20:56:58	suhorng	[23:40:00] hashcat: 像 s -> Either String (a, s) 跟 a -> (Either String a, s) 還可以人眼看出來, Effects 該怎磨勘呢?
2014-01-28 20:56:58	suhorng	[23:40:05] 不可能無關吧
2014-01-28 20:56:58	hashcat	[23:40:32] 拿設計一個語言來說, 沒人會想說什麼語言特性跟加入那個特性順序有關系吧
2014-01-28 20:56:58	CindyLinz	[23:40:33] 差別在... action 的長相來決定順序, 還是呼叫的地方決定順序 :Q
2014-01-28 20:56:58	suhorng	[23:41:06] 像 MTL 跟 extensible-effects 都是呼叫的地方決定順序
2014-01-28 20:56:58	suhorng	[23:41:20] 但是他們 "不同順序" 造成的影響很不一樣
2014-01-28 20:56:58	CindyLinz	[23:41:36] hashcat: 但是執行到一半發生 exception 了, 那麼 exception 之前已經做了的動作要仍舊保持, 還是 rollback, 是要規定一下的...
2014-01-28 20:56:58	hashcat	[23:41:43] 所有的效果 "同時" 發生, 前後無關才合情合理
2014-01-28 20:56:58	CindyLinz	[23:42:09] suhorng: MTL 是指.. liftIO 的寫法, 而不是 lift 的寫法?
2014-01-28 20:56:58	suhorng	[23:42:26] effects之間怎麼互動沒有一定怎樣才是對的吧? 可以選一種拿來作準 不過其他種也不能說錯
2014-01-28 20:56:58	hashcat	[23:42:28] 嗯嗯
2014-01-28 20:56:58	suhorng	[23:42:41] CindyLinz: 是指 monad transformers
2014-01-28 20:56:58	CindyLinz	[23:43:13] suhorng: monad trans 的 lift . lift . lift 的寫法.. 是定義 action 的地方就決定順序了啊.
2014-01-28 20:56:58	CindyLinz	[23:43:36] 看 lift 用了幾層, 就決定那一層一定要是什麼呀
2014-01-28 20:56:58	suhorng	[23:43:55] 假設使用typeclass自動推論要lift幾層的那種好了~
2014-01-28 20:56:58	CindyLinz	[23:44:10] XD 那就是 liftIO, liftWriter 的寫法嘛 :p
2014-01-28 20:56:58	suhorng	[23:44:24] 就是 mtl package 做的事呀Q_Q
2014-01-28 20:56:58	suhorng	[23:44:54] 大概我有弄混
2014-01-28 20:56:58	CindyLinz	[23:44:59] 嗯嗯, 要標明 不準直接用 lift.. :p
2014-01-28 20:56:58	hashcat	[23:46:31] 問下
2014-01-28 20:56:58	hashcat	[23:46:47] haskell在工作使用情形如何
2014-01-28 20:56:58	CindyLinz	[23:47:40] mno2: (戳戳)
2014-01-28 20:56:58	suhorng	[23:47:54] 可能要去 haskell.sg meetup (誤)
2014-01-28 20:56:58	mno2	[23:48:36] CindyLinz: ?
2014-01-28 20:56:58	CindyLinz	[23:49:07] mno2: # 23:46 < hashcat> haskell在工作使用情形如何
2014-01-28 20:56:58	mno2	[23:50:42] http://functionaljobs.com/jobs/8678-haskell-developer-at-zalora  可以參考 JD
2014-01-28 20:56:58	hashcat	[23:52:40] 亂丟垃圾會重杖打屁股的地方
2014-01-28 20:56:58	CindyLinz	[23:53:10] 可以 remote..
2014-01-28 20:56:58	CindyLinz	[23:53:18] 所以可以繼續亂丟垃圾(?
2014-01-28 20:56:58	mno2	[23:53:45] 丟垃圾？
2014-01-28 20:56:58	CindyLinz	[23:54:10] 他應該是說街上亂丟東西 XD
2014-01-28 20:56:58	mno2	[23:54:42] 喔喔
2014-01-28 20:56:58	hashcat	[23:55:07] 不是我想找, 只是想了解這裡的人有沒啥用到
2014-01-28 20:56:58	hashcat	[23:55:25] 我是完全沒用上
2014-01-28 20:56:58	CindyLinz	[23:56:07] 我用到一半
2014-01-28 20:56:58	hashcat	[23:56:19] 做什麼的
2014-01-28 20:56:58	CindyLinz	[23:56:25] 因為沒有時間壓力, 所以常常會跑去弄別的..
2014-01-28 20:56:58	hashcat	[23:56:58] 聽起來像無業遊民
2014-01-28 20:56:58	CindyLinz	[23:57:04] 資料結構, Augmented RB tree, 要拿來作即時的名次
2014-01-28 20:56:58	CindyLinz	[23:57:31] 應該剩介面整理.. 然後就擺了一陣子 orz # https://github.com/CindyLinz/Haskell-AugmentedRBTree
2014-01-28 20:56:58	CindyLinz	[23:59:03] 現在在弄 Haskell 與 Perl 介接.. 也許就能沿用我們公司原有的, 用 perl 寫的 socket 介面
2014-01-28 20:56:58	hashcat	[23:59:24] 同樣都沒實用, FP的對象我決定轉移到idris了
2014-01-28 20:56:58	CindyLinz	[00:00:19] haskell 接 perl 目前實驗了一些些會動, 要開始寫正經一點的了 :p  https://github.com/CindyLinz/Haskell-Perl
2014-01-28 20:56:58	hashcat	[00:00:23] 你是後端啥都能用就是
2014-01-28 20:56:58	CindyLinz	[00:00:55] 什麼意思??
2014-01-28 20:56:58	hashcat	[00:01:07] 就是前端 perl
2014-01-28 20:56:58	CindyLinz	[00:01:11] Non-windows only
2014-01-28 20:56:58	hashcat	[00:01:23] 後端什麼語言都沒限制
2014-01-28 20:56:58	CindyLinz	[00:01:40] 其實前端也沒限制.... socket 出去就行
2014-01-28 20:56:58	CindyLinz	[00:02:05] 只是一定要透過 socket 的話, 整合性比較差, 必須是本身足夠完整的子系統才行
2014-01-28 20:56:58	hashcat	[00:02:17] 啥麼公司做什麼的
2014-01-28 20:56:58	CindyLinz	[00:02:17] 如果能揉在一起的話, 只換一個函數塞進去都行
2014-01-28 20:56:58	CindyLinz	[00:02:55] 營運自己開發的遊戲的公司~ http://www.gamesofa.com/
2014-01-28 20:56:58	hashcat	[00:04:07] 哦
2014-01-28 20:56:58	hashcat	[00:04:14] 原來是王老闆
2014-01-28 20:56:58	CindyLinz	[00:04:29] 啊? 老闆不姓王啊 @_@"
2014-01-28 20:56:58	hashcat	[00:04:54] 當我沒說好了
2014-01-28 20:56:58	CindyLinz	[00:05:35] @@"
2014-01-28 20:56:58	hashcat	[00:07:29] 我看成你是老闆
2014-01-28 20:56:58	CindyLinz	[00:08:46] ._.
2014-01-28 20:56:58	CindyLinz	[00:09:20] 那句的「自己」指的是公司不是我啦.. XD
2014-01-28 20:56:58	hashcat	[00:10:12] 想不出自己還能是啥
2014-01-28 20:56:58	hashcat	[00:11:40] 還有這種用法
2014-01-28 20:56:58	hashcat	[00:11:53] 公司自己
2014-01-28 20:56:58	CindyLinz	[00:13:19] 我玩遊戲不夠重度... 如果遊戲是我設計.... 應該會作出只有我自己想玩的遊戲
2014-01-28 20:56:58	CindyLinz	[00:13:33] 而且我自己也玩一陣子就膩了..ww
2014-01-28 20:56:58	petercommand	[00:13:38] CindyLinz: XD
2014-01-28 20:56:58	CindyLinz	[00:14:24] 前一陣子發現一個無邊界的多人踩地雷遊戲覺得很好玩... http://mienfield.com/
2014-01-28 20:56:58	CindyLinz	[00:14:34] 結果只有我覺得好玩....持續兩天 orz
2014-01-28 20:56:58	hashcat	[00:16:32] 整個創意100分, 有趣0分的遊戲
2014-01-28 20:56:58	CindyLinz	[00:16:49] 有必要說這麼狠嗎.....QQ
2014-01-28 20:56:58	hashcat	[00:18:01] 不過還是可以理解, 就跟我寫prolog的時候一樣
2014-01-28 20:56:58	hashcat	[00:18:27] 結果只有我覺得好玩....持續三個月 orz
2014-01-28 20:56:58	hashcat	[00:20:24] 擴展perl可以用haskell, 表示擴展python可以用idris
2014-01-28 20:56:58	hashcat	[00:21:31] =D
2014-01-28 20:56:58	hashcat	[00:34:06] 問了下idris還只能在單核跑 ==
2014-01-28 20:56:58	CindyLinz	[00:44:17] 這是什麼推論啊.... XD
2014-01-28 20:56:58	hashcat	[00:45:47] 在跟idriser討論加進平行化, 能不就像是在產生的C code加上openmp pragma
2014-01-28 20:56:58	CindyLinz	[00:47:07] 嗯, 有很多系統呼叫要換用加上 _r 自尾的版本
2014-01-28 20:56:58	CindyLinz	[00:47:10] 嗯, 有很多系統呼叫要換用加上 _r 字尾的版本
2014-01-28 20:56:58	hashcat	[00:49:11] _r是啥?
2014-01-28 20:56:58	CindyLinz	[00:50:19] 很多 C 的標準 lib 函數, 例如說 string.h 裡面的 strtok, 會用到自己內建的 static 的 buffer
2014-01-28 20:56:58	CindyLinz	[00:50:41] 而 strtok_r 可以由呼叫端給 buffer
2014-01-28 20:56:58	CindyLinz	[00:51:14] 用內建 static buffer 在 multi-thread 的時候, 如果發生不同的 thread 都去採同一個 static buffer 會悲劇
2014-01-28 20:56:58	hashcat	[00:55:48] 哦
2014-01-28 20:56:58	hashcat	[00:56:55] 睡覺
2014-01-28 20:56:58	CindyLinz	[01:52:51] Dryman 寫的 Monad 教學 http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/
2014-01-28 20:56:58	CindyLinz	[01:52:54] 還沒看 :p
2014-01-28 20:56:58	CindyLinz	[01:55:02] 這張圖解不錯 ^^ http://www.idryman.org/images/monad/monad-structure.png
2014-01-28 20:56:58	CindyLinz	[15:05:51] 嗯, GHC 的 MultiParamClasses extension 也很重要....
2014-01-28 20:56:58	CindyLinz	[15:07:10] TypeSynonymInstances 非必要.. 但我也是覺得沒有會很苦命 XD
2014-01-28 20:56:58	CindyLinz	[15:40:26] 問問題...
2014-01-28 20:56:58	CindyLinz	[15:40:38] Foreign.C.String 裡面有個 newCString
2014-01-28 20:56:58	CindyLinz	[15:41:02] 是 String -> IO (CString)  其中 type CString = Ptr CChar
2014-01-28 20:56:58	CindyLinz	[15:41:25] 這邊給出來的 CString 是需要自己手動去 free 的
2014-01-28 20:56:58	CindyLinz	[15:41:45] 另外有個 withCString
2014-01-28 20:56:58	CindyLinz	[15:41:48] :t withCSTring
2014-01-28 20:56:58	lambdabot	[15:41:49] Not in scope: `withCSTring'
2014-01-28 20:56:58	CindyLinz	[15:41:52] :t withCString
2014-01-28 20:56:58	lambdabot	[15:41:53] Not in scope: `withCString'
2014-01-28 20:56:58	CindyLinz	[15:41:56] orz
2014-01-28 20:56:58	CindyLinz	[15:42:12] withCString :: String -> (CString -> IO a) -> IO a
2014-01-28 20:56:58	CindyLinz	[15:42:31] 它會在我第二個參數的 action 用完以後自動幫我回收.... (很開心)
2014-01-28 20:56:58	CindyLinz	[15:43:24] 現在的問題是, 我是在一個底下墊 MonadIO 的 monad transformer 裡面做事情
2014-01-28 20:56:58	CindyLinz	[15:43:37] 那個 CString 是要在這個 monad transformer 裡面用的
2014-01-28 20:56:58	CindyLinz	[15:43:56] 如果我用 liftIO $ withCString str $ \cstr -> do ... 的話
2014-01-28 20:56:58	CindyLinz	[15:44:18] 最後面那個 action 是 IO a, 沒辦法用我 monad transformer 的函數 @@"
2014-01-28 20:56:58	CindyLinz	[15:44:48] 所以現在只能用 newCString 這種, 然後最後再自己記得 free 掉 @@"
2014-01-28 20:56:58	CindyLinz	[15:45:26] 我要怎麼使用這種 bracket 長相的用法呢?
2014-01-28 20:56:58	godfat	[15:45:50] 弄個 withCStringM ...?
2014-01-28 20:56:58	CindyLinz	[15:46:25] 好兇 XD
2014-01-28 20:56:58	CindyLinz	[15:47:04] 把那些 IO a 都換成 MonadIO m => m a 的版本?
2014-01-28 20:56:58	godfat	[15:47:48] 之類的... XD
2014-01-28 20:56:58	CindyLinz	[15:50:42] mmm
2014-01-28 20:56:58	CindyLinz	[15:51:35] 那麼, 我要怎麼處理 exception 呢? 希望裡面 throw exception 的時候, 我可以先 free 了, 再 re-throw..
2014-01-28 20:56:58	CindyLinz	[15:51:54] Control.Exception 裡面的 catch, try 看起來都是 IO a 的 @@"
2014-01-28 20:56:58	suhorng	[15:53:29] 咦？我以為 IO a 的 catch try 是 Prelude 的
2014-01-28 20:56:58	godfat	[15:53:39] 這些都重做好像工程有點大，而且不見得能做..? XD
2014-01-28 20:56:58	godfat	[15:53:40] 欸，說真的有時候覺得 ghc 的 api 有些缺東缺西...
2014-01-28 20:56:58	godfat	[15:53:40] 雖然好像大多都是 IO 的部份
2014-01-28 20:56:58	suhorng	[15:54:09] 喔喔 是說 IO (Either...)
2014-01-28 20:56:58	CindyLinz	[15:54:12] 好像, 在 IO a 那邊我重新 run 自己的 monad transformer 是一種作法.. 不過我的 monad transformer 有模仿 ST 那樣, 有一個 forall s. 在裡面, 而且我的 run 會做一些應該不能在前一個 run 結束以前再 run 第二次的動作 @@"
2014-01-28 20:56:58	CindyLinz	[15:54:55] suhorng: 原本是 Prelude, 不過 GHC (或 Haskell2010?) 有把它做得更完整. Prelude 還是能用就是
2014-01-28 20:56:58	CindyLinz	[15:55:13] 現在有做成像 Java 樹狀的 exception 家族那樣
2014-01-28 20:56:58	suhorng	[15:55:53] 嗯嗯
2014-01-28 20:56:58	CindyLinz	[15:56:17] 我想想看我能不能分出一個類似 re-run 的函數出來, 讓它不要做原本 run 會有的初始化和結束的部分, 只是讓它可以套在 IO 裡面..
2014-01-28 20:56:58	CindyLinz	[15:57:45] GHC api 都喜歡著重: 這邊是個 Monoid!, 這邊有個 Dual!, 這是個最小的 FixPoint!..... ww
2014-01-28 20:56:58	godfat	[15:58:54] 不知道該說啥
2014-01-28 20:56:58	godfat	[15:58:54] 有時候寫寫 ruby 會想說能用 haskell 多好啊
2014-01-28 20:56:58	godfat	[15:58:54] 可是實際上真的要用又一堆問題 orz
2014-01-28 20:56:58	CindyLinz	[16:00:38] godfat: 工程師! 快來吧~~~ (招手)
2014-01-28 20:56:58	godfat	[16:01:03] 這有點雞蛋問題呀... ~.~
2014-01-28 20:56:58	godfat	[16:01:18] 尤其一堆「工程師」都保守到不行...
2014-01-28 20:56:58	CindyLinz	[16:02:02] 昨天跟 wens 聊天, 講到 perl 的過去版本相容性非常好.. 甚至 doc 裡面還會寫: 這邊會有這樣這樣的行為, 它是一個 unfixable bug, 因為如果修掉了, 會使得很多 third-party lib 壞掉.
2014-01-28 20:56:58	CindyLinz	[16:02:33] 然後想到, Larry Wall 以前是 system admin. system admin 最需要相容性了.. XD
2014-01-28 20:56:58	CindyLinz	[16:02:53] 所以要工程師跳進來 Haskell, 才會讓它適合工程師用 :D
2014-01-28 20:56:58	CindyLinz	[16:03:20] 不能都是數學家這樣... ^^|
2014-01-28 20:56:58	suhorng	[16:05:17] http://www.reddit.com/r/haskell/comments/1br0ls/haskell_beats_c_using_generalised_stream_fusion/ 看看這個能不能吸引一點工程師好了 (炸)
2014-01-28 20:56:58	CindyLinz	[16:10:53] godfat: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-28 20:56:58	CindyLinz	[16:11:26] suhorng: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-28 20:56:58	CindyLinz	[16:11:35] 見者有份歐~~ (咦)
2014-01-28 20:56:58	suhorng	[16:15:41] 好難..XD
2014-01-28 20:56:58	CindyLinz	[16:17:43] ~_~
2014-01-28 20:56:58	godfat	[16:20:40] 所以說起來， sysadmin 用的語言應該要跟 app programmer 不一樣才對 XD
2014-01-28 20:56:58	godfat	[16:20:41] 後者可以用相容性低的東西...
2014-01-28 20:56:58	godfat	[16:20:41] XDDDD 最近太忙了，都沒空玩 haskell... ~.~
2014-01-28 20:56:58	suhorng	[16:21:21] exception真的有辦法解決嗎..?
2014-01-28 20:56:58	CindyLinz	[16:21:35] 解決?
2014-01-28 20:56:58	CindyLinz	[16:21:49] 給 godfat 一個 exception, 他就有空玩 haskell 了這樣?
2014-01-28 20:56:58	godfat	[16:22:00] XDDDD
2014-01-28 20:56:58	suhorng	[16:22:03] XDDD
2014-01-28 20:56:58	CindyLinz	[16:23:13] suhorng: 你問的是什麼啦 XD
2014-01-28 20:56:58	suhorng	[16:24:02] 我想想 ~"~
2014-01-28 20:56:58	CindyLinz	[16:26:27] 我剛剛遇到的情況, 嗯, 可以用純的 unXxxT 解決
2014-01-28 20:56:58	CindyLinz	[16:27:37] 假設我的 monad trans 是 newtype XxxT .... = XxxT { unXxxT :: xxState -> m (xxState, a) }
2014-01-28 20:56:58	CindyLinz	[16:29:23] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT cstr act xxState
2014-01-28 20:56:58	CindyLinz	[16:30:28] 因為我是寫這個 monad trans 的人, 所以我可以直接拿到 xxState
2014-01-28 20:56:58	suhorng	[16:31:06] 唔...實在想不到 exception 能怎麼配上 MonadIO
2014-01-28 20:56:58	suhorng	[16:31:09] 嗯嗯
2014-01-28 20:56:58	CindyLinz	[16:31:38] 這樣就算是有處理到 exception 啦 ^^   因為那個 withCString 就是會處理 exception 的
2014-01-28 20:56:58	CindyLinz	[16:31:52] 而 bracket 應該也可以一樣的包法
2014-01-28 20:56:58	CindyLinz	[16:32:26] 我這個方法, 不適用任意的 MonadIO.. 我得拿得到 internal state 才行 :Q
2014-01-28 20:56:58	suhorng	[16:32:28] 喔~
2014-01-28 20:56:58	suhorng	[16:32:47] 遇到奇怪的 MonadIO 的話也不行XD
2014-01-28 20:56:58	CindyLinz	[16:33:09] 嗯, 有可能是 monad trans 提供者才能做..
2014-01-28 20:56:58	CindyLinz	[16:36:54] 咦.. 寫錯了..
2014-01-28 20:56:58	CindyLinz	[16:37:09] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-28 20:56:58	CindyLinz	[16:37:12] 這樣才對
2014-01-28 20:56:58	CindyLinz	[17:05:00] 突然覺得自己現在竟然能很順地寫出這種東西很不可思議.. # liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-28 20:56:58	CindyLinz	[17:05:13] 以前讀別人的 code 寫這東西超崩潰的...ww
2014-01-28 20:56:58	kanru	[17:06:43] XDD
2014-01-28 20:56:58	suhorng	[18:02:30] 嗯... try :: Exception e => IO a -> IO (Either e a)  這類函式是不是真的沒辦法變成 MonadIO m => m a -> m (Either e a) ...？
2014-01-28 20:56:58	suhorng	[18:06:48] 好像真的無可避免
2014-01-28 20:56:58	CindyLinz	[18:10:12] 好像應該要舉一個反例出來證明變不出來...
2014-01-28 20:56:58	suhorng	[18:10:30] 我好像笨了
2014-01-28 20:56:58	suhorng	[18:10:35] 好像可以
2014-01-28 20:56:58	suhorng	[18:11:32] ..不對 不可以那樣做 XDDDD 可以弄出 type correct 但是沒有 try 效果的 Exception e => m a -> m (Either e a)
2014-01-28 20:56:58	CindyLinz	[18:12:30] tryM :: MonadIO m => m a -> m (Either e a)    tryM = tryM ? (誤)
2014-01-28 20:56:58	suhorng	[18:14:19] \ma -> do { a <- ma; liftIO (try (return a)) }，我剛剛竟然在想這個，真是太呆了
2014-01-28 20:56:58	CindyLinz	[18:15:52] 那個 try 就是這個 tryM 哄? XD
2014-01-28 20:56:58	CindyLinz	[18:16:05] 那的確就是 tryM = tryM... XD
2014-01-28 20:56:58	suhorng	[18:17:19] 不是吧Q_Q 這個是 tryM = liftM Right
2014-01-28 20:56:58	CindyLinz	[18:18:25] 喔喔.. 事情都在前面的 a <- ma 做完了 XD
2014-01-28 20:56:58	CindyLinz	[18:18:56] a <- ma 地方可以確認這個 ma 會 return
2014-01-28 20:56:58	CindyLinz	[23:22:57] 我想從 haskell pass 一個 list 給 C 函數跑迴圈.. 有沒有什麼辦法不要「複製」出東西的方法啊 @@"
2014-01-28 20:56:58	CindyLinz	[23:24:14] 只能一開始就選別的 container 像是 storable array 或 storable vector 嗎...
2014-01-28 20:56:58	hashcat_	[23:32:54] list 是有點複雜的結構  就算傳指標過去也不堪c直接用
2014-01-28 20:56:58	CindyLinz	[23:33:27] 只是好奇能不能 access ghc internal.. XD
2014-01-28 20:56:58	hashcat_	[23:34:29] 破壞haskell封裝
2014-01-28 20:56:58	CindyLinz	[23:38:50] 在 C 層次了誰管它什麼封裝啊.... ww
2014-01-28 20:56:58	CindyLinz	[23:39:15] 這邊是公海.. (咦)
2014-01-28 20:56:58	hashcat_	[23:43:38] 指標傳過去後我就沒輒
2014-01-28 20:56:58	hashcat_	[23:44:00] list沒有對應的ctype
2014-01-28 20:56:58	***	Playback Complete.
2014-01-28 20:57:16	--	モード #haskell.tw [+cnt]
2014-01-28 20:57:16	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-28 20:58:45	-->	b4283 (~b4283@218-164-123-125.dynamic.hinet.net) が #haskell.tw に参加
2014-01-28 21:13:58	-->	anonys7777 (~1@61.188.60.160) が #haskell.tw に参加
2014-01-28 21:14:07	<--	town77 (~1@114.242.249.126) が終了 (Ping timeout: 260 seconds)
2014-01-28 21:56:21	<--	anonys7777 (~1@61.188.60.160) が終了 (Read error: Connection reset by peer)
2014-01-28 22:04:44	<--	b4283 (~b4283@218-164-123-125.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-01-28 22:19:48	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-28 22:37:51	-->	godfat (~Adium@1-160-161-16.dynamic.hinet.net) が #haskell.tw に参加
2014-01-28 22:53:44	-->	b4283 (~b4283@118.150.148.244) が #haskell.tw に参加
2014-01-29 01:15:47	<--	b4283 (~b4283@118.150.148.244) が終了 (Remote host closed the connection)
2014-01-29 02:03:53	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 245 seconds)
2014-01-29 02:09:53	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-29 03:57:25	<--	hashcat_ (~hashcat_@27.241.138.81) が終了 (Ping timeout: 248 seconds)
2014-01-29 05:25:29	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-29 05:27:04	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Quit: Leaving...)
2014-01-29 05:28:35	<--	godfat (~Adium@1-160-161-16.dynamic.hinet.net) が終了 (Ping timeout: 265 seconds)
2014-01-29 09:03:44	-->	liuzhoou (~liuzhoou@125.215.44.36) が #haskell.tw に参加
2014-01-29 10:03:00	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-29 10:56:05	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-01-29 12:47:09	-->	town55 (~1@171.90.49.120) が #haskell.tw に参加
2014-01-29 12:47:35	<--	town55 (~1@171.90.49.120) が終了 (Max SendQ exceeded)
2014-01-29 12:48:48	-->	town55 (~1@171.90.49.120) が #haskell.tw に参加
2014-01-29 12:51:06	<--	town55 (~1@171.90.49.120) が終了 (Max SendQ exceeded)
2014-01-29 12:52:02	CindyLinz	XDite 牆上又出現一批 rails upgrade 髒話文了... XD
2014-01-29 12:52:06	-->	town55 (~1@171.90.49.120) が #haskell.tw に参加
2014-01-29 13:05:29	<--	town55 (~1@171.90.49.120) が終了 (Ping timeout: 240 seconds)
2014-01-29 13:16:55	godfat1	rails 3 的 assets 我也覺得是爛賬... 立意不錯，實作是大便
2014-01-29 13:16:58	--	godfat1 のニックネームが変更され godfat になりました
2014-01-29 13:21:45	CindyLinz	但他罵的應該是 3 -> 4 不相容..
2014-01-29 13:22:03	godfat	我是看這篇 http://blog.xdite.net/posts/2014/01/29/rails4-asset-mess
2014-01-29 13:22:39	godfat	不相容的話 2 -> 3 差更多 XD
2014-01-29 13:22:40	CindyLinz	所以是從爛帳3, 改成爛帳4嗎.....ww
2014-01-29 13:22:51	godfat	我是這樣覺得啦...
2014-01-29 13:23:30	godfat	我有一度真的很想關掉 assets
2014-01-29 13:23:31	godfat	不過他確實是有好處，所以一直容忍到現在...
2014-01-29 13:23:56	CindyLinz	這種最可怕了..?
2014-01-29 13:24:15	godfat	也許，擺脫不掉 XD
2014-01-29 13:26:19	CindyLinz	XDite 的解法.... XD
2014-01-29 13:26:57	-->	town55 (~1@118.123.148.165) が #haskell.tw に参加
2014-01-29 13:30:30	godfat	我最不滿意的地方是速度實在太慢了，動不動就要好幾分鐘...
2014-01-29 13:30:30	godfat	有些東西根本永遠不會去動，每次 deploy 還要好幾分鐘
2014-01-29 13:30:30	godfat	這不對呀...
2014-01-29 13:31:02	godfat	一不小心還會 crash production 也不對，應該不顯示圖片就好了，噴 exception 有點莫名
2014-01-29 13:33:19	CindyLinz	用 C 寫 extension 的風氣盛不盛啊?
2014-01-29 13:33:55	CindyLinz	不過 ruby / rails 改版劇烈, 可能用 C 寫每版都要重來.. @@"
2014-01-29 13:33:57	godfat	應該不，不過我覺得是他們寫不好，還不見得需要到 c
2014-01-29 13:34:18	CindyLinz	嗯, 不過偶爾看 XDite 的抱怨文, 覺得就算用 ruby 寫也是每版重來 orz
2014-01-29 13:34:29	CindyLinz	喔
2014-01-29 13:34:37	godfat	ruby 其實一直沒啥改啦，我 07 年寫的東西現在也會動，最多改一點點而已
2014-01-29 13:34:57	godfat	rails 就等著一直改...
2014-01-29 13:36:36	godfat	我之前用 fiber 也很好笑，assets 動不動就 stack overflow...
2014-01-29 13:36:36	godfat	我原本一直以為是哪裡有遞迴，後來才發現是 assets 那邊的 callstack 太大，是真的用到完
2014-01-29 13:36:36	godfat	扯
2014-01-29 13:37:36	CindyLinz	好酷喔 XD
2014-01-29 13:38:33	godfat	所以我覺得他們程式一定寫得很噁心
2014-01-29 13:38:33	godfat	我曾經有花時間看過，一時三刻看不懂，後來就沒看了
2014-01-29 13:38:34	CindyLinz	可能每一層的區域變數也太多?
2014-01-29 13:38:49	godfat	這我就不確定了
2014-01-29 13:39:12	CindyLinz	2000 年的時候用 C, 每一層一個 int (參數) 可以 26萬層..
2014-01-29 13:39:43	CindyLinz	那時試一個 int 是因為我可以在 heap 裡面開一個大陣列, 然後這個參數就是大陣列裡的 index
2014-01-29 13:40:12	CindyLinz	把所有原本要放在區域變數的東西都寄存到那個大陣列裡, 每遞迴一層就用一格 :p
2014-01-29 13:40:27	petercommand	godfat: 把stack改大一點?
2014-01-29 13:40:46	CindyLinz	不過 perl 的 stack 是另外開在 heap 裡自己模擬的, 我猜 ruby 也是..
2014-01-29 13:41:13	petercommand	XD
2014-01-29 13:42:19	godfat	fiber stack 是 compile time 決定的，沒辦法改
2014-01-29 13:42:19	godfat	ruby 的 stack 倒是是用 c 的 stack
2014-01-29 13:42:19	godfat	fiber stack 我倒是不確定是不是用 c 的 stack, 大概不是？
2014-01-29 13:43:00	petercommand	recompile吧....
2014-01-29 13:43:28	godfat	用 heroku 的話不能自己 compile
2014-01-29 13:44:01	CindyLinz	哇, 直接用 C 的 stack 耶... @@"
2014-01-29 13:44:40	CindyLinz	只能寫 app.... ^^|
2014-01-29 13:45:39	godfat	我不知道用 c 的 stack 有什麼壞處嗎？ XD
2014-01-29 13:45:40	godfat	彈性不好？
2014-01-29 13:46:21	godfat	不過我還真沒想過區域變數可以多到會炸掉 stack... (除非需要陣列)
2014-01-29 13:46:56	petercommand	太強大了...
2014-01-29 13:49:47	CindyLinz	惡搞的時候多一層顧忌嘍
2014-01-29 13:50:30	CindyLinz	例如說...  a 函數裡面呼叫 b 函數
2014-01-29 13:50:52	CindyLinz	然後想在 b 函數裡面幫 a 函數多宣告一個區域變數, 待 b return 以後 a 的後半程式碼可以用到?
2014-01-29 13:52:53	CindyLinz	除了這個以外, 因為 C runtime (對, 我最近才知道 C 也有 runtime....ww) 自己也會依各自的實作去隨便使用 system stack
2014-01-29 13:53:45	CindyLinz	ruby 函數的 call frame 之間會被 C 塞多少額外的東西不知道.. @@"
2014-01-29 13:54:59	CindyLinz	因為 a 函數裡面, 在呼叫 b 函數之前, 除了 ruby 會去 system stack 使用區域變數的空間 (這個應該會在 ruby spec 裡面定義清楚), C 要跑(模擬) ruby runtime 的時候也會用一些, 但我想這個大概很難定義清楚了
2014-01-29 13:55:23	godfat	如果用 c extension 的話，說不定可以吧..... XD
2014-01-29 13:57:33	CindyLinz	但是不知道 C 會怎麼去用 system stack, 寫 extension 的人就不敢去動啊 ._.
2014-01-29 13:57:57	CindyLinz	到時候寫出來的 extension 要綁定 gcc, 而且規定要用某一個版本很慘吧 XD
2014-01-29 13:59:24	CindyLinz	b 幫 a 加 local variable 的時候, 要把 a 的 call frame 變大, 所以要把 stack 上面整個 b 的 callframe 往後移, 也要把暫存器裡面正拿來當作 stack offset 的作對應地往後加
2014-01-29 13:59:42	godfat	我不知道耶，這跟 crt 會有關喔？我以為只要看好 ruby 怎麼用 c 即可
2014-01-29 13:59:46	CindyLinz	可是不知道哪些暫存器被拿來當 stack offset, 哪些是一般的值, 也不知道有沒有哪些是被存到 heap 裡面...
2014-01-29 14:00:01	CindyLinz	也許有人 allocate 了一塊小記憶體來存 stack offset..
2014-01-29 14:00:23	godfat	原來這麼麻煩... 那算了 XD
2014-01-29 14:00:33	CindyLinz	{ int x; ... { int x; ... } b(); }
2014-01-29 14:00:45	CindyLinz	我不知道呼叫 b 的時候第二個 int x 所佔的空間會不會放掉
2014-01-29 14:04:30	petercommand	已經出去第2個x定義的函數的話，應該會?
2014-01-29 14:04:42	CindyLinz	是不能用, 但不一定有放掉啊
2014-01-29 14:04:54	CindyLinz	或是...
2014-01-29 14:05:20	CindyLinz	{ int x = b(), y = 2; } 在呼叫 b 的時候, y 的空間有沒有已經先空出來了?
2014-01-29 14:05:23	petercommand	不是放stack嗎?
2014-01-29 14:05:35	godfat	可能跟最佳化有關？我想 c 可能沒定義有沒有放掉？
2014-01-29 14:05:35	godfat	倒是 c++ 因為 destrutor 可能會放掉？
2014-01-29 14:05:51	CindyLinz	是 stack 沒錯呀, 但就不知道 sp 有沒有即時在 } 的時候就往回減
2014-01-29 14:06:11	CindyLinz	destructor 應該只是會呼叫...
2014-01-29 14:07:46	CindyLinz	destructor 裡面的 free 或 delete 會執行.. 不過 obj 本身就不是 destructor 能控制的了
2014-01-29 14:08:44	CindyLinz	嗯, 因為及時往回減可能有時也蠻浪費的...
2014-01-29 14:09:51	petercommand	沒放掉的話不就不能用ret了嗎....
2014-01-29 14:09:55	godfat	{ int x=0; printf("%d", x); }
2014-01-29 14:09:55	godfat	{ int x=0; printf("%d", x); }
2014-01-29 14:09:55	godfat	{ int x=0; printf("%d", x); }
2014-01-29 14:09:55	godfat	{ int x=0; printf("%d", x); }
2014-01-29 14:10:01	godfat	惡整 XD
2014-01-29 14:10:31	CindyLinz	petercommand: 函數 return 的時候當然會放啦, 只是一組 block 結束的時候還沒有 return 呀 @@"
2014-01-29 14:10:47	CindyLinz	這啥? @@"
2014-01-29 14:11:01	CindyLinz	我以為你想要 printf("%p\n", (void*)&x); ?
2014-01-29 14:12:30	CindyLinz	我用 gcc 4.8.1, 剛這個連 4 段 x block 的, 印出來的 address 都一樣
2014-01-29 14:12:48	godfat	想說如果要改變 stack 大小的話，這樣會很痛 XD
2014-01-29 14:12:48	godfat	@@" 不過也可能是重複利用 address?
2014-01-29 14:13:05	CindyLinz	stack 改大小不太痛啦, 就 sub sp, (一個數字)
2014-01-29 14:13:26	CindyLinz	可是如果可以把連 5 個 sub sp, 合到最後一起只放一個 sub sp, 也可能有賺呀 :p
2014-01-29 14:16:01	CindyLinz	我沒開 -O 之類的時候是一樣, 開 -O2 就不一樣了
2014-01-29 14:16:13	godfat	喔喔
2014-01-29 14:16:15	CindyLinz	看 addr 剛好都是差 4
2014-01-29 14:17:12	petercommand	http://codepad.org/5xhF20qc
2014-01-29 14:20:08	CindyLinz	petercommand: favonia 有份... 嗯, 列出一堆 C spec 未定義行為的文件, 裡面說要用 %p 印 addr 的時候, 一定要先轉成 (void*) 不然它可能會發射核彈.. XD
2014-01-29 14:20:17	petercommand	XDD
2014-01-29 14:20:34	CindyLinz	嗯你這個結果出來是有提早放的版本
2014-01-29 14:21:13	CindyLinz	我開 -O2 也是有提早放
2014-01-29 14:22:00	CindyLinz	欸不對啊...
2014-01-29 14:22:12	CindyLinz	你這第三個 printf 是印第一個變數, 當然不能變啊 ^^|
2014-01-29 14:26:01	petercommand	嗯....
2014-01-29 14:28:33	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Read error: Connection reset by peer)
2014-01-29 14:29:09	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-01-29 14:38:47	petercommand	http://codepad.org/4X3XttmD
2014-01-29 14:38:55	petercommand	這樣不知道對不對...
2014-01-29 14:43:25	petercommand	怪怪的orz...
2014-01-29 14:48:32	CindyLinz	__asm__!
2014-01-29 14:49:08	CindyLinz	也是有可能它兩個 int i 是一進 main() 的時候就一起 allocate 好了呀
2014-01-29 15:09:52	<--	logfat_____ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-01-29 15:27:06	<--	liuzhoou (~liuzhoou@125.215.44.36) が終了
2014-01-29 15:32:49	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-01-29 15:36:36	<--	town55 (~1@118.123.148.165) が終了 (Ping timeout: 265 seconds)
2014-01-29 15:40:50	-->	logfat_____ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-01-29 15:44:18	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-29 15:53:20	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-01-29 15:57:22	petercommand	應該是兩個一起allocate....
2014-01-29 16:00:43	petercommand	只sub了一次sp
2014-01-29 16:15:41	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-29 16:24:56	CindyLinz	(Y)
2014-01-29 17:45:18	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) が終了 (Remote host closed the connection)
2014-01-29 18:01:18	-->	hashcat (~kv2a@1-172-238-173.dynamic.hinet.net) が #haskell.tw に参加
2014-01-29 18:21:46	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-01-29 19:05:26	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Read error: Connection reset by peer)
2014-01-29 19:07:05	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-01-29 19:07:59	letoh	為什麼會出現 asm 的討論XD
2014-01-29 19:36:37	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-29 19:45:06	-->	b4283 (~b4283@36-238-130-127.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-29 20:47:34	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Quit: Lost terminal)
2014-01-29 20:48:20	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-01-29 21:24:52	hashcat	http://www.gnu.org/software/epsilon/
2014-01-29 21:25:12	hashcat	有動態型別的純函數式
2014-01-29 21:27:04	hashcat	gnu好多東西
2014-01-29 21:27:12	hashcat	http://directory.fsf.org/wiki/GNU
2014-01-29 23:03:47	<--	b4283 (~b4283@36-238-130-127.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-01-29 23:58:02	-->	b4283 (~b4283@1-172-81-30.dynamic.hinet.net) が #haskell.tw に参加
2014-01-30 00:05:53	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Quit: leaving)
2014-01-30 00:10:44	<--	hashcat (~kv2a@1-172-238-173.dynamic.hinet.net) が終了 (Ping timeout: 272 seconds)
2014-01-30 00:39:07	monochrom	世上還有 http://en.wikipedia.org/wiki/X86_calling_conventions , 大家有個約定俗成. 因此, 想狎玩 stack 的話, 還是有根有據的. :)
2014-01-30 00:44:50	letoh	x86 calling convention 也有好幾種啊XD  cdecl 跟 fastcall 就不同
2014-01-30 01:30:17	<--	b4283 (~b4283@1-172-81-30.dynamic.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-01-30 05:51:24	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Quit: Leaving...)
2014-01-30 06:11:19	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-01-30 07:14:17	-->	b4283 (~b4283@218-164-126-111.dynamic.hinet.net) が #haskell.tw に参加
2014-01-30 09:32:29	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-01-30 09:42:58	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-01-30 10:24:53	petercommand	不過function裏面就不一定會free掉用不到的local variable了.....stack快炸了不知道會不會free掉用不到的
2014-01-30 10:34:18	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Ping timeout: 245 seconds)
2014-01-30 13:36:24	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 13:36:26	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 13:37:21	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 13:37:22	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 13:38:26	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 13:38:27	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 14:25:42	CindyLinz	petercommand: 應該不會
2014-01-30 14:25:58	CindyLinz	petercommand: runtime 還去加這種 check, 比直接 free 掉還辛苦 ^^|
2014-01-30 14:26:17	CindyLinz	所以如果考慮這個問題的話, 應該是加上會立即 free 掉的程式 :p
2014-01-30 14:41:07	petercommand	:p
2014-01-30 14:47:01	CindyLinz	嗯, 判斷加下去至少要一條 cmp 和一條 ja, 就兩條了, 無論結果如何這兩條都要執行到... free 掉才一條 sub, 要減的量是 compile time 就決定的 @@"
2014-01-30 14:54:02	letoh	所以都不要檢查  找幾個關鍵地方直接把 sp pop 回來還原  連 sub 都可以省掉?
2014-01-30 14:58:35	CindyLinz	sp pop 回來就是 sub 的意思啦 :p  只是一個 sub 可以帶一個數字當成連續 pop
2014-01-30 14:59:06	CindyLinz	因為那種情況下, 不需要把 stack 裡丟掉的資料拿出來了
2014-01-30 15:00:10	CindyLinz	只是現代 CPU 的實作好噁心... 可能 sub sp, 3 和 sub ax, 3 的速度還不一樣.... *_*
2014-01-30 16:17:39	-->	hashcat (~kv2a@36-238-33-86.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-30 16:52:21	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Ping timeout: 248 seconds)
2014-01-30 18:21:11	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-01-30 18:27:14	<--	b4283 (~b4283@218-164-126-111.dynamic.hinet.net) が終了 (Ping timeout: 264 seconds)
2014-01-30 18:27:46	-->	b4283 (~b4283@218-164-126-111.dynamic.hinet.net) が #haskell.tw に参加
2014-01-30 19:08:46	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 19:08:48	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 19:09:01	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 19:09:02	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 19:09:24	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 19:09:28	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 19:09:46	-->	hashcat_ (~hashcat_@39.14.96.179) が #haskell.tw に参加
2014-01-30 19:09:48	<--	hashcat_ (~hashcat_@39.14.96.179) が終了 (Excess Flood)
2014-01-30 19:36:14	-->	godfat (~Adium@111-250-130-147.dynamic.hinet.net) が #haskell.tw に参加
2014-01-30 19:48:31	-->	jarod_chen (~jarod_che@60.180.195.206) が #haskell.tw に参加
2014-01-30 21:38:54	<--	godfat (~Adium@111-250-130-147.dynamic.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-01-30 21:46:29	-->	hashcat_ (~hashcat_@106.65.226.199) が #haskell.tw に参加
2014-01-30 21:50:59	-->	godfat (~Adium@1-161-49-183.dynamic.hinet.net) が #haskell.tw に参加
2014-01-30 21:53:02	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-01-30 22:53:05	<--	b4283 (~b4283@218-164-126-111.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-01-30 23:09:05	<--	hashcat (~kv2a@36-238-33-86.dynamic-ip.hinet.net) が終了 (Quit: Konversation terminated!)
2014-01-31 00:11:14	-->	hashcat (~kv2a@36-238-33-86.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-31 00:12:28	<--	hashcat (~kv2a@36-238-33-86.dynamic-ip.hinet.net) が終了 (Client Quit)
2014-01-31 00:34:07	-->	town77 (~1@114.242.249.103) が #haskell.tw に参加
2014-01-31 00:37:50	<--	town77 (~1@114.242.249.103) が終了 (Read error: Connection reset by peer)
2014-01-31 00:40:24	CindyLinz	唔.. 發現 Codeforces 的 Haskell 更新到 GHC 7.6 了
2014-01-31 01:12:26	CindyLinz	偷閒來玩幾題簡單題好了 :p
2014-01-31 03:03:03	<--	godfat (~Adium@1-161-49-183.dynamic.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-01-31 05:36:00	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 252 seconds)
2014-01-31 11:09:53	<--	jarod_chen (~jarod_che@60.180.195.206) が終了 (Quit: Textual IRC Client: http://www.textualapp.com/)
2014-01-31 11:13:12	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-01-31 11:32:18	-->	town55 (~1@118.116.239.12) が #haskell.tw に参加
2014-01-31 11:43:42	<--	town55 (~1@118.116.239.12) が終了 (Ping timeout: 252 seconds)
2014-01-31 11:50:23	-->	town55 (~1@118.116.239.12) が #haskell.tw に参加
2014-01-31 12:27:29	<--	monochrom (trebla@216.138.220.146) が終了 (Ping timeout: 240 seconds)
2014-01-31 12:29:31	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-01-31 12:51:27	<--	town55 (~1@118.116.239.12) が終了 (Ping timeout: 252 seconds)
2014-01-31 14:48:57	--	irc: サーバから切断
2014-01-31 16:50:30	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-01-31 16:50:30	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-01-31 16:50:30	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-01-31 16:50:30	--	ニックネーム #haskell.tw: [a2n cataska_ cibs CindyLinz cyt93cs darkx drbean gko godfat hashcat_ hychen lambdabot letoh logfat_____ miaout17 mno2 monochrom petercommand shik superbil_c weie]
2014-01-31 16:50:30	--	チャンネル #haskell.tw: 21 ニックネーム (0 オペレータ, 0 発言, 21 通常)
2014-01-31 16:50:30	***	Buffer Playback...
2014-01-31 16:50:30	CindyLinz	[01:08:33] 我是這樣理解: 它用起來就像.... 如果用 monad trans 的時候, 都是用 liftIO, liftReader, liftState.. 而不用 lift
2014-01-31 16:50:30	CindyLinz	[01:08:51] 然後它提供兩個額外的工具...
2014-01-31 16:50:30	CindyLinz	[01:09:47] 一個是那個 Effect proxy, 當這一群..... monad trans 疊裡面有出現同一種 monad trans 的時候, 還能夠分得出來 (不然純用 monad trans 的話, 同一類型的只能用到其中一個)
2014-01-31 16:50:30	suhorng	[01:09:52] 額外的工具？
2014-01-31 16:50:30	CindyLinz	[01:10:24] 另一個.. 我猜測應該有, 但還不清楚.. 就是直接用 monad trans, 想隨便用 liftIO, liftReader 這些東西的話
2014-01-31 16:50:30	suhorng	[01:10:29] 他的作法感覺完全跟 monad transformer 不同（用起來不知道|||），從頭到尾只有一個 monad...
2014-01-31 16:50:30	suhorng	[01:10:43] 嗯嗯
2014-01-31 16:50:30	CindyLinz	[01:10:56] 我們要為所有用到的 MonadTrans 們 (假設有 N 種), 去定 N*(N-1) 種 instance
2014-01-31 16:50:30	suhorng	[01:11:12] 對..
2014-01-31 16:50:30	CindyLinz	[01:11:36] 就是 instance ReaderMonad m => ReaderMonad (WriterT w m)
2014-01-31 16:50:30	monochrom	[01:11:56] ST 和 IO 的 所謂 "s -> (# a, s #)", 那個 s 請別當真. 它只是用來哄 optimizer "請不要顛倒次序"
2014-01-31 16:50:30	suhorng	[01:13:06] XD...
2014-01-31 16:50:30	suhorng	[01:13:33] 然後最後其實沒有那個 s 存在 XD?
2014-01-31 16:50:30	CindyLinz	[01:13:52] 這個 N*(N-1) 的麻煩, 如果可以容忍 OverlappingInstances extension 的話, 可以變成 N.. 只是我自己對 OverlappingInstances 有一點怕怕的, 因為它會選到誰, 雖然是明確定義的, 但是從程式碼裡面去讀, 不太明顯 @@"
2014-01-31 16:50:30	CindyLinz	[01:14:30] monochrom: 好 XD
2014-01-31 16:50:30	CindyLinz	[01:14:54] suhorng: 作法還沒讀.. 是從使用的 example.hs 感受的 :p
2014-01-31 16:50:30	suhorng	[01:15:08] 他那個明確定義感覺很模糊阿XDDD
2014-01-31 16:50:30	suhorng	[01:15:14] 之前說的 scoped type variable https://gist.github.com/suhorng/8601726
2014-01-31 16:50:30	suhorng	[01:15:29] 因為 variable 本身就有 scope，所以就有 scoped type variable...各種微妙
2014-01-31 16:50:30	CindyLinz	[01:15:35] 有比 monad is just a monoid... 模糊嗎?
2014-01-31 16:50:30	suhorng	[01:15:56] 這lol monad is just a monoid 感覺可以不模糊
2014-01-31 16:50:30	CindyLinz	[01:16:19] 那個 {b} 是什麼啊?
2014-01-31 16:50:30	suhorng	[01:16:21] // ap1 會 compile error
2014-01-31 16:50:30	suhorng	[01:16:34] implicit argument
2014-01-31 16:50:30	CindyLinz	[01:16:39] 噢 .idr XD
2014-01-31 16:50:30	CindyLinz	[01:16:48] 我應該讀作 forall b. 對吧? XD
2014-01-31 16:50:30	suhorng	[01:17:01] ap1 : (a -> b) -> a -> b 其實會變 ap1 : {a : Type} -> {b : Type} -> ...
2014-01-31 16:50:30	suhorng	[01:17:02] XD
2014-01-31 16:50:30	monochrom	[01:17:03] 即是說, 當你寫 "\s0 -> case getinput s0 of (x, s1) -> case output s1 (x+1) of (_, s2) -> output s2 "bye"", 因著 s0, s1, s2 之間的 data dependency, 所以 optimizer 及 code generator 迫著服從你給的順序, 不能像 pure functional code 那樣"次序沒所謂"
2014-01-31 16:50:30	CindyLinz	[01:17:05] 不對 是寫在下面 orz
2014-01-31 16:50:30	monochrom	[01:17:33] 對的, 最後那個 s 不存在.
2014-01-31 16:50:30	suhorng	[01:17:36] monochrom: 好像有點感覺
2014-01-31 16:50:30	CindyLinz	[01:18:25] 那 suhorng 貼的那個 Bag Cat 就沒這效果了? 它只有防止 Cat 被外面摸到
2014-01-31 16:50:30	suhorng	[01:19:22] 驚
2014-01-31 16:50:30	CindyLinz	[01:21:03] suhorng: 我一次遇到 scoped type variable 是在一個 sig 有 forall 的函數裡面定義內用的 helper, 想這個 helper 的 sig, 而這個 sig 裡面用到那個被 forall 的 type
2014-01-31 16:50:30	CindyLinz	[01:21:17] 沒開這個 ext 的話, compiler 說這兩個 type 是不同個..
2014-01-31 16:50:30	suhorng	[01:21:19] 有遇過!
2014-01-31 16:50:30	suhorng	[01:21:21] 真的 XDDD
2014-01-31 16:50:30	suhorng	[01:21:46] 不過 idris 直接當成一個參數把 type 拿近來..
2014-01-31 16:50:30	CindyLinz	[01:23:20] 預設打開了..
2014-01-31 16:50:30	CindyLinz	[01:23:29] 我覺得它是該開啊... QQ
2014-01-31 16:50:30	suhorng	[01:23:32] 不用打開喔lol
2014-01-31 16:50:30	suhorng	[01:23:34] 不是打開
2014-01-31 16:50:30	suhorng	[01:23:39] 而是像那個 {a}
2014-01-31 16:50:30	CindyLinz	[01:23:44] 只是那如果真要用兩個不一樣的 type, 裡面就要換名字了...
2014-01-31 16:50:30	suhorng	[01:23:57] 普通的variable scope，不是另一個不同的 "type" variable
2014-01-31 16:50:30	CindyLinz	[01:24:41] 就.. 裡面用到同一個名字的時候, 就是在指稱它了
2014-01-31 16:50:30	suhorng	[01:25:15] 就是普通的 variable scoping rule
2014-01-31 16:50:30	suhorng	[01:25:25] 跟 f a = ... where ... = ... a ... 一樣
2014-01-31 16:50:30	CindyLinz	[01:25:34] 你第二行的 {b} 和第一行的 b 是同一個東西嗎?
2014-01-31 16:50:30	suhorng	[01:25:35] 只不過現在這個 a 不一定存值, 也可以是type XD
2014-01-31 16:50:30	suhorng	[01:25:47] 那個code我發現我打錯字..改成 {a} 了
2014-01-31 16:50:30	CindyLinz	[01:26:22] 我是說 ap1 {b} 和 ap1 : ( a -> b ) ...
2014-01-31 16:50:30	suhorng	[01:26:31] 對
2014-01-31 16:50:30	suhorng	[01:26:34] 是同一個東西
2014-01-31 16:50:30	CindyLinz	[01:27:01] 然後因為第二行有 {b}, 所以第三行的 apply 可以用 b 來描述 type?
2014-01-31 16:50:30	suhorng	[01:28:00] 對
2014-01-31 16:50:30	CindyLinz	[01:28:25] 如果第二行沒有 {b}, 那第三行的 b 會被當 free variable (forall) 的意思?
2014-01-31 16:50:30	suhorng	[01:28:35] 對 會變新的
2014-01-31 16:50:30	CindyLinz	[01:28:55] 這樣好像比較好..
2014-01-31 16:50:30	CindyLinz	[01:29:20] ghc ext 那樣是要開就整個 module 全開了.. 所有的 forall 都變成 {x} 宣告
2014-01-31 16:50:30	suhorng	[01:29:38] XDDD
2014-01-31 16:50:30	CindyLinz	[01:30:05] 雖然實際上困擾也沒很大? 反正 a 或 b... 通常也都是沒意義的名字, 換了不會心痛 ww
2014-01-31 16:50:30	suhorng	[01:30:34] 是沒錯
2014-01-31 16:50:30	suhorng	[01:30:44] 但是很有趣w 當type變成可以拿來亂弄以後
2014-01-31 16:50:30	suhorng	[01:30:49] 很多東西可以消失不見
2014-01-31 16:50:30	CindyLinz	[01:31:44] 你是說很多 extension 就沒有存在的必要?
2014-01-31 16:50:30	suhorng	[01:32:41] 好像也不是這樣說 T_T
2014-01-31 16:50:30	suhorng	[01:32:58] 感覺..有些事情有統一的處理方法
2014-01-31 16:50:30	CindyLinz	[01:33:09] 我只是想先聽懂你說「消失」指的是哪方面
2014-01-31 16:50:30	CindyLinz	[01:33:22] 畢竟... Agda 裡面要打的字是變多了, 空格也變多了... XD
2014-01-31 16:50:30	suhorng	[01:33:25] e.g. ScopedTypeVariable
2014-01-31 16:50:30	CindyLinz	[01:33:36] 少一個 extension 沒錯.. XD
2014-01-31 16:50:30	CindyLinz	[01:33:53] 我覺得這一個不算.. XD
2014-01-31 16:50:30	suhorng	[01:33:58] 不少用 typeclass 做的事情也不再需要, 像是 type level list
2014-01-31 16:50:30	CindyLinz	[01:34:19] Haskell 弄成每一個 type var 前面加一下 scoped a. 也行啊? XD
2014-01-31 16:50:30	suhorng	[01:34:49] forall a. 那樣綁起來w？
2014-01-31 16:50:30	CindyLinz	[01:35:29] 對啊多一種修飾字這樣... 畢竟 forall 和 scoped 還是講不同的事 @@"
2014-01-31 16:50:30	suhorng	[01:35:44] 嗯嗯XD
2014-01-31 16:50:30	CindyLinz	[01:36:28] 想到 Agda... 再對照你的心得... 譯: 只要把靈魂賣給惡魔, 就不用學一堆怎麼看天氣和開船的技能了...
2014-01-31 16:50:30	CindyLinz	[01:36:39] (ref: 幽靈船)
2014-01-31 16:50:30	suhorng	[01:36:41] 什麼wwwwwwwww
2014-01-31 16:50:30	suhorng	[01:37:00] 惡魔是dependently typed之類嗎XD
2014-01-31 16:50:30	CindyLinz	[01:37:04] 對啊..
2014-01-31 16:50:30	suhorng	[01:37:11] 我是還不能體會他的好處
2014-01-31 16:50:30	suhorng	[01:37:16] 不過他很好玩XD
2014-01-31 16:50:30	CindyLinz	[01:38:05] 嗯嗯
2014-01-31 16:50:30	CindyLinz	[01:42:17] 然後更之前你丟過一篇也是講 Effect 的 paper, 嗯, 我只有看很前面... 覺得它好像比這個 Effects packet 來得動態
2014-01-31 16:50:30	CindyLinz	[01:42:36] 而且, 沒有去處理疊了兩層同一種 effect 的問題...
2014-01-31 16:50:30	CindyLinz	[01:42:48] 應該說, 好像只是名字像, 其實是在處理不同的東西?
2014-01-31 16:50:30	CindyLinz	[01:43:27] 看 Effects example.hs 裡面, 它會用 with (ref 5) $ \x -> with (ref 7) $ \y -> 這樣來寫
2014-01-31 16:50:30	CindyLinz	[01:43:37] 我覺得 action 本身也不太動態呀..
2014-01-31 16:50:30	CindyLinz	[01:44:00] 而如果要在裡面呼叫會使用這邊 5 或 7 的 action... 應該要把 x 和 y explicitly 傳過去
2014-01-31 16:50:30	CindyLinz	[01:44:35] 嗯, 我還要再繼續讀讀.... ^^|
2014-01-31 16:50:30	suhorng	[01:46:50] 來得動態？
2014-01-31 16:50:30	suhorng	[01:46:58] 我之前丟的那個paper出package了
2014-01-31 16:50:30	suhorng	[01:47:12] http://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html
2014-01-31 16:50:30	suhorng	[01:47:31] 我也想比較，可是還不瞭解這個 Effects 的作法 QQ
2014-01-31 16:50:30	suhorng	[01:47:54] x y 直接傳進去感覺更像用可改的變數XD
2014-01-31 16:50:30	CindyLinz	[01:48:07] 我有點希望 Effects 其實就是 MonadTrans 的某種包裝.... 這樣我就可以已經懂一半了 XD
2014-01-31 16:50:30	CindyLinz	[01:48:28] 不一定能改啦... 如果原本那一項對應的是 Reader 的話, 就是 constant XD
2014-01-31 16:50:30	suhorng	[01:48:46] 喔喔喔對 XDD
2014-01-31 16:50:30	suhorng	[01:49:03] 這兩種好像就是要跟 monad transformer 不同
2014-01-31 16:50:30	suhorng	[01:49:49] https://github.com/suhorng/HaskellExercise/blob/master/effect/TestEffect.hs 這個..老實說他的code真的跟 monad transformer 很像
2014-01-31 16:50:30	CindyLinz	[01:49:58] 你是不是還有貼過誰在 stackoverflow 說, 仍然比較喜歡 Monad Transformer?
2014-01-31 16:50:30	suhorng	[01:50:11] 但是他要加更多type = =|||
2014-01-31 16:50:30	suhorng	[01:50:32] 不太有印象，我貼過得可能是不喜歡這個也不喜歡 monad transformer
2014-01-31 16:50:30	CindyLinz	[01:51:12] 記得人名嗎? XD
2014-01-31 16:50:30	suhorng	[01:51:34] 只記得是 pipes 的作者...orz
2014-01-31 16:50:30	CindyLinz	[01:53:13] QQ
2014-01-31 16:50:30	suhorng	[01:53:20] https://groups.google.com/forum/#!topic/haskell-pipes/BTQsITNwflc 第二篇
2014-01-31 16:50:30	CindyLinz	[01:54:09] 歐! 謝謝~~
2014-01-31 16:50:30	CindyLinz	[01:54:28] 厚剛以為是 stackoverflow... 下了 site:stackoverflow.com 原來就把可能的來源刪了.... orz
2014-01-31 16:50:30	suhorng	[01:55:07] XDD
2014-01-31 16:50:30	suhorng	[02:00:49] 天阿我說錯了orzzz 應該是倒數第二封信, 不是第二封信...
2014-01-31 16:50:30	CindyLinz	[02:04:56] 沒關係.. 一整串下來就會看到了 ^^|
2014-01-31 16:50:30	CindyLinz	[02:06:34] 嗯 看 paper 的時候, 蠻前面就拿類似這種例子出來 demo, 感覺的確有一點不舒服... XD
2014-01-31 16:50:30	hashcat	[22:15:53] idris的effect paper很好懂
2014-01-31 16:50:30	suhorng	[22:35:16] 還沒懂他的作法
2014-01-31 16:50:30	suhorng	[22:36:12] 例如他的choice說是可以在 Maybe 或 List 這兩種 context 中做
2014-01-31 16:50:30	suhorng	[22:36:24] 那如果我還想要 IO 的話該怎麼辦呢?
2014-01-31 16:50:30	suhorng	[22:36:53] 是不是我要自己寫一個 IO (List a) 之類的 context？
2014-01-31 16:50:30	hashcat	[23:01:41] ???
2014-01-31 16:50:30	suhorng	[23:03:16] 如果我想要有 IO 又想要有 Selection 的話該怎麼做呢?
2014-01-31 16:50:30	hashcat	[23:11:53] 有列表儲存各種effect
2014-01-31 16:50:30	hashcat	[23:12:53] http://eb.host.cs.st-andrews.ac.uk/talks/idris-cph-lec3.pdf
2014-01-31 16:50:30	hashcat	[23:13:00] 看第18頁
2014-01-31 16:50:30	hashcat	[23:14:22] 有個參數是List EFF
2014-01-31 16:50:30	hashcat	[23:17:15] 看範例好了 : http://www.cs.st-andrews.ac.uk/~eb/effect-examples.tgz
2014-01-31 16:50:30	hashcat	[23:17:30] Lang.idr我覺得最好懂
2014-01-31 16:50:30	hashcat	[23:20:01] 他裡面的型別是長這樣 eval : Expr -> Eff IO [EXCEPTION String, STDIO, RND, STATE Env] Int
2014-01-31 16:50:30	hashcat	[23:20:23] 來自創新詞: 最終效果, 途中效果
2014-01-31 16:50:30	hashcat	[23:24:30] IO 跟 Int 可以想成以前的monad
2014-01-31 16:50:30	hashcat	[23:24:33] IO Int
2014-01-31 16:50:30	hashcat	[23:25:06] 中間那個列表是附加於途中的效果, 像是會扔exception, 有隨機數等
2014-01-31 16:50:30	hashcat	[23:26:11] 主效果 IO 附屬效果 [EXCEPTION String, STDIO, RND, STATE Env] 返回 Int
2014-01-31 16:50:30	hashcat	[23:26:26] 這樣講不知道行不行
2014-01-31 16:50:30	hashcat	[23:27:29] 再看下宣告
2014-01-31 16:50:30	hashcat	[23:27:32] data EffM : (m : Type -> Type) ->
2014-01-31 16:50:30	hashcat	[23:27:34] (es : List EFFECT) ->
2014-01-31 16:50:30	hashcat	[23:27:35] (es' : List EFFECT) -> (a : Type) -> Type
2014-01-31 16:50:30	hashcat	[23:28:12] 這裡 m 意思就等同以前 monad 裡的 m 的常用用法
2014-01-31 16:50:30	hashcat	[23:28:34] a 也等同以前 monad 裡的 a 的常用用法
2014-01-31 16:50:30	suhorng	[23:29:21] 嗯嗯!
2014-01-31 16:50:30	hashcat	[23:29:25] 多出兩個(es : List EFFECT) , (es' : List EFFECT) 就是附屬的效果類似 monad transformer
2014-01-31 16:50:30	hashcat	[23:29:42] 補充下前者是不可變狀態, 後者是可變狀態
2014-01-31 16:50:30	hashcat	[23:30:02] Eff 就是 EffM 少了可變狀態
2014-01-31 16:50:30	suhorng	[23:30:11] 嗯哼
2014-01-31 16:50:30	hashcat	[23:30:43] 繼續研究prolog
2014-01-31 16:50:30	hashcat	[23:30:50] 置入行銷
2014-01-31 16:50:30	suhorng	[23:31:48] XDDD
2014-01-31 16:50:30	hashcat	[23:32:27] 很故意的講出來
2014-01-31 16:50:30	CindyLinz	[23:33:49] 途中效果裡面列的東西, 其順序應該是有影響的?
2014-01-31 16:50:30	hashcat	[23:33:49] 發現超恐怖的東西
2014-01-31 16:50:30	hashcat	[23:34:15] 天網出現之日指日可待
2014-01-31 16:50:30	CindyLinz	[23:34:20] ..
2014-01-31 16:50:30	hashcat	[23:34:30] http://www.cs.ox.ac.uk/activities/machlearn/Aleph/aleph_toc.html
2014-01-31 16:50:30	hashcat	[23:34:52] 我想不按原文翻譯成歸納邏輯理論自動建造機
2014-01-31 16:50:30	hashcat	[23:35:31] 原文是Aleph is an Inductive Logic Programming (ILP) system that supersedes P-Progol.
2014-01-31 16:50:30	CindyLinz	[23:36:00] 會學習會推論不可怕啊.. 天網出現的那一瞬間是出現自覺.. XD
2014-01-31 16:50:30	hashcat	[23:36:17] 機率跟歸納都有了, 整合起來要是加上前端視覺模式識別
2014-01-31 16:50:30	hashcat	[23:36:53] 征服銀河系的就不是人啦, 是歸納邏輯系統
2014-01-31 16:50:30	suhorng	[23:37:01] CindyLinz: 我覺得有點難說..他的作法會不會影響/如何影響實在不像 monad transformer 那樣看容易看出來....
2014-01-31 16:50:30	hashcat	[23:38:02] suhorng: 我怎覺得是 Effect 比較容易一目了然
2014-01-31 16:50:30	CindyLinz	[23:38:12] suhorng: 昨天看了 Pipes 作者對於可以隨意換順序的 Effect 的擔心... 我覺得如果可以隨意換順序的模型, 最好把 Exception 分出去, 不要混一起 ^^|
2014-01-31 16:50:30	suhorng	[23:38:17] 昨天貼的那封信我把他改成用 extensible-effects package, 結果不管 runError 跟 runState 誰先誰後跑出來結果都是 2
2014-01-31 16:50:30	suhorng	[23:39:03] 不同作法之下效果跟 monad transformer 完全不同XD|||
2014-01-31 16:50:30	suhorng	[23:39:04] 不只 exception，可能還要包含任何會影響control的東西，像是 x <- [1..10] 這一類東西
2014-01-31 16:50:30	hashcat	[23:39:33] 設計上跟順序無關才合情合理
2014-01-31 16:50:30	hashcat	[23:39:54] Monad跟Effect作用就是嵌入個語言
2014-01-31 16:50:30	suhorng	[23:40:00] hashcat: 像 s -> Either String (a, s) 跟 a -> (Either String a, s) 還可以人眼看出來, Effects 該怎磨勘呢?
2014-01-31 16:50:30	suhorng	[23:40:05] 不可能無關吧
2014-01-31 16:50:30	hashcat	[23:40:32] 拿設計一個語言來說, 沒人會想說什麼語言特性跟加入那個特性順序有關系吧
2014-01-31 16:50:30	CindyLinz	[23:40:33] 差別在... action 的長相來決定順序, 還是呼叫的地方決定順序 :Q
2014-01-31 16:50:30	suhorng	[23:41:06] 像 MTL 跟 extensible-effects 都是呼叫的地方決定順序
2014-01-31 16:50:30	suhorng	[23:41:20] 但是他們 "不同順序" 造成的影響很不一樣
2014-01-31 16:50:30	CindyLinz	[23:41:36] hashcat: 但是執行到一半發生 exception 了, 那麼 exception 之前已經做了的動作要仍舊保持, 還是 rollback, 是要規定一下的...
2014-01-31 16:50:30	hashcat	[23:41:43] 所有的效果 "同時" 發生, 前後無關才合情合理
2014-01-31 16:50:30	CindyLinz	[23:42:09] suhorng: MTL 是指.. liftIO 的寫法, 而不是 lift 的寫法?
2014-01-31 16:50:30	suhorng	[23:42:26] effects之間怎麼互動沒有一定怎樣才是對的吧? 可以選一種拿來作準 不過其他種也不能說錯
2014-01-31 16:50:30	hashcat	[23:42:28] 嗯嗯
2014-01-31 16:50:30	suhorng	[23:42:41] CindyLinz: 是指 monad transformers
2014-01-31 16:50:30	CindyLinz	[23:43:13] suhorng: monad trans 的 lift . lift . lift 的寫法.. 是定義 action 的地方就決定順序了啊.
2014-01-31 16:50:30	CindyLinz	[23:43:36] 看 lift 用了幾層, 就決定那一層一定要是什麼呀
2014-01-31 16:50:30	suhorng	[23:43:55] 假設使用typeclass自動推論要lift幾層的那種好了~
2014-01-31 16:50:30	CindyLinz	[23:44:10] XD 那就是 liftIO, liftWriter 的寫法嘛 :p
2014-01-31 16:50:30	suhorng	[23:44:24] 就是 mtl package 做的事呀Q_Q
2014-01-31 16:50:30	suhorng	[23:44:54] 大概我有弄混
2014-01-31 16:50:30	CindyLinz	[23:44:59] 嗯嗯, 要標明 不準直接用 lift.. :p
2014-01-31 16:50:30	hashcat	[23:46:31] 問下
2014-01-31 16:50:30	hashcat	[23:46:47] haskell在工作使用情形如何
2014-01-31 16:50:30	CindyLinz	[23:47:40] mno2: (戳戳)
2014-01-31 16:50:30	suhorng	[23:47:54] 可能要去 haskell.sg meetup (誤)
2014-01-31 16:50:30	mno2	[23:48:36] CindyLinz: ?
2014-01-31 16:50:30	CindyLinz	[23:49:07] mno2: # 23:46 < hashcat> haskell在工作使用情形如何
2014-01-31 16:50:30	mno2	[23:50:42] http://functionaljobs.com/jobs/8678-haskell-developer-at-zalora  可以參考 JD
2014-01-31 16:50:30	hashcat	[23:52:40] 亂丟垃圾會重杖打屁股的地方
2014-01-31 16:50:30	CindyLinz	[23:53:10] 可以 remote..
2014-01-31 16:50:30	CindyLinz	[23:53:18] 所以可以繼續亂丟垃圾(?
2014-01-31 16:50:30	mno2	[23:53:45] 丟垃圾？
2014-01-31 16:50:30	CindyLinz	[23:54:10] 他應該是說街上亂丟東西 XD
2014-01-31 16:50:30	mno2	[23:54:42] 喔喔
2014-01-31 16:50:30	hashcat	[23:55:07] 不是我想找, 只是想了解這裡的人有沒啥用到
2014-01-31 16:50:30	hashcat	[23:55:25] 我是完全沒用上
2014-01-31 16:50:30	CindyLinz	[23:56:07] 我用到一半
2014-01-31 16:50:30	hashcat	[23:56:19] 做什麼的
2014-01-31 16:50:30	CindyLinz	[23:56:25] 因為沒有時間壓力, 所以常常會跑去弄別的..
2014-01-31 16:50:30	hashcat	[23:56:58] 聽起來像無業遊民
2014-01-31 16:50:30	CindyLinz	[23:57:04] 資料結構, Augmented RB tree, 要拿來作即時的名次
2014-01-31 16:50:30	CindyLinz	[23:57:31] 應該剩介面整理.. 然後就擺了一陣子 orz # https://github.com/CindyLinz/Haskell-AugmentedRBTree
2014-01-31 16:50:30	CindyLinz	[23:59:03] 現在在弄 Haskell 與 Perl 介接.. 也許就能沿用我們公司原有的, 用 perl 寫的 socket 介面
2014-01-31 16:50:30	hashcat	[23:59:24] 同樣都沒實用, FP的對象我決定轉移到idris了
2014-01-31 16:50:30	CindyLinz	[00:00:19] haskell 接 perl 目前實驗了一些些會動, 要開始寫正經一點的了 :p  https://github.com/CindyLinz/Haskell-Perl
2014-01-31 16:50:30	hashcat	[00:00:23] 你是後端啥都能用就是
2014-01-31 16:50:30	CindyLinz	[00:00:55] 什麼意思??
2014-01-31 16:50:30	hashcat	[00:01:07] 就是前端 perl
2014-01-31 16:50:30	CindyLinz	[00:01:11] Non-windows only
2014-01-31 16:50:30	hashcat	[00:01:23] 後端什麼語言都沒限制
2014-01-31 16:50:30	CindyLinz	[00:01:40] 其實前端也沒限制.... socket 出去就行
2014-01-31 16:50:30	CindyLinz	[00:02:05] 只是一定要透過 socket 的話, 整合性比較差, 必須是本身足夠完整的子系統才行
2014-01-31 16:50:30	hashcat	[00:02:17] 啥麼公司做什麼的
2014-01-31 16:50:30	CindyLinz	[00:02:17] 如果能揉在一起的話, 只換一個函數塞進去都行
2014-01-31 16:50:30	CindyLinz	[00:02:55] 營運自己開發的遊戲的公司~ http://www.gamesofa.com/
2014-01-31 16:50:30	hashcat	[00:04:07] 哦
2014-01-31 16:50:30	hashcat	[00:04:14] 原來是王老闆
2014-01-31 16:50:30	CindyLinz	[00:04:29] 啊? 老闆不姓王啊 @_@"
2014-01-31 16:50:30	hashcat	[00:04:54] 當我沒說好了
2014-01-31 16:50:30	CindyLinz	[00:05:35] @@"
2014-01-31 16:50:30	hashcat	[00:07:29] 我看成你是老闆
2014-01-31 16:50:30	CindyLinz	[00:08:46] ._.
2014-01-31 16:50:30	CindyLinz	[00:09:20] 那句的「自己」指的是公司不是我啦.. XD
2014-01-31 16:50:30	hashcat	[00:10:12] 想不出自己還能是啥
2014-01-31 16:50:30	hashcat	[00:11:40] 還有這種用法
2014-01-31 16:50:30	hashcat	[00:11:53] 公司自己
2014-01-31 16:50:30	CindyLinz	[00:13:19] 我玩遊戲不夠重度... 如果遊戲是我設計.... 應該會作出只有我自己想玩的遊戲
2014-01-31 16:50:30	CindyLinz	[00:13:33] 而且我自己也玩一陣子就膩了..ww
2014-01-31 16:50:30	petercommand	[00:13:38] CindyLinz: XD
2014-01-31 16:50:30	CindyLinz	[00:14:24] 前一陣子發現一個無邊界的多人踩地雷遊戲覺得很好玩... http://mienfield.com/
2014-01-31 16:50:30	CindyLinz	[00:14:34] 結果只有我覺得好玩....持續兩天 orz
2014-01-31 16:50:30	hashcat	[00:16:32] 整個創意100分, 有趣0分的遊戲
2014-01-31 16:50:30	CindyLinz	[00:16:49] 有必要說這麼狠嗎.....QQ
2014-01-31 16:50:30	hashcat	[00:18:01] 不過還是可以理解, 就跟我寫prolog的時候一樣
2014-01-31 16:50:30	hashcat	[00:18:27] 結果只有我覺得好玩....持續三個月 orz
2014-01-31 16:50:30	hashcat	[00:20:24] 擴展perl可以用haskell, 表示擴展python可以用idris
2014-01-31 16:50:30	hashcat	[00:21:31] =D
2014-01-31 16:50:30	hashcat	[00:34:06] 問了下idris還只能在單核跑 ==
2014-01-31 16:50:30	CindyLinz	[00:44:17] 這是什麼推論啊.... XD
2014-01-31 16:50:30	hashcat	[00:45:47] 在跟idriser討論加進平行化, 能不就像是在產生的C code加上openmp pragma
2014-01-31 16:50:30	CindyLinz	[00:47:07] 嗯, 有很多系統呼叫要換用加上 _r 自尾的版本
2014-01-31 16:50:30	CindyLinz	[00:47:10] 嗯, 有很多系統呼叫要換用加上 _r 字尾的版本
2014-01-31 16:50:30	hashcat	[00:49:11] _r是啥?
2014-01-31 16:50:30	CindyLinz	[00:50:19] 很多 C 的標準 lib 函數, 例如說 string.h 裡面的 strtok, 會用到自己內建的 static 的 buffer
2014-01-31 16:50:30	CindyLinz	[00:50:41] 而 strtok_r 可以由呼叫端給 buffer
2014-01-31 16:50:30	CindyLinz	[00:51:14] 用內建 static buffer 在 multi-thread 的時候, 如果發生不同的 thread 都去採同一個 static buffer 會悲劇
2014-01-31 16:50:30	hashcat	[00:55:48] 哦
2014-01-31 16:50:30	hashcat	[00:56:55] 睡覺
2014-01-31 16:50:30	CindyLinz	[01:52:51] Dryman 寫的 Monad 教學 http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/
2014-01-31 16:50:30	CindyLinz	[01:52:54] 還沒看 :p
2014-01-31 16:50:30	CindyLinz	[01:55:02] 這張圖解不錯 ^^ http://www.idryman.org/images/monad/monad-structure.png
2014-01-31 16:50:30	CindyLinz	[15:05:51] 嗯, GHC 的 MultiParamClasses extension 也很重要....
2014-01-31 16:50:30	CindyLinz	[15:07:10] TypeSynonymInstances 非必要.. 但我也是覺得沒有會很苦命 XD
2014-01-31 16:50:30	CindyLinz	[15:40:26] 問問題...
2014-01-31 16:50:30	CindyLinz	[15:40:38] Foreign.C.String 裡面有個 newCString
2014-01-31 16:50:30	CindyLinz	[15:41:02] 是 String -> IO (CString)  其中 type CString = Ptr CChar
2014-01-31 16:50:30	CindyLinz	[15:41:25] 這邊給出來的 CString 是需要自己手動去 free 的
2014-01-31 16:50:30	CindyLinz	[15:41:45] 另外有個 withCString
2014-01-31 16:50:30	CindyLinz	[15:41:48] :t withCSTring
2014-01-31 16:50:30	lambdabot	[15:41:49] Not in scope: `withCSTring'
2014-01-31 16:50:30	CindyLinz	[15:41:52] :t withCString
2014-01-31 16:50:30	lambdabot	[15:41:53] Not in scope: `withCString'
2014-01-31 16:50:30	CindyLinz	[15:41:56] orz
2014-01-31 16:50:30	CindyLinz	[15:42:12] withCString :: String -> (CString -> IO a) -> IO a
2014-01-31 16:50:30	CindyLinz	[15:42:31] 它會在我第二個參數的 action 用完以後自動幫我回收.... (很開心)
2014-01-31 16:50:30	CindyLinz	[15:43:24] 現在的問題是, 我是在一個底下墊 MonadIO 的 monad transformer 裡面做事情
2014-01-31 16:50:30	CindyLinz	[15:43:37] 那個 CString 是要在這個 monad transformer 裡面用的
2014-01-31 16:50:30	CindyLinz	[15:43:56] 如果我用 liftIO $ withCString str $ \cstr -> do ... 的話
2014-01-31 16:50:30	CindyLinz	[15:44:18] 最後面那個 action 是 IO a, 沒辦法用我 monad transformer 的函數 @@"
2014-01-31 16:50:30	CindyLinz	[15:44:48] 所以現在只能用 newCString 這種, 然後最後再自己記得 free 掉 @@"
2014-01-31 16:50:30	CindyLinz	[15:45:26] 我要怎麼使用這種 bracket 長相的用法呢?
2014-01-31 16:50:30	godfat	[15:45:50] 弄個 withCStringM ...?
2014-01-31 16:50:30	CindyLinz	[15:46:25] 好兇 XD
2014-01-31 16:50:30	CindyLinz	[15:47:04] 把那些 IO a 都換成 MonadIO m => m a 的版本?
2014-01-31 16:50:30	godfat	[15:47:48] 之類的... XD
2014-01-31 16:50:30	CindyLinz	[15:50:42] mmm
2014-01-31 16:50:30	CindyLinz	[15:51:35] 那麼, 我要怎麼處理 exception 呢? 希望裡面 throw exception 的時候, 我可以先 free 了, 再 re-throw..
2014-01-31 16:50:30	CindyLinz	[15:51:54] Control.Exception 裡面的 catch, try 看起來都是 IO a 的 @@"
2014-01-31 16:50:30	suhorng	[15:53:29] 咦？我以為 IO a 的 catch try 是 Prelude 的
2014-01-31 16:50:30	godfat	[15:53:39] 這些都重做好像工程有點大，而且不見得能做..? XD
2014-01-31 16:50:30	godfat	[15:53:40] 欸，說真的有時候覺得 ghc 的 api 有些缺東缺西...
2014-01-31 16:50:30	godfat	[15:53:40] 雖然好像大多都是 IO 的部份
2014-01-31 16:50:30	suhorng	[15:54:09] 喔喔 是說 IO (Either...)
2014-01-31 16:50:30	CindyLinz	[15:54:12] 好像, 在 IO a 那邊我重新 run 自己的 monad transformer 是一種作法.. 不過我的 monad transformer 有模仿 ST 那樣, 有一個 forall s. 在裡面, 而且我的 run 會做一些應該不能在前一個 run 結束以前再 run 第二次的動作 @@"
2014-01-31 16:50:30	CindyLinz	[15:54:55] suhorng: 原本是 Prelude, 不過 GHC (或 Haskell2010?) 有把它做得更完整. Prelude 還是能用就是
2014-01-31 16:50:30	CindyLinz	[15:55:13] 現在有做成像 Java 樹狀的 exception 家族那樣
2014-01-31 16:50:30	suhorng	[15:55:53] 嗯嗯
2014-01-31 16:50:30	CindyLinz	[15:56:17] 我想想看我能不能分出一個類似 re-run 的函數出來, 讓它不要做原本 run 會有的初始化和結束的部分, 只是讓它可以套在 IO 裡面..
2014-01-31 16:50:30	CindyLinz	[15:57:45] GHC api 都喜歡著重: 這邊是個 Monoid!, 這邊有個 Dual!, 這是個最小的 FixPoint!..... ww
2014-01-31 16:50:30	godfat	[15:58:54] 不知道該說啥
2014-01-31 16:50:30	godfat	[15:58:54] 有時候寫寫 ruby 會想說能用 haskell 多好啊
2014-01-31 16:50:30	godfat	[15:58:54] 可是實際上真的要用又一堆問題 orz
2014-01-31 16:50:30	CindyLinz	[16:00:38] godfat: 工程師! 快來吧~~~ (招手)
2014-01-31 16:50:30	godfat	[16:01:03] 這有點雞蛋問題呀... ~.~
2014-01-31 16:50:30	godfat	[16:01:18] 尤其一堆「工程師」都保守到不行...
2014-01-31 16:50:30	CindyLinz	[16:02:02] 昨天跟 wens 聊天, 講到 perl 的過去版本相容性非常好.. 甚至 doc 裡面還會寫: 這邊會有這樣這樣的行為, 它是一個 unfixable bug, 因為如果修掉了, 會使得很多 third-party lib 壞掉.
2014-01-31 16:50:30	CindyLinz	[16:02:33] 然後想到, Larry Wall 以前是 system admin. system admin 最需要相容性了.. XD
2014-01-31 16:50:30	CindyLinz	[16:02:53] 所以要工程師跳進來 Haskell, 才會讓它適合工程師用 :D
2014-01-31 16:50:30	CindyLinz	[16:03:20] 不能都是數學家這樣... ^^|
2014-01-31 16:50:30	suhorng	[16:05:17] http://www.reddit.com/r/haskell/comments/1br0ls/haskell_beats_c_using_generalised_stream_fusion/ 看看這個能不能吸引一點工程師好了 (炸)
2014-01-31 16:50:30	CindyLinz	[16:10:53] godfat: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-31 16:50:30	CindyLinz	[16:11:26] suhorng: 來幫我打造 withCStringM 嘛~~ (扭)
2014-01-31 16:50:30	CindyLinz	[16:11:35] 見者有份歐~~ (咦)
2014-01-31 16:50:30	suhorng	[16:15:41] 好難..XD
2014-01-31 16:50:30	CindyLinz	[16:17:43] ~_~
2014-01-31 16:50:30	godfat	[16:20:40] 所以說起來， sysadmin 用的語言應該要跟 app programmer 不一樣才對 XD
2014-01-31 16:50:30	godfat	[16:20:41] 後者可以用相容性低的東西...
2014-01-31 16:50:30	godfat	[16:20:41] XDDDD 最近太忙了，都沒空玩 haskell... ~.~
2014-01-31 16:50:30	suhorng	[16:21:21] exception真的有辦法解決嗎..?
2014-01-31 16:50:30	CindyLinz	[16:21:35] 解決?
2014-01-31 16:50:30	CindyLinz	[16:21:49] 給 godfat 一個 exception, 他就有空玩 haskell 了這樣?
2014-01-31 16:50:30	godfat	[16:22:00] XDDDD
2014-01-31 16:50:30	suhorng	[16:22:03] XDDD
2014-01-31 16:50:30	CindyLinz	[16:23:13] suhorng: 你問的是什麼啦 XD
2014-01-31 16:50:30	suhorng	[16:24:02] 我想想 ~"~
2014-01-31 16:50:30	CindyLinz	[16:26:27] 我剛剛遇到的情況, 嗯, 可以用純的 unXxxT 解決
2014-01-31 16:50:30	CindyLinz	[16:27:37] 假設我的 monad trans 是 newtype XxxT .... = XxxT { unXxxT :: xxState -> m (xxState, a) }
2014-01-31 16:50:30	CindyLinz	[16:29:23] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT cstr act xxState
2014-01-31 16:50:30	CindyLinz	[16:30:28] 因為我是寫這個 monad trans 的人, 所以我可以直接拿到 xxState
2014-01-31 16:50:30	suhorng	[16:31:06] 唔...實在想不到 exception 能怎麼配上 MonadIO
2014-01-31 16:50:30	suhorng	[16:31:09] 嗯嗯
2014-01-31 16:50:30	CindyLinz	[16:31:38] 這樣就算是有處理到 exception 啦 ^^   因為那個 withCString 就是會處理 exception 的
2014-01-31 16:50:30	CindyLinz	[16:31:52] 而 bracket 應該也可以一樣的包法
2014-01-31 16:50:30	CindyLinz	[16:32:26] 我這個方法, 不適用任意的 MonadIO.. 我得拿得到 internal state 才行 :Q
2014-01-31 16:50:30	suhorng	[16:32:28] 喔~
2014-01-31 16:50:30	suhorng	[16:32:47] 遇到奇怪的 MonadIO 的話也不行XD
2014-01-31 16:50:30	CindyLinz	[16:33:09] 嗯, 有可能是 monad trans 提供者才能做..
2014-01-31 16:50:30	CindyLinz	[16:36:54] 咦.. 寫錯了..
2014-01-31 16:50:30	CindyLinz	[16:37:09] 假設我想要跑的一個 act :: CString -> XxxT m a 那我就可以用 liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-31 16:50:30	CindyLinz	[16:37:12] 這樣才對
2014-01-31 16:50:30	CindyLinz	[17:05:00] 突然覺得自己現在竟然能很順地寫出這種東西很不可思議.. # liftIO $ withCString str $ \cstr -> unXxxT (act cstr) xxState
2014-01-31 16:50:30	CindyLinz	[17:05:13] 以前讀別人的 code 寫這東西超崩潰的...ww
2014-01-31 16:50:30	kanru	[17:06:43] XDD
2014-01-31 16:50:30	suhorng	[18:02:30] 嗯... try :: Exception e => IO a -> IO (Either e a)  這類函式是不是真的沒辦法變成 MonadIO m => m a -> m (Either e a) ...？
2014-01-31 16:50:30	suhorng	[18:06:48] 好像真的無可避免
2014-01-31 16:50:30	CindyLinz	[18:10:12] 好像應該要舉一個反例出來證明變不出來...
2014-01-31 16:50:30	suhorng	[18:10:30] 我好像笨了
2014-01-31 16:50:30	suhorng	[18:10:35] 好像可以
2014-01-31 16:50:30	suhorng	[18:11:32] ..不對 不可以那樣做 XDDDD 可以弄出 type correct 但是沒有 try 效果的 Exception e => m a -> m (Either e a)
2014-01-31 16:50:30	CindyLinz	[18:12:30] tryM :: MonadIO m => m a -> m (Either e a)    tryM = tryM ? (誤)
2014-01-31 16:50:30	suhorng	[18:14:19] \ma -> do { a <- ma; liftIO (try (return a)) }，我剛剛竟然在想這個，真是太呆了
2014-01-31 16:50:30	CindyLinz	[18:15:52] 那個 try 就是這個 tryM 哄? XD
2014-01-31 16:50:30	CindyLinz	[18:16:05] 那的確就是 tryM = tryM... XD
2014-01-31 16:50:30	suhorng	[18:17:19] 不是吧Q_Q 這個是 tryM = liftM Right
2014-01-31 16:50:30	CindyLinz	[18:18:25] 喔喔.. 事情都在前面的 a <- ma 做完了 XD
2014-01-31 16:50:30	CindyLinz	[18:18:56] a <- ma 地方可以確認這個 ma 會 return
2014-01-31 16:50:30	CindyLinz	[23:22:57] 我想從 haskell pass 一個 list 給 C 函數跑迴圈.. 有沒有什麼辦法不要「複製」出東西的方法啊 @@"
2014-01-31 16:50:30	CindyLinz	[23:24:14] 只能一開始就選別的 container 像是 storable array 或 storable vector 嗎...
2014-01-31 16:50:30	hashcat_	[23:32:54] list 是有點複雜的結構  就算傳指標過去也不堪c直接用
2014-01-31 16:50:30	CindyLinz	[23:33:27] 只是好奇能不能 access ghc internal.. XD
2014-01-31 16:50:30	hashcat_	[23:34:29] 破壞haskell封裝
2014-01-31 16:50:30	CindyLinz	[23:38:50] 在 C 層次了誰管它什麼封裝啊.... ww
2014-01-31 16:50:30	CindyLinz	[23:39:15] 這邊是公海.. (咦)
2014-01-31 16:50:30	hashcat_	[23:43:38] 指標傳過去後我就沒輒
2014-01-31 16:50:30	hashcat_	[23:44:00] list沒有對應的ctype
2014-01-31 16:50:30	CindyLinz	[12:52:02] XDite 牆上又出現一批 rails upgrade 髒話文了... XD
2014-01-31 16:50:30	godfat1	[13:16:55] rails 3 的 assets 我也覺得是爛賬... 立意不錯，實作是大便
2014-01-31 16:50:30	CindyLinz	[13:21:45] 但他罵的應該是 3 -> 4 不相容..
2014-01-31 16:50:30	godfat	[13:22:03] 我是看這篇 http://blog.xdite.net/posts/2014/01/29/rails4-asset-mess
2014-01-31 16:50:30	godfat	[13:22:39] 不相容的話 2 -> 3 差更多 XD
2014-01-31 16:50:30	CindyLinz	[13:22:40] 所以是從爛帳3, 改成爛帳4嗎.....ww
2014-01-31 16:50:30	godfat	[13:22:51] 我是這樣覺得啦...
2014-01-31 16:50:30	godfat	[13:23:30] 我有一度真的很想關掉 assets
2014-01-31 16:50:30	godfat	[13:23:31] 不過他確實是有好處，所以一直容忍到現在...
2014-01-31 16:50:30	CindyLinz	[13:23:56] 這種最可怕了..?
2014-01-31 16:50:30	godfat	[13:24:15] 也許，擺脫不掉 XD
2014-01-31 16:50:30	CindyLinz	[13:26:19] XDite 的解法.... XD
2014-01-31 16:50:30	godfat	[13:30:30] 我最不滿意的地方是速度實在太慢了，動不動就要好幾分鐘...
2014-01-31 16:50:30	godfat	[13:30:30] 有些東西根本永遠不會去動，每次 deploy 還要好幾分鐘
2014-01-31 16:50:30	godfat	[13:30:30] 這不對呀...
2014-01-31 16:50:30	godfat	[13:31:02] 一不小心還會 crash production 也不對，應該不顯示圖片就好了，噴 exception 有點莫名
2014-01-31 16:50:30	CindyLinz	[13:33:19] 用 C 寫 extension 的風氣盛不盛啊?
2014-01-31 16:50:30	CindyLinz	[13:33:55] 不過 ruby / rails 改版劇烈, 可能用 C 寫每版都要重來.. @@"
2014-01-31 16:50:30	godfat	[13:33:57] 應該不，不過我覺得是他們寫不好，還不見得需要到 c
2014-01-31 16:50:30	CindyLinz	[13:34:18] 嗯, 不過偶爾看 XDite 的抱怨文, 覺得就算用 ruby 寫也是每版重來 orz
2014-01-31 16:50:30	CindyLinz	[13:34:29] 喔
2014-01-31 16:50:30	godfat	[13:34:37] ruby 其實一直沒啥改啦，我 07 年寫的東西現在也會動，最多改一點點而已
2014-01-31 16:50:30	godfat	[13:34:57] rails 就等著一直改...
2014-01-31 16:50:30	godfat	[13:36:36] 我之前用 fiber 也很好笑，assets 動不動就 stack overflow...
2014-01-31 16:50:30	godfat	[13:36:36] 我原本一直以為是哪裡有遞迴，後來才發現是 assets 那邊的 callstack 太大，是真的用到完
2014-01-31 16:50:30	godfat	[13:36:36] 扯
2014-01-31 16:50:30	CindyLinz	[13:37:36] 好酷喔 XD
2014-01-31 16:50:30	godfat	[13:38:33] 所以我覺得他們程式一定寫得很噁心
2014-01-31 16:50:30	godfat	[13:38:33] 我曾經有花時間看過，一時三刻看不懂，後來就沒看了
2014-01-31 16:50:30	CindyLinz	[13:38:34] 可能每一層的區域變數也太多?
2014-01-31 16:50:30	godfat	[13:38:49] 這我就不確定了
2014-01-31 16:50:30	CindyLinz	[13:39:12] 2000 年的時候用 C, 每一層一個 int (參數) 可以 26萬層..
2014-01-31 16:50:30	CindyLinz	[13:39:43] 那時試一個 int 是因為我可以在 heap 裡面開一個大陣列, 然後這個參數就是大陣列裡的 index
2014-01-31 16:50:30	CindyLinz	[13:40:12] 把所有原本要放在區域變數的東西都寄存到那個大陣列裡, 每遞迴一層就用一格 :p
2014-01-31 16:50:30	petercommand	[13:40:27] godfat: 把stack改大一點?
2014-01-31 16:50:30	CindyLinz	[13:40:46] 不過 perl 的 stack 是另外開在 heap 裡自己模擬的, 我猜 ruby 也是..
2014-01-31 16:50:30	petercommand	[13:41:13] XD
2014-01-31 16:50:30	godfat	[13:42:19] fiber stack 是 compile time 決定的，沒辦法改
2014-01-31 16:50:30	godfat	[13:42:19] ruby 的 stack 倒是是用 c 的 stack
2014-01-31 16:50:30	godfat	[13:42:19] fiber stack 我倒是不確定是不是用 c 的 stack, 大概不是？
2014-01-31 16:50:30	petercommand	[13:43:00] recompile吧....
2014-01-31 16:50:30	godfat	[13:43:28] 用 heroku 的話不能自己 compile
2014-01-31 16:50:30	CindyLinz	[13:44:01] 哇, 直接用 C 的 stack 耶... @@"
2014-01-31 16:50:30	CindyLinz	[13:44:40] 只能寫 app.... ^^|
2014-01-31 16:50:30	godfat	[13:45:39] 我不知道用 c 的 stack 有什麼壞處嗎？ XD
2014-01-31 16:50:30	godfat	[13:45:40] 彈性不好？
2014-01-31 16:50:30	godfat	[13:46:21] 不過我還真沒想過區域變數可以多到會炸掉 stack... (除非需要陣列)
2014-01-31 16:50:30	petercommand	[13:46:56] 太強大了...
2014-01-31 16:50:30	CindyLinz	[13:49:47] 惡搞的時候多一層顧忌嘍
2014-01-31 16:50:30	CindyLinz	[13:50:30] 例如說...  a 函數裡面呼叫 b 函數
2014-01-31 16:50:30	CindyLinz	[13:50:52] 然後想在 b 函數裡面幫 a 函數多宣告一個區域變數, 待 b return 以後 a 的後半程式碼可以用到?
2014-01-31 16:50:30	CindyLinz	[13:52:53] 除了這個以外, 因為 C runtime (對, 我最近才知道 C 也有 runtime....ww) 自己也會依各自的實作去隨便使用 system stack
2014-01-31 16:50:30	CindyLinz	[13:53:45] ruby 函數的 call frame 之間會被 C 塞多少額外的東西不知道.. @@"
2014-01-31 16:50:30	CindyLinz	[13:54:59] 因為 a 函數裡面, 在呼叫 b 函數之前, 除了 ruby 會去 system stack 使用區域變數的空間 (這個應該會在 ruby spec 裡面定義清楚), C 要跑(模擬) ruby runtime 的時候也會用一些, 但我想這個大概很難定義清楚了
2014-01-31 16:50:30	godfat	[13:55:23] 如果用 c extension 的話，說不定可以吧..... XD
2014-01-31 16:50:30	CindyLinz	[13:57:33] 但是不知道 C 會怎麼去用 system stack, 寫 extension 的人就不敢去動啊 ._.
2014-01-31 16:50:30	CindyLinz	[13:57:57] 到時候寫出來的 extension 要綁定 gcc, 而且規定要用某一個版本很慘吧 XD
2014-01-31 16:50:30	CindyLinz	[13:59:24] b 幫 a 加 local variable 的時候, 要把 a 的 call frame 變大, 所以要把 stack 上面整個 b 的 callframe 往後移, 也要把暫存器裡面正拿來當作 stack offset 的作對應地往後加
2014-01-31 16:50:30	godfat	[13:59:42] 我不知道耶，這跟 crt 會有關喔？我以為只要看好 ruby 怎麼用 c 即可
2014-01-31 16:50:30	CindyLinz	[13:59:46] 可是不知道哪些暫存器被拿來當 stack offset, 哪些是一般的值, 也不知道有沒有哪些是被存到 heap 裡面...
2014-01-31 16:50:30	CindyLinz	[14:00:01] 也許有人 allocate 了一塊小記憶體來存 stack offset..
2014-01-31 16:50:30	godfat	[14:00:23] 原來這麼麻煩... 那算了 XD
2014-01-31 16:50:30	CindyLinz	[14:00:33] { int x; ... { int x; ... } b(); }
2014-01-31 16:50:30	CindyLinz	[14:00:45] 我不知道呼叫 b 的時候第二個 int x 所佔的空間會不會放掉
2014-01-31 16:50:30	petercommand	[14:04:30] 已經出去第2個x定義的函數的話，應該會?
2014-01-31 16:50:30	CindyLinz	[14:04:42] 是不能用, 但不一定有放掉啊
2014-01-31 16:50:30	CindyLinz	[14:04:54] 或是...
2014-01-31 16:50:30	CindyLinz	[14:05:20] { int x = b(), y = 2; } 在呼叫 b 的時候, y 的空間有沒有已經先空出來了?
2014-01-31 16:50:30	petercommand	[14:05:23] 不是放stack嗎?
2014-01-31 16:50:30	godfat	[14:05:35] 可能跟最佳化有關？我想 c 可能沒定義有沒有放掉？
2014-01-31 16:50:30	godfat	[14:05:35] 倒是 c++ 因為 destrutor 可能會放掉？
2014-01-31 16:50:30	CindyLinz	[14:05:51] 是 stack 沒錯呀, 但就不知道 sp 有沒有即時在 } 的時候就往回減
2014-01-31 16:50:30	CindyLinz	[14:06:11] destructor 應該只是會呼叫...
2014-01-31 16:50:30	CindyLinz	[14:07:46] destructor 裡面的 free 或 delete 會執行.. 不過 obj 本身就不是 destructor 能控制的了
2014-01-31 16:50:30	CindyLinz	[14:08:44] 嗯, 因為及時往回減可能有時也蠻浪費的...
2014-01-31 16:50:30	petercommand	[14:09:51] 沒放掉的話不就不能用ret了嗎....
2014-01-31 16:50:30	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-01-31 16:50:30	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-01-31 16:50:30	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-01-31 16:50:30	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-01-31 16:50:30	godfat	[14:10:01] 惡整 XD
2014-01-31 16:50:30	CindyLinz	[14:10:31] petercommand: 函數 return 的時候當然會放啦, 只是一組 block 結束的時候還沒有 return 呀 @@"
2014-01-31 16:50:30	CindyLinz	[14:10:47] 這啥? @@"
2014-01-31 16:50:30	CindyLinz	[14:11:01] 我以為你想要 printf("%p\n", (void*)&x); ?
2014-01-31 16:50:30	CindyLinz	[14:12:30] 我用 gcc 4.8.1, 剛這個連 4 段 x block 的, 印出來的 address 都一樣
2014-01-31 16:50:30	godfat	[14:12:48] 想說如果要改變 stack 大小的話，這樣會很痛 XD
2014-01-31 16:50:30	godfat	[14:12:48] @@" 不過也可能是重複利用 address?
2014-01-31 16:50:30	CindyLinz	[14:13:05] stack 改大小不太痛啦, 就 sub sp, (一個數字)
2014-01-31 16:50:30	CindyLinz	[14:13:26] 可是如果可以把連 5 個 sub sp, 合到最後一起只放一個 sub sp, 也可能有賺呀 :p
2014-01-31 16:50:30	CindyLinz	[14:16:01] 我沒開 -O 之類的時候是一樣, 開 -O2 就不一樣了
2014-01-31 16:50:30	godfat	[14:16:13] 喔喔
2014-01-31 16:50:30	CindyLinz	[14:16:15] 看 addr 剛好都是差 4
2014-01-31 16:50:30	petercommand	[14:17:12] http://codepad.org/5xhF20qc
2014-01-31 16:50:30	CindyLinz	[14:20:08] petercommand: favonia 有份... 嗯, 列出一堆 C spec 未定義行為的文件, 裡面說要用 %p 印 addr 的時候, 一定要先轉成 (void*) 不然它可能會發射核彈.. XD
2014-01-31 16:50:30	petercommand	[14:20:17] XDD
2014-01-31 16:50:30	CindyLinz	[14:20:34] 嗯你這個結果出來是有提早放的版本
2014-01-31 16:50:30	CindyLinz	[14:21:13] 我開 -O2 也是有提早放
2014-01-31 16:50:30	CindyLinz	[14:22:00] 欸不對啊...
2014-01-31 16:50:30	CindyLinz	[14:22:12] 你這第三個 printf 是印第一個變數, 當然不能變啊 ^^|
2014-01-31 16:50:30	petercommand	[14:26:01] 嗯....
2014-01-31 16:50:30	petercommand	[14:38:47] http://codepad.org/4X3XttmD
2014-01-31 16:50:30	petercommand	[14:38:55] 這樣不知道對不對...
2014-01-31 16:50:30	petercommand	[14:43:25] 怪怪的orz...
2014-01-31 16:50:30	CindyLinz	[14:48:32] __asm__!
2014-01-31 16:50:30	CindyLinz	[14:49:08] 也是有可能它兩個 int i 是一進 main() 的時候就一起 allocate 好了呀
2014-01-31 16:50:30	petercommand	[15:57:22] 應該是兩個一起allocate....
2014-01-31 16:50:30	petercommand	[16:00:43] 只sub了一次sp
2014-01-31 16:50:30	CindyLinz	[16:24:56] (Y)
2014-01-31 16:50:30	letoh	[19:07:59] 為什麼會出現 asm 的討論XD
2014-01-31 16:50:30	hashcat	[21:24:52] http://www.gnu.org/software/epsilon/
2014-01-31 16:50:30	hashcat	[21:25:12] 有動態型別的純函數式
2014-01-31 16:50:30	hashcat	[21:27:04] gnu好多東西
2014-01-31 16:50:30	hashcat	[21:27:12] http://directory.fsf.org/wiki/GNU
2014-01-31 16:50:30	monochrom	[00:39:07] 世上還有 http://en.wikipedia.org/wiki/X86_calling_conventions , 大家有個約定俗成. 因此, 想狎玩 stack 的話, 還是有根有據的. :)
2014-01-31 16:50:30	letoh	[00:44:50] x86 calling convention 也有好幾種啊XD  cdecl 跟 fastcall 就不同
2014-01-31 16:50:30	petercommand	[10:24:53] 不過function裏面就不一定會free掉用不到的local variable了.....stack快炸了不知道會不會free掉用不到的
2014-01-31 16:50:30	CindyLinz	[14:25:42] petercommand: 應該不會
2014-01-31 16:50:30	CindyLinz	[14:25:58] petercommand: runtime 還去加這種 check, 比直接 free 掉還辛苦 ^^|
2014-01-31 16:50:30	CindyLinz	[14:26:17] 所以如果考慮這個問題的話, 應該是加上會立即 free 掉的程式 :p
2014-01-31 16:50:30	petercommand	[14:41:07] :p
2014-01-31 16:50:30	CindyLinz	[14:47:01] 嗯, 判斷加下去至少要一條 cmp 和一條 ja, 就兩條了, 無論結果如何這兩條都要執行到... free 掉才一條 sub, 要減的量是 compile time 就決定的 @@"
2014-01-31 16:50:30	letoh	[14:54:02] 所以都不要檢查  找幾個關鍵地方直接把 sp pop 回來還原  連 sub 都可以省掉?
2014-01-31 16:50:30	CindyLinz	[14:58:35] sp pop 回來就是 sub 的意思啦 :p  只是一個 sub 可以帶一個數字當成連續 pop
2014-01-31 16:50:30	CindyLinz	[14:59:06] 因為那種情況下, 不需要把 stack 裡丟掉的資料拿出來了
2014-01-31 16:50:30	CindyLinz	[15:00:10] 只是現代 CPU 的實作好噁心... 可能 sub sp, 3 和 sub ax, 3 的速度還不一樣.... *_*
2014-01-31 16:50:30	CindyLinz	[00:40:24] 唔.. 發現 Codeforces 的 Haskell 更新到 GHC 7.6 了
2014-01-31 16:50:30	CindyLinz	[01:12:26] 偷閒來玩幾題簡單題好了 :p
2014-01-31 16:50:30	CindyLinz	[16:13:40] 奇怪... haskell standard lib 裡面是不是沒有對 MArray 的排序啊? @@"
2014-01-31 16:50:30	CindyLinz	[16:45:36] @src sort
2014-01-31 16:50:30	lambdabot	[16:45:36] sort = sortBy compare
2014-01-31 16:50:30	CindyLinz	[16:45:40] @src sortBy
2014-01-31 16:50:30	lambdabot	[16:45:40] sortBy cmp = foldr (insertBy cmp) []
2014-01-31 16:50:30	CindyLinz	[16:45:52] @src insertBy
2014-01-31 16:50:30	lambdabot	[16:45:53] insertBy _   x [] = [x]
2014-01-31 16:50:30	lambdabot	[16:45:53] insertBy cmp x ys@(y:ys') = case cmp x y of
2014-01-31 16:50:30	lambdabot	[16:45:53]                                  GT -> y : insertBy cmp x ys'
2014-01-31 16:50:30	lambdabot	[16:45:53]                                  _  -> x : ys
2014-01-31 16:50:30	***	Playback Complete.
2014-01-31 16:50:48	--	モード #haskell.tw [+cnt]
2014-01-31 16:50:48	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-01-31 16:53:24	CindyLinz	怎麼長得不像 qsort @_@"
2014-01-31 16:54:41	CindyLinz	被欺騙的感覺..... Q__Q
2014-01-31 17:03:57	CindyLinz	和 base 4.6.0.1 的 sort 的 source 不一樣 @@"
2014-01-31 17:04:09	CindyLinz	base 4.6.0.1 的 sort 是 merge sort
2014-01-31 17:45:02	CindyLinz	@version
2014-01-31 17:45:03	lambdabot	lambdabot 5.0-int-e
2014-01-31 17:45:03	lambdabot	git clone git://github.com/int-e/lambdabot.git
2014-01-31 17:45:44	-->	town77 (~1@61.148.244.17) が #haskell.tw に参加
2014-01-31 17:46:02	CindyLinz	> length (sort [1..100000])
2014-01-31 17:46:03	lambdabot	 100000
2014-01-31 17:46:07	CindyLinz	> length (sort [1..1000000])
2014-01-31 17:46:09	lambdabot	 1000000
2014-01-31 17:46:20	CindyLinz	這速度... @_@"
2014-01-31 17:46:53	<--	town77 (~1@61.148.244.17) が終了 (Client Quit)
2014-01-31 17:47:01	CindyLinz	> sum (sort [1..1000000])
2014-01-31 17:47:02	lambdabot	 *Exception: stack overflow
2014-01-31 17:47:09	CindyLinz	> sum (sort [1..100000])
2014-01-31 17:47:10	lambdabot	 5000050000
2014-01-31 17:47:35	CindyLinz	> sum (sort $ reverse [1..100000])
2014-01-31 17:47:36	lambdabot	 5000050000
2014-01-31 18:15:19	-->	b4283 (~b4283@36-238-132-225.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-01-31 18:46:14	-->	suhorng (~suhorng@118-166-58-80.dynamic.hinet.net) が #haskell.tw に参加
2014-01-31 19:30:55	<--	suhorng (~suhorng@118-166-58-80.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-01-31 21:17:08	CindyLinz	覺得.. 如果有人把 Yesod 弄熟了, 到 Functional Thursday 或是 Coscup / OSDC 介紹, 殺傷力應該蠻強的.. ._.
2014-01-31 21:17:59	CindyLinz	Snap 比較零碎, 所以我猜這個整體介紹比較不好做, 講起來的炫度也會差一點
2014-01-31 21:44:46	-->	hashcat (~kv2a@118-171-194-44.dynamic.hinet.net) が #haskell.tw に参加
2014-01-31 22:52:15	mno2	CindyLinz: 你心中想的殺傷力是指快速做 blog ?
2014-01-31 22:58:35	CindyLinz	mno2: 殺傷力是讓聽眾覺得炫, 覺得有興趣.....   快速做 blog 可以是個方法, 不過我沒有想到 ^^|
2014-01-31 23:00:06	mno2	yesod 真的比較完整，但就覺得有點醜..
2014-01-31 23:00:51	CindyLinz	醜嗎? 我只是覺得它整合得太緊密, 比較不合我味口..
2014-01-31 23:03:11	CindyLinz	是因為用了 Quasiquotion 和 template haskell 所以覺得醜嗎?
2014-01-31 23:03:27	mno2	對啊，萬一寫錯了不知道怎麼 debug ..
2014-01-31 23:04:07	CindyLinz	啊不就瀏覽器開起來看就好了嗎? XD
2014-01-31 23:04:21	mno2	是 compile 不過吧
2014-01-31 23:04:29	CindyLinz	喔喔 ^^|
2014-01-31 23:04:51	CindyLinz	compile 不過不就把部分東西拿掉, binary search 哪一條有問題嗎? ^^
2014-01-31 23:06:05	mno2	但問題是就算知道哪一條有問題，也要有足夠的知識看出來要怎麼修吧
2014-01-31 23:11:32	CindyLinz	沒去用, 還沒辦法體會 ^^|
2014-01-31 23:38:43	-->	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が #haskell.tw に参加
2014-02-01 00:54:29	<--	b4283 (~b4283@36-238-132-225.dynamic-ip.hinet.net) が終了 (Ping timeout: 240 seconds)
2014-02-01 00:55:33	<--	hashcat_ (~hashcat_@106.65.226.199) が終了 (Ping timeout: 248 seconds)
2014-02-01 02:54:06	<--	monochrom (trebla@216.138.220.146) が終了 (Quit: NO CARRIER)
2014-02-01 03:28:37	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-01 04:04:42	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-01 04:04:51	<--	godfat (~Adium@1-161-49-183.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-01 04:10:17	<--	hashcat (~kv2a@118-171-194-44.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-01 04:28:26	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:28:27	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 04:28:40	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:28:41	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 04:29:00	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:29:01	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 04:29:24	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:29:25	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 04:34:24	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:34:25	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 04:34:43	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:34:45	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 04:35:27	-->	hashcat_ (~hashcat_@39.14.90.194) が #haskell.tw に参加
2014-02-01 04:35:28	<--	hashcat_ (~hashcat_@39.14.90.194) が終了 (Excess Flood)
2014-02-01 05:22:15	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 265 seconds)
2014-02-01 11:13:03	-->	liuzhoou (~liuzhoou@58.38.245.102) が #haskell.tw に参加
2014-02-01 12:24:32	CindyLinz	隔壁 channel 看來的 :p
2014-02-01 12:24:38	CindyLinz	12:09 < jmcarthur> Level 1: Use type classes like you would use object-oriented classes. Level 2: Use type classes like you would use Java interfaces. Level  3: Use type classes like they were intended. Level 4: Use type classes in ways the designers did not foresee.
2014-02-01 12:24:49	CindyLinz	12:09 < carter> level 5: you are now oleg
2014-02-01 12:25:01	CindyLinz	12:10 < bristlesquirrel> level 6: prove turing completeness in typeclasses
2014-02-01 12:25:10	CindyLinz	12:11 < heatsink> level 7: Add type class extensions to GHC
2014-02-01 12:26:03	CindyLinz	you are now oleg.....ww
2014-02-01 12:26:11	CindyLinz	7 好像比 5 和 6 簡單 XD
2014-02-01 13:47:32	-->	town77 (~1@114.242.250.56) が #haskell.tw に参加
2014-02-01 13:50:30	-->	b4283 (~b4283@218-164-126-212.dynamic.hinet.net) が #haskell.tw に参加
2014-02-01 14:00:24	<--	town77 (~1@114.242.250.56) が終了 (Read error: Connection reset by peer)
2014-02-01 15:31:21	--	godfat1 のニックネームが変更され godfat になりました
2014-02-01 15:31:53	godfat	把 7 移到 5, 然後 5, 6 往下好了 XDDDD
2014-02-01 16:05:55	<--	liuzhoou (~liuzhoou@58.38.245.102) が終了 (Quit: Leaving...)
2014-02-01 17:34:03	CindyLinz	XD
2014-02-01 18:25:21	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Read error: Connection reset by peer)
2014-02-01 18:25:56	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-01 18:39:38	-->	hashcat_ (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-01 20:31:50	godfat	不過說實在我不知道要怎麼把 typeclass 當 oo 的 class 用...
2014-02-01 20:35:01	CindyLinz	class A a => B a where ... 就當繼承用啊 :p
2014-02-01 20:36:14	godfat	唔，概念差好多，有點難想像... @@
2014-02-01 20:36:40	CindyLinz	然後每一個 class 最多只有一個「直接的」 instance
2014-02-01 20:37:48	CindyLinz	instance B SomeB where ... 然後 SomeB 這個 type 就會有 A 和 B 的所有 method
2014-02-01 20:38:04	godfat	這樣做似乎沒啥意義，function 直接寫死型別就好了... XD
2014-02-01 20:38:26	CindyLinz	直接寫死的話, 就不能在 super class 的地方作多型了啊
2014-02-01 20:39:14	godfat	不是反正只有一種 instance?
2014-02-01 20:39:29	CindyLinz	我是強調「直接的」只有一種, 間接的可能很多 ^^|
2014-02-01 20:39:40	CindyLinz	像是這邊 SomeB 就是 class A 的一個間接的 instance
2014-02-01 20:39:55	godfat	喔好吧... XD
2014-02-01 20:40:32	CindyLinz	可能另外有 class A a => C a where ... 和 instance A a => C SomeC where ...   就可以用 A a => 的函數來服務 SomeB 和 SomeC 了, 有沒有很像! (配合一下 :p)
2014-02-01 20:41:17	godfat	umm, interesting... XD
2014-02-01 20:41:51	CindyLinz	然後... 我好奇去查 oleg 的資料.. 好像全名是 Oleg Kiselyov?
2014-02-01 20:42:32	CindyLinz	然後... wikipedia 說他是俄羅斯手球國家代表隊球員??? https://en.wikipedia.org/wiki/Oleg_Kiselyov
2014-02-01 20:43:31	CindyLinz	其實只是好奇他多大歲數 :p
2014-02-01 20:43:33	godfat	我之前也查過很多次，發現同名的人應該很多
2014-02-01 20:43:45	CindyLinz	好吧 orz
2014-02-01 20:43:56	letoh	意思是這是俄羅斯的菜市場名嗎?
2014-02-01 20:43:58	CindyLinz	大隱隱於市的名字啊.... orz
2014-02-01 20:44:02	godfat	我記得好像是 50 ~ 70? 這範圍會不會太大？ XD
2014-02-01 20:44:27	CindyLinz	會, 而且比 wiki 寫的這個還大.... 我原以為他跟我們同輩的 @@"
2014-02-01 20:44:49	godfat	不知道是不是菜市場名，只知道不好查（也許名人都用這名字 XD
2014-02-01 20:45:12	CindyLinz	還是他從小祟拜這個球員, 所以故意 ID 取跟他一樣? XD
2014-02-01 20:45:24	godfat	我的印象算是長輩了（至少白髮不少，沒記錯的話
2014-02-01 20:45:48	CindyLinz	我 google image 也不知道要怎樣確認哪一個是他 ^^|
2014-02-01 20:46:02	CindyLinz	等等, 俄羅斯人年輕的時候也是白髮啊 XD
2014-02-01 20:46:15	godfat	他上次來 floac 我有見過，我看照片？ XD
2014-02-01 20:46:20	CindyLinz	!
2014-02-01 20:47:07	godfat	http://nasslli2012.com/images/250/oleg-kiselyov.jpg
2014-02-01 20:47:39	CindyLinz	唔, 是金髮.. 或是色差 XD
2014-02-01 20:48:16	godfat	金髮或白髮... XD
2014-02-01 20:49:03	CindyLinz	俄羅斯人, 然後做美國海軍的外包工作噢..... 嘖嘖 XD
2014-02-01 20:50:10	godfat	@@ 是喔？難怪比較低調？（有嗎？ XD 不過資料真的難查
2014-02-01 20:50:10	lambdabot	 是喔？難怪比較低調？（有嗎？ XD 不過資料真的難查
2014-02-01 20:50:18	CindyLinz	lol
2014-02-01 20:50:28	godfat	...又來了 XD
2014-02-01 20:51:25	CindyLinz	聽老師說是作軍艦上的天氣預測程式
2014-02-01 20:52:14	godfat	蘇聯的天氣控制裝置要來了
2014-02-01 20:53:23	CindyLinz	難怪今年北美這麼冷.... (牽拖)
2014-02-01 22:59:05	hashcat_	godfat typeclass比較像interface
2014-02-01 22:59:17	CindyLinz	那是 Level 2.. XD
2014-02-01 22:59:52	hashcat_	haskell裡type就是class
2014-02-01 23:03:53	hashcat_	function第一個參數接受一個type的實例就可以該class的method了
2014-02-01 23:06:54	hashcat_	data -> class, typeclass -> interface, function and its first arg data -> method anx its class
2014-02-01 23:36:45	-->	suhorng (~suhorng@118-166-58-80.dynamic.hinet.net) が #haskell.tw に参加
2014-02-01 23:37:12	suhorng	http://okmij.org/ftp/
2014-02-01 23:38:40	suhorng	Oleg http://hackage.haskell.org/package/HList http://hackage.haskell.org/package/iteratee
2014-02-02 00:13:31	<--	suhorng (~suhorng@118-166-58-80.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-02 00:20:49	monochrom	各位早已超越 level 1, 所以反而不明白 level 1 的人在想甚麼 :)
2014-02-02 00:22:09	hashcat_	有沒 level inf
2014-02-02 00:22:14	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Quit: leaving)
2014-02-02 00:22:42	hashcat_	朝level inf 前進
2014-02-02 01:39:01	<--	b4283 (~b4283@218-164-126-212.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-02 06:12:28	-->	mno2 (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-02 08:27:18	<--	mno2 (~mno2@67.151.22.2) が終了 (Quit: mno2)
2014-02-02 09:46:19	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-02 09:49:49	<--	miaout17 (~miaout17@miaout17.net) が終了 (Ping timeout: 272 seconds)
2014-02-02 09:51:47	-->	miaout17 (~miaout17@miaout17.net) が #haskell.tw に参加
2014-02-02 10:40:45	-->	mno2 (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-02 11:20:38	-->	b4283 (~b4283@118.150.148.244) が #haskell.tw に参加
2014-02-02 11:46:18	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Quit: Leaving...)
2014-02-02 12:34:23	-->	logfat______ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-02 12:47:02	<--	mno2 (~mno2@67.151.22.2) が終了 (Quit: mno2)
2014-02-02 13:09:21	<--	logfat_____ (~cinch@home.mno2.org) が終了 (Write error: Broken pipe)
2014-02-02 13:17:13	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-02 13:18:48	godfat	hashcat, 是啊，所以說我很難想像要怎麼當 oo 的 class, 雖然聽 CindyLinz 這樣說勉勉強強吧... XD
2014-02-02 16:03:58	-->	b4284 (~b4283@1-175-239-97.dynamic.hinet.net) が #haskell.tw に参加
2014-02-02 16:26:26	hashcat_	interface也滿像class的
2014-02-02 16:27:06	godfat	以 java 為例的話，因為 java 不能多重繼承，導致 interface 跟 class 差比較多
2014-02-02 16:31:41	hashcat_	這樣haskell可以多重繼承
2014-02-02 16:32:43	hashcat_	www.cs.indiana.edu/~eholk/papers/hips2013.pdf
2014-02-02 16:33:08	hashcat_	rust編譯成gpu ptx
2014-02-02 16:33:46	godfat	PTX 跟 cuda 有什麼關係嗎？ cuda 編成 ptx?
2014-02-02 16:34:44	godfat	ok, abstract 解釋了
2014-02-02 17:45:39	CindyLinz	我第一次接觸 OO 用的是 C++
2014-02-02 17:45:55	CindyLinz	所以學 Java 的時候覺得不能多重繼承真是限制好大 ^^|
2014-02-02 17:47:00	CindyLinz	我也是覺得 Haskell type class 比較像 interface... 但是如果完全不動用 type class 又模擬不出 Java 單線繼承的效果....
2014-02-02 17:47:40	CindyLinz	欸.. 其實是主角是 type class, 不然用 Typeable 一層一層套又是另一種模擬法....
2014-02-02 17:48:43	godfat	我後來覺得多重繼承其實也不是不對，而是 c++ 的作法怪怪的
2014-02-02 17:48:44	godfat	後來很多語言宣稱要解決多重繼承的問題，感覺只是換個名字而已
2014-02-02 17:49:46	CindyLinz	我現在還是覺得堅持單線繼承只是為了比較好實作.. 雖然 Java 派書都會一直洗腦說單線繼承才是對的.... = =
2014-02-02 17:50:20	godfat	忽然讓我想到王垠的權威文 XDDD
2014-02-02 17:50:28	CindyLinz	C++ 怎樣怪? 你是說 virtual 繼承嗎?
2014-02-02 17:50:34	CindyLinz	C++ 不是兩種都有嗎? XD
2014-02-02 17:50:44	godfat	是啊，還有各種 ambiguos 的狀況
2014-02-02 17:51:35	-->	no4 (~fasdf@113.93.186.28) が #haskell.tw に参加
2014-02-02 17:52:29	<--	no4 (~fasdf@113.93.186.28) が #haskell.tw から退出 ("离开")
2014-02-02 18:01:27	-->	hashcat (~kv2a@218-164-106-100.dynamic.hinet.net) が #haskell.tw に参加
2014-02-02 18:11:14	-->	town77 (~1@114.242.248.188) が #haskell.tw に参加
2014-02-02 18:18:55	CindyLinz	Haskell 的 tuple 只有定到 7 個 (印象中), 所以如果想要用很長很長很長的 tuple..
2014-02-02 18:19:28	godfat	就不如自己定個 record
2014-02-02 18:19:34	CindyLinz	不用 template haskell 的話, 應該就是 (1, (2, (3, (4, (5, (6, (7, (8, 9))))))))
2014-02-02 18:19:46	CindyLinz	不行, 長度不固定 XD
2014-02-02 18:20:01	godfat	tuple 長度不是固定的？
2014-02-02 18:20:11	CindyLinz	但這種寫法後面會有一堆 ))))) (想到 ruby ennnnnnnnnnnnd 的故事 :p)
2014-02-02 18:20:51	CindyLinz	我想的是像 printf 這種應用, compile 完是固定的長度, 但在設計 printf 的時候其實是不固定的
2014-02-02 18:21:20	CindyLinz	所以想, 可能用 operator 的 data constructor, 就可以接出很長很長的 tuple, 而又不用前後的括號了 :p
2014-02-02 18:21:37	CindyLinz	1 ::: 2 ::: 3 ::: 4 ::: 5 ::: 6 ::: 7 ::: 8 ::: 9
2014-02-02 18:21:43	godfat	(憶起大玩 c++ template 的過去...)
2014-02-02 18:22:29	CindyLinz	>>>>>>> 嗎? @@"
2014-02-02 18:22:39	godfat	c++ 的 _1 與 _2 等等是真的滿好用的...
2014-02-02 18:23:09	godfat	XD 不只是那個，像是自己串 tuple, 另外用 function 包裝，一層包一層只為了 type safe 又用起來方便
2014-02-02 18:23:15	CindyLinz	沒有用過 _1 和 _2 @@"
2014-02-02 18:23:46	godfat	例如 (_1 + 1)(2) 就是 3
2014-02-02 18:23:47	godfat	自動產生 anonymous function
2014-02-02 18:23:55	godfat	(_1 + _2) 就是 (+)
2014-02-02 18:24:19	CindyLinz	有這種東西 @@"
2014-02-02 18:25:00	CindyLinz	_1, _2 這些就像是 shell script 裡面的 %1 %2 %3?
2014-02-02 18:36:31	-->	petercom1and (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-02 18:38:12	godfat	我不太熟 shell, 不過重點是自動產生 function
2014-02-02 18:38:13	godfat	比方說 map(list.begin(), list.end(), _1 + 1) 寫起來就很快
2014-02-02 18:38:13	godfat	這當然也跟缺少 anonymous function 有關，
2014-02-02 18:38:13	godfat	但是另一個重點就是有 _2, _3 可以用 (不確定有沒有到 _4)
2014-02-02 18:39:03	godfat	在 haskell 裡要做類似的事，可能要 flip 來 flip 去
2014-02-02 18:39:03	godfat	比方說 _3 + _1 + _2 之類的
2014-02-02 18:40:38	CindyLinz	正常人會寫 \_1 _2 _3 -> _3 + _1 + _2 吧? 誰跟你 pointless... XD
2014-02-02 18:40:54	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (*.net *.split)
2014-02-02 18:41:00	godfat	XD 也是長一倍就是了
2014-02-02 18:41:17	CindyLinz	(看看 suhorng..)
2014-02-02 18:41:53	CindyLinz	@pl \_1 _2 _3 -> _3 + _1 + _2
2014-02-02 18:41:53	lambdabot	(line 1, column 14):
2014-02-02 18:41:53	lambdabot	unexpected "_"
2014-02-02 18:41:53	lambdabot	expecting lambda abstraction or expression
2014-02-02 18:42:03	CindyLinz	orz
2014-02-02 18:42:14	godfat	咦？名稱不合法嗎？
2014-02-02 18:42:16	CindyLinz	@pl \a1 a2 a3 -> a3 + a1 + a2
2014-02-02 18:42:16	lambdabot	flip . ((+) .) . (+)
2014-02-02 18:42:28	CindyLinz	可能不能底線開頭.. XD
2014-02-02 18:43:14	CindyLinz	誰說 perl 比較 unreadable 了... # flip . ((+) .) . (+)
2014-02-02 18:43:20	godfat	那個 _1, _2 可以參考這個
2014-02-02 18:43:21	godfat	http://www.boost.org/doc/libs/1_55_0/libs/bind/bind.html#Purpose
2014-02-02 18:43:21	godfat	不過我記得其他地方也有實作 _1, _2
2014-02-02 18:43:21	godfat	然後這有加入 TR1, 所以應該是 c++11 標準（如果這幾年沒有變化的話）
2014-02-02 18:43:41	CindyLinz	咦 原來是加入標準的東西歐..
2014-02-02 18:44:05	CindyLinz	@unpl flip . ((+) .) . (+)
2014-02-02 18:44:05	lambdabot	(\ g b c -> (g + c) + b)
2014-02-02 18:44:14	CindyLinz	這次復原得很好 XD
2014-02-02 18:44:44	letoh	_1 _2 有進 c++11
2014-02-02 18:45:15	 *	letoh 昨天才把 boost 更新到 1.55.0
2014-02-02 18:46:07	letoh	目前 boost 好像還沒用到 c++11 的語法來實作
2014-02-02 18:46:52	godfat	說真的這些真的做到很方便，type safe 也有
2014-02-02 18:46:53	godfat	不過底下需要花的力氣真的很大，稍微想想要怎麼做都覺得有一堆細節
2014-02-02 18:47:08	letoh	你是說自己實作嗎/
2014-02-02 18:47:11	letoh	你是說自己實作嗎?
2014-02-02 18:47:22	godfat	是啊，總要有人做？ XD
2014-02-02 18:47:31	godfat	compile error 也會噴到那幾行去
2014-02-02 18:47:51	letoh	進標準的話就是都準備好了  不過有錯的確是不太好除錯
2014-02-02 18:48:19	letoh	現在 g++ 噴出來的錯誤都好幾頁  每次都要把訊息存下來慢慢研究XD
2014-02-02 18:48:55	godfat	我以前還在玩時，常常要交叉閱讀
2014-02-02 18:48:56	godfat	就是每個 compiler 換一輪，所有錯誤訊息都看過，比較容易釐清問題
2014-02-02 18:49:04	CindyLinz	想到一個叫作 jeh.cpp 的檔案.....ww
2014-02-02 18:49:33	CindyLinz	檔案內容兩行..  line 1: #include ".//.//.//.//jeh.cpp"   line 2: #include "jeh.cpp"
2014-02-02 18:49:51	CindyLinz	用 g++ compile 看看, 很有趣 :p
2014-02-02 18:50:45	godfat	clang: error: unable to execute command: Segmentation fault: 11
2014-02-02 18:50:57	CindyLinz	怎麼變成 clang 了 XD
2014-02-02 18:51:00	godfat	我用 g++ 結果居然來 clang = =
2014-02-02 18:51:53	CindyLinz	godfat: 那你換一個 compiler, 釐清一下問題好了.. (誤)
2014-02-02 18:52:02	godfat	去 linux 上跑 g++, 被洗板
2014-02-02 18:52:14	godfat	好像不會停？
2014-02-02 18:52:22	godfat	那 clang 至少會 crash... XD
2014-02-02 18:52:23	CindyLinz	會停, 可是超長......
2014-02-02 18:52:49	CindyLinz	可能只是 clang 的某個 buffer 太小? XD
2014-02-02 18:52:55	godfat	說不定可以 dos judge? XD
2014-02-02 18:53:04	CindyLinz	...........
2014-02-02 18:53:47	CindyLinz	因為看到 letoh 說 現在 g++ 噴出來的錯誤都好幾頁 XD
2014-02-02 18:54:00	godfat	話說我有時候會把 ls 打成「峱」
2014-02-02 18:54:00	godfat	說不定可以仿 sl 做個公車頭或啥的... XD
2014-02-02 18:54:12	CindyLinz	XDD
2014-02-02 18:54:18	CindyLinz	我是有時候 XD 會打成 BH..
2014-02-02 18:54:39	godfat	有點距離耶... 我是會打成 CD
2014-02-02 18:54:58	CindyLinz	dvorak 的 XD 二鍵是 qwerty 的 BH 二鍵 @@"
2014-02-02 18:55:20	godfat	是喔 @@" 我上次看到有人說練 dvorak 只要一個月，值得嗎？
2014-02-02 18:55:35	CindyLinz	是不是只要一個月我不知道, 但我覺得值得 :p
2014-02-02 18:56:16	godfat	除了快很多有其他好處嗎？
2014-02-02 18:56:26	CindyLinz	手比較不累
2014-02-02 18:56:57	CindyLinz	然後打密碼萬一被看到了, 人家要真的照著打出來要過比較久
2014-02-02 18:57:07	CindyLinz	因為不知道是 dvorak
2014-02-02 18:57:19	<--	town77 (~1@114.242.248.188) が終了 (Read error: Connection reset by peer)
2014-02-02 18:57:27	godfat	XDDDDDDDD
2014-02-02 18:57:55	CindyLinz	電腦忘記鎖的時候別人要偷用你電腦的機會也比較小
2014-02-02 18:57:59	godfat	剛剛看了一下，mac 好像不能直接改 dvorak
2014-02-02 18:57:59	godfat	剛開始好像也應該用個有刻鍵盤練？
2014-02-02 18:58:43	CindyLinz	Ubuntu / Debian 是安裝的時候可以選.. 然後有 X 的話還可以用 xkbmap 來設
2014-02-02 18:58:44	b4284	dvorak 我也練過，一個月差不多
2014-02-02 18:59:06	CindyLinz	我還沒有用過印 dvorak 的鍵盤 @@"
2014-02-02 18:59:11	godfat	喔有了有了，在輸入法那邊可以改...
2014-02-02 18:59:21	b4284	練一個禮拜還不算太熟時就直接在上班時用 (偷練習)
2014-02-02 18:59:25	godfat	所以不用看喔？
2014-02-02 18:59:35	b4284	要看
2014-02-02 18:59:38	CindyLinz	然後有看過有人拿 qwerty 的桌機鍵盤硬拆改成 dvorak 的長相
2014-02-02 18:59:50	CindyLinz	整支鍵盤凹凸不平的... orz
2014-02-02 18:59:58	godfat	唔唔，我用無刻這樣改也沒啥意義
2014-02-02 19:00:24	b4284	keyboard 不用換，建議找一張可印的 A4 cheetsheet 印出來放在鍵盤下
2014-02-02 19:01:19	godfat	ok, 來玩玩看好了
2014-02-02 19:01:34	CindyLinz	(推)
2014-02-02 19:01:41	b4284	我會比較推薦 colemak
2014-02-02 19:01:53	CindyLinz	(鎖門)
2014-02-02 19:02:38	godfat	colemak? 沒聽過 @@
2014-02-02 19:02:57	b4284	dvorak 後來打順了還是很不習慣，後來就跳 colemak 了
2014-02-02 19:03:41	CindyLinz	它和 dvorak 相比, 特性是什麼啊?
2014-02-02 19:04:01	b4284	有一些鍵和 qwerty 相同
2014-02-02 19:04:09	b4284	zxcv 是一樣的
2014-02-02 19:05:12	b4284	有用到 Ctrl-C Ctrl-V 的應用程式比較順手
2014-02-02 19:05:57	CindyLinz	嗯嗯
2014-02-02 19:06:23	b4284	CUA binding
2014-02-02 19:07:25	b4284	有聽過 dvorak 打字是常會有兩手間交互的跳舞般的節奏，個人認為的確是這樣
2014-02-02 19:07:28	godfat	啊啊，我覺得我可能要放棄 dvorak, 確實碰上 ctrl+c 會有點痛苦
2014-02-02 19:07:38	b4284	因為母音都在左手
2014-02-02 19:07:50	CindyLinz	godfat: 其實只是改用右手按而已 ^^|
2014-02-02 19:08:01	CindyLinz	c 和 v 都在右邊
2014-02-02 19:08:15	b4284	而且 dvorak 打 "ls" 實在是不給力
2014-02-02 19:08:40	b4284	因為是小指，真的沒力氣 XD
2014-02-02 19:08:56	CindyLinz	嗯, 有人會用無名指來按 l
2014-02-02 19:09:10	CindyLinz	我自己是都還用小指...
2014-02-02 19:09:24	godfat	唔唔，可是如果我要搭配滑鼠的話，還是不方便 @@"
2014-02-02 19:09:25	CindyLinz	我有同事... 雖然不是用 dvorak, 但之前就設定 cd 後自動 ls.. XD
2014-02-02 19:09:35	b4284	XD
2014-02-02 19:10:01	CindyLinz	godfat: 下個決心一次練齊全吧, 我也改用左手用滑鼠了~~ :D
2014-02-02 19:10:39	b4284	godfat: 要改的話是很快，下定決心就可以了
2014-02-02 19:10:57	godfat	噗，左手滑鼠，果然是一路練到底... XD
2014-02-02 19:11:02	CindyLinz	來用左右相反的螢幕吧?
2014-02-02 19:11:15	b4284	當初我用 terminal 下 setxkbmap 改成 dvorak 差點改不回去
2014-02-02 19:11:22	godfat	正好我滑鼠都買左右對稱的，真要練搞不好真的可以
2014-02-02 19:11:27	CindyLinz	我有用了大約兩三個小時... 然後暫時放棄.. XD
2014-02-02 19:11:44	CindyLinz	會覺得中文字都是歪斜的... XD
2014-02-02 19:11:44	b4284	後來只好用另一台電腦印出 layout 再改回 qwerty
2014-02-02 19:12:15	CindyLinz	godfat 用 mac 是設定輸入法, 可能比較好?
2014-02-02 19:12:22	CindyLinz	應該是可以用滑鼠切換吧
2014-02-02 19:13:18	b4284	剛開始練，一分鐘只有 6 word，很有趣
2014-02-02 19:14:30	CindyLinz	嗯, 而且因為原本打字速度還算快, 所以看到或想到要打的字時, 很自然會預期自己打得那麼快
2014-02-02 19:14:35	CindyLinz	一整個力不從心....
2014-02-02 19:17:20	b4284	godfat: http://play.typeracer.com/ ;; XD
2014-02-02 19:18:09	godfat	倒是 mac 有個困擾，cmd +
2014-02-02 19:18:09	godfat	可惡啦，現在輸入法怪怪的，我調整一下... 一直不太讓我取消某些輸入法
2014-02-02 19:19:14	CindyLinz	很有 Win8 的 fu..... ww
2014-02-02 19:19:18	CindyLinz	被 guest 打敗了.. XD
2014-02-02 19:19:28	CindyLinz	不對 我也是 guest..
2014-02-02 19:20:19	b4284	剛剛那個 jeh.cpp 那個好可怕
2014-02-02 19:20:50	b4284	redirect 到硬碟上瞬間少了 2.6G
2014-02-02 19:22:16	godfat	我懷疑要重開機才有解... 他不讓我取消 dvorak 或 colemak, 一定要選一個，或是用另一個某些國家的語言的輸入法
2014-02-02 19:22:16	godfat	還好我沒 redirect...
2014-02-02 19:23:10	CindyLinz	orz
2014-02-02 19:23:26	b4284	現在用 pbzip2 -9c ... cpu 飆到 70 度了
2014-02-02 19:23:40	CindyLinz	沒必要吧... 沒什麼有價值的資訊啊.... 囧
2014-02-02 19:23:45	godfat	mac 上按 cmd+q 是關閉程式，cmd+w 是關閉視窗，很容易誤按又沒有任何提示
2014-02-02 19:23:45	godfat	看來 dvorak 是可以解決這個問題
2014-02-02 19:23:49	CindyLinz	螢幕上看一看笑一笑就可以了 XD
2014-02-02 19:23:54	CindyLinz	XDDD
2014-02-02 19:24:25	godfat	可以用滑鼠換，做成輸入法是不錯，隨時可以切換，只是我現在居然被他 bug 搞鬼 orz
2014-02-02 19:24:32	CindyLinz	想知道多長的話.. pipe 給 wc 好了?
2014-02-02 19:26:38	-->	b4285 (~b4283@1-175-238-126.dynamic.hinet.net) が #haskell.tw に参加
2014-02-02 19:26:50	b4285	當機了，哈哈
2014-02-02 19:26:54	CindyLinz	..........||
2014-02-02 19:27:35	CindyLinz	恭喜暱稱++
2014-02-02 19:28:05	<--	b4284 (~b4283@1-175-239-97.dynamic.hinet.net) が終了 (Ping timeout: 248 seconds)
2014-02-02 19:29:25	godfat	我打這麼慢錯誤這麼多居然還拿第一...
2014-02-02 19:31:24	godfat	果然這次最後一名... XD
2014-02-02 19:33:09	godfat	我發現我不太會拼的字都比較慢... 三次大約都是 56 wpm
2014-02-02 19:33:40	CindyLinz	我們需要比 programmer 常用字的比賽?
2014-02-02 19:33:55	CindyLinz	像是 while, for, struct, printf 都會比較快 XD
2014-02-02 19:34:28	godfat	XDDDD 那保證快很多....
2014-02-02 19:35:00	godfat	我不知道能不能號稱 60 wpm... orz
2014-02-02 19:35:51	b4285	AbstractConnectionFactoryBuilderFacet
2014-02-02 19:36:43	CindyLinz	嗚嗚我不寫 Java...
2014-02-02 19:37:06	CindyLinz	而且這種長度.... 應該會用自動補齊, 或是複製貼上.....ww
2014-02-02 19:40:28	godfat	放棄，在 55~57 wpm 間... 至少很穩定吧 orz
2014-02-02 19:40:51	CindyLinz	godfat: 用 dvorak / colemak 打一次試試?
2014-02-02 19:41:04	godfat	XDDDD 一定會打到無地自容
2014-02-02 19:41:52	godfat	先把 layout 放在 tab 上，哪天再來練練看 @@
2014-02-02 19:42:39	CindyLinz	適合舒壓
2014-02-02 19:42:54	CindyLinz	練成後就沒這用途了...
2014-02-02 19:43:11	godfat	XDDDDDDDDDDD
2014-02-02 19:43:11	godfat	++
2014-02-02 19:43:14	CindyLinz	等壓力大點的時候再用
2014-02-02 19:43:22	godfat	不過時程壓力大時無效 = =...
2014-02-02 19:43:26	CindyLinz	像是 deadline 前一天突然改用 dvorak 寫程式.....
2014-02-02 19:43:33	godfat	...
2014-02-02 19:43:57	godfat	話說其實我也算放棄 hhkb pro 和 vim...
2014-02-02 19:44:41	CindyLinz	hhkb pro.. 很好的鍵盤?
2014-02-02 19:46:14	godfat	沒有方向鍵打起來有點痛苦，我覺得手感其實也沒機械鍵盤好
2014-02-02 19:46:23	CindyLinz	@__@"
2014-02-02 19:46:23	lambdabot	Unknown command, try @list
2014-02-02 19:46:47	godfat	最大的特色就是超小一隻吧，少別人一排
2014-02-02 19:47:30	CindyLinz	噢
2014-02-02 19:48:07	godfat	跟我賣掉的那把一樣
2014-02-02 19:48:08	godfat	http://en.wikipedia.org/wiki/File:Happy_Hacking_Keyboard_Professional_2.jpg
2014-02-02 19:49:10	CindyLinz	我也蠻想要白鍵盤的..
2014-02-02 19:49:18	CindyLinz	反正鍵帽上印的字都是錯的....
2014-02-02 19:49:32	CindyLinz	可是用筆電, 而且沒外接 orz
2014-02-02 19:50:20	godfat	發揮機械魂，拆開來自己組上去？ XD
2014-02-02 19:50:34	CindyLinz	我沒有機械魂... XD
2014-02-02 19:50:48	godfat	噢... XD 那只好交個有機械魂的朋友了 (?)
2014-02-02 19:51:23	letoh	換鍵帽的話應該還好?
2014-02-02 19:51:43	CindyLinz	筆電欸 @@" 沒出就沒有啊
2014-02-02 19:52:18	b4285	godfat: 我對電容式還蠻有興趣，聽說是很安靜
2014-02-02 19:52:58	letoh	我以為那種剪刀腳鍵盤的鍵帽有通用規格
2014-02-02 19:53:02	b4285	如果要很小的話也有很多種替代品
2014-02-02 19:53:13	godfat	我覺得也還好，是比機械鍵盤安靜，但剪刀腳或薄膜還是比較安靜（印象
2014-02-02 20:09:59	hashcat	高雄都不知道上哪買
2014-02-02 20:15:57	CindyLinz	可以找一天上台北到店裡去試一下各種鍵盤類型的手感 (記下來), 然後回去再用網路訂吧
2014-02-02 20:16:37	hashcat	這樣要加高鐵錢
2014-02-02 20:17:34	b4285	hashcat: 建國路上有一家 PC Party
2014-02-02 20:17:37	hashcat	不如直接一次買十個
2014-02-02 20:17:45	hashcat	??
2014-02-02 20:17:56	hashcat	後天來去看看
2014-02-02 20:17:56	b4285	不是說高雄嘛
2014-02-02 20:19:07	hashcat	離建國路有點遠
2014-02-02 20:19:36	b4285	hashcat: http://goo.gl/maps/ZmSkw
2014-02-02 20:21:21	b4285	對面有一家情趣用品店，呵呵
2014-02-02 20:21:31	b4285	沒印象
2014-02-02 20:21:39	hashcat	招牌像是家紋
2014-02-02 20:21:41	petercom1and	變4285了XD
2014-02-02 20:21:47	hashcat	難怪我沒印象
2014-02-02 20:22:17	b4285	4285 是啥
2014-02-02 20:22:24	hashcat	那招牌我會直接掠過
2014-02-02 20:22:38	b4285	ASUS 的股票號碼嗎
2014-02-02 20:22:42	petercom1and	b4285: 你的nick呀XD
2014-02-02 20:23:05	b4285	:P
2014-02-02 22:13:42	--	petercom1and のニックネームが変更され petercommand になりました
2014-02-03 00:45:06	<--	b4285 (~b4283@1-175-238-126.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-03 02:05:04	<--	b4283 (~b4283@118.150.148.244) が終了 (Ping timeout: 260 seconds)
2014-02-03 02:08:56	<--	hashcat (~kv2a@218-164-106-100.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-03 02:53:19	-->	mno2 (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-03 05:54:05	-->	mno2_ (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-03 05:54:59	<--	mno2 (~mno2@67.151.22.2) が終了 (Ping timeout: 240 seconds)
2014-02-03 05:54:59	--	mno2_ のニックネームが変更され mno2 になりました
2014-02-03 08:24:28	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-zkksylyhyjbvwcdv) が終了 (Ping timeout: 245 seconds)
2014-02-03 08:27:28	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-03 08:28:27	-->	a2n__ (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 08:29:27	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 08:29:27	-->	logfat_______ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 08:29:27	-->	superbil_c_ (uid12362@gateway/web/irccloud.com/session) が #haskell.tw に参加
2014-02-03 08:29:28	<--	logfat______ (~cinch@home.mno2.org) が終了 (Ping timeout: 252 seconds)
2014-02-03 08:29:28	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Write error: Connection reset by peer)
2014-02-03 08:29:28	-->	cataska__ (uid12717@gateway/web/irccloud.com/session) が #haskell.tw に参加
2014-02-03 08:29:29	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 08:29:29	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 08:29:30	<--	darkx (~x4r@unaffiliated/darkx) が終了 (*.net *.split)
2014-02-03 08:29:30	<--	a2n (~a2n@unaffiliated/a2n) が終了 (*.net *.split)
2014-02-03 08:29:30	--	cataska__ のニックネームが変更され cataska_ になりました
2014-02-03 08:29:30	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 08:30:27	<--	hychen (uid12518@gateway/web/irccloud.com/x-swrvsdwnrrsxylzl) が終了 (Ping timeout: 245 seconds)
2014-02-03 08:34:27	<--	a2n__ (~a2n@219.85.185.194) が終了 (Ping timeout: 245 seconds)
2014-02-03 08:46:25	--	あなたのニックネームが変更され drbean_ になりました
2014-02-03 08:46:47	-->	drbean_ (~drbean@113.196.171.151) が #haskell.tw に参加
2014-02-03 08:46:47	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-03 08:46:47	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-03 08:46:47	--	ニックネーム #haskell.tw: [a2n__ cataska_ cibs CindyLinz cyt93cs_ drbean drbean_ gko godfat1 hashcat_ hychen hychen_ lambdabot logfat_______ miaout17 monochrom ouie petercom1and shik superbil_c UncleHandsome]
2014-02-03 08:46:47	--	チャンネル #haskell.tw: 21 ニックネーム (0 オペレータ, 0 発言, 21 通常)
2014-02-03 08:47:08	--	モード #haskell.tw [+cnt]
2014-02-03 08:47:08	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-03 08:48:53	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-03 08:56:05	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (*.net *.split)
2014-02-03 08:56:06	<--	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が終了 (*.net *.split)
2014-02-03 08:56:07	<--	logfat_______ (~cinch@home.mno2.org) が終了 (*.net *.split)
2014-02-03 08:56:08	<--	hashcat_ (~hashcat_@27.243.104.148) が終了 (*.net *.split)
2014-02-03 08:56:08	<--	monochrom (trebla@216.138.220.146) が終了 (*.net *.split)
2014-02-03 08:56:08	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 08:56:09	<--	a2n__ (~a2n@219.85.185.194) が終了 (*.net *.split)
2014-02-03 08:56:09	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) が終了 (*.net *.split)
2014-02-03 08:56:10	<--	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 08:56:10	<--	hychen (uid12518@gateway/web/irccloud.com/x-swrvsdwnrrsxylzl) が終了 (*.net *.split)
2014-02-03 08:56:10	<--	petercom1and (~peter@59-127-63-123.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 08:56:11	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (*.net *.split)
2014-02-03 08:56:12	<--	miaout17 (~miaout17@miaout17.net) が終了 (*.net *.split)
2014-02-03 08:56:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/session) が終了 (*.net *.split)
2014-02-03 08:56:14	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-jmkutkpksyuqvvov) が終了 (*.net *.split)
2014-02-03 08:56:14	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) が終了 (*.net *.split)
2014-02-03 08:56:15	<--	shik (~shik@140.112.28.60) が終了 (*.net *.split)
2014-02-03 08:56:16	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 09:03:35	-->	darkx (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 09:03:35	-->	hychen (uid12518@gateway/web/irccloud.com/session) が #haskell.tw に参加
2014-02-03 09:03:35	-->	petercom1and (~peter@59-127-63-123.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 09:03:35	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-jmkutkpksyuqvvov) が #haskell.tw に参加
2014-02-03 09:03:35	-->	logfat_______ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 09:03:35	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 09:03:35	-->	miaout17 (~miaout17@miaout17.net) が #haskell.tw に参加
2014-02-03 09:03:35	-->	hashcat_ (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-03 09:03:35	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-03 09:03:35	-->	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が #haskell.tw に参加
2014-02-03 09:03:35	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) が #haskell.tw に参加
2014-02-03 09:03:35	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 09:03:35	-->	shik (~shik@140.112.28.60) が #haskell.tw に参加
2014-02-03 09:03:53	<--	darkx (~x4r@162.243.133.203) が終了 (*.net *.split)
2014-02-03 09:03:56	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 09:04:13	<--	hychen (uid12518@gateway/web/irccloud.com/session) が終了 (*.net *.split)
2014-02-03 09:04:14	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-jmkutkpksyuqvvov) が終了 (*.net *.split)
2014-02-03 09:04:15	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) が終了 (*.net *.split)
2014-02-03 09:04:28	--	あなたのニックネームが変更され drbean になりました
2014-02-03 09:07:18	<--	logfat_______ (~cinch@home.mno2.org) が終了 (*.net *.split)
2014-02-03 09:07:19	<--	hashcat_ (~hashcat_@27.243.104.148) が終了 (*.net *.split)
2014-02-03 09:07:19	<--	monochrom (trebla@216.138.220.146) が終了 (*.net *.split)
2014-02-03 09:08:53	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 09:11:18	<--	a2n (~a2n@219.85.185.194) が終了 (*.net *.split)
2014-02-03 09:12:40	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 09:12:44	-->	darkx (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 09:14:09	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (Ping timeout: 252 seconds)
2014-02-03 09:14:43	<--	darkx (~x4r@162.243.133.203) が終了 (Ping timeout: 245 seconds)
2014-02-03 09:15:41	-->	hychen_ (uid12518@gateway/web/irccloud.com/session) が #haskell.tw に参加
2014-02-03 09:21:26	-->	logfat_______ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 09:21:27	-->	hashcat_ (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-03 09:21:27	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-03 09:25:47	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 09:27:00	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) が #haskell.tw に参加
2014-02-03 09:27:08	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) が終了 (Excess Flood)
2014-02-03 09:28:14	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) が #haskell.tw に参加
2014-02-03 09:32:01	<--	hychen_ (uid12518@gateway/web/irccloud.com/session) が終了 (Changing host)
2014-02-03 09:32:01	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-kpjkdeotttmjvtil) が #haskell.tw に参加
2014-02-03 09:36:12	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 09:36:12	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 09:41:59	<--	logfat_______ (~cinch@home.mno2.org) が終了 (Write error: Broken pipe)
2014-02-03 09:42:06	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 09:46:56	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) が終了 (*.net *.split)
2014-02-03 09:47:28	<--	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が終了 (*.net *.split)
2014-02-03 09:48:53	-->	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が #haskell.tw に参加
2014-02-03 09:49:51	<--	a2n (~a2n@219.85.185.194) が終了 (*.net *.split)
2014-02-03 09:49:52	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 09:52:40	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (*.net *.split)
2014-02-03 09:53:48	<--	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が終了 (*.net *.split)
2014-02-03 09:54:54	-->	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が #haskell.tw に参加
2014-02-03 10:03:40	-->	darkx (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 10:03:44	<--	darkx (~x4r@162.243.133.203) が終了 (Changing host)
2014-02-03 10:03:44	-->	darkx (~x4r@unaffiliated/darkx) が #haskell.tw に参加
2014-02-03 10:05:48	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 10:11:28	-->	logfat_______ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 10:17:51	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 10:17:52	<--	a2n (~a2n@219.85.185.194) が終了 (Changing host)
2014-02-03 10:17:52	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 10:19:04	-->	logfat________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 10:23:50	<--	logfat_______ (~cinch@home.mno2.org) が終了 (*.net *.split)
2014-02-03 10:26:41	<--	logfat________ (~cinch@home.mno2.org) が終了 (Ping timeout: 252 seconds)
2014-02-03 10:26:57	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (Ping timeout: 252 seconds)
2014-02-03 10:26:57	<--	UncleHandsome (~sora@wahaha.Dorm12.NCTU.edu.tw) が終了 (Ping timeout: 252 seconds)
2014-02-03 10:28:38	<--	darkx (~x4r@unaffiliated/darkx) が終了 (*.net *.split)
2014-02-03 10:34:25	<--	a2n (~a2n@unaffiliated/a2n) が終了 (Remote host closed the connection)
2014-02-03 10:34:31	-->	darkx (~x4r@unaffiliated/darkx) が #haskell.tw に参加
2014-02-03 10:38:21	--	petercom1and のニックネームが変更され petercommand になりました
2014-02-03 10:38:53	--	petercommand のニックネームが変更され Guest17160 になりました
2014-02-03 10:39:19	<--	Guest17160 (~peter@59-127-63-123.HINET-IP.hinet.net) が終了 (Changing host)
2014-02-03 10:39:20	-->	Guest17160 (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-03 10:39:39	--	Guest17160 のニックネームが変更され petercommand になりました
2014-02-03 10:49:20	-->	logfat________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 10:50:41	-->	letoh (~stackvm@59.104.108.50) が #haskell.tw に参加
2014-02-03 11:10:18	<--	letoh (~stackvm@59.104.108.50) が終了 (*.net *.split)
2014-02-03 11:11:36	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) が #haskell.tw に参加
2014-02-03 11:13:15	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 11:25:49	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Remote host closed the connection)
2014-02-03 11:34:13	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) が終了 (*.net *.split)
2014-02-03 11:39:14	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 264 seconds)
2014-02-03 11:57:47	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 11:57:47	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 11:57:47	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 11:58:28	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Read error: Connection reset by peer)
2014-02-03 12:10:10	<--	monochrom (trebla@216.138.220.146) が終了 (Ping timeout: 564 seconds)
2014-02-03 12:17:18	<--	logfat________ (~cinch@home.mno2.org) が終了 (Write error: Broken pipe)
2014-02-03 12:17:29	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:21:10	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:21:10	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 12:21:47	-->	ouie (~weie@221.78.42.71) が #haskell.tw に参加
2014-02-03 12:21:59	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 12:22:06	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:22:06	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:28:24	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 12:28:24	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 12:29:07	<--	ouie (~weie@221.78.42.71) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:32:04	-->	logfat_________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 12:34:44	<--	darkx (~x4r@unaffiliated/darkx) が終了 (Ping timeout: 252 seconds)
2014-02-03 12:34:51	<--	logfat_________ (~cinch@home.mno2.org) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:44:19	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (Ping timeout: 272 seconds)
2014-02-03 12:44:20	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 12:51:50	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 12:51:59	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 12:59:34	-->	logfat_________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 12:59:34	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 13:01:18	-->	lambdabot (~lambdabot@81.4.123.42) が #haskell.tw に参加
2014-02-03 13:01:19	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 13:01:19	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 13:01:31	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 13:01:36	<--	a2n (~a2n@219.85.185.194) が終了 (Changing host)
2014-02-03 13:01:36	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 13:04:18	<--	logfat_________ (~cinch@home.mno2.org) が終了 (Ping timeout: 272 seconds)
2014-02-03 13:04:18	-->	23LAA0EPB (~stackvm@59.104.108.50) が #haskell.tw に参加
2014-02-03 13:04:54	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (Ping timeout: 272 seconds)
2014-02-03 13:05:00	-->	45PABBP7H (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 13:05:00	-->	darkx_ (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 13:05:00	--	a2n のニックネームが変更され 23LAA0EIY になりました
2014-02-03 13:05:00	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 13:06:20	<--	a2n (~a2n@219.85.185.194) が終了 (Changing host)
2014-02-03 13:06:20	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 13:10:51	<--	23LAA0EIY (~a2n@unaffiliated/a2n) が終了 (Ping timeout: 272 seconds)
2014-02-03 13:13:38	<--	45PABBP7H (~lambdabot@silicon.int-e.eu) が終了 (Read error: Connection reset by peer)
2014-02-03 13:13:44	-->	45PABBQ8C (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 13:14:42	<--	45PABBQ8C (~lambdabot@silicon.int-e.eu) が終了 (Read error: Connection reset by peer)
2014-02-03 13:15:37	<--	lambdabot (~lambdabot@81.4.123.42) が終了 (Ping timeout: 272 seconds)
2014-02-03 13:19:10	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 13:29:44	<--	hashcat_ (~hashcat_@27.243.104.148) が終了 (*.net *.split)
2014-02-03 13:29:45	<--	a2n (~a2n@unaffiliated/a2n) が終了 (*.net *.split)
2014-02-03 13:29:45	<--	darkx_ (~x4r@162.243.133.203) が終了 (*.net *.split)
2014-02-03 13:29:46	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 13:29:46	<--	23LAA0EPB (~stackvm@59.104.108.50) が終了 (*.net *.split)
2014-02-03 13:30:50	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (*.net *.split)
2014-02-03 13:40:27	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 13:43:43	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 13:43:54	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Ping timeout: 252 seconds)
2014-02-03 13:48:10	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 13:51:03	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 252 seconds)
2014-02-03 14:03:36	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 14:04:58	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 14:04:58	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 14:04:58	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 14:04:58	-->	hashcat_ (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-03 14:09:10	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Ping timeout: 272 seconds)
2014-02-03 14:09:12	-->	darkx (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 14:09:12	<--	a2n (~a2n@219.85.185.194) が終了 (Remote host closed the connection)
2014-02-03 14:10:58	<--	darkx (~x4r@162.243.133.203) が終了 (Changing host)
2014-02-03 14:10:58	-->	darkx (~x4r@unaffiliated/darkx) が #haskell.tw に参加
2014-02-03 14:12:12	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 14:13:48	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 14:15:01	<--	a2n (~a2n@219.85.185.194) が終了 (Changing host)
2014-02-03 14:15:01	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 14:16:55	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 252 seconds)
2014-02-03 14:23:06	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Read error: Operation timed out)
2014-02-03 14:27:52	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 14:31:53	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Excess Flood)
2014-02-03 14:52:36	<--	darkx (~x4r@unaffiliated/darkx) が終了 (Remote host closed the connection)
2014-02-03 14:55:23	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (Ping timeout: 252 seconds)
2014-02-03 14:55:48	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 14:59:31	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Read error: Connection reset by peer)
2014-02-03 15:19:50	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 15:33:38	<--	a2n (~a2n@unaffiliated/a2n) が終了 (*.net *.split)
2014-02-03 15:33:38	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-03 15:39:14	-->	darkx (~x4r@unaffiliated/darkx) が #haskell.tw に参加
2014-02-03 15:40:43	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 16:22:07	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (*.net *.split)
2014-02-03 16:22:08	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (*.net *.split)
2014-02-03 16:22:10	<--	logfat__________ (~cinch@home.mno2.org) が終了 (*.net *.split)
2014-02-03 16:22:11	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 16:22:11	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 16:30:39	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 16:30:39	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 16:30:39	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 16:31:39	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (*.net *.split)
2014-02-03 16:31:40	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (*.net *.split)
2014-02-03 16:31:42	<--	logfat__________ (~cinch@home.mno2.org) が終了 (*.net *.split)
2014-02-03 16:37:10	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 16:37:10	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 16:37:10	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 16:39:30	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Write error: Operation not permitted)
2014-02-03 16:40:11	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 16:41:07	<--	a2n (~a2n@unaffiliated/a2n) が終了 (Read error: Connection reset by peer)
2014-02-03 16:41:23	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Excess Flood)
2014-02-03 16:44:11	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-03 16:54:23	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (*.net *.split)
2014-02-03 16:54:23	<--	logfat__________ (~cinch@home.mno2.org) が終了 (*.net *.split)
2014-02-03 16:56:22	-->	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が #haskell.tw に参加
2014-02-03 16:56:22	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-03 17:03:31	<--	darkx (~x4r@unaffiliated/darkx) が終了 (Ping timeout: 251 seconds)
2014-02-03 17:03:36	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 17:04:59	<--	a2n (~a2n@219.85.185.194) が終了 (Changing host)
2014-02-03 17:04:59	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 17:05:20	-->	darkx (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 17:05:24	<--	darkx (~x4r@162.243.133.203) が終了 (Changing host)
2014-02-03 17:05:24	-->	darkx (~x4r@unaffiliated/darkx) が #haskell.tw に参加
2014-02-03 17:06:01	-->	hashcat (~kv2a@218-173-237-98.dynamic.hinet.net) が #haskell.tw に参加
2014-02-03 17:18:51	<--	a2n (~a2n@unaffiliated/a2n) が終了 (Remote host closed the connection)
2014-02-03 17:27:39	-->	superbil_c_ (uid12362@gateway/web/irccloud.com/session) が #haskell.tw に参加
2014-02-03 17:29:10	CindyLinz	覺得, Haskell 裡面實作 printf 的手法, 應該列為使用 design pattern 解決語言缺陷的例子.. :p
2014-02-03 17:29:52	CindyLinz	就像 C++ 裡的 singleton..
2014-02-03 17:33:57	-->	b4283 (~b4283@36-238-134-148.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-03 17:43:16	-->	a2n (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-03 17:43:16	<--	a2n (~a2n@219.85.185.194) が終了 (Changing host)
2014-02-03 17:43:16	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-03 18:09:20	letoh	是指 type-safe printf 嗎?
2014-02-03 18:55:53	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 18:55:53	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-03 18:55:53	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-03 18:55:53	--	ニックネーム #haskell.tw: [a2n b4283 cibs darkx drbean godfat hashcat hashcat_ lambdabot letoh logfat__________ miaout17 petercommand shik superbil_c_ town55]
2014-02-03 18:55:53	--	チャンネル #haskell.tw: 16 ニックネーム (0 オペレータ, 0 発言, 16 通常)
2014-02-03 18:55:53	--	Notice(kornbluth.freenode.net) -> #haskell.tw: [freenode-info] please register your nickname...don't forget to auto-identify! http://freenode.net/faq.shtml#nicksetup
2014-02-03 18:56:14	--	モード #haskell.tw [+cnt]
2014-02-03 18:56:14	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-03 18:59:51	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-03 19:01:12	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-03 19:21:37	<--	hashcat_ (~hashcat_@27.243.104.148) が終了 (Ping timeout: 293 seconds)
2014-02-03 19:21:59	-->	CindyLinz (~cindy_utf@112.121.80.249) が #haskell.tw に参加
2014-02-03 19:25:15	<--	CindyLinz (~cindy_utf@112.121.80.249) が終了 (Remote host closed the connection)
2014-02-03 19:32:31	<--	godfat (~Adium@36-225-252-120.dynamic-ip.hinet.net) が終了 (Excess Flood)
2014-02-03 19:33:15	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が終了 (Write error: Broken pipe)
2014-02-03 19:35:05	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) が #haskell.tw に参加
2014-02-03 19:36:03	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) が終了 (Ping timeout: 272 seconds)
2014-02-03 19:44:30	-->	23LAA1PBB (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-03 19:45:58	<--	23LAA1PBB (~hashcat_@27.243.104.148) が終了 (Ping timeout: 272 seconds)
2014-02-03 20:26:55	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 20:26:55	-->	godfat (~Adium@36.225.252.120) が #haskell.tw に参加
2014-02-03 21:14:01	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-kpjkdeotttmjvtil) が #haskell.tw に参加
2014-02-03 21:14:01	-->	cataska_ (uid12717@gateway/web/irccloud.com/x-tyjfsljbdvjdsetd) が #haskell.tw に参加
2014-02-03 21:52:29	-->	cyt93cs (~cyt93cs@140.123.101.4) が #haskell.tw に参加
2014-02-03 21:52:29	-->	CindyLinz (~cindy_utf@112.121.80.249) が #haskell.tw に参加
2014-02-03 22:01:52	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-03 22:04:33	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 272 seconds)
2014-02-03 22:08:16	<--	superbil_c_ (uid12362@gateway/web/irccloud.com/session) が終了 (Changing host)
2014-02-03 22:08:16	-->	superbil_c_ (uid12362@gateway/web/irccloud.com/x-ghlkbexfmakbwucc) が #haskell.tw に参加
2014-02-03 22:12:55	<--	town55 (~1@118.116.239.12) が終了 (Remote host closed the connection)
2014-02-03 22:16:35	-->	godfat1 (~Adium@220.135.38.235) が #haskell.tw に参加
2014-02-03 22:21:42	<--	godfat (~Adium@36.225.252.120) が終了 (Ping timeout: 272 seconds)
2014-02-03 22:28:05	<--	cyt93cs (~cyt93cs@140.123.101.4) が終了 (Ping timeout: 261 seconds)
2014-02-03 22:28:55	<--	CindyLinz (~cindy_utf@112.121.80.249) が終了 (Ping timeout: 261 seconds)
2014-02-03 22:31:07	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-03 22:32:33	<--	darkx (~x4r@unaffiliated/darkx) が終了 (Quit: leaving)
2014-02-03 22:33:19	<--	godfat1 (~Adium@220.135.38.235) が終了 (Ping timeout: 265 seconds)
2014-02-03 22:36:00	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) が #haskell.tw に参加
2014-02-03 22:42:53	-->	darkx (~x4r@162.243.133.203) が #haskell.tw に参加
2014-02-03 22:55:57	<--	darkx (~x4r@162.243.133.203) が終了 (Changing host)
2014-02-03 22:55:58	-->	darkx (~x4r@unaffiliated/darkx) が #haskell.tw に参加
2014-02-03 23:06:14	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-03 23:20:36	<--	monochrom (trebla@216.138.220.146) が終了 (Ping timeout: 247 seconds)
2014-02-03 23:24:08	-->	hashcat_ (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-03 23:24:09	<--	hashcat_ (~hashcat_@27.243.104.148) が終了 (Excess Flood)
2014-02-03 23:40:49	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が終了 (Ping timeout: 272 seconds)
2014-02-03 23:42:58	<--	hashcat (~kv2a@218-173-237-98.dynamic.hinet.net) が終了 (Read error: Operation timed out)
2014-02-04 00:27:54	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-04 00:36:31	<--	monochrom (trebla@216.138.220.146) が終了 (*.net *.split)
2014-02-04 01:00:56	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-04 01:04:33	monochrom	基本上, freenode 正在大病復原中 XD
2014-02-04 01:06:12	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-04 01:11:03	<--	monochrom (trebla@216.138.220.146) が終了 (Quit: NO CARRIER)
2014-02-04 01:24:39	<--	shik (~shik@140.112.28.60) が終了 (Quit: leaving)
2014-02-04 01:26:59	-->	shik (~shik@icpc.csie.ntu.edu.tw) が #haskell.tw に参加
2014-02-04 01:38:42	<--	b4283 (~b4283@36-238-134-148.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-02-04 01:48:41	-->	monochrom (~trebla@216.138.220.146) が #haskell.tw に参加
2014-02-04 01:53:06	<--	monochrom (~trebla@216.138.220.146) が終了 (Client Quit)
2014-02-04 01:53:42	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-04 01:59:33	CindyLinz	letoh: 對 type safe 的
2014-02-04 01:59:55	CindyLinz	用 class PrintType a 之類的接起來
2014-02-04 04:15:36	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 252 seconds)
2014-02-04 05:35:57	-->	superbil_c__ (uid12362@gateway/web/irccloud.com/x-huizuxsqlvnksykg) が #haskell.tw に参加
2014-02-04 05:38:27	-->	a2n__ (~a2n@219.85.185.194) が #haskell.tw に参加
2014-02-04 05:42:09	<--	superbil_c_ (uid12362@gateway/web/irccloud.com/x-ghlkbexfmakbwucc) が終了 (Ping timeout: 245 seconds)
2014-02-04 05:42:12	<--	a2n (~a2n@unaffiliated/a2n) が終了 (Ping timeout: 245 seconds)
2014-02-04 05:42:13	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Ping timeout: 245 seconds)
2014-02-04 05:42:22	--	superbil_c__ のニックネームが変更され superbil_c_ になりました
2014-02-04 05:44:15	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-04 06:33:15	-->	mno2 (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-04 08:33:37	<--	mno2 (~mno2@67.151.22.2) が終了 (Quit: mno2)
2014-02-04 08:49:50	-->	hashcat (~kv2a@36-238-34-16.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-04 10:02:48	-->	b4283 (~b4283@218-164-200-247.dynamic.hinet.net) が #haskell.tw に参加
2014-02-04 10:40:22	-->	mno2 (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-04 10:54:40	<--	b4283 (~b4283@218-164-200-247.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-04 10:56:07	-->	b4283 (~b4283@36-238-231-109.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-04 11:03:00	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-04 11:28:55	<--	b4283 (~b4283@36-238-231-109.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-02-04 11:36:38	-->	b4283 (~b4283@36-238-222-30.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-04 14:31:58	-->	mno2_ (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-04 14:32:02	-->	hashcat_ (~kv2a@36-238-34-16.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-04 14:36:21	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-04 14:38:45	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (*.net *.split)
2014-02-04 14:38:45	<--	mno2 (~mno2@67.151.22.2) が終了 (*.net *.split)
2014-02-04 14:38:45	<--	hashcat (~kv2a@36-238-34-16.dynamic-ip.hinet.net) が終了 (*.net *.split)
2014-02-04 14:38:46	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (*.net *.split)
2014-02-04 14:38:47	<--	a2n__ (~a2n@219.85.185.194) が終了 (*.net *.split)
2014-02-04 14:39:15	--	mno2_ のニックネームが変更され mno2 になりました
2014-02-04 14:44:17	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-04 15:00:55	-->	a2n (~a2n@unaffiliated/a2n) が #haskell.tw に参加
2014-02-04 16:01:40	-->	godfat1 (~Adium@36-225-252-120.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-04 16:01:40	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-04 16:01:41	--	godfat1 のニックネームが変更され godfat になりました
2014-02-04 18:04:22	<--	mno2 (~mno2@67.151.22.2) が終了 (Quit: mno2)
2014-02-04 19:05:27	-->	hashcat__ (~kv2a@36-238-34-16.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-04 19:05:30	<--	hashcat_ (~kv2a@36-238-34-16.dynamic-ip.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-02-04 19:21:10	<--	hashcat__ (~kv2a@36-238-34-16.dynamic-ip.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-04 20:48:58	-->	suhorng (~suhorng@118-166-44-154.dynamic.hinet.net) が #haskell.tw に参加
2014-02-04 21:21:59	<--	suhorng (~suhorng@118-166-44-154.dynamic.hinet.net) が #haskell.tw から退出
2014-02-04 21:23:02	-->	suhorng (~suhorng@118-166-44-154.dynamic.hinet.net) が #haskell.tw に参加
2014-02-04 21:25:31	<--	suhorng (~suhorng@118-166-44-154.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-04 21:26:04	-->	suhorng (~suhorng@118-166-44-154.dynamic.hinet.net) が #haskell.tw に参加
2014-02-04 21:30:27	suhorng	傳說中用了會變快的東西？http://hackage.haskell.org/package/monad-ran
2014-02-04 21:30:33	suhorng	(依據 http://www.haskell.org/haskellwiki/Performance/Monads 的解釋)
2014-02-04 23:01:21	<--	b4283 (~b4283@36-238-222-30.dynamic-ip.hinet.net) が終了 (Ping timeout: 272 seconds)
2014-02-05 00:10:58	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Quit: leaving)
2014-02-05 00:13:06	<--	suhorng (~suhorng@118-166-44-154.dynamic.hinet.net) が終了 (Ping timeout: 245 seconds)
2014-02-05 00:19:12	-->	mno2 (~mno2@67.151.22.2) が #haskell.tw に参加
2014-02-05 00:23:01	<--	mno2 (~mno2@67.151.22.2) が終了 (Client Quit)
2014-02-05 01:06:55	monochrom	別傳說了, 自行實驗就知
2014-02-05 01:45:58	CindyLinz	XD
2014-02-05 01:46:18	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 01:46:24	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 01:50:25	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 01:50:33	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 01:54:33	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 01:54:41	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 01:58:42	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 01:58:50	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:02:50	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:02:59	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:07:00	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:07:07	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:11:07	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:11:15	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:15:15	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:15:24	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:19:24	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:19:25	-->	hashcat__ (~kv2a@1-172-234-245.dynamic.hinet.net) が #haskell.tw に参加
2014-02-05 02:19:32	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:23:32	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:23:40	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:27:40	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:27:48	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:33:56	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:34:03	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:38:03	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:38:11	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:42:11	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:42:18	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:46:18	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:46:25	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:50:25	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:50:32	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:54:32	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:54:40	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 02:58:40	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 02:58:48	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:02:49	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:02:57	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:06:57	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:07:05	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:11:06	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:11:14	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:15:14	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:15:21	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:19:21	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:19:30	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:23:30	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:23:38	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:27:37	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:27:45	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:31:46	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:31:54	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:35:54	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:36:01	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:40:02	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:40:09	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:44:09	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-05 03:44:17	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-05 03:48:04	-->	hashcat_ (~hashcat_@27.243.104.148) が #haskell.tw に参加
2014-02-05 05:37:21	--	hashcat__ のニックネームが変更され hashcat になりました
2014-02-05 09:25:03	-->	Guest57901 (~peter@59-127-63-123.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-05 09:44:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-05 09:50:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Ping timeout: 246 seconds)
2014-02-05 10:03:10	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-05 10:03:31	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-05 10:14:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-05 10:32:49	<--	Guest57901 (~peter@59-127-63-123.HINET-IP.hinet.net) が終了 (Changing host)
2014-02-05 10:32:49	-->	Guest57901 (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-05 10:32:55	--	Guest57901 のニックネームが変更され petercommand になりました
2014-02-05 11:21:20	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Read error: Connection reset by peer)
2014-02-05 11:29:42	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-05 11:54:12	-->	mno2 (~mno2@c-98-207-96-88.hsd1.ca.comcast.net) が #haskell.tw に参加
2014-02-05 12:34:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Ping timeout: 245 seconds)
2014-02-05 13:05:41	-->	hashcat__ (~kv2a@1-172-234-245.dynamic.hinet.net) が #haskell.tw に参加
2014-02-05 13:06:01	<--	hashcat (~kv2a@1-172-234-245.dynamic.hinet.net) が終了 (Ping timeout: 245 seconds)
2014-02-05 13:15:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-05 14:19:11	<--	godfat (~Adium@36-225-252-120.dynamic-ip.hinet.net) が終了 (Ping timeout: 246 seconds)
2014-02-05 14:30:16	CindyLinz	嗚嗚上班好想睡 orz
2014-02-05 14:57:58	-->	town55 (~1@139.202.129.72) が #haskell.tw に参加
2014-02-05 14:58:06	-->	godfat (~Adium@1-160-85-35.dynamic.hinet.net) が #haskell.tw に参加
2014-02-05 15:16:19	<--	mno2 (~mno2@c-98-207-96-88.hsd1.ca.comcast.net) が終了 (Quit: mno2)
2014-02-05 15:49:31	<--	town55 (~1@139.202.129.72) が終了 (Ping timeout: 272 seconds)
2014-02-05 15:55:26	--	irc: サーバから切断
2014-02-05 19:45:54	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-05 19:45:54	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-05 19:45:54	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-05 19:45:54	--	ニックネーム #haskell.tw: [a2n b4283 cataska_ cibs CindyLinz cyt93cs darkx drbean favonia godfat hashcat hashcat_ hychen_ kanru lambdabot letoh liuzhoou logfat__________ miaout17 monochrom ouie petercommand shik superbil_c_]
2014-02-05 19:45:54	--	チャンネル #haskell.tw: 24 ニックネーム (0 オペレータ, 0 発言, 24 通常)
2014-02-05 19:45:54	***	Buffer Playback...
2014-02-05 19:45:54	godfat	[13:46:21] 不過我還真沒想過區域變數可以多到會炸掉 stack... (除非需要陣列)
2014-02-05 19:45:54	petercommand	[13:46:56] 太強大了...
2014-02-05 19:45:54	CindyLinz	[13:49:47] 惡搞的時候多一層顧忌嘍
2014-02-05 19:45:54	CindyLinz	[13:50:30] 例如說...  a 函數裡面呼叫 b 函數
2014-02-05 19:45:54	CindyLinz	[13:50:52] 然後想在 b 函數裡面幫 a 函數多宣告一個區域變數, 待 b return 以後 a 的後半程式碼可以用到?
2014-02-05 19:45:54	CindyLinz	[13:52:53] 除了這個以外, 因為 C runtime (對, 我最近才知道 C 也有 runtime....ww) 自己也會依各自的實作去隨便使用 system stack
2014-02-05 19:45:54	CindyLinz	[13:53:45] ruby 函數的 call frame 之間會被 C 塞多少額外的東西不知道.. @@"
2014-02-05 19:45:54	CindyLinz	[13:54:59] 因為 a 函數裡面, 在呼叫 b 函數之前, 除了 ruby 會去 system stack 使用區域變數的空間 (這個應該會在 ruby spec 裡面定義清楚), C 要跑(模擬) ruby runtime 的時候也會用一些, 但我想這個大概很難定義清楚了
2014-02-05 19:45:54	godfat	[13:55:23] 如果用 c extension 的話，說不定可以吧..... XD
2014-02-05 19:45:54	CindyLinz	[13:57:33] 但是不知道 C 會怎麼去用 system stack, 寫 extension 的人就不敢去動啊 ._.
2014-02-05 19:45:54	CindyLinz	[13:57:57] 到時候寫出來的 extension 要綁定 gcc, 而且規定要用某一個版本很慘吧 XD
2014-02-05 19:45:54	CindyLinz	[13:59:24] b 幫 a 加 local variable 的時候, 要把 a 的 call frame 變大, 所以要把 stack 上面整個 b 的 callframe 往後移, 也要把暫存器裡面正拿來當作 stack offset 的作對應地往後加
2014-02-05 19:45:54	godfat	[13:59:42] 我不知道耶，這跟 crt 會有關喔？我以為只要看好 ruby 怎麼用 c 即可
2014-02-05 19:45:54	CindyLinz	[13:59:46] 可是不知道哪些暫存器被拿來當 stack offset, 哪些是一般的值, 也不知道有沒有哪些是被存到 heap 裡面...
2014-02-05 19:45:54	CindyLinz	[14:00:01] 也許有人 allocate 了一塊小記憶體來存 stack offset..
2014-02-05 19:45:54	godfat	[14:00:23] 原來這麼麻煩... 那算了 XD
2014-02-05 19:45:54	CindyLinz	[14:00:33] { int x; ... { int x; ... } b(); }
2014-02-05 19:45:54	CindyLinz	[14:00:45] 我不知道呼叫 b 的時候第二個 int x 所佔的空間會不會放掉
2014-02-05 19:45:54	petercommand	[14:04:30] 已經出去第2個x定義的函數的話，應該會?
2014-02-05 19:45:54	CindyLinz	[14:04:42] 是不能用, 但不一定有放掉啊
2014-02-05 19:45:54	CindyLinz	[14:04:54] 或是...
2014-02-05 19:45:54	CindyLinz	[14:05:20] { int x = b(), y = 2; } 在呼叫 b 的時候, y 的空間有沒有已經先空出來了?
2014-02-05 19:45:54	petercommand	[14:05:23] 不是放stack嗎?
2014-02-05 19:45:54	godfat	[14:05:35] 可能跟最佳化有關？我想 c 可能沒定義有沒有放掉？
2014-02-05 19:45:54	godfat	[14:05:35] 倒是 c++ 因為 destrutor 可能會放掉？
2014-02-05 19:45:54	CindyLinz	[14:05:51] 是 stack 沒錯呀, 但就不知道 sp 有沒有即時在 } 的時候就往回減
2014-02-05 19:45:54	CindyLinz	[14:06:11] destructor 應該只是會呼叫...
2014-02-05 19:45:54	CindyLinz	[14:07:46] destructor 裡面的 free 或 delete 會執行.. 不過 obj 本身就不是 destructor 能控制的了
2014-02-05 19:45:54	CindyLinz	[14:08:44] 嗯, 因為及時往回減可能有時也蠻浪費的...
2014-02-05 19:45:54	petercommand	[14:09:51] 沒放掉的話不就不能用ret了嗎....
2014-02-05 19:45:54	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-02-05 19:45:54	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-02-05 19:45:54	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-02-05 19:45:54	godfat	[14:09:55] { int x=0; printf("%d", x); }
2014-02-05 19:45:54	godfat	[14:10:01] 惡整 XD
2014-02-05 19:45:54	CindyLinz	[14:10:31] petercommand: 函數 return 的時候當然會放啦, 只是一組 block 結束的時候還沒有 return 呀 @@"
2014-02-05 19:45:54	CindyLinz	[14:10:47] 這啥? @@"
2014-02-05 19:45:54	CindyLinz	[14:11:01] 我以為你想要 printf("%p\n", (void*)&x); ?
2014-02-05 19:45:54	CindyLinz	[14:12:30] 我用 gcc 4.8.1, 剛這個連 4 段 x block 的, 印出來的 address 都一樣
2014-02-05 19:45:54	godfat	[14:12:48] 想說如果要改變 stack 大小的話，這樣會很痛 XD
2014-02-05 19:45:54	godfat	[14:12:48] @@" 不過也可能是重複利用 address?
2014-02-05 19:45:54	CindyLinz	[14:13:05] stack 改大小不太痛啦, 就 sub sp, (一個數字)
2014-02-05 19:45:54	CindyLinz	[14:13:26] 可是如果可以把連 5 個 sub sp, 合到最後一起只放一個 sub sp, 也可能有賺呀 :p
2014-02-05 19:45:54	CindyLinz	[14:16:01] 我沒開 -O 之類的時候是一樣, 開 -O2 就不一樣了
2014-02-05 19:45:54	godfat	[14:16:13] 喔喔
2014-02-05 19:45:54	CindyLinz	[14:16:15] 看 addr 剛好都是差 4
2014-02-05 19:45:54	petercommand	[14:17:12] http://codepad.org/5xhF20qc
2014-02-05 19:45:54	CindyLinz	[14:20:08] petercommand: favonia 有份... 嗯, 列出一堆 C spec 未定義行為的文件, 裡面說要用 %p 印 addr 的時候, 一定要先轉成 (void*) 不然它可能會發射核彈.. XD
2014-02-05 19:45:54	petercommand	[14:20:17] XDD
2014-02-05 19:45:54	CindyLinz	[14:20:34] 嗯你這個結果出來是有提早放的版本
2014-02-05 19:45:54	CindyLinz	[14:21:13] 我開 -O2 也是有提早放
2014-02-05 19:45:54	CindyLinz	[14:22:00] 欸不對啊...
2014-02-05 19:45:54	CindyLinz	[14:22:12] 你這第三個 printf 是印第一個變數, 當然不能變啊 ^^|
2014-02-05 19:45:54	petercommand	[14:26:01] 嗯....
2014-02-05 19:45:54	petercommand	[14:38:47] http://codepad.org/4X3XttmD
2014-02-05 19:45:54	petercommand	[14:38:55] 這樣不知道對不對...
2014-02-05 19:45:54	petercommand	[14:43:25] 怪怪的orz...
2014-02-05 19:45:54	CindyLinz	[14:48:32] __asm__!
2014-02-05 19:45:54	CindyLinz	[14:49:08] 也是有可能它兩個 int i 是一進 main() 的時候就一起 allocate 好了呀
2014-02-05 19:45:54	petercommand	[15:57:22] 應該是兩個一起allocate....
2014-02-05 19:45:54	petercommand	[16:00:43] 只sub了一次sp
2014-02-05 19:45:54	CindyLinz	[16:24:56] (Y)
2014-02-05 19:45:54	letoh	[19:07:59] 為什麼會出現 asm 的討論XD
2014-02-05 19:45:54	hashcat	[21:24:52] http://www.gnu.org/software/epsilon/
2014-02-05 19:45:54	hashcat	[21:25:12] 有動態型別的純函數式
2014-02-05 19:45:54	hashcat	[21:27:04] gnu好多東西
2014-02-05 19:45:54	hashcat	[21:27:12] http://directory.fsf.org/wiki/GNU
2014-02-05 19:45:54	monochrom	[00:39:07] 世上還有 http://en.wikipedia.org/wiki/X86_calling_conventions , 大家有個約定俗成. 因此, 想狎玩 stack 的話, 還是有根有據的. :)
2014-02-05 19:45:54	letoh	[00:44:50] x86 calling convention 也有好幾種啊XD  cdecl 跟 fastcall 就不同
2014-02-05 19:45:54	petercommand	[10:24:53] 不過function裏面就不一定會free掉用不到的local variable了.....stack快炸了不知道會不會free掉用不到的
2014-02-05 19:45:54	CindyLinz	[14:25:42] petercommand: 應該不會
2014-02-05 19:45:54	CindyLinz	[14:25:58] petercommand: runtime 還去加這種 check, 比直接 free 掉還辛苦 ^^|
2014-02-05 19:45:54	CindyLinz	[14:26:17] 所以如果考慮這個問題的話, 應該是加上會立即 free 掉的程式 :p
2014-02-05 19:45:54	petercommand	[14:41:07] :p
2014-02-05 19:45:54	CindyLinz	[14:47:01] 嗯, 判斷加下去至少要一條 cmp 和一條 ja, 就兩條了, 無論結果如何這兩條都要執行到... free 掉才一條 sub, 要減的量是 compile time 就決定的 @@"
2014-02-05 19:45:54	letoh	[14:54:02] 所以都不要檢查  找幾個關鍵地方直接把 sp pop 回來還原  連 sub 都可以省掉?
2014-02-05 19:45:54	CindyLinz	[14:58:35] sp pop 回來就是 sub 的意思啦 :p  只是一個 sub 可以帶一個數字當成連續 pop
2014-02-05 19:45:54	CindyLinz	[14:59:06] 因為那種情況下, 不需要把 stack 裡丟掉的資料拿出來了
2014-02-05 19:45:54	CindyLinz	[15:00:10] 只是現代 CPU 的實作好噁心... 可能 sub sp, 3 和 sub ax, 3 的速度還不一樣.... *_*
2014-02-05 19:45:54	CindyLinz	[00:40:24] 唔.. 發現 Codeforces 的 Haskell 更新到 GHC 7.6 了
2014-02-05 19:45:54	CindyLinz	[01:12:26] 偷閒來玩幾題簡單題好了 :p
2014-02-05 19:45:54	CindyLinz	[16:13:40] 奇怪... haskell standard lib 裡面是不是沒有對 MArray 的排序啊? @@"
2014-02-05 19:45:54	CindyLinz	[16:45:36] @src sort
2014-02-05 19:45:54	lambdabot	[16:45:36] sort = sortBy compare
2014-02-05 19:45:54	CindyLinz	[16:45:40] @src sortBy
2014-02-05 19:45:54	lambdabot	[16:45:40] sortBy cmp = foldr (insertBy cmp) []
2014-02-05 19:45:54	CindyLinz	[16:45:52] @src insertBy
2014-02-05 19:45:54	lambdabot	[16:45:53] insertBy _   x [] = [x]
2014-02-05 19:45:54	lambdabot	[16:45:53] insertBy cmp x ys@(y:ys') = case cmp x y of
2014-02-05 19:45:54	lambdabot	[16:45:53]                                  GT -> y : insertBy cmp x ys'
2014-02-05 19:45:54	lambdabot	[16:45:53]                                  _  -> x : ys
2014-02-05 19:45:54	CindyLinz	[16:53:24] 怎麼長得不像 qsort @_@"
2014-02-05 19:45:54	CindyLinz	[16:54:41] 被欺騙的感覺..... Q__Q
2014-02-05 19:45:54	CindyLinz	[17:03:57] 和 base 4.6.0.1 的 sort 的 source 不一樣 @@"
2014-02-05 19:45:54	CindyLinz	[17:04:09] base 4.6.0.1 的 sort 是 merge sort
2014-02-05 19:45:54	CindyLinz	[17:45:02] @version
2014-02-05 19:45:54	lambdabot	[17:45:03] lambdabot 5.0-int-e
2014-02-05 19:45:54	lambdabot	[17:45:03] git clone git://github.com/int-e/lambdabot.git
2014-02-05 19:45:54	CindyLinz	[17:46:02] > length (sort [1..100000])
2014-02-05 19:45:54	lambdabot	[17:46:03]  100000
2014-02-05 19:45:54	CindyLinz	[17:46:07] > length (sort [1..1000000])
2014-02-05 19:45:54	lambdabot	[17:46:09]  1000000
2014-02-05 19:45:54	CindyLinz	[17:46:20] 這速度... @_@"
2014-02-05 19:45:54	CindyLinz	[17:47:01] > sum (sort [1..1000000])
2014-02-05 19:45:54	lambdabot	[17:47:02]  *Exception: stack overflow
2014-02-05 19:45:54	CindyLinz	[17:47:09] > sum (sort [1..100000])
2014-02-05 19:45:54	lambdabot	[17:47:10]  5000050000
2014-02-05 19:45:54	CindyLinz	[17:47:35] > sum (sort $ reverse [1..100000])
2014-02-05 19:45:54	lambdabot	[17:47:36]  5000050000
2014-02-05 19:45:54	CindyLinz	[21:17:08] 覺得.. 如果有人把 Yesod 弄熟了, 到 Functional Thursday 或是 Coscup / OSDC 介紹, 殺傷力應該蠻強的.. ._.
2014-02-05 19:45:54	CindyLinz	[21:17:59] Snap 比較零碎, 所以我猜這個整體介紹比較不好做, 講起來的炫度也會差一點
2014-02-05 19:45:54	mno2	[22:52:15] CindyLinz: 你心中想的殺傷力是指快速做 blog ?
2014-02-05 19:45:54	CindyLinz	[22:58:35] mno2: 殺傷力是讓聽眾覺得炫, 覺得有興趣.....   快速做 blog 可以是個方法, 不過我沒有想到 ^^|
2014-02-05 19:45:54	mno2	[23:00:06] yesod 真的比較完整，但就覺得有點醜..
2014-02-05 19:45:54	CindyLinz	[23:00:51] 醜嗎? 我只是覺得它整合得太緊密, 比較不合我味口..
2014-02-05 19:45:54	CindyLinz	[23:03:11] 是因為用了 Quasiquotion 和 template haskell 所以覺得醜嗎?
2014-02-05 19:45:54	mno2	[23:03:27] 對啊，萬一寫錯了不知道怎麼 debug ..
2014-02-05 19:45:54	CindyLinz	[23:04:07] 啊不就瀏覽器開起來看就好了嗎? XD
2014-02-05 19:45:54	mno2	[23:04:21] 是 compile 不過吧
2014-02-05 19:45:54	CindyLinz	[23:04:29] 喔喔 ^^|
2014-02-05 19:45:54	CindyLinz	[23:04:51] compile 不過不就把部分東西拿掉, binary search 哪一條有問題嗎? ^^
2014-02-05 19:45:54	mno2	[23:06:05] 但問題是就算知道哪一條有問題，也要有足夠的知識看出來要怎麼修吧
2014-02-05 19:45:54	CindyLinz	[23:11:32] 沒去用, 還沒辦法體會 ^^|
2014-02-05 19:45:54	CindyLinz	[12:24:32] 隔壁 channel 看來的 :p
2014-02-05 19:45:54	CindyLinz	[12:24:38] 12:09 < jmcarthur> Level 1: Use type classes like you would use object-oriented classes. Level 2: Use type classes like you would use Java interfaces. Level  3: Use type classes like they were intended. Level 4: Use type classes in ways the designers did not foresee.
2014-02-05 19:45:54	CindyLinz	[12:24:49] 12:09 < carter> level 5: you are now oleg
2014-02-05 19:45:54	CindyLinz	[12:25:01] 12:10 < bristlesquirrel> level 6: prove turing completeness in typeclasses
2014-02-05 19:45:54	CindyLinz	[12:25:10] 12:11 < heatsink> level 7: Add type class extensions to GHC
2014-02-05 19:45:54	CindyLinz	[12:26:03] you are now oleg.....ww
2014-02-05 19:45:54	CindyLinz	[12:26:11] 7 好像比 5 和 6 簡單 XD
2014-02-05 19:45:54	godfat	[15:31:53] 把 7 移到 5, 然後 5, 6 往下好了 XDDDD
2014-02-05 19:45:54	CindyLinz	[17:34:03] XD
2014-02-05 19:45:54	godfat	[20:31:50] 不過說實在我不知道要怎麼把 typeclass 當 oo 的 class 用...
2014-02-05 19:45:54	CindyLinz	[20:35:01] class A a => B a where ... 就當繼承用啊 :p
2014-02-05 19:45:54	godfat	[20:36:14] 唔，概念差好多，有點難想像... @@
2014-02-05 19:45:54	CindyLinz	[20:36:40] 然後每一個 class 最多只有一個「直接的」 instance
2014-02-05 19:45:54	CindyLinz	[20:37:48] instance B SomeB where ... 然後 SomeB 這個 type 就會有 A 和 B 的所有 method
2014-02-05 19:45:54	godfat	[20:38:04] 這樣做似乎沒啥意義，function 直接寫死型別就好了... XD
2014-02-05 19:45:54	CindyLinz	[20:38:26] 直接寫死的話, 就不能在 super class 的地方作多型了啊
2014-02-05 19:45:54	godfat	[20:39:14] 不是反正只有一種 instance?
2014-02-05 19:45:54	CindyLinz	[20:39:29] 我是強調「直接的」只有一種, 間接的可能很多 ^^|
2014-02-05 19:45:54	CindyLinz	[20:39:40] 像是這邊 SomeB 就是 class A 的一個間接的 instance
2014-02-05 19:45:54	godfat	[20:39:55] 喔好吧... XD
2014-02-05 19:45:54	CindyLinz	[20:40:32] 可能另外有 class A a => C a where ... 和 instance A a => C SomeC where ...   就可以用 A a => 的函數來服務 SomeB 和 SomeC 了, 有沒有很像! (配合一下 :p)
2014-02-05 19:45:54	godfat	[20:41:17] umm, interesting... XD
2014-02-05 19:45:54	CindyLinz	[20:41:51] 然後... 我好奇去查 oleg 的資料.. 好像全名是 Oleg Kiselyov?
2014-02-05 19:45:54	CindyLinz	[20:42:32] 然後... wikipedia 說他是俄羅斯手球國家代表隊球員??? https://en.wikipedia.org/wiki/Oleg_Kiselyov
2014-02-05 19:45:54	CindyLinz	[20:43:31] 其實只是好奇他多大歲數 :p
2014-02-05 19:45:54	godfat	[20:43:33] 我之前也查過很多次，發現同名的人應該很多
2014-02-05 19:45:54	CindyLinz	[20:43:45] 好吧 orz
2014-02-05 19:45:54	letoh	[20:43:56] 意思是這是俄羅斯的菜市場名嗎?
2014-02-05 19:45:54	CindyLinz	[20:43:58] 大隱隱於市的名字啊.... orz
2014-02-05 19:45:54	godfat	[20:44:02] 我記得好像是 50 ~ 70? 這範圍會不會太大？ XD
2014-02-05 19:45:54	CindyLinz	[20:44:27] 會, 而且比 wiki 寫的這個還大.... 我原以為他跟我們同輩的 @@"
2014-02-05 19:45:54	godfat	[20:44:49] 不知道是不是菜市場名，只知道不好查（也許名人都用這名字 XD
2014-02-05 19:45:54	CindyLinz	[20:45:12] 還是他從小祟拜這個球員, 所以故意 ID 取跟他一樣? XD
2014-02-05 19:45:54	godfat	[20:45:24] 我的印象算是長輩了（至少白髮不少，沒記錯的話
2014-02-05 19:45:54	CindyLinz	[20:45:48] 我 google image 也不知道要怎樣確認哪一個是他 ^^|
2014-02-05 19:45:54	CindyLinz	[20:46:02] 等等, 俄羅斯人年輕的時候也是白髮啊 XD
2014-02-05 19:45:54	godfat	[20:46:15] 他上次來 floac 我有見過，我看照片？ XD
2014-02-05 19:45:54	CindyLinz	[20:46:20] !
2014-02-05 19:45:54	godfat	[20:47:07] http://nasslli2012.com/images/250/oleg-kiselyov.jpg
2014-02-05 19:45:54	CindyLinz	[20:47:39] 唔, 是金髮.. 或是色差 XD
2014-02-05 19:45:54	godfat	[20:48:16] 金髮或白髮... XD
2014-02-05 19:45:54	CindyLinz	[20:49:03] 俄羅斯人, 然後做美國海軍的外包工作噢..... 嘖嘖 XD
2014-02-05 19:45:54	godfat	[20:50:10] @@ 是喔？難怪比較低調？（有嗎？ XD 不過資料真的難查
2014-02-05 19:45:54	lambdabot	[20:50:10]  是喔？難怪比較低調？（有嗎？ XD 不過資料真的難查
2014-02-05 19:45:54	CindyLinz	[20:50:18] lol
2014-02-05 19:45:54	godfat	[20:50:28] ...又來了 XD
2014-02-05 19:45:54	CindyLinz	[20:51:25] 聽老師說是作軍艦上的天氣預測程式
2014-02-05 19:45:54	godfat	[20:52:14] 蘇聯的天氣控制裝置要來了
2014-02-05 19:45:54	CindyLinz	[20:53:23] 難怪今年北美這麼冷.... (牽拖)
2014-02-05 19:45:54	hashcat_	[22:59:05] godfat typeclass比較像interface
2014-02-05 19:45:54	CindyLinz	[22:59:17] 那是 Level 2.. XD
2014-02-05 19:45:54	hashcat_	[22:59:52] haskell裡type就是class
2014-02-05 19:45:54	hashcat_	[23:03:53] function第一個參數接受一個type的實例就可以該class的method了
2014-02-05 19:45:54	hashcat_	[23:06:54] data -> class, typeclass -> interface, function and its first arg data -> method anx its class
2014-02-05 19:45:54	suhorng	[23:37:12] http://okmij.org/ftp/
2014-02-05 19:45:54	suhorng	[23:38:40] Oleg http://hackage.haskell.org/package/HList http://hackage.haskell.org/package/iteratee
2014-02-05 19:45:54	monochrom	[00:20:49] 各位早已超越 level 1, 所以反而不明白 level 1 的人在想甚麼 :)
2014-02-05 19:45:54	hashcat_	[00:22:09] 有沒 level inf
2014-02-05 19:45:54	hashcat_	[00:22:42] 朝level inf 前進
2014-02-05 19:45:54	godfat	[13:18:48] hashcat, 是啊，所以說我很難想像要怎麼當 oo 的 class, 雖然聽 CindyLinz 這樣說勉勉強強吧... XD
2014-02-05 19:45:54	hashcat_	[16:26:26] interface也滿像class的
2014-02-05 19:45:54	godfat	[16:27:06] 以 java 為例的話，因為 java 不能多重繼承，導致 interface 跟 class 差比較多
2014-02-05 19:45:54	hashcat_	[16:31:41] 這樣haskell可以多重繼承
2014-02-05 19:45:54	hashcat_	[16:32:43] www.cs.indiana.edu/~eholk/papers/hips2013.pdf
2014-02-05 19:45:54	hashcat_	[16:33:08] rust編譯成gpu ptx
2014-02-05 19:45:54	godfat	[16:33:46] PTX 跟 cuda 有什麼關係嗎？ cuda 編成 ptx?
2014-02-05 19:45:54	godfat	[16:34:44] ok, abstract 解釋了
2014-02-05 19:45:54	CindyLinz	[17:45:39] 我第一次接觸 OO 用的是 C++
2014-02-05 19:45:54	CindyLinz	[17:45:55] 所以學 Java 的時候覺得不能多重繼承真是限制好大 ^^|
2014-02-05 19:45:54	CindyLinz	[17:47:00] 我也是覺得 Haskell type class 比較像 interface... 但是如果完全不動用 type class 又模擬不出 Java 單線繼承的效果....
2014-02-05 19:45:54	CindyLinz	[17:47:40] 欸.. 其實是主角是 type class, 不然用 Typeable 一層一層套又是另一種模擬法....
2014-02-05 19:45:54	godfat	[17:48:43] 我後來覺得多重繼承其實也不是不對，而是 c++ 的作法怪怪的
2014-02-05 19:45:54	godfat	[17:48:44] 後來很多語言宣稱要解決多重繼承的問題，感覺只是換個名字而已
2014-02-05 19:45:54	CindyLinz	[17:49:46] 我現在還是覺得堅持單線繼承只是為了比較好實作.. 雖然 Java 派書都會一直洗腦說單線繼承才是對的.... = =
2014-02-05 19:45:54	godfat	[17:50:20] 忽然讓我想到王垠的權威文 XDDD
2014-02-05 19:45:54	CindyLinz	[17:50:28] C++ 怎樣怪? 你是說 virtual 繼承嗎?
2014-02-05 19:45:54	CindyLinz	[17:50:34] C++ 不是兩種都有嗎? XD
2014-02-05 19:45:54	godfat	[17:50:44] 是啊，還有各種 ambiguos 的狀況
2014-02-05 19:45:54	CindyLinz	[18:18:55] Haskell 的 tuple 只有定到 7 個 (印象中), 所以如果想要用很長很長很長的 tuple..
2014-02-05 19:45:54	godfat	[18:19:28] 就不如自己定個 record
2014-02-05 19:45:54	CindyLinz	[18:19:34] 不用 template haskell 的話, 應該就是 (1, (2, (3, (4, (5, (6, (7, (8, 9))))))))
2014-02-05 19:45:54	CindyLinz	[18:19:46] 不行, 長度不固定 XD
2014-02-05 19:45:54	godfat	[18:20:01] tuple 長度不是固定的？
2014-02-05 19:45:54	CindyLinz	[18:20:11] 但這種寫法後面會有一堆 ))))) (想到 ruby ennnnnnnnnnnnd 的故事 :p)
2014-02-05 19:45:54	CindyLinz	[18:20:51] 我想的是像 printf 這種應用, compile 完是固定的長度, 但在設計 printf 的時候其實是不固定的
2014-02-05 19:45:54	CindyLinz	[18:21:20] 所以想, 可能用 operator 的 data constructor, 就可以接出很長很長的 tuple, 而又不用前後的括號了 :p
2014-02-05 19:45:54	CindyLinz	[18:21:37] 1 ::: 2 ::: 3 ::: 4 ::: 5 ::: 6 ::: 7 ::: 8 ::: 9
2014-02-05 19:45:54	godfat	[18:21:43] (憶起大玩 c++ template 的過去...)
2014-02-05 19:45:54	CindyLinz	[18:22:29] >>>>>>> 嗎? @@"
2014-02-05 19:45:54	godfat	[18:22:39] c++ 的 _1 與 _2 等等是真的滿好用的...
2014-02-05 19:45:54	godfat	[18:23:09] XD 不只是那個，像是自己串 tuple, 另外用 function 包裝，一層包一層只為了 type safe 又用起來方便
2014-02-05 19:45:54	CindyLinz	[18:23:15] 沒有用過 _1 和 _2 @@"
2014-02-05 19:45:54	godfat	[18:23:46] 例如 (_1 + 1)(2) 就是 3
2014-02-05 19:45:54	godfat	[18:23:47] 自動產生 anonymous function
2014-02-05 19:45:54	godfat	[18:23:55] (_1 + _2) 就是 (+)
2014-02-05 19:45:54	CindyLinz	[18:24:19] 有這種東西 @@"
2014-02-05 19:45:54	CindyLinz	[18:25:00] _1, _2 這些就像是 shell script 裡面的 %1 %2 %3?
2014-02-05 19:45:54	godfat	[18:38:12] 我不太熟 shell, 不過重點是自動產生 function
2014-02-05 19:45:54	godfat	[18:38:13] 比方說 map(list.begin(), list.end(), _1 + 1) 寫起來就很快
2014-02-05 19:45:54	godfat	[18:38:13] 這當然也跟缺少 anonymous function 有關，
2014-02-05 19:45:54	godfat	[18:38:13] 但是另一個重點就是有 _2, _3 可以用 (不確定有沒有到 _4)
2014-02-05 19:45:54	godfat	[18:39:03] 在 haskell 裡要做類似的事，可能要 flip 來 flip 去
2014-02-05 19:45:54	godfat	[18:39:03] 比方說 _3 + _1 + _2 之類的
2014-02-05 19:45:54	CindyLinz	[18:40:38] 正常人會寫 \_1 _2 _3 -> _3 + _1 + _2 吧? 誰跟你 pointless... XD
2014-02-05 19:45:54	godfat	[18:41:00] XD 也是長一倍就是了
2014-02-05 19:45:54	CindyLinz	[18:41:17] (看看 suhorng..)
2014-02-05 19:45:54	CindyLinz	[18:41:53] @pl \_1 _2 _3 -> _3 + _1 + _2
2014-02-05 19:45:54	lambdabot	[18:41:53] (line 1, column 14):
2014-02-05 19:45:54	lambdabot	[18:41:53] unexpected "_"
2014-02-05 19:45:54	lambdabot	[18:41:53] expecting lambda abstraction or expression
2014-02-05 19:45:54	CindyLinz	[18:42:03] orz
2014-02-05 19:45:54	godfat	[18:42:14] 咦？名稱不合法嗎？
2014-02-05 19:45:54	CindyLinz	[18:42:16] @pl \a1 a2 a3 -> a3 + a1 + a2
2014-02-05 19:45:54	lambdabot	[18:42:16] flip . ((+) .) . (+)
2014-02-05 19:45:54	CindyLinz	[18:42:28] 可能不能底線開頭.. XD
2014-02-05 19:45:54	CindyLinz	[18:43:14] 誰說 perl 比較 unreadable 了... # flip . ((+) .) . (+)
2014-02-05 19:45:54	godfat	[18:43:20] 那個 _1, _2 可以參考這個
2014-02-05 19:45:54	godfat	[18:43:21] http://www.boost.org/doc/libs/1_55_0/libs/bind/bind.html#Purpose
2014-02-05 19:45:54	godfat	[18:43:21] 不過我記得其他地方也有實作 _1, _2
2014-02-05 19:45:54	godfat	[18:43:21] 然後這有加入 TR1, 所以應該是 c++11 標準（如果這幾年沒有變化的話）
2014-02-05 19:45:54	CindyLinz	[18:43:41] 咦 原來是加入標準的東西歐..
2014-02-05 19:45:54	CindyLinz	[18:44:05] @unpl flip . ((+) .) . (+)
2014-02-05 19:45:54	lambdabot	[18:44:05] (\ g b c -> (g + c) + b)
2014-02-05 19:45:54	CindyLinz	[18:44:14] 這次復原得很好 XD
2014-02-05 19:45:54	letoh	[18:44:44] _1 _2 有進 c++11
2014-02-05 19:45:54	 *	letoh [18:45:15] 昨天才把 boost 更新到 1.55.0
2014-02-05 19:45:54	letoh	[18:46:07] 目前 boost 好像還沒用到 c++11 的語法來實作
2014-02-05 19:45:54	godfat	[18:46:52] 說真的這些真的做到很方便，type safe 也有
2014-02-05 19:45:54	godfat	[18:46:53] 不過底下需要花的力氣真的很大，稍微想想要怎麼做都覺得有一堆細節
2014-02-05 19:45:54	letoh	[18:47:08] 你是說自己實作嗎/
2014-02-05 19:45:54	letoh	[18:47:11] 你是說自己實作嗎?
2014-02-05 19:45:54	godfat	[18:47:22] 是啊，總要有人做？ XD
2014-02-05 19:45:54	godfat	[18:47:31] compile error 也會噴到那幾行去
2014-02-05 19:45:54	letoh	[18:47:51] 進標準的話就是都準備好了  不過有錯的確是不太好除錯
2014-02-05 19:45:54	letoh	[18:48:19] 現在 g++ 噴出來的錯誤都好幾頁  每次都要把訊息存下來慢慢研究XD
2014-02-05 19:45:54	godfat	[18:48:55] 我以前還在玩時，常常要交叉閱讀
2014-02-05 19:45:54	godfat	[18:48:56] 就是每個 compiler 換一輪，所有錯誤訊息都看過，比較容易釐清問題
2014-02-05 19:45:54	CindyLinz	[18:49:04] 想到一個叫作 jeh.cpp 的檔案.....ww
2014-02-05 19:45:54	CindyLinz	[18:49:33] 檔案內容兩行..  line 1: #include ".//.//.//.//jeh.cpp"   line 2: #include "jeh.cpp"
2014-02-05 19:45:54	CindyLinz	[18:49:51] 用 g++ compile 看看, 很有趣 :p
2014-02-05 19:45:54	godfat	[18:50:45] clang: error: unable to execute command: Segmentation fault: 11
2014-02-05 19:45:54	CindyLinz	[18:50:57] 怎麼變成 clang 了 XD
2014-02-05 19:45:54	godfat	[18:51:00] 我用 g++ 結果居然來 clang = =
2014-02-05 19:45:54	CindyLinz	[18:51:53] godfat: 那你換一個 compiler, 釐清一下問題好了.. (誤)
2014-02-05 19:45:54	godfat	[18:52:02] 去 linux 上跑 g++, 被洗板
2014-02-05 19:45:54	godfat	[18:52:14] 好像不會停？
2014-02-05 19:45:54	godfat	[18:52:22] 那 clang 至少會 crash... XD
2014-02-05 19:45:54	CindyLinz	[18:52:23] 會停, 可是超長......
2014-02-05 19:45:54	CindyLinz	[18:52:49] 可能只是 clang 的某個 buffer 太小? XD
2014-02-05 19:45:54	godfat	[18:52:55] 說不定可以 dos judge? XD
2014-02-05 19:45:54	CindyLinz	[18:53:04] ...........
2014-02-05 19:45:54	CindyLinz	[18:53:47] 因為看到 letoh 說 現在 g++ 噴出來的錯誤都好幾頁 XD
2014-02-05 19:45:54	godfat	[18:54:00] 話說我有時候會把 ls 打成「峱」
2014-02-05 19:45:54	godfat	[18:54:00] 說不定可以仿 sl 做個公車頭或啥的... XD
2014-02-05 19:45:54	CindyLinz	[18:54:12] XDD
2014-02-05 19:45:54	CindyLinz	[18:54:18] 我是有時候 XD 會打成 BH..
2014-02-05 19:45:54	godfat	[18:54:39] 有點距離耶... 我是會打成 CD
2014-02-05 19:45:54	CindyLinz	[18:54:58] dvorak 的 XD 二鍵是 qwerty 的 BH 二鍵 @@"
2014-02-05 19:45:54	godfat	[18:55:20] 是喔 @@" 我上次看到有人說練 dvorak 只要一個月，值得嗎？
2014-02-05 19:45:54	CindyLinz	[18:55:35] 是不是只要一個月我不知道, 但我覺得值得 :p
2014-02-05 19:45:54	godfat	[18:56:16] 除了快很多有其他好處嗎？
2014-02-05 19:45:54	CindyLinz	[18:56:26] 手比較不累
2014-02-05 19:45:54	CindyLinz	[18:56:57] 然後打密碼萬一被看到了, 人家要真的照著打出來要過比較久
2014-02-05 19:45:54	CindyLinz	[18:57:07] 因為不知道是 dvorak
2014-02-05 19:45:54	godfat	[18:57:27] XDDDDDDDD
2014-02-05 19:45:54	CindyLinz	[18:57:55] 電腦忘記鎖的時候別人要偷用你電腦的機會也比較小
2014-02-05 19:45:54	godfat	[18:57:59] 剛剛看了一下，mac 好像不能直接改 dvorak
2014-02-05 19:45:54	godfat	[18:57:59] 剛開始好像也應該用個有刻鍵盤練？
2014-02-05 19:45:54	CindyLinz	[18:58:43] Ubuntu / Debian 是安裝的時候可以選.. 然後有 X 的話還可以用 xkbmap 來設
2014-02-05 19:45:54	b4284	[18:58:44] dvorak 我也練過，一個月差不多
2014-02-05 19:45:54	CindyLinz	[18:59:06] 我還沒有用過印 dvorak 的鍵盤 @@"
2014-02-05 19:45:54	godfat	[18:59:11] 喔有了有了，在輸入法那邊可以改...
2014-02-05 19:45:54	b4284	[18:59:21] 練一個禮拜還不算太熟時就直接在上班時用 (偷練習)
2014-02-05 19:45:54	godfat	[18:59:25] 所以不用看喔？
2014-02-05 19:45:54	b4284	[18:59:35] 要看
2014-02-05 19:45:54	CindyLinz	[18:59:38] 然後有看過有人拿 qwerty 的桌機鍵盤硬拆改成 dvorak 的長相
2014-02-05 19:45:54	CindyLinz	[18:59:50] 整支鍵盤凹凸不平的... orz
2014-02-05 19:45:54	godfat	[18:59:58] 唔唔，我用無刻這樣改也沒啥意義
2014-02-05 19:45:54	b4284	[19:00:24] keyboard 不用換，建議找一張可印的 A4 cheetsheet 印出來放在鍵盤下
2014-02-05 19:45:54	godfat	[19:01:19] ok, 來玩玩看好了
2014-02-05 19:45:54	CindyLinz	[19:01:34] (推)
2014-02-05 19:45:54	b4284	[19:01:41] 我會比較推薦 colemak
2014-02-05 19:45:54	CindyLinz	[19:01:53] (鎖門)
2014-02-05 19:45:54	godfat	[19:02:38] colemak? 沒聽過 @@
2014-02-05 19:45:54	b4284	[19:02:57] dvorak 後來打順了還是很不習慣，後來就跳 colemak 了
2014-02-05 19:45:54	CindyLinz	[19:03:41] 它和 dvorak 相比, 特性是什麼啊?
2014-02-05 19:45:54	b4284	[19:04:01] 有一些鍵和 qwerty 相同
2014-02-05 19:45:54	b4284	[19:04:09] zxcv 是一樣的
2014-02-05 19:45:54	b4284	[19:05:12] 有用到 Ctrl-C Ctrl-V 的應用程式比較順手
2014-02-05 19:45:54	CindyLinz	[19:05:57] 嗯嗯
2014-02-05 19:45:54	b4284	[19:06:23] CUA binding
2014-02-05 19:45:54	b4284	[19:07:25] 有聽過 dvorak 打字是常會有兩手間交互的跳舞般的節奏，個人認為的確是這樣
2014-02-05 19:45:54	godfat	[19:07:28] 啊啊，我覺得我可能要放棄 dvorak, 確實碰上 ctrl+c 會有點痛苦
2014-02-05 19:45:54	b4284	[19:07:38] 因為母音都在左手
2014-02-05 19:45:54	CindyLinz	[19:07:50] godfat: 其實只是改用右手按而已 ^^|
2014-02-05 19:45:54	CindyLinz	[19:08:01] c 和 v 都在右邊
2014-02-05 19:45:54	b4284	[19:08:15] 而且 dvorak 打 "ls" 實在是不給力
2014-02-05 19:45:54	b4284	[19:08:40] 因為是小指，真的沒力氣 XD
2014-02-05 19:45:54	CindyLinz	[19:08:56] 嗯, 有人會用無名指來按 l
2014-02-05 19:45:54	CindyLinz	[19:09:10] 我自己是都還用小指...
2014-02-05 19:45:54	godfat	[19:09:24] 唔唔，可是如果我要搭配滑鼠的話，還是不方便 @@"
2014-02-05 19:45:54	CindyLinz	[19:09:25] 我有同事... 雖然不是用 dvorak, 但之前就設定 cd 後自動 ls.. XD
2014-02-05 19:45:54	b4284	[19:09:35] XD
2014-02-05 19:45:54	CindyLinz	[19:10:01] godfat: 下個決心一次練齊全吧, 我也改用左手用滑鼠了~~ :D
2014-02-05 19:45:54	b4284	[19:10:39] godfat: 要改的話是很快，下定決心就可以了
2014-02-05 19:45:54	godfat	[19:10:57] 噗，左手滑鼠，果然是一路練到底... XD
2014-02-05 19:45:54	CindyLinz	[19:11:02] 來用左右相反的螢幕吧?
2014-02-05 19:45:54	b4284	[19:11:15] 當初我用 terminal 下 setxkbmap 改成 dvorak 差點改不回去
2014-02-05 19:45:54	godfat	[19:11:22] 正好我滑鼠都買左右對稱的，真要練搞不好真的可以
2014-02-05 19:45:54	CindyLinz	[19:11:27] 我有用了大約兩三個小時... 然後暫時放棄.. XD
2014-02-05 19:45:54	CindyLinz	[19:11:44] 會覺得中文字都是歪斜的... XD
2014-02-05 19:45:54	b4284	[19:11:44] 後來只好用另一台電腦印出 layout 再改回 qwerty
2014-02-05 19:45:54	CindyLinz	[19:12:15] godfat 用 mac 是設定輸入法, 可能比較好?
2014-02-05 19:45:54	CindyLinz	[19:12:22] 應該是可以用滑鼠切換吧
2014-02-05 19:45:54	b4284	[19:13:18] 剛開始練，一分鐘只有 6 word，很有趣
2014-02-05 19:45:54	CindyLinz	[19:14:30] 嗯, 而且因為原本打字速度還算快, 所以看到或想到要打的字時, 很自然會預期自己打得那麼快
2014-02-05 19:45:54	CindyLinz	[19:14:35] 一整個力不從心....
2014-02-05 19:45:54	b4284	[19:17:20] godfat: http://play.typeracer.com/ ;; XD
2014-02-05 19:45:54	godfat	[19:18:09] 倒是 mac 有個困擾，cmd +
2014-02-05 19:45:54	godfat	[19:18:09] 可惡啦，現在輸入法怪怪的，我調整一下... 一直不太讓我取消某些輸入法
2014-02-05 19:45:54	CindyLinz	[19:19:14] 很有 Win8 的 fu..... ww
2014-02-05 19:45:54	CindyLinz	[19:19:18] 被 guest 打敗了.. XD
2014-02-05 19:45:54	CindyLinz	[19:19:28] 不對 我也是 guest..
2014-02-05 19:45:54	b4284	[19:20:19] 剛剛那個 jeh.cpp 那個好可怕
2014-02-05 19:45:54	b4284	[19:20:50] redirect 到硬碟上瞬間少了 2.6G
2014-02-05 19:45:54	godfat	[19:22:16] 我懷疑要重開機才有解... 他不讓我取消 dvorak 或 colemak, 一定要選一個，或是用另一個某些國家的語言的輸入法
2014-02-05 19:45:54	godfat	[19:22:16] 還好我沒 redirect...
2014-02-05 19:45:54	CindyLinz	[19:23:10] orz
2014-02-05 19:45:54	b4284	[19:23:26] 現在用 pbzip2 -9c ... cpu 飆到 70 度了
2014-02-05 19:45:54	CindyLinz	[19:23:40] 沒必要吧... 沒什麼有價值的資訊啊.... 囧
2014-02-05 19:45:54	godfat	[19:23:45] mac 上按 cmd+q 是關閉程式，cmd+w 是關閉視窗，很容易誤按又沒有任何提示
2014-02-05 19:45:54	godfat	[19:23:45] 看來 dvorak 是可以解決這個問題
2014-02-05 19:45:54	CindyLinz	[19:23:49] 螢幕上看一看笑一笑就可以了 XD
2014-02-05 19:45:54	CindyLinz	[19:23:54] XDDD
2014-02-05 19:45:54	godfat	[19:24:25] 可以用滑鼠換，做成輸入法是不錯，隨時可以切換，只是我現在居然被他 bug 搞鬼 orz
2014-02-05 19:45:54	CindyLinz	[19:24:32] 想知道多長的話.. pipe 給 wc 好了?
2014-02-05 19:45:54	b4285	[19:26:50] 當機了，哈哈
2014-02-05 19:45:54	CindyLinz	[19:26:54] ..........||
2014-02-05 19:45:54	CindyLinz	[19:27:35] 恭喜暱稱++
2014-02-05 19:45:54	godfat	[19:29:25] 我打這麼慢錯誤這麼多居然還拿第一...
2014-02-05 19:45:54	godfat	[19:31:24] 果然這次最後一名... XD
2014-02-05 19:45:54	godfat	[19:33:09] 我發現我不太會拼的字都比較慢... 三次大約都是 56 wpm
2014-02-05 19:45:54	CindyLinz	[19:33:40] 我們需要比 programmer 常用字的比賽?
2014-02-05 19:45:54	CindyLinz	[19:33:55] 像是 while, for, struct, printf 都會比較快 XD
2014-02-05 19:45:54	godfat	[19:34:28] XDDDD 那保證快很多....
2014-02-05 19:45:54	godfat	[19:35:00] 我不知道能不能號稱 60 wpm... orz
2014-02-05 19:45:54	b4285	[19:35:51] AbstractConnectionFactoryBuilderFacet
2014-02-05 19:45:54	CindyLinz	[19:36:43] 嗚嗚我不寫 Java...
2014-02-05 19:45:54	CindyLinz	[19:37:06] 而且這種長度.... 應該會用自動補齊, 或是複製貼上.....ww
2014-02-05 19:45:54	godfat	[19:40:28] 放棄，在 55~57 wpm 間... 至少很穩定吧 orz
2014-02-05 19:45:54	CindyLinz	[19:40:51] godfat: 用 dvorak / colemak 打一次試試?
2014-02-05 19:45:54	godfat	[19:41:04] XDDDD 一定會打到無地自容
2014-02-05 19:45:54	godfat	[19:41:52] 先把 layout 放在 tab 上，哪天再來練練看 @@
2014-02-05 19:45:54	CindyLinz	[19:42:39] 適合舒壓
2014-02-05 19:45:54	CindyLinz	[19:42:54] 練成後就沒這用途了...
2014-02-05 19:45:54	godfat	[19:43:11] XDDDDDDDDDDD
2014-02-05 19:45:54	godfat	[19:43:11] ++
2014-02-05 19:45:54	CindyLinz	[19:43:14] 等壓力大點的時候再用
2014-02-05 19:45:54	godfat	[19:43:22] 不過時程壓力大時無效 = =...
2014-02-05 19:45:54	CindyLinz	[19:43:26] 像是 deadline 前一天突然改用 dvorak 寫程式.....
2014-02-05 19:45:54	godfat	[19:43:33] ...
2014-02-05 19:45:54	godfat	[19:43:57] 話說其實我也算放棄 hhkb pro 和 vim...
2014-02-05 19:45:54	CindyLinz	[19:44:41] hhkb pro.. 很好的鍵盤?
2014-02-05 19:45:54	godfat	[19:46:14] 沒有方向鍵打起來有點痛苦，我覺得手感其實也沒機械鍵盤好
2014-02-05 19:45:54	CindyLinz	[19:46:23] @__@"
2014-02-05 19:45:54	lambdabot	[19:46:23] Unknown command, try @list
2014-02-05 19:45:54	godfat	[19:46:47] 最大的特色就是超小一隻吧，少別人一排
2014-02-05 19:45:54	CindyLinz	[19:47:30] 噢
2014-02-05 19:45:54	godfat	[19:48:07] 跟我賣掉的那把一樣
2014-02-05 19:45:54	godfat	[19:48:08] http://en.wikipedia.org/wiki/File:Happy_Hacking_Keyboard_Professional_2.jpg
2014-02-05 19:45:54	CindyLinz	[19:49:10] 我也蠻想要白鍵盤的..
2014-02-05 19:45:54	CindyLinz	[19:49:18] 反正鍵帽上印的字都是錯的....
2014-02-05 19:45:54	CindyLinz	[19:49:32] 可是用筆電, 而且沒外接 orz
2014-02-05 19:45:54	godfat	[19:50:20] 發揮機械魂，拆開來自己組上去？ XD
2014-02-05 19:45:54	CindyLinz	[19:50:34] 我沒有機械魂... XD
2014-02-05 19:45:54	godfat	[19:50:48] 噢... XD 那只好交個有機械魂的朋友了 (?)
2014-02-05 19:45:54	letoh	[19:51:23] 換鍵帽的話應該還好?
2014-02-05 19:45:54	CindyLinz	[19:51:43] 筆電欸 @@" 沒出就沒有啊
2014-02-05 19:45:54	b4285	[19:52:18] godfat: 我對電容式還蠻有興趣，聽說是很安靜
2014-02-05 19:45:54	letoh	[19:52:58] 我以為那種剪刀腳鍵盤的鍵帽有通用規格
2014-02-05 19:45:54	b4285	[19:53:02] 如果要很小的話也有很多種替代品
2014-02-05 19:45:54	godfat	[19:53:13] 我覺得也還好，是比機械鍵盤安靜，但剪刀腳或薄膜還是比較安靜（印象
2014-02-05 19:45:54	hashcat	[20:09:59] 高雄都不知道上哪買
2014-02-05 19:45:54	CindyLinz	[20:15:57] 可以找一天上台北到店裡去試一下各種鍵盤類型的手感 (記下來), 然後回去再用網路訂吧
2014-02-05 19:45:54	hashcat	[20:16:37] 這樣要加高鐵錢
2014-02-05 19:45:54	b4285	[20:17:34] hashcat: 建國路上有一家 PC Party
2014-02-05 19:45:54	hashcat	[20:17:37] 不如直接一次買十個
2014-02-05 19:45:54	hashcat	[20:17:45] ??
2014-02-05 19:45:54	hashcat	[20:17:56] 後天來去看看
2014-02-05 19:45:54	b4285	[20:17:56] 不是說高雄嘛
2014-02-05 19:45:54	hashcat	[20:19:07] 離建國路有點遠
2014-02-05 19:45:54	b4285	[20:19:36] hashcat: http://goo.gl/maps/ZmSkw
2014-02-05 19:45:54	b4285	[20:21:21] 對面有一家情趣用品店，呵呵
2014-02-05 19:45:54	b4285	[20:21:31] 沒印象
2014-02-05 19:45:54	hashcat	[20:21:39] 招牌像是家紋
2014-02-05 19:45:54	petercom1and	[20:21:41] 變4285了XD
2014-02-05 19:45:54	hashcat	[20:21:47] 難怪我沒印象
2014-02-05 19:45:54	b4285	[20:22:17] 4285 是啥
2014-02-05 19:45:54	hashcat	[20:22:24] 那招牌我會直接掠過
2014-02-05 19:45:54	b4285	[20:22:38] ASUS 的股票號碼嗎
2014-02-05 19:45:54	petercom1and	[20:22:42] b4285: 你的nick呀XD
2014-02-05 19:45:54	b4285	[20:23:05] :P
2014-02-05 19:45:54	CindyLinz	[17:29:10] 覺得, Haskell 裡面實作 printf 的手法, 應該列為使用 design pattern 解決語言缺陷的例子.. :p
2014-02-05 19:45:54	CindyLinz	[17:29:52] 就像 C++ 裡的 singleton..
2014-02-05 19:45:54	letoh	[18:09:20] 是指 type-safe printf 嗎?
2014-02-05 19:45:54	--	Notice(kornbluth.freenode.net) -> #haskell.tw: [18:55:53] [freenode-info] please register your nickname...don't forget to auto-identify! http://freenode.net/faq.shtml#nicksetup
2014-02-05 19:45:54	monochrom	[01:04:33] 基本上, freenode 正在大病復原中 XD
2014-02-05 19:45:54	CindyLinz	[01:59:33] letoh: 對 type safe 的
2014-02-05 19:45:54	CindyLinz	[01:59:55] 用 class PrintType a 之類的接起來
2014-02-05 19:45:54	suhorng	[21:30:27] 傳說中用了會變快的東西？http://hackage.haskell.org/package/monad-ran
2014-02-05 19:45:54	suhorng	[21:30:33] (依據 http://www.haskell.org/haskellwiki/Performance/Monads 的解釋)
2014-02-05 19:45:54	monochrom	[01:06:55] 別傳說了, 自行實驗就知
2014-02-05 19:45:54	CindyLinz	[01:45:58] XD
2014-02-05 19:45:54	CindyLinz	[14:30:16] 嗚嗚上班好想睡 orz
2014-02-05 19:45:54	CindyLinz	[17:00:25] 為什麼 GHC 不支援 module 之間 mutually recursive import 呢.. QQ
2014-02-05 19:45:54	hashcat__	[17:01:13] 說到這個prolog什麼都支持
2014-02-05 19:45:54	CindyLinz	[17:01:16] 先別說這樣用是不是好的程式結構, 既然是 Haskell 了.. mutually recursive everywhere 就是天性啊
2014-02-05 19:45:54	hashcat	[17:02:26] 我想不到啥狀況要用到互遞歸引入
2014-02-05 19:45:54	hashcat	[17:07:58] Haskell的開發者天性是覺得無聊就會擺爛去
2014-02-05 19:45:54	CindyLinz	[17:10:48] 狀況是有的..
2014-02-05 19:45:54	CindyLinz	[17:11:01] 我是把 module 想成 export 給 user 的 public 介面
2014-02-05 19:45:54	CindyLinz	[17:11:23] 不對, 介面的用法是沒差..
2014-02-05 19:45:54	hashcat	[17:11:50] 模組互引用的話, 我想到的狀況都是可以合併成一個模組
2014-02-05 19:45:54	CindyLinz	[17:12:15] 理論上可以合成一個模組, 可是要避開 name conflict 就很不方便 :Q
2014-02-05 19:45:54	hashcat	[17:13:33] Rust支持, Haskell不知道啥時才會支持
2014-02-05 19:45:54	hashcat	[17:13:58] Haskell已經變成實驗純函數式的場所啦
2014-02-05 19:45:54	CindyLinz	[17:14:18] 那才應該把這個看起來不知道會不會常用的功能加進去啊 XD
2014-02-05 19:45:54	CindyLinz	[17:14:21] 不計工本 XD
2014-02-05 19:45:54	hashcat	[17:14:55] 不少東西在Haskell都不會被理會
2014-02-05 19:45:54	hashcat	[17:15:12] 倒是一堆莫名其妙的擴展
2014-02-05 19:45:54	CindyLinz	[17:15:32] 那他們收 patch 會很龜毛嗎?
2014-02-05 19:45:54	hashcat	[17:15:33] 維護起來各種有心
2014-02-05 19:45:54	hashcat	[17:16:14] 陪你哈啦一陣之後不一定會修
2014-02-05 19:45:54	CindyLinz	[17:16:28] 喔不是, 我是說收 patch, 不是要他們修的話?
2014-02-05 19:45:54	hashcat	[17:17:19] 不知道
2014-02-05 19:45:54	CindyLinz	[17:17:48] mmm
2014-02-05 19:45:54	CindyLinz	[17:18:11] 可是覺得改這個應該會改很大 orz
2014-02-05 19:45:54	hashcat	[17:19:07] Haskell意外地難用唉
2014-02-05 19:45:54	hashcat	[17:19:15] 看要不改成rust或ocaml
2014-02-05 19:45:54	CindyLinz	[17:21:07] 我現在比之前熟悉 lazy 和 monad trans 那種套來套去的 recursive 以後, 現在用起來有比較舒服了~
2014-02-05 19:45:54	hashcat	[17:23:06] rust出現沒多久, 該有的特性全包了
2014-02-05 19:45:54	hashcat	[17:23:55] 除了語法是 c-like, 不過可能也算是優點
2014-02-05 19:45:54	CindyLinz	[17:24:19] XD
2014-02-05 19:45:54	CindyLinz	[17:25:47] 哎可是我就想玩 lazy everywhere 的東西啊...
2014-02-05 19:45:54	hashcat	[17:27:42] lazy everywhere的用處感覺沒logic variable everywhere大
2014-02-05 19:45:54	CindyLinz	[17:32:11] 要真的去用才能體會它大不大啊
2014-02-05 19:45:54	hashcat	[17:34:29] lazy特性我只用到像是iterator或generator的東西
2014-02-05 19:45:54	CindyLinz	[17:34:39] 之前看唐鳳寫一個試算表, 用 lazy 方式寫超漂亮的
2014-02-05 19:45:54	CindyLinz	[17:36:00] 他寫書原本想用 haskell 來作教學, 不過那時社群裡的人希望他用 javascript, 會的人比較多 ^^|
2014-02-05 19:45:54	hashcat	[17:39:29] 在哪裡
2014-02-05 19:45:54	CindyLinz	[17:39:45] 正在找... ^^|
2014-02-05 19:45:54	CindyLinz	[17:39:56] 因為是很久以前在 FB 裡的留言對話 orz
2014-02-05 19:45:54	CindyLinz	[17:40:36] 找到這個... https://github.com/audreyt/500lines/blob/master/spreadsheet/extra/Sheet.hs
2014-02-05 19:45:54	CindyLinz	[17:40:41] 奇怪, 還是 haskell @_@"
2014-02-05 19:45:54	CindyLinz	[17:44:22] 找不到那時的解說了...
2014-02-05 19:45:54	CindyLinz	[17:44:42] 主要是講 recalc 的作法
2014-02-05 19:45:54	hashcat	[17:45:57] 額算了
2014-02-05 19:45:54	CindyLinz	[17:47:37] 那個 recalc s = fmap calc s where ... 這邊兩頭出現的 s 就有意思了...
2014-02-05 19:45:54	CindyLinz	[17:47:53] 還好不是 suhorng 寫, 不然連 s 都沒有.. (逃)
2014-02-05 19:45:54	CindyLinz	[17:48:17] 啊不對 where 裡面有用到 s, 所以跑不掉 XD
2014-02-05 19:45:54	hashcat	[17:49:10] 這裡貌似少一票子人
2014-02-05 19:45:54	CindyLinz	[17:49:52] 沒差, 反正有 log.. XD
2014-02-05 19:45:54	hashcat	[17:52:06] 玩一下prolog
2014-02-05 19:45:54	hashcat	[17:52:14] http://dtai.cs.kuleuven.be/problog/tutorial.html
2014-02-05 19:45:54	CindyLinz	[17:53:20] 我要先專心把我現在弄一半的東西完成 ^^|
2014-02-05 19:45:54	CindyLinz	[17:53:54] 已經報了 talk... 沒那麼想開天窗放棄 XD
2014-02-05 19:45:54	CindyLinz	[18:03:10] 耶~ 找出來了.. 上面這個 recalc s 的原型與教學在這: https://github.com/quchen/articles/blob/master/loeb-moeb.md
2014-02-05 19:45:54	CindyLinz	[18:03:33] 超愛這四點 feature XD
2014-02-05 19:45:54	CindyLinz	[18:03:34] 1. The implementation is very simple to write.
2014-02-05 19:45:54	CindyLinz	[18:03:35] 2. The implementation is hard to understand.
2014-02-05 19:45:54	CindyLinz	[18:03:35] 3. It is easy to use.
2014-02-05 19:45:54	CindyLinz	[18:03:35] 4. It is explainable.
2014-02-05 19:45:54	CindyLinz	[18:04:12] 那應該是從這 channel 看來的..
2014-02-05 19:45:54	CindyLinz	[18:06:05] :t \x -> go where go = fmap ($ go) x
2014-02-05 19:45:54	lambdabot	[18:06:06] parse error on input `where'
2014-02-05 19:45:54	CindyLinz	[18:06:15] :t \x -> let go = fmap ($ go) x in go
2014-02-05 19:45:54	lambdabot	[18:06:16] Functor f => f (f b -> b) -> f b
2014-02-05 19:45:54	***	Playback Complete.
2014-02-05 19:47:12	--	モード #haskell.tw [+cnt]
2014-02-05 19:47:12	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-05 20:11:40	-->	b4284 (~b4283@218-164-223-201.dynamic.hinet.net) が #haskell.tw に参加
2014-02-05 20:16:23	<--	godfat (~Adium@1-160-85-35.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-05 20:22:25	<--	hashcat (~kv2a@1-172-234-245.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-05 21:51:03	-->	godfat (~Adium@36-225-252-120.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-05 21:55:48	<--	godfat (~Adium@36-225-252-120.dynamic-ip.hinet.net) が終了 (Ping timeout: 260 seconds)
2014-02-05 21:56:37	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-05 23:19:37	<--	liuzhoou (~liuzhoou@101.229.165.120) が終了 (Quit: Leaving...)
2014-02-06 00:17:47	<--	b4284 (~b4283@218-164-223-201.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-06 00:30:37	monochrom	Haskell 支持 mutual import modules 呀, 但實際上很難做. GHC 有做呀, 只是要你寫多幾行幫它.
2014-02-06 00:55:23	CindyLinz	!
2014-02-06 00:56:57	CindyLinz	謝謝~~ 找到了這個! http://www.haskell.org/haskellwiki/Mutually_recursive_modules
2014-02-06 00:59:24	CindyLinz	然後這個 http://www.haskell.org/ghc/docs/7.0.3/html/users_guide/separate-compilation.html#mutual-recursion
2014-02-06 02:02:35	monochrom	7.0.3 很舊了. 儘管, 在這問題上沒變.
2014-02-06 02:03:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Ping timeout: 272 seconds)
2014-02-06 02:03:15	monochrom	我是不是唯一一人有讀過 GHC 說明書呢?
2014-02-06 02:04:32	monochrom	(我這樣說, 會得罪多少人呢?)
2014-02-06 02:07:49	monochrom	誠然, 幫 GHC 寫多那幾行也是煩. 因為每次轉變程式, 都要額外擔心那幾行怎樣跟著變. 這就是我們廣東人說, 多隻香爐多隻鬼...
2014-02-06 02:08:47	monochrom	多個 file 多個 bug :)
2014-02-06 02:19:47	CindyLinz	我大前年有把 ghc manual 讀過一遍... 不過... (艸)
2014-02-06 03:04:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-06 05:10:17	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Quit: Leaving...)
2014-02-06 06:21:25	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-06 07:50:30	<--	mno2 (~mno2@66.201.48.54) が終了 (Quit: mno2)
2014-02-06 08:04:37	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Read error: Operation timed out)
2014-02-06 09:08:11	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-06 09:24:27	-->	hashcat (~kv2a@218-173-233-47.dynamic.hinet.net) が #haskell.tw に参加
2014-02-06 11:24:04	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Ping timeout: 252 seconds)
2014-02-06 11:32:30	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-06 11:52:40	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-06 12:21:46	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) が終了 (Remote host closed the connection)
2014-02-06 12:22:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-06 12:25:53	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-06 12:41:33	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-06 12:57:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Quit: Leaving)
2014-02-06 14:19:19	<--	mno2 (~mno2@66.201.48.54) が終了 (Ping timeout: 265 seconds)
2014-02-06 14:32:44	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-06 16:20:33	<--	mno2 (~mno2@66.201.48.54) が終了 (Quit: mno2)
2014-02-06 16:31:01	<--	petercommand (~peter@unaffiliated/petercommand) が終了 (Ping timeout: 245 seconds)
2014-02-06 16:37:33	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-06 17:59:01	-->	hashcat__ (~kv2a@218-173-233-47.dynamic.hinet.net) が #haskell.tw に参加
2014-02-06 17:59:05	<--	hashcat (~kv2a@218-173-233-47.dynamic.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-02-06 18:53:56	kanru	開始了嗎？
2014-02-06 18:55:38	--	hashcat__ のニックネームが変更され hashcat になりました
2014-02-06 21:27:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-06 22:43:59	-->	b4283 (~b4283@36-238-229-69.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-06 23:25:59	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-06 23:26:10	<--	hashcat (~kv2a@218-173-233-47.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-07 00:11:49	<--	b4283 (~b4283@36-238-229-69.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-02-07 00:18:40	-->	b4283 (~b4283@118.150.148.244) が #haskell.tw に参加
2014-02-07 00:31:56	<--	b4283 (~b4283@118.150.148.244) が終了 (Ping timeout: 245 seconds)
2014-02-07 00:34:30	-->	b4283 (~b4283@118.150.148.244) が #haskell.tw に参加
2014-02-07 01:48:14	<--	hashcat_ (~hashcat_@27.243.104.148) が終了 (Ping timeout: 246 seconds)
2014-02-07 02:01:02	-->	hashcat_ (~hashcat_@39.14.102.235) が #haskell.tw に参加
2014-02-07 02:06:25	<--	b4283 (~b4283@118.150.148.244) が終了 (Ping timeout: 265 seconds)
2014-02-07 03:26:14	<--	mno2 (~mno2@66.201.48.54) が終了 (Quit: mno2)
2014-02-07 04:40:06	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Quit: Leaving...)
2014-02-07 06:22:28	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-07 06:23:01	<--	mno2 (~mno2@66.201.48.54) が終了 (Client Quit)
2014-02-07 06:25:04	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-07 08:43:07	-->	b4283 (~b4283@36-238-226-251.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-07 09:18:14	<--	b4283 (~b4283@36-238-226-251.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-02-07 10:36:55	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-07 11:10:43	-->	gko_ (d315898b@gateway/web/freenode/ip.211.21.137.139) が #haskell.tw に参加
2014-02-07 11:38:26	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-07 11:38:26	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-07 11:38:26	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-07 11:38:26	--	ニックネーム #haskell.tw: [a2n b4283 cataska cataska_ cibs CindyLinz cyt93cs darkx drbean gko_ godfat hashcat_ hychen_ kanru lambdabot letoh logfat__________ miaout17 mno2 monochrom petercommand shik superbil_c_]
2014-02-07 11:38:26	--	チャンネル #haskell.tw: 23 ニックネーム (0 オペレータ, 0 発言, 23 通常)
2014-02-07 11:38:46	--	モード #haskell.tw [+cnt]
2014-02-07 11:38:46	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-07 12:18:19	<--	letoh (~stackvm@59-104-108-50.adsl.dynamic.seed.net.tw) が終了 (Ping timeout: 252 seconds)
2014-02-07 12:29:57	-->	letoh (~stackvm@203.67.184.110) が #haskell.tw に参加
2014-02-07 13:10:59	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Ping timeout: 265 seconds)
2014-02-07 13:53:55	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-07 14:21:13	-->	godfat (~Adium@1-160-85-35.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 14:54:19	<--	mno2 (~mno2@66.201.48.54) が終了 (Quit: mno2)
2014-02-07 16:03:34	CindyLinz	昨天聽了 scm 講 prolog 的八卦.. 常常在這 channel 聽到 prolog, 卻不知道它在 198x~ 199x 年代是這麼腥風血雨.... o__o
2014-02-07 16:04:05	godfat	沒有聽到 ><
2014-02-07 16:05:14	CindyLinz	第五代電腦 https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E4%BB%A3%E9%9B%BB%E8%85%A6
2014-02-07 16:05:55	gko_	The name Prolog was chosen by Philippe Roussel as an abbreviation for programmation en logique (French for programming in logic). It was created around 1972 by Alain Colmerauer with Philippe Roussel.
2014-02-07 16:06:53	CindyLinz	prolog 是它的軟體部分, 而且因為實作面它是從軟體往硬體推, 所以幾乎就是硬體發展的核心的感覺...
2014-02-07 16:10:23	godfat	嗯嗯，因為野心很大？
2014-02-07 16:10:23	godfat	想到這個
2014-02-07 16:10:23	godfat	http://www.gksoft.com/a/fun/hal-ibm.html
2014-02-07 16:10:26	CindyLinz	日本起頭要搞這東西, 引起歐洲, 英國(好像不算歐洲的一部分一樣XD), 美國恐慌, 分別都用國家的力量弄了幾個組織起來搞 (美國部分是鬆動反托辣斯法, 開後門為作跨企業整合), 大家砸超多錢進去, 就像軍備競賽一樣
2014-02-07 16:10:52	godfat	@@" 這麼有趣...
2014-02-07 16:11:00	CindyLinz	然後在 199x 年的時候全部消失, 砸進去的錢全都蒸發掉....
2014-02-07 16:11:19	b4283	9x 年 x86 起飛
2014-02-07 16:11:42	CindyLinz	台灣真是國力好弱啊, 這種事情都不會有我們的份的... ._.
2014-02-07 16:11:42	godfat	我一直以為 prolog 是美國 dod 搞的，最後認賠放棄
2014-02-07 16:11:47	godfat	...XD
2014-02-07 16:11:58	b4283	dod 搞的是 Ada
2014-02-07 16:12:47	CindyLinz	這一段故事不是在講 prolog 的興衰, 只是 prolog 參與度蠻大的....
2014-02-07 16:13:05	godfat	是喔
2014-02-07 16:14:12	CindyLinz	scm 一開始問大家有沒有聽過第五代電腦... 然後幽幽地說第五代電腦整個消聲匿跡了, 沒再聽到有人提, 好像也沒什麼人記得了, 可是當年是非常紅的議題, 大家都在講....
2014-02-07 16:15:06	godfat	XDDD 我好像有聽過第四代，不過也可能是第五代... 這種後來沒提的數字，後來到底是幾都忘了
2014-02-07 16:15:47	b4283	我連現在用的是幾代也不曉得
2014-02-07 16:16:23	CindyLinz	scm 問說現在學校還有沒有教第N代電腦, 大家說好像沒有, 他說, 這樣才是對的!
2014-02-07 16:16:36	godfat	一開始都很喜歡喊數字，後來數字多了，大家都搞不清楚了，乾脆另闢名詞
2014-02-07 16:17:00	CindyLinz	第一代是真空管, 第二代是電晶體, 第三代是積體電路, 第四代是 IBM-360 (空前絕後就僅此一台)
2014-02-07 16:17:08	godfat	XDDDD
2014-02-07 16:17:19	CindyLinz	他懷疑是 IBM 為行銷目的編出來的分類法.....
2014-02-07 16:17:51	CindyLinz	第五代就是剛剛講的那十多年
2014-02-07 16:17:58	godfat	我覺得大多這些數字都是為了行銷發明的..
2014-02-07 16:18:22	CindyLinz	ESPRIT 這個是歐洲那時的跨國組織 https://en.wikipedia.org/wiki/European_Strategic_Program_on_Research_in_Information_Technology
2014-02-07 16:18:38	CindyLinz	現在這個字好像是服飾品牌.. XD
2014-02-07 16:18:51	godfat	XDDDDDDD
2014-02-07 16:18:57	CindyLinz	蠻有趣的, 英國都不喜歡跟歐洲一起玩....
2014-02-07 16:19:10	godfat	好有深意的品牌名，下次可以考慮
2014-02-07 16:19:33	CindyLinz	只是隔了個海峽(英吉利)就差這麼多... 我完全可以體會 (咦)
2014-02-07 16:19:40	godfat	XDDDDDDDDDD
2014-02-07 16:19:49	godfat	有理！
2014-02-07 16:21:54	CindyLinz	hmm... 魔鬼終結者 1984, 第二集 1991  就剛好在那個年代裡面....
2014-02-07 16:22:12	CindyLinz	大概瘋狂的研究嚇到人了....
2014-02-07 16:22:34	b4283	第二集應該是 1992
2014-02-07 16:22:58	CindyLinz	為什麼你會記住這麼精準的年份.....ww
2014-02-07 16:23:00	b4283	咦，奇怪，記錯了嗎
2014-02-07 16:23:08	CindyLinz	我是照 wiki 打的, 我自己沒答案 ^^|
2014-02-07 16:23:21	b4283	以前還會下載影片時會做一份 excel index  XD
2014-02-07 16:23:46	CindyLinz	喔 XD
2014-02-07 16:27:02	CindyLinz	x86... A.K.A intel 是滅掉第五代電腦的其中一綑稻草... 因為 von Neumann 模型的電腦效能進展太快, 淹掉第五代電腦硬體部分的發展成果
2014-02-07 16:28:20	CindyLinz	人們就會開始講說: 我買新的 PC 就好了, 為什麼要用你們這麼複雜又不見得比較快的高度平行化的 prolog 電腦
2014-02-07 16:30:58	CindyLinz	覺得.. 一直都有這種因素使得新生的研究方向夭折好可惜喔.. 像是之前 intel 的 Itanium CPU..
2014-02-07 16:31:39	godfat	讓我想到 NASA... XD
2014-02-07 16:31:59	CindyLinz	或是很早以前曾經有過 asynchrous hardware (就是裡面不需要 clock 的)
2014-02-07 16:32:19	godfat	我對硬體一竅不通.. ~.~
2014-02-07 16:32:21	CindyLinz	NASA 有什麼故事嗎?
2014-02-07 16:32:54	godfat	現在想到的是前一陣子看到有人在質疑 nasa 花了很多錢，但對大部分的人沒有幫助
2014-02-07 16:33:08	CindyLinz	喔喔 那篇文回得真厲害 XD
2014-02-07 16:33:12	godfat	然後就要想一套說詞出來 (?)
2014-02-07 16:33:35	CindyLinz	前幾天電視上看到台灣軍工業的研究, 也讓我想到那篇文章.... 「沒有太空研究的時候, 科技推手是軍工業」
2014-02-07 16:33:59	godfat	真是非常現實的結果呀（聳肩）
2014-02-07 16:34:52	CindyLinz	那我知道為什麼 NASA 一直不承認有外星人的事...
2014-02-07 16:35:02	godfat	話說之前在打 TTA (Through The Age, board game),
2014-02-07 16:35:02	godfat	個人不太喜歡打軍事，都在建設，結果其他三人軍備競爭，
2014-02-07 16:35:03	godfat	把我當 ATM 領錢 orz
2014-02-07 16:35:03	godfat	好慘，中間之後基本上是完全動不了，想跟上也沒辦法
2014-02-07 16:35:33	CindyLinz	你根本就是清朝末年嘛...
2014-02-07 16:36:08	CindyLinz	NASA 這是一張王牌, 等到經費不足的時候, 就會宣稱發現外星人, 而且侵略性很強, 需要開發星際武器........
2014-02-07 16:36:11	godfat	XDDDDDDD 不會呀，我原本一直是文化最強的，後來都被搶走文物了...
2014-02-07 16:36:24	CindyLinz	的確是清末沒錯啊....... wwww
2014-02-07 16:36:39	godfat	清末也沒讓我感受到文化最強 XD
2014-02-07 16:36:57	CindyLinz	你看文物都被搶到台灣了... (咦)
2014-02-07 16:37:29	godfat	說到宣稱發現外星人，就想到《三體》
2014-02-07 16:37:29	godfat	XDDDDD
2014-02-07 16:37:54	CindyLinz	文化就是.... 一大堆沒道理的 rule set, 而且大家都心悅誠服地遵守啊 @_@"
2014-02-07 16:38:31	godfat	...O_o 太現實了，遊戲裡的文化就直接是數字上的分數了 XD
2014-02-07 16:38:42	CindyLinz	大家都遵守, 而且接受這文化裡內建的價值觀的話, 倒是過得蠻舒服的啦 :p
2014-02-07 16:38:58	godfat	是沒錯，反正就是開心就好... XD
2014-02-07 16:41:37	CindyLinz	現在的複雜硬體通常都是 sync 的. 最基本的元件邏輯閘通常都是 input 一有變化, output 就會跟著變化, 然後附帶一些些充壓放電之類的物理延遲
2014-02-07 16:42:49	CindyLinz	所以 output 要等 ready 以後才可以去讀. 而 sync 的硬體就是有 global 的 clock, 大家約好延遲都一定會在約好 clock 數以內完成, 複雜的 gate 會用比較多 clock, 簡單的可以比較少
2014-02-07 16:43:07	CindyLinz	然後要讀結果的元件就是看 clock 到了才讀.
2014-02-07 16:43:20	godfat	聽起來缺點就是要一直等？優點是很好設計？
2014-02-07 16:43:26	CindyLinz	async 的話就是元件各自通知下游
2014-02-07 16:43:34	CindyLinz	優點的確就是好設計, 便宜..
2014-02-07 16:43:45	CindyLinz	嗯會有 fragmentation 的問題
2014-02-07 16:43:50	CindyLinz	time slot 上的
2014-02-07 16:44:11	CindyLinz	clock 間距趨近 0 的話可以縮小這個浪費
2014-02-07 16:44:25	godfat	便宜是因為可以用便宜素材嗎？矽？
2014-02-07 16:44:53	CindyLinz	可是 clock 在一個 clock signal 傳遞到整個電路的每個角落以前不能跳下一個, 不然會出事
2014-02-07 16:45:09	CindyLinz	而且 clock 越頻繁越燙越耗電
2014-02-07 16:45:25	godfat	唔唔，聽起來這裡有不少物理限制
2014-02-07 16:45:26	CindyLinz	跟材料沒有關係, 就只是設計簡單, bug 就比較少
2014-02-07 16:46:16	CindyLinz	clock 自己 on off 也是會有物理延遲, 不過比起別的真的在計算的元件還算小
2014-02-07 16:46:41	CindyLinz	然後... async 的設計就出局了.. QQ
2014-02-07 16:49:47	godfat	這個嗎？
2014-02-07 16:49:48	godfat	http://en.wikipedia.org/wiki/Asynchronous_circuit
2014-02-07 16:49:48	godfat	多核心會接近這種作法嗎？還是說層級差太多了？
2014-02-07 16:55:40	CindyLinz	應該是這個沒錯
2014-02-07 16:57:25	CindyLinz	覺得多核心可以視為 hybrid 吧, 或是整個晶片裡面有「子晶片」, 而且「子晶片」自帶 clock 的話, 而且會獨立用額外 signal 來通知外部什麼時候跟它溝通, 就有這個 async 的味道在
2014-02-07 16:57:52	CindyLinz	只是 async 設計的原始是全面性都這樣做, 現在這些「子晶片」裡面還是用 clock 在做
2014-02-07 16:58:11	CindyLinz	async 接觸面出現的地方比例很低
2014-02-07 17:01:19	godfat	聽起來就是整個電子電路都要重新設計了..? 好像滿難的？ XD
2014-02-07 17:01:19	godfat	讓我想起之前看量子電腦的東西... 其實看不太懂，
2014-02-07 17:01:19	godfat	我的理解是要在量子電腦上快，整個演算法要重新設計，不然是一樣的
2014-02-07 17:01:43	CindyLinz	(就像 Haskell monad do-notation 裡面每一行都是 callback, 和我們寫 js / perl 只是偶爾 callback 一下的差別 XD)
2014-02-07 17:01:59	godfat	...XD
2014-02-07 17:02:10	CindyLinz	對啊, 就是別支發展越完整越成熟, 就會壓迫到這個旁支 QQ
2014-02-07 17:02:33	godfat	百年投資！
2014-02-07 17:03:26	godfat	人命*2 之後大概比較容易提昌這個..
2014-02-07 17:16:20	CindyLinz	人命*2 是什麼東東 @_@"
2014-02-07 17:17:20	CindyLinz	我隱約覺得.. Haskell 可以把連鎖 callback 玩成這樣, 應該也有辦法做出一些硬體描述語言, 用來設計 pure async logic.... @@"
2014-02-07 17:17:49	godfat	就是平均壽命變兩倍
2014-02-07 17:17:54	CindyLinz	喔喔....
2014-02-07 17:18:32	CindyLinz	只是現有的硬體又快又好, 剛實作的新作法一定打不過, 就不知能不能撐到長大 orz
2014-02-07 17:19:01	godfat	以我粗淺的知識而言，覺得滿難的 XD
2014-02-07 17:19:44	CindyLinz	Q__Q
2014-02-07 18:53:35	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-07 19:25:41	-->	godfat1 (~Adium@1-160-85-35.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 19:25:41	<--	godfat (~Adium@1-160-85-35.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-07 19:28:08	<--	gko_ (d315898b@gateway/web/freenode/ip.211.21.137.139) が終了 (Ping timeout: 245 seconds)
2014-02-07 19:33:54	<--	godfat1 (~Adium@1-160-85-35.dynamic.hinet.net) が終了 (Ping timeout: 260 seconds)
2014-02-07 19:35:05	-->	hashcat (~kv2a@218-166-237-137.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 20:24:29	-->	godfat (~Adium@1-169-251-133.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 20:24:40	<--	godfat (~Adium@1-169-251-133.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-07 20:24:56	-->	godfat (~Adium@1-169-251-133.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 21:18:45	-->	suhorng (~suhorng@118-166-52-241.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 21:35:48	-->	suhorng1 (~suhorng@118-166-52-241.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 21:37:41	<--	suhorng (~suhorng@118-166-52-241.dynamic.hinet.net) が終了 (Ping timeout: 248 seconds)
2014-02-07 21:45:01	suhorng1	昨天的頭影片有放出來嗎?
2014-02-07 21:47:40	CindyLinz	沒看到....
2014-02-07 21:47:53	CindyLinz	老師最後一張有列出他用到的 ref
2014-02-07 21:48:02	CindyLinz	不過投影片沒看到就.... XDrz
2014-02-07 21:48:08	suhorng1	瞭解~
2014-02-07 21:48:22	cataska_	http://amzn.com/B00HG2CQ1Q
2014-02-07 21:48:46	CindyLinz	嚇一跳, 想說投影片集成書了......ww
2014-02-07 21:48:55	cataska_	不過這裡的長輩應該不需要這本書了吧 XD
2014-02-07 21:49:25	suhorng1	這個標題我喜歡!
2014-02-07 21:49:51	CindyLinz	A Project based approach!
2014-02-07 21:50:00	suhorng1	http://www.apress.com/9781430262503 這裡有目錄 :D
2014-02-07 21:50:56	CindyLinz	如果這裡都長輩的話, 話題就不會這麼多了.....XD
2014-02-07 21:53:21	suhorng1	Part II: Data Mining\n　　6. Knowing Your Clients Using Monads\n　　7. More Monads: Now for Recommendations\n　　...
2014-02-07 21:53:25	suhorng1	也太有趣www
2014-02-07 21:53:54	letoh	新書耶
2014-02-07 21:54:17	CindyLinz	Kindle edition 有 PDF 嗎? @@"
2014-02-07 21:54:23	CindyLinz	或是, 轉這個是容易的嗎?
2014-02-07 21:55:34	cataska_	直接到 Apress 買，PDF, MOBI,EPUB 都有
2014-02-07 21:55:34	letoh	kindle 有自己的格式 azw/kf8
2014-02-07 21:56:09	letoh	用 kindle 的話可以看 mobi.. 不建議 pdf
2014-02-07 21:56:52	CindyLinz	cataska_: 價錢差很多... ^^|
2014-02-07 21:57:01	CindyLinz	25USD vs 35USD
2014-02-07 21:57:14	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Remote host closed the connection)
2014-02-07 21:57:58	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-07 21:58:43	letoh	喔你是說直接在 amazon 買 kindle edition ?
2014-02-07 21:59:15	letoh	50% off
2014-02-07 22:00:48	CindyLinz	會寄到 Kindle Cloud Reader.. 不知道是什麼東西 ._.
2014-02-07 22:01:12	letoh	amazon.co.jp 買的是 2346  換算成台幣便宜 50 XD
2014-02-07 22:01:48	letoh	雲端會有一個儲存的地方  有 android 機器可以裝 kindle app 下載買好的那些書
2014-02-07 22:02:29	letoh	apress 買的電子版該不會是 drm-free 吧?
2014-02-07 22:03:27	CindyLinz	Apress 的 Billing 要填美國地址... OAO
2014-02-07 22:03:41	letoh	基本上 amazon 也是
2014-02-07 22:03:49	CindyLinz	要選美國的 state.. orz
2014-02-07 22:06:40	letoh	Parallel and Concurrent Programming in Haskell: Techniques for Multicore and Multithreaded Programming [Kindle版]  ￥ 1,762
2014-02-07 22:07:21	CindyLinz	咦 可以選 Country, 有 Taiwan
2014-02-07 22:07:37	CindyLinz	厚, 這一個選項放這麼下面....
2014-02-07 22:07:38	letoh	amazon ?
2014-02-07 22:09:33	suhorng1	data WhereIsT a where HideT :: t a -> WhereIsT a　這個 GADT 好奇怪喔..這樣使用他的函數該怎麼寫 @@？
2014-02-07 22:10:58	CindyLinz	apress
2014-02-07 22:11:31	-->	b4283 (~b4283@36-238-224-234.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-07 22:11:43	CindyLinz	已購入..
2014-02-07 22:11:47	CindyLinz	cataska_: 謝謝 ^^
2014-02-07 22:13:37	-->	suhorng (~suhorng@118-166-52-241.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 22:14:42	<--	suhorng1 (~suhorng@118-166-52-241.dynamic.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-02-07 22:14:43	CindyLinz	suhorng: three :: WhereIsT a -> Int   three _ = 3
2014-02-07 22:16:05	CindyLinz	我覺得這裡被藏起來的 t 就像是被 forall t. 藏起來一樣, 因為沒有放額外的 class constraint, 所以除了 undefined 的用法以外沒有別的用處 @@"
2014-02-07 22:16:36	cataska_	CindyLinz: :)
2014-02-07 22:16:58	suhorng	根本不用他的type www
2014-02-07 22:17:03	suhorng	的確是一招
2014-02-07 22:17:21	CindyLinz	我覺得要作正常的應用應該會放 class 吧...
2014-02-07 22:17:48	suhorng	老實說，我看到這個 GADT 的宣告原作是用在 Typeable + 使用 gcast1
2014-02-07 22:17:48	CindyLinz	或是像 ST monad 那樣想讓你不准自己用
2014-02-07 22:17:55	suhorng	嗯, 隱藏起來那樣
2014-02-07 22:19:27	suhorng	有道理耶, 直接看成 forall t. 起來..雖然實在不知道他的 type 會被怎樣弄
2014-02-07 22:20:53	suhorng	突然意識到那這樣是不是就不需要 ExistentialQuantification 了？
2014-02-07 22:21:43	CindyLinz	如果你想寫一個函數, 它會吃一個能對那個 type 作處理的函數當參數的話, 就還是要呀
2014-02-07 22:21:47	suhorng	Prelude> data Exists = E (forall a. Show a => a)
2014-02-07 22:21:47	suhorng	Prelude> data Exists' where E :: Show a => a -> Exists'
2014-02-07 22:21:49	suhorng	唔
2014-02-07 22:22:55	suhorng	可以說詳細一點嗎？
2014-02-07 22:23:18	CindyLinz	就.. 假設剛剛那個我亂寫的 three
2014-02-07 22:23:32	CindyLinz	如果想要寫一個能吃 three 當參數的函數
2014-02-07 22:23:39	CindyLinz	這個函數的 type 應該會長這樣:
2014-02-07 22:24:18	CindyLinz	我卡住了 XD
2014-02-07 22:25:10	suhorng	(WhereIsT a -> Int) -> Int
2014-02-07 22:25:31	CindyLinz	沒在等號左邊出現的好像不用寫
2014-02-07 22:25:41	suhorng	這樣好像也沒有用到 ExistentialQuantification
2014-02-07 22:25:43	suhorng	嗯
2014-02-07 22:27:05	suhorng	喔..2009年好像有人討論過這個, "Proposal: Deprecate ExistentialQuantification"
2014-02-07 22:28:42	CindyLinz	這樣 ST monad 要改一下介面?
2014-02-07 22:28:58	CindyLinz	這串? Proposal: Deprecate ExistentialQuantification
2014-02-07 22:30:14	suhorng	對
2014-02-07 22:30:53	suhorng	咦, ExistentialQuantification 不是說 ST monad 那種吧
2014-02-07 22:31:32	-->	town77 (~1@171.208.36.110) が #haskell.tw に参加
2014-02-07 22:31:46	CindyLinz	ST monad 的 runST :: forall a. (forall s. ST s a) -> a 會用到啊
2014-02-07 22:31:57	CindyLinz	最外面的 forall a. 可以不寫
2014-02-07 22:32:19	CindyLinz	等等, 這是 Rank2 哄 @_@"
2014-02-07 22:32:37	CindyLinz	搞混了 @_@"
2014-02-07 22:32:48	suhorng	不是不是 也不是 Rank2
2014-02-07 22:33:05	CindyLinz	這裡寫它是 Rank 2 Type 呀 http://www.vidarholen.net/contents/junk/catbag.html
2014-02-07 22:33:06	suhorng	http://www.haskell.org/ghc/docs/7.0.1/html/users_guide/data-type-extensions.html 是說 7.4.5 那個 extension
2014-02-07 22:33:16	suhorng	-XExistentialQuantification
2014-02-07 22:34:18	CindyLinz	嗯 existential quantification 是用在 data 的等號左邊有缺變數的
2014-02-07 22:34:46	suhorng	對
2014-02-07 22:35:04	suhorng	不是說直接像 ST Monad 那樣直接用 forall 去編碼
2014-02-07 22:35:32	CindyLinz	ST monad 是反的.. XD
2014-02-07 22:36:08	CindyLinz	ST 是左邊多了變數
2014-02-07 22:36:18	suhorng	類似 (forall x. φ(x) -> y) -> y XD
2014-02-07 22:37:48	CindyLinz	嗯嗯
2014-02-07 23:03:59	<--	suhorng (~suhorng@118-166-52-241.dynamic.hinet.net) が終了 (Ping timeout: 246 seconds)
2014-02-07 23:12:44	-->	suhorng (~suhorng@118-166-52-241.dynamic.hinet.net) が #haskell.tw に参加
2014-02-07 23:34:58	<--	hashcat (~kv2a@218-166-237-137.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-08 00:22:41	<--	suhorng (~suhorng@118-166-52-241.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-08 00:29:26	-->	mno2 (~mno2@66.201.48.54) が #haskell.tw に参加
2014-02-08 00:36:58	monochrom	"data X where C :: ... t ... -> X" 就是 existential type, 等如 "data X = forall t. C (... t ...)"
2014-02-08 00:41:51	monochrom	改功課改到頭都大. 是圖靈機及 halting problem 等等. 其實圖靈機及 halting problem 等等容易得很, 並不會使我頭大. 是學生的妙想天開胡吹, 才使我頭大.
2014-02-08 00:44:33	monochrom	真是 "每一道流星, 代表一位老師回到圖靈那處, 不用再改功課, 不用再讀學生的胡吹..." XD
2014-02-08 00:45:08	godfat	...@@
2014-02-08 00:47:15	<--	mno2 (~mno2@66.201.48.54) が終了 (Quit: mno2)
2014-02-08 00:50:56	monochrom	舉例: "問題 P 是不是 decidable?" 學生答案: "我寫了這個有時會 infinite loop 的程式, 所以 undecidable"
2014-02-08 00:51:52	godfat	bug 是 undecidable XD
2014-02-08 00:54:02	<--	town77 (~1@171.208.36.110) が終了 (Read error: Connection reset by peer)
2014-02-08 01:33:10	-->	mno2 (~mno2@64.125.189.90) が #haskell.tw に参加
2014-02-08 02:02:07	<--	mno2 (~mno2@64.125.189.90) が終了 (Quit: mno2)
2014-02-08 02:10:42	-->	mno2 (~mno2@64.125.189.90) が #haskell.tw に参加
2014-02-08 02:13:05	<--	mno2 (~mno2@64.125.189.90) が終了 (Client Quit)
2014-02-08 02:18:14	-->	mno2 (~mno2@64.125.189.90) が #haskell.tw に参加
2014-02-08 02:42:33	<--	mno2 (~mno2@64.125.189.90) が終了 (Quit: mno2)
2014-02-08 08:06:42	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-kpjkdeotttmjvtil) が終了 (Ping timeout: 276 seconds)
2014-02-08 08:10:29	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-lmfwwhftpjpysljf) が #haskell.tw に参加
2014-02-10 09:16:15	-->	drbean (~drbean@sac.nuu.edu.tw) が #haskell.tw に参加
2014-02-10 09:16:15	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-10 09:16:15	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-10 09:16:15	--	ニックネーム #haskell.tw: [a2n cataska cataska_ cibs CindyLinz cyt93cs darkx drbean godfat1 hashcat_ hychen_ kanru kanru` lambdabot letoh logfat__________ miaout17 monochrom petercommand shik superbil_c_]
2014-02-10 09:16:15	--	チャンネル #haskell.tw: 21 ニックネーム (0 オペレータ, 0 発言, 21 通常)
2014-02-10 09:16:39	--	モード #haskell.tw [+cnt]
2014-02-10 09:16:39	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-10 09:19:48	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:19:56	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:23:57	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:24:10	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:28:12	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:28:25	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:32:26	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:32:34	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:36:34	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:36:42	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:40:42	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:40:50	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:44:51	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:44:59	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:48:59	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:49:07	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:53:07	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:53:15	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 09:57:15	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 09:57:25	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:01:25	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:01:34	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:05:34	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:05:42	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:05:44	monochrom	"就咁" 可寫成 "事情是這樣的". 兩個的意思都是: 請容我細說.
2014-02-10 10:09:44	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:09:52	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:13:53	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:14:01	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:18:01	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:18:09	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:19:49	<--	hashcat_ (~hashcat_@39.14.102.235) が終了 (Ping timeout: 248 seconds)
2014-02-10 10:23:50	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:23:58	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:27:58	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:28:06	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:28:48	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-10 10:32:49	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:32:57	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:36:57	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:37:05	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:38:32	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-10 10:42:32	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-10 10:42:40	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-10 10:52:51	<--	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) が終了 (Ping timeout: 272 seconds)
2014-02-10 10:56:51	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Ping timeout: 245 seconds)
2014-02-10 10:59:32	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-10 11:20:02	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-10 11:20:18	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-10 11:33:49	CindyLinz	monochrom: 嗯嗯 ^^
2014-02-10 12:14:33	<--	godfat1 (~Adium@220.135.38.235) が終了 (Ping timeout: 272 seconds)
2014-02-10 12:18:23	-->	town55 (~1@182.132.117.248) が #haskell.tw に参加
2014-02-10 13:50:26	-->	godfat (~Adium@36-226-132-218.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-10 14:08:45	CindyLinz	godfat: yinwang 有做 ruby 的靜態分析器 RubySonar 耶~ 不知道好不好用.. http://www.yinwang.org/blog-cn/2014/01/28/rubysonar/
2014-02-10 14:09:05	CindyLinz	他可能不會去做 PerlSonar... (淚)
2014-02-10 14:09:56	CindyLinz	唔, 是用 Java 寫的
2014-02-10 14:22:01	-->	drbean (~drbean@113.196.171.151) が #haskell.tw に参加
2014-02-10 14:22:01	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-10 14:22:01	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-10 14:22:01	--	ニックネーム #haskell.tw: [a2n b4284 cataska cataska_ cibs CindyLinz cyt93cs darkx drbean godfat hychen_ kanru lambdabot letoh logfat__________ miaout17 monochrom petercommand shik superbil_c_ town55 weie]
2014-02-10 14:22:01	--	チャンネル #haskell.tw: 22 ニックネーム (0 オペレータ, 0 発言, 22 通常)
2014-02-10 14:22:25	--	モード #haskell.tw [+cnt]
2014-02-10 14:22:25	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-10 15:13:11	-->	liuzhoou (~liuzhoou@125.215.44.36) が #haskell.tw に参加
2014-02-10 16:06:21	<--	town55 (~1@182.132.117.248) が終了 (Ping timeout: 272 seconds)
2014-02-10 16:43:22	-->	drbean (~drbean@113.196.171.151) が #haskell.tw に参加
2014-02-10 16:43:22	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-10 16:43:22	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-10 16:43:22	--	ニックネーム #haskell.tw: [a2n b4284 cataska cataska_ cibs CindyLinz cyt93cs darkx drbean godfat hychen_ kanru lambdabot letoh liuzhoou logfat__________ miaout17 monochrom petercommand shik superbil_c_ weie]
2014-02-10 16:43:22	--	チャンネル #haskell.tw: 22 ニックネーム (0 オペレータ, 0 発言, 22 通常)
2014-02-10 16:43:45	--	モード #haskell.tw [+cnt]
2014-02-10 16:43:45	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-10 16:48:27	godfat	CindyLinz, 喔喔， ruby 靜態分析我是用過幾個，效果其實滿差的
2014-02-10 16:48:27	godfat	來看看王垠功力如何？ XD 不過基本上我想 ruby 的靜態分析大多要用猜的...
2014-02-10 16:48:27	godfat	不然其實就要實際跑一次了（這樣也算嗎？）
2014-02-10 16:49:24	godfat	maven... 上次聽說有替代品了
2014-02-10 16:49:53	godfat	用 irb 的 interpreter... doh, 應該不太準
2014-02-10 16:50:49	<--	liuzhoou (~liuzhoou@125.215.44.36) が終了 (Quit: Leaving...)
2014-02-10 16:54:01	CindyLinz	王垠應該不會想用實際跑的作法吧? @@"
2014-02-10 16:54:32	godfat	所以我很好奇他能做到哪？ XD
2014-02-10 16:54:35	CindyLinz	用激烈點的辭: 王垠應該不屑用實際跑的作法吧....
2014-02-10 16:54:38	godfat	XDDD
2014-02-10 16:54:48	godfat	他想做就讓我很意外了 (?)
2014-02-10 16:55:02	CindyLinz	XD
2014-02-10 16:58:49	godfat	為啥他能接受這麼囉唆的 java...
2014-02-10 16:59:15	CindyLinz	他有講理由.. 還為此發了一篇文 XD
2014-02-10 16:59:28	CindyLinz	http://www.yinwang.org/blog-cn/2014/02/04/pl-tool/
2014-02-10 16:59:36	CindyLinz	程序语言与它们的工具
2014-02-10 17:01:39	-->	hashcat (~kv2a@36-238-33-172.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-10 17:06:08	godfat	原來不是用 irb 的 parser... 實際上他是用 ripper (內建的 ruby parser) 轉成 sexp 再轉成 json, 而且這部份是他用 ruby 自己寫的。irb 只負責跟 ruby 溝通而已
2014-02-10 17:09:56	godfat	XDDD > 雖然那看起來是 Java，但是其實 Scheme 的靈魂已經融入到其中了
2014-02-10 17:25:57	godfat	也許我該試著不要用 each, 剛剛看半天一直搞不懂為什麼，才注意到我不是用 map 是用 each...
2014-02-10 17:28:15	godfat	所以 Yin 用 java bootstrap 起來後，也要用 Yin 改寫？
2014-02-10 17:28:15	godfat	> 而且由於以上的經歷，Yin 語言從一開頭就為方便工具的設計做出了努力。
2014-02-10 17:28:16	lambdabot	 <hint>:1:36:
2014-02-10 17:28:17	lambdabot	     parse error (possibly incorrect indentation or mismatched brackets)
2014-02-10 17:28:29	godfat	oops, sorry lambdabot
2014-02-10 17:29:19	CindyLinz	XD
2014-02-10 17:32:15	CindyLinz	godfat: ruby 的底層實作透明度高不高啊?
2014-02-10 17:32:45	godfat	怎麼樣算透明度高啊？ XD
2014-02-10 17:33:25	CindyLinz	有文件跟你解說其資料結構是怎樣, 要用哪些 api 來操作, 哪些 api 是 stable 安全的, 哪些是 experimental
2014-02-10 17:33:54	CindyLinz	stable 指的不是 bug free.. 而是未來版本仍然可用
2014-02-10 17:34:03	godfat	算有一部分吧，不過大抵上還是看 source 為主 XD
2014-02-10 17:34:03	CindyLinz	bug free 是另一回事... ^^|
2014-02-10 17:34:10	hashcat	prolog可以當透明度高的標準~
2014-02-10 17:34:20	b4284	CindyLinz: guile 這塊作得很好
2014-02-10 17:34:24	CindyLinz	看 source 的話只有現在這一版會動, 未來都沒有人承諾啊 QQ
2014-02-10 17:34:29	hashcat	核心小, 擴展大
2014-02-10 17:35:09	CindyLinz	其實只是在試著推坑 godfat... ._.
2014-02-10 17:35:52	hashcat	http://www.swi-prolog.org/FAQ/PrologLAMP.html
2014-02-10 17:35:53	b4284	結果被推坑了
2014-02-10 17:36:19	hashcat	有人入prolog坑了嘛
2014-02-10 17:36:31	CindyLinz	沒有啊我還沒亮坑怎麼推.... QQ
2014-02-10 17:36:57	cataska	我還在 prolog 坑旁張望
2014-02-10 17:37:09	b4284	https://www.gnu.org/software/guile/manual/html_node/Web.html
2014-02-10 17:38:00	hashcat	複雜建模沒有能比Prolog短的!!
2014-02-10 17:39:41	hashcat	cataska:要入的話先以swi-prolog為主吧
2014-02-10 17:40:56	cataska	hashcat: 收到
2014-02-10 17:41:30	hashcat	gprolog跟logtalk, 如果是其他prolog都是應用在跟這裡比較沾不上邊的
2014-02-10 17:42:57	cataska	比如說哪方面？
2014-02-10 17:45:00	hashcat	yap就一票詭異的擴展, 但完全沒有網站框架
2014-02-10 17:45:03	hashcat	http://eclipseclp.org/
2014-02-10 17:46:07	hashcat	這個實現上面就寫得很清楚了, 各種條件限制建模
2014-02-10 17:46:18	hashcat	這個貌似也不錯用
2014-02-10 17:47:54	hashcat	logtalk是建立在其他prolog上的類smalltalkOO
2014-02-10 17:51:47	godfat	CindyLinz, 主要是看這個，算是 extension 用的 API 文件
2014-02-10 17:51:47	godfat	https://github.com/ruby/ruby/blob/trunk/README.EXT
2014-02-10 17:53:33	CindyLinz	可以把 ruby interpreter 嵌在 C 程式裡面嗎?
2014-02-10 17:54:32	CindyLinz	雖然總是可以用的方法就是 fork 一隻 ruby process, 然後再把之間要傳的所有資料都 serialize pipe...
2014-02-10 17:54:51	CindyLinz	那融合的感覺會受限一點就是
2014-02-10 17:57:55	godfat	可以啊，因為 ruby 完全是 c 寫的，這樣做是標準作法 XD
2014-02-10 17:58:32	hashcat	cataska: eclipseclp is released by cisco
2014-02-10 18:04:09	CindyLinz	godfat: 發現坑已經填好了... XD http://hackage.haskell.org/package/hruby
2014-02-10 18:04:22	CindyLinz	好不好用就不知道了 ^^|
2014-02-10 18:06:07	godfat	我是玩過這個 XD
2014-02-10 18:06:07	godfat	https://github.com/godfat/sandbox/blob/master/haskell/ffi-ruby/ffi-ruby.hs
2014-02-10 18:06:52	godfat	說來好像差不多就是這樣了，剩下的就是對照的苦功夫... O_o
2014-02-10 18:06:53	godfat	https://github.com/bartavelle/hruby/blob/master/Foreign/Ruby.hs
2014-02-10 18:07:58	<--	hashcat (~kv2a@36-238-33-172.dynamic-ip.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-10 18:08:21	-->	hashcat (~kv2a@36-238-33-172.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-10 18:11:59	godfat	wow, 所以王垠在做 sourcegraph.com ?
2014-02-10 18:11:59	godfat	看起來滿好用的
2014-02-10 18:17:23	godfat	哇靠，簡直就是把 github 抓來整個做分析
2014-02-10 18:17:24	godfat	他抓到我在其他 repository 的 commit
2014-02-10 18:17:46	godfat	應該不只四個才對，可能他還沒分析完
2014-02-10 18:18:33	godfat	為啥 gugod 用了我的程式 8 次啊？看不出來...
2014-02-10 18:18:34	godfat	https://sourcegraph.com/gugod
2014-02-10 18:19:52	b4284	godfat: 你的頭像是 18 級的神奇寶貝嗎？XD
2014-02-10 18:20:16	godfat	XD 是 HP 18 的水靈兔 (from 精靈幻境 (Spiritual Soul))
2014-02-10 18:20:19	godfat	Lv1
2014-02-10 18:21:42	godfat	雖然資料看起來不完整，但 sourcegraph 的速度好快啊，明明 server 在美國，反應時間超快的
2014-02-10 19:21:05	<--	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-10 19:21:13	<--	godfat (~Adium@36-226-132-218.dynamic-ip.hinet.net) が終了 (Quit: Leaving.)
2014-02-10 20:07:40	-->	drbean (~drbean@113.196.171.151) が #haskell.tw に参加
2014-02-10 20:07:40	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-10 20:07:40	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-10 20:07:40	--	ニックネーム #haskell.tw: [a2n cataska cataska_ cibs CindyLinz cyt93cs darkx drbean hashcat hychen_ kanru lambdabot letoh logfat__________ miaout17 mno2 monochrom petercommand shik superbil_c_ weie]
2014-02-10 20:07:40	--	チャンネル #haskell.tw: 21 ニックネーム (0 オペレータ, 0 発言, 21 通常)
2014-02-10 20:08:02	--	モード #haskell.tw [+cnt]
2014-02-10 20:08:02	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-10 20:20:13	-->	godfat (~Adium@1-161-51-210.dynamic.hinet.net) が #haskell.tw に参加
2014-02-10 20:23:16	letoh	http://www.plurk.com/m/p/jpc623  看到有人討論 subtyping 跟 inheritance
2014-02-10 20:30:13	hashcat	http://www.lauradhamilton.com/random-lessons-online-poker-exploit
2014-02-10 20:35:11	hashcat	CindyLinz:讓你公司輸到脫褲子
2014-02-10 20:36:33	-->	b4283 (~b4283@36-238-223-14.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-10 20:55:41	<--	hashcat (~kv2a@36-238-33-172.dynamic-ip.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-10 20:56:10	-->	hashcat (~kv2a@118-171-205-44.dynamic.hinet.net) が #haskell.tw に参加
2014-02-10 20:59:58	-->	town55 (~1@182.132.117.248) が #haskell.tw に参加
2014-02-10 22:00:36	-->	suhorng (~suhorng@118-166-44-74.dynamic.hinet.net) が #haskell.tw に参加
2014-02-10 22:01:02	suhorng	是說, 有人知道 OCaml 的 let (top level)、let in、雙分號到底怎麼用嗎…？
2014-02-10 22:01:21	suhorng	而且寫在檔案裡面不用雙分號……？
2014-02-10 22:03:56	suhorng	ML類無法簡單的寫 type signature 有點不習慣 (除了另外寫在一個 SIGNATURE)
2014-02-10 22:09:02	letoh	在檔案裡有換行的話就不用雙分號吧?
2014-02-10 22:14:22	suhorng	嗯...原來他會用換行判斷嗎@_@"
2014-02-10 22:15:24	letoh	沒有深入研究  如果寫在同一行好像就要.. shell 裡也要
2014-02-10 22:16:58	suhorng	好奇怪唷, 本來以為他是判縮排, 可是也不是 (難道說他的語法沒有歧異嗎0.0)
2014-02-10 22:17:15	letoh	ml 好像都不看縮排的?
2014-02-10 22:18:23	suhorng	Standard ML 可以理解, OCaml 理解不能..
2014-02-10 22:24:06	suhorng	嗯..寫在檔案裡面好像連換行也不看
2014-02-10 22:24:28	letoh	你是說可以接在同一行嗎?
2014-02-10 22:24:40	suhorng	> let a = 3 let b = 5
2014-02-10 22:24:41	suhorng	對
2014-02-10 22:24:42	lambdabot	 <hint>:1:11: parse error on input `let'
2014-02-10 22:25:40	letoh	我把 let 跟 match 全部接在一行  還真的可以
2014-02-10 22:26:37	suhorng	寫在 REPL 裡面也可以耶..XDD
2014-02-10 22:26:45	suhorng	> let a = 3 let b = 5;;
2014-02-10 22:26:46	lambdabot	 <hint>:1:11: parse error on input `let'
2014-02-10 22:26:51	letoh	可是最後還是要有一個 ;;
2014-02-10 22:26:54	<--	petercommand (~chatzilla@unaffiliated/petercommand) が終了 (Read error: Connection reset by peer)
2014-02-10 22:27:11	letoh	所以 ;; 只是要告訴 shell 說這邊可以告一個段落這樣?
2014-02-10 22:27:27	-->	petercommand (~chatzilla@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-10 22:27:40	suhorng	嗯, 可是感覺應該還有其他功能..
2014-02-10 23:15:39	CindyLinz	hashcat: 我們公司不會輸啦, 我們又沒跟玩家對賭 XD
2014-02-10 23:37:39	<--	town55 (~1@182.132.117.248) が終了 (Remote host closed the connection)
2014-02-10 23:41:39	<--	suhorng (~suhorng@118-166-44-74.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-10 23:57:50	<--	hashcat (~kv2a@118-171-205-44.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-10 23:57:58	<--	b4283 (~b4283@36-238-223-14.dynamic-ip.hinet.net) が終了 (Ping timeout: 260 seconds)
2014-02-11 00:14:43	-->	b4283 (~b4283@118.150.144.185) が #haskell.tw に参加
2014-02-11 01:09:40	monochrom	各種ML語法沒有岐異. 主要因為要寫"end", 例如"let x=1 in x+1 end".
2014-02-11 01:10:55	monochrom	此外還有 "fun f [] = 4 | (x:xs) = 5 fun g x = x*x" 只要看到第二個"fun"就知第一個已完
2014-02-11 01:12:27	monochrom	你看, 基本上我不用分行 XD
2014-02-11 01:13:24	letoh	但習慣上還是會分一下吧? XD 混在一行不太好看，除錯也不方便
2014-02-11 01:13:35	monochrom	當然
2014-02-11 01:14:13	monochrom	在 REPL 裏, ;; 應該只是說"我講完"而已
2014-02-11 01:16:48	monochrom	呀, 對了, 試比較 "val x=1" 及 "val x=1 and y=10". 在REPL裏, 當電腦見到前者, 並不能知道你只要前者還是你還有後著, 即後者.
2014-02-11 01:17:18	monochrom	在檔案裏, 有EOF作指引
2014-02-11 01:18:23	monochrom	所以 ;; 是 REPL 裏的 "暫時EOF"
2014-02-11 01:21:27	monochrom	啓示! HTML 也是 ML 的一種!
2014-02-11 01:22:13	monochrom	試比較: "<p>f x = 1 <p>g x = 2" 及 "fun f x = 1 fun g x = 2"
2014-02-11 01:23:24	letoh	這好像不合法?
2014-02-11 01:23:39	letoh	現在的 html 好像有要求要 close tag ?
2014-02-11 01:23:51	monochrom	然後又比較: "<body> <p>f x = 1 <p>g x = 2 </body>" 及 "structure X = fun f x = 1 fun g x = 2 end"
2014-02-11 01:23:57	letoh	不過一般會相容 html4 以前的規格
2014-02-11 01:24:24	CindyLinz	for REPL 的角度來說, ruby 的語法設計真是非常適合
2014-02-11 01:24:27	monochrom	合法. html5 都容許. 只 xhtml 不准
2014-02-11 01:25:05	CindyLinz	天生就是用換行當 statement 分界.. 想寫多行 statement 的話, 要用未關閉的括號, 或是尾巴是 binary operator
2014-02-11 01:25:48	CindyLinz	letoh: html5 沒有要求 close tag,  xhtml 才有要求... 可是 xhtml 已經差不多算掰了 ^^|
2014-02-11 01:27:09	letoh	我知道是 xhtml 出現以後才有的要求  原來 html5 比較寬鬆啊... 印象中 single tag 也要最後加個 / 不是嗎?
2014-02-11 01:27:49	monochrom	<br/> 也是 xhtml 的要求. HTML5 准 <br>
2014-02-11 01:29:11	CindyLinz	xhtml1.0 在還沒有 html5 的時候就存在了... 然後 html5 要出來的時候說: 打算拿 html4 作延伸, 不考慮 xhtml.. 我就笑了 XD
2014-02-11 01:29:24	CindyLinz	我之前超恨 xhtml 的... XD
2014-02-11 01:29:55	monochrom	我對兩個都沒有恨
2014-02-11 01:30:06	godfat	為啥呀？我倒是比較恨 html...
2014-02-11 01:30:48	CindyLinz	monochrom: 要一直被煩才會有(負面)感情啊.. XD
2014-02-11 01:31:06	godfat	不過我覺得 html5 倒是跟 javascript 哥倆好，都在打模糊仗
2014-02-11 01:31:07	monochrom	xhtml 容易 parse 得很. 但我專重大部份人不想重寫已寫好多年的檔案
2014-02-11 01:31:10	CindyLinz	直接手寫 xhtml 變得超難讀啊..
2014-02-11 01:31:16	letoh	查了一下.. http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag
2014-02-11 01:31:29	CindyLinz	那時拿 <table> 記表格
2014-02-11 01:31:54	monochrom	我手寫 xhtml 多年. http://www.vex.net/~trebla/haskell/ 全部都是
2014-02-11 01:32:05	CindyLinz	有一陣子故意都用 xhtml 的寫法當練習... 然後一整排的 <tr><td></td><td></td><td></td></tr>
2014-02-11 01:32:20	CindyLinz	要把內容塞進去的時候常常會塞錯格
2014-02-11 01:32:33	CindyLinz	然後 readonly="readonly" 這設計....
2014-02-11 01:32:35	godfat	我也是手寫 xhtml, 不過當然量不多
2014-02-11 01:32:35	godfat	但 table 在 html 不是一樣嗎？
2014-02-11 01:32:57	CindyLinz	在 html 的話少了 </td> 好很多..  中間每個 >...< 之間就是格子 :D
2014-02-11 01:33:03	letoh	看起來 / 在 html5 還是有意義的
2014-02-11 01:33:06	monochrom	ok, 我係電腦, 這種事我覺得容易得很 XD
2014-02-11 01:33:14	letoh	"This character has no effect on void elements, but on foreign elements it marks the start tag as self-closing."
2014-02-11 01:33:26	godfat	html 可以少寫 </td> 嗎？ @@"....
2014-02-11 01:33:37	CindyLinz	可以唷... table 系的只有 </table> 一定要寫
2014-02-11 01:33:43	letoh	所以 <br> ok... 但是 foreign element 可能會需要 self-closing
2014-02-11 01:33:51	godfat	我之前最恨的是 <script src="..."/> 在 html 底下居然是死的
2014-02-11 01:34:15	CindyLinz	沒考慮 script 的部分 XD
2014-02-11 01:34:27	letoh	不過 foreign element 現在只有 mathml 和 svg
2014-02-11 01:34:38	letoh	http://www.w3.org/html/wg/drafts/html/master/single-page.html#foreign-elements
2014-02-11 01:34:53	monochrom	而人類覺得容易得很的事, 例如賭錢時估你是不是 bluffing, 我就覺得很難了
2014-02-11 01:34:54	letoh	所以幾乎可以忘掉 self-closing 了
2014-02-11 01:35:16	godfat	人類應該沒有覺得是不是 bluffing 很好猜吧？ XDD
2014-02-11 01:35:24	letoh	(應該沒有人手寫 svg ?)
2014-02-11 01:35:56	godfat	我是覺得 (x)html 本來就不太適合手寫，或是需要工具輔助
2014-02-11 01:35:56	godfat	更不能接受含糊的語法
2014-02-11 01:36:48	CindyLinz	我覺得 html 語法還算明確啊~ 亂的是語意.... ^^|
2014-02-11 01:36:52	monochrom	關於 table, 我其實同意 <td>x <td>y <td>z 方便很多, 亦沒實質岐異
2014-02-11 01:37:12	letoh	"In HTML 4, <foo / means <foo> (which leads to <br /> meaning <br>&gt;"
2014-02-11 01:37:26	CindyLinz	有人會寫這種東西 XD <i>aaa<b>bbb</i>ccc</b>
2014-02-11 01:37:31	letoh	所以 godfat 舉的那個例子的確會跑出奇怪的東西
2014-02-11 01:38:17	letoh	" and <title/hello/ meaning <title>hello</title>)."
2014-02-11 01:38:33	letoh	html4 的語法真怪  第一次知道可以這樣寫
2014-02-11 01:39:17	monochrom	至於 <i>aaa<b>bbb</i>ccc</b>, 作者應該被打靶! XD
2014-02-11 01:39:45	godfat	我是碰過漏 </div> 之類的，版面會跑掉，不同 browser 結果不一樣
2014-02-11 01:40:13	CindyLinz	我想收回語法明確那句話.......ww
2014-02-11 01:40:18	CindyLinz	letoh: 都你害的...
2014-02-11 01:40:24	letoh	對不起XD
2014-02-11 01:40:39	godfat	其他奇怪的例子我懶得想了 :o 反正一堆莫名其妙的狀況... ~.~
2014-02-11 01:40:39	godfat	上次才看到 gslin 在說跟 js 與 CDATA 有關的東西，超恐怖
2014-02-11 01:40:44	letoh	請忘了 html4 XD
2014-02-11 01:42:50	monochrom	4及5基本上是"大部份人愛寫的話, 只要電腦那邊不太困難就盡量容許".
2014-02-11 01:43:35	monochrom	凡是遷就人類的, 一定不可能簡單直接.
2014-02-11 01:43:54	monochrom	http://www.vex.net/~trebla/humour/tautologies.html #1 XD
2014-02-11 01:44:28	b4283	html 居然有這樣奇怪的，開眼界了
2014-02-11 01:44:36	CindyLinz	說到那個漏掉 </div> 的..  我們家網頁很多是 php 做的, php 裡面習慣會用 include('another_php_fragment.php') 的方式來拼出網頁
2014-02-11 01:44:52	CindyLinz	有一次我去改東西... 發現有的 fragment.php 裡面 tag 不是成對的.......ww
2014-02-11 01:45:20	CindyLinz	所以 include 它的時候前面要多放一個 <div> 再 include, 不然後半版面就全跑掉了.... orz
2014-02-11 01:45:22	godfat	然後 browser 都不抱怨，沒有人知道有錯，直到有一天他真的錯了
2014-02-11 01:46:03	godfat	...>6. The more you know, the more you know.
2014-02-11 01:46:18	CindyLinz	唔.. 原來這一頁是要看內容喔.. XD
2014-02-11 01:46:22	CindyLinz	我跑去看 html......ww
2014-02-11 01:46:30	monochrom	嘿嘿, 總之人類是萬惡之源!
2014-02-11 01:48:30	godfat	找到了
2014-02-11 01:48:30	godfat	http://blog.gslin.org/archives/2014/01/06/4071/在-html-內嵌-json-object-時要注意的事情/
2014-02-11 01:51:14	CindyLinz	那個超煩...orz
2014-02-11 01:52:23	godfat	所以我認真覺得 xhtml 比較好
2014-02-11 01:52:40	CindyLinz	xhtml 有改掉這個嗎? @@"
2014-02-11 01:52:49	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Ping timeout: 250 seconds)
2014-02-11 01:53:01	godfat	與其說有改掉這個，不如說不是合法 xml 的話 browser 會噴錯
2014-02-11 01:53:08	CindyLinz	不過文中的解法好奇怪....
2014-02-11 01:53:21	godfat	我的結論是不要用黑魔法
2014-02-11 01:53:26	CindyLinz	如果字串長得是 "--><script>...." 的話不是就沒解到了嗎?
2014-02-11 01:53:55	godfat	沒細究，不知道 XD
2014-02-11 01:54:11	CindyLinz	可是這個在 xhtml 也是合法的啊? @@"
2014-02-11 01:54:54	godfat	你說 <!DOCTYPE HTML>
2014-02-11 01:54:54	godfat	<html>
2014-02-11 01:54:54	godfat	<body>
2014-02-11 01:54:54	godfat	<script>
2014-02-11 01:54:54	godfat	var a = "</script><script>alert(1);//";
2014-02-11 01:54:54	godfat	</script>
2014-02-11 01:54:54	godfat	</body>
2014-02-11 01:54:55	godfat	</html>
2014-02-11 01:54:55	godfat	嗎？我試試看？
2014-02-11 01:55:54	CindyLinz	最前面用 <!Doctype html> 應該會變 html5?
2014-02-11 01:56:05	monochrom	是
2014-02-11 01:56:52	godfat	檔名用 xhtml 後用 firefox 開就會當 xml 了
2014-02-11 01:56:52	godfat	試了確實是合法的，不過原文考慮的是 php 的問題
2014-02-11 01:56:57	CindyLinz	喔喔喔
2014-02-11 01:57:44	CindyLinz	目前還是傾向讓這網站沒有攻擊價值的安全防護法.... (好消極... XD)
2014-02-11 01:58:19	godfat	加上 CDATA 後果然也是正常的呀，記得加 CDATA 就好了
2014-02-11 01:58:31	godfat	不過問題又變成如果 user input 有 CDATA end tag? XD
2014-02-11 01:59:43	CindyLinz	直覺覺得.... 如果 Dom parser 不去理解 javascript syntax 的話, 好像解不了? @@"
2014-02-11 02:00:11	monochrom	我寫xhtml時, script例牌用CDATA. 不單只script啦, 在pre裏面示範haskell碼都是
2014-02-11 02:00:11	CindyLinz	都用 <script src=xxxxx.php></script> 的方式, 把動態內容都藏在外面好了 @@"
2014-02-11 02:00:23	godfat	試了發現 user input 有 CDATA 好像沒辦法攻擊？兩種可能，一種是直接變錯的 xml, 另一種是沒有效果，不知道為什麼
2014-02-11 02:01:15	godfat	那照 gslin 的說法就是多一個 request
2014-02-11 02:01:36	godfat	CDATA 應該可以解決大部分的問題，或至少比原本的 html 好多了...
2014-02-11 02:02:40	CindyLinz	那用 <script src=data:text/javascript;base64,xxxxxxxxxxxxxxxx></script> 好了... (怒)
2014-02-11 02:02:58	CindyLinz	只用過圖檔的用法, 沒用過 script 的 XD
2014-02-11 02:03:15	godfat	我記得圖檔這樣有限制大小，也沒聽過 script 的 XD
2014-02-11 02:03:24	CindyLinz	咦, 其實可以不用這個
2014-02-11 02:03:46	CindyLinz	自己寫了 javascript 的 base64 decode, 就可以把原本所有的程式變成 base64, 然後套 static 的 decode 解出來 eval
2014-02-11 02:03:48	<--	b4283 (~b4283@118.150.144.185) が終了 (Remote host closed the connection)
2014-02-11 02:04:17	CindyLinz	限制大小是 chrome 的限制, 其 url buffer 上限 2MB.. 超過直接 crash browser..ww
2014-02-11 02:04:19	godfat	也是
2014-02-11 02:04:30	godfat	crash browser 是哪招...
2014-02-11 02:04:44	CindyLinz	會道歉..
2014-02-11 02:05:10	letoh	其實那個頁面還蠻可愛的XD
2014-02-11 02:05:11	godfat	露出胸部是常識（誤
2014-02-11 02:05:18	CindyLinz	....||
2014-02-11 02:05:22	godfat	oh snap 嗎？
2014-02-11 02:10:23	CindyLinz	https://code.google.com/p/chromium/issues/detail?id=103234
2014-02-11 02:10:57	CindyLinz	我那時 submit 的 test case
2014-02-11 02:10:59	CindyLinz	https://gist.github.com/CindyLinz/39feeb6bdada8dc12530
2014-02-11 02:12:13	godfat	@@" wow
2014-02-11 02:12:13	godfat	這可以玩 buffer overflow 然後 arbitrary code execution 嗎？ XD
2014-02-11 02:13:10	CindyLinz	我只是想要生出一個下載啊.... (無辜貌)
2014-02-11 02:13:11	godfat	成功 reproduce
2014-02-11 02:13:34	CindyLinz	我有個 pure browser 執行的 compiler, 要輸出 compiled 的結果 @_@"
2014-02-11 02:13:57	godfat	html -> html?
2014-02-11 02:14:00	CindyLinz	後來就改用 blob 了..
2014-02-11 02:14:12	CindyLinz	一堆 javascript / coffeescript -> 一個 javascript
2014-02-11 02:14:24	CindyLinz	Blob Object
2014-02-11 02:16:22	CindyLinz	這個 https://github.com/CindyLinz/JS-GreenDefine
2014-02-11 02:18:18	godfat	這意思是說 compiled 好的結果超過 2M..!?
2014-02-11 02:19:03	CindyLinz	對, 我那時做的遊戲 compile 完是 6MB
2014-02-11 02:19:10	CindyLinz	裡面有大量 SVG 圖檔.. XD
2014-02-11 02:19:22	godfat	svg 也包進去喔？ ~.~
2014-02-11 02:19:48	CindyLinz	對啊, 是要放在 Win8 App store 的, 玩家安裝的時候會整包下載
2014-02-11 02:20:48	CindyLinz	code 部分 500KB 而已..   最後那個 package 大約 20MB...
2014-02-11 02:20:58	CindyLinz	剩下 14MB 是音樂檔.... ._.
2014-02-11 02:21:17	godfat	該說好先進嗎.... XD
2014-02-11 02:21:50	CindyLinz	就很不想用 Visual Studio 嘛.... QQ
2014-02-11 02:22:06	godfat	不知道 unity 行不行？
2014-02-11 02:22:14	letoh	音樂有人做 progressive download 嗎?
2014-02-11 02:22:25	godfat	streaming?
2014-02-11 02:22:29	letoh	(先丟個 midi 檔讓玩家有聽到聲音XD)
2014-02-11 02:22:46	CindyLinz	對用 Wifi 的平版來說 20MB 一次下載完, 一下下而已啊?
2014-02-11 02:22:55	CindyLinz	反正頻寬是微軟出 (?
2014-02-11 02:23:01	letoh	喔喔喔  streaming 好像也可以
2014-02-11 02:23:32	 *	letoh 還在用慢速 adsl...XD
2014-02-11 02:24:33	letoh	然後我常收到要我換光纖的簡訊跟電話，所以我是網路釘子戶嗎? XD
2014-02-11 02:25:10	CindyLinz	XDDD
2014-02-11 02:25:24	CindyLinz	你又不會害鄰居不能用光纖 XD
2014-02-11 02:25:46	letoh	那就好  繼續用 adsl XD
2014-02-11 02:25:54	CindyLinz	wwww
2014-02-11 02:27:40	mno2	大家都還不睡覺 ^^"
2014-02-11 02:28:25	letoh	翻一下 racket 文件  其實覺得內容沒什麼  但不曉得為什麼就是很容易眼花XD
2014-02-11 02:38:18	CindyLinz	mno2: 我睡著了!
2014-02-11 02:45:35	monochrom	哈哈哈哈哈 "先用 midi"
2014-02-11 04:01:53	<--	superbil_c_ (uid12362@gateway/web/irccloud.com/x-huizuxsqlvnksykg) が終了 (*.net *.split)
2014-02-11 04:01:54	<--	cataska_ (uid12717@gateway/web/irccloud.com/x-tyjfsljbdvjdsetd) が終了 (*.net *.split)
2014-02-11 04:03:32	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-xpyodokymtiptbsm) が #haskell.tw に参加
2014-02-11 04:03:38	-->	superbil_c__ (uid12362@gateway/web/irccloud.com/x-yqacbfqxldditqvp) が #haskell.tw に参加
2014-02-11 05:17:21	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が終了 (Ping timeout: 250 seconds)
2014-02-11 05:17:31	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-11 08:53:49	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 245 seconds)
2014-02-11 08:56:17	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-11 09:46:24	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-11 10:12:50	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-11 10:43:10	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-11 10:46:56	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-11 11:01:27	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Remote host closed the connection)
2014-02-11 11:02:11	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-11 16:03:26	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-11 17:23:14	-->	hashcat (~kv2a@218-173-236-13.dynamic.hinet.net) が #haskell.tw に参加
2014-02-11 17:26:56	CindyLinz	(思) # 我刚到旧金山的几个月经常参加一些程序语言的“meetup”，后来我发现这种 meetup 都是宗教气氛非常浓厚的地方，跟传销大会差不多。
2014-02-11 17:27:25	CindyLinz	Functional Thursday 擺明說自己邪教組織的倒是光明正大得多了... (咦)
2014-02-11 17:31:46	hashcat	只差沒三呼prolog萬歲了
2014-02-11 17:32:38	CindyLinz	會聽到老師跟助教哀哀叫說寫 Agda 好煩.... XD
2014-02-11 17:34:03	hashcat	為啥會用Agda寫
2014-02-11 17:34:57	hashcat	寫證明?
2014-02-11 17:35:03	CindyLinz	我不知道他們在研究什麼 ^^|
2014-02-11 18:36:45	<--	petercommand (~chatzilla@unaffiliated/petercommand) が終了 (Remote host closed the connection)
2014-02-11 19:00:02	-->	petercommand (~chatzilla@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-11 19:17:39	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-11 20:20:15	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-11 20:23:44	CindyLinz	用 GHC API 來 interpret haskell 程式, 以及動態載入 GHC module 到這個 interpreter 的 context... 的教學 http://parenz.wordpress.com/2013/08/17/ghc-api-interpreted-compiled-and-package-modules/
2014-02-11 20:26:05	godfat	用這個做 better ghci!?
2014-02-11 20:34:49	CindyLinz	yet another 沒問題, better 與否就不知道了 XDrz
2014-02-11 20:35:04	godfat	目標當然是 better 呀... XD
2014-02-11 20:35:09	CindyLinz	嗯 XD
2014-02-11 21:29:30	godfat	http://www.yinwang.org/blog-cn/2014/02/09/programmer-mental/
2014-02-11 21:29:30	godfat	XDDDDD
2014-02-11 21:29:30	godfat	"然而我的水平顯然高過 Python 的創造者 Guido van Rossum 很多。"
2014-02-11 21:39:44	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-11 22:29:17	-->	b4283 (~b4283@218-164-119-241.dynamic.hinet.net) が #haskell.tw に参加
2014-02-11 22:29:17	-->	liuzhoou (~liuzhoou@101.80.76.91) が #haskell.tw に参加
2014-02-11 23:44:17	monochrom	我去的多倫多meetup並非宗教或傳銷. 這恐怕還是因為我做第二航手 XD
2014-02-11 23:45:28	monochrom	我們是很中肯的人 :)
2014-02-11 23:45:49	 *	monochrom 只喜歡跟中肯講理的人做朋友
2014-02-11 23:49:09	godfat	就某方面而言，我覺得他說的現象確實存在著..
2014-02-11 23:50:15	hashcat	寫個程序也能寫到有黨有元首的
2014-02-11 23:50:55	godfat	不過某方面其實我也覺得，每個領域多少都有這種現象
2014-02-11 23:51:07	hashcat	C語言萬歲元首施拖慢萬歲
2014-02-11 23:51:18	hashcat	例如哪個領域
2014-02-11 23:54:00	monochrom	啊, 我從來都認為大部份程式員都是宗教狂熱, 這點無容置疑!
2014-02-11 23:54:55	monochrom	只要是有人的地方, 就會有萬惡的人性!
2014-02-11 23:57:18	godfat	例如哪個領域呀，比方說美術好了？我覺得權威確實無所不在呀 XD
2014-02-11 23:58:20	godfat	不過我覺得其實也不致於需要說是萬惡就是了.. XD 只是人性確實容易有這種傾向（聳肩）
2014-02-11 23:59:07	monochrom	當然了, "萬惡"一說只是我主觀看法而已 :)
2014-02-11 23:59:38	godfat	XDD 有惡，那有善的嗎？
2014-02-12 00:01:43	monochrom	管理層充滿關於管理學的宗教.
2014-02-12 00:05:08	monochrom	例如迷信透過舉辦講座提高員工工作熱誠, 即 motivational seminars. 我甚至聽過聲稱 "把員工鼓動到好像 Google 的那樣"
2014-02-12 00:06:03	godfat	真可怕，就某方面而言大型組織似乎都很可怕
2014-02-12 00:06:10	CindyLinz	24小時學會: 用兩片雞翅當天使
2014-02-12 00:06:21	monochrom	天呀! Google 員工的熱誠正是因為 "重賞之下必有勇夫" 及完全沒有 motivational seminar 呀!
2014-02-12 00:06:34	godfat	先拿一片雞翅吸引真正的天使，然後...
2014-02-12 00:06:52	CindyLinz	真正的天使是邀來當合夥人的...
2014-02-12 00:07:08	monochrom	一個提及 Google 的 motivational seminar, 本身就自相予盾
2014-02-12 00:08:02	CindyLinz	不過他講的應該是很久以前的 Google?
2014-02-12 00:09:01	CindyLinz	噢, 這句應該是顧問公司講給老闆聽的 "把員工鼓動到好像 Google 的那樣"
2014-02-12 00:10:49	monochrom	那些經理們簡直是白讀了經濟學了. demand, supply, price, 你想獲得像 Google 的員工, 唯一方法是出得起像 Google 的薪酬福利.
2014-02-12 00:11:15	monochrom	不是很久以前. 是現在式.
2014-02-12 00:11:19	godfat	他們有讀過經濟學嗎？ XD
2014-02-12 00:12:58	CindyLinz	經濟學本身充斥許多矛盾呀, 也許是他們讀太好了... (逃)
2014-02-12 00:13:00	monochrom	Google 的福利還包括: 高檔餐廳任飲任食, 遊戲室, 無限制上網.
2014-02-12 00:13:22	godfat	XDDDDDDDD 讀太好 XDDD
2014-02-12 00:14:08	CindyLinz	我覺得是他們提出了許多的模型來解釋現象
2014-02-12 00:14:30	CindyLinz	各模型各自看都是好的, 但是全部丟在一起會是矛盾的 @@"
2014-02-12 00:14:44	monochrom	比對一下管理層愛做的: 連飲品都盡量 cut, 不准遊戲, 上網有防火牆不准"與工作無關"的網站...
2014-02-12 00:15:31	monochrom	做著跟 Google 完全相反的事, 然後妄想獲得像 Google 的成功?!
2014-02-12 00:16:22	monochrom	張五常的經濟學沒有矛盾, 這是我愛讀的.
2014-02-12 00:17:25	<--	liuzhoou (~liuzhoou@101.80.76.91) が終了 (Quit: Leaving...)
2014-02-12 00:17:48	monochrom	其實, 讀過張五常所說後, 我認為經濟學界的最大問題是空廢命題.
2014-02-12 00:19:21	CindyLinz	什麼是空廢命題?
2014-02-12 00:20:44	monochrom	例如: 沒有清楚定義, 甚至故意隨時改變定義, 搬龍門.
2014-02-12 00:21:23	CindyLinz	嗯嗯
2014-02-12 00:21:33	letoh	就是抽象化 (誤
2014-02-12 00:21:52	CindyLinz	但是實際想運用那些理論的時候... 幾乎沒有定義清楚的情境吧 orz
2014-02-12 00:23:00	CindyLinz	我困擾一個現象:
2014-02-12 00:23:36	CindyLinz	我讀過的經濟學的書雖然不多, 但對於最近 Sony 把 VAIO 賣掉.. 無論它的股價因此漲或跌, 我都解釋得通....
2014-02-12 00:23:47	CindyLinz	這讓我非常無力 orz
2014-02-12 00:24:41	monochrom	舉例: "所有自然數都是特別的". "證明: 如果存在不特別的自然數, 那麼就有小的不特別自然數, 然而這不正正令這個數字很特別嗎?" 這是事先不界定"特別", 方便在證明裏不斷搬龍門.
2014-02-12 00:25:07	monochrom	打錯了. "那麼就有最小的不特別自然數"
2014-02-12 00:25:15	CindyLinz	zzz
2014-02-12 00:25:31	CindyLinz	這論證方式太玄了 XD
2014-02-12 00:26:22	CindyLinz	好像很適合中國文化 XDrz
2014-02-12 00:26:38	CindyLinz	白馬非馬之類的... XD
2014-02-12 00:26:49	monochrom	舉例: 史上最偉大的空廢命題是馬克思的 "凡事都有內部矛盾". 這是利用"矛盾"沒有界定, 按實例來搬龍門.
2014-02-12 00:28:43	CindyLinz	好像都可以用直覺邏輯迴避的感覺? XD
2014-02-12 00:32:11	monochrom	"Sony 賣 VAIO, 無論漲跌都解得通" 是等如 "你大力擲毫, 無論公字都解得通". 我不是說隨機, 我是說資訊不足(例如你幾大力呢? 角度呢?), 所以理論正確都無力預測.
2014-02-12 00:33:23	monochrom	好了, 我要出街玩了!
2014-02-12 00:33:28	CindyLinz	@_@"
2014-02-12 00:33:37	CindyLinz	現在不是半夜嗎?
2014-02-12 00:33:43	b4283	在美國呢
2014-02-12 00:33:48	CindyLinz	喔~
2014-02-12 00:34:00	hashcat	在火星殖民地
2014-02-12 00:34:10	CindyLinz	那還沒出發吧.....ww
2014-02-12 00:34:10	monochrom	我在多倫多呀! 還有半小時就正午
2014-02-12 00:34:44	b4283	台灣時間倒轉 13 個小時
2014-02-12 00:35:05	CindyLinz	喔..
2014-02-12 00:37:02	<--	b4283 (~b4283@218-164-119-241.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-12 00:39:20	<--	hashcat (~kv2a@218-173-236-13.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-12 00:44:41	-->	b4283 (~b4283@118.150.144.185) が #haskell.tw に参加
2014-02-12 00:53:45	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-12 02:27:43	<--	b4283 (~b4283@118.150.144.185) が終了 (Remote host closed the connection)
2014-02-12 03:46:36	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-12 04:32:58	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 260 seconds)
2014-02-12 04:36:44	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-12 08:26:44	<--	ouie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 252 seconds)
2014-02-12 10:15:23	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-12 10:55:25	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-12 12:15:55	<--	godfat (~Adium@1-161-51-210.dynamic.hinet.net) が終了 (Ping timeout: 250 seconds)
2014-02-12 13:57:41	-->	godfat (~Adium@101.8.112.76) が #haskell.tw に参加
2014-02-12 14:04:08	-->	godfat1 (~Adium@101.8.112.76) が #haskell.tw に参加
2014-02-12 14:04:09	<--	godfat (~Adium@101.8.112.76) が終了 (Read error: Connection reset by peer)
2014-02-12 14:15:41	<--	godfat1 (~Adium@101.8.112.76) が終了 (Ping timeout: 245 seconds)
2014-02-12 14:48:35	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-12 15:19:05	-->	godfat (~Adium@36-226-130-239.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-12 15:20:56	-->	hashcat (~kv2a@1-172-228-213.dynamic.hinet.net) が #haskell.tw に参加
2014-02-12 18:56:44	-->	Yu_Lin (24ec15fb@gateway/web/freenode/ip.36.236.21.251) が #haskell.tw に参加
2014-02-12 19:22:49	-->	suhorng (~suhorng@118-166-45-235.dynamic.hinet.net) が #haskell.tw に参加
2014-02-12 19:27:58	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-12 19:31:53	<--	suhorng (~suhorng@118-166-45-235.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-12 19:43:44	<--	godfat (~Adium@36-226-130-239.dynamic-ip.hinet.net) が終了 (Quit: Leaving.)
2014-02-12 20:03:44	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-12 22:09:04	-->	godfat (~Adium@1-161-51-210.dynamic.hinet.net) が #haskell.tw に参加
2014-02-12 22:19:50	<--	hashcat (~kv2a@1-172-228-213.dynamic.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-12 22:36:21	-->	b4283 (~b4283@36-238-130-249.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-12 23:15:07	-->	suhorng (~suhorng@118-166-45-235.dynamic.hinet.net) が #haskell.tw に参加
2014-02-12 23:47:38	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-12 23:48:47	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-12 23:51:52	-->	cyt93cs_ (~cyt93cs@140.123.101.4) が #haskell.tw に参加
2014-02-12 23:51:58	-->	letoh__ (~stackvm@203.67.184.110) が #haskell.tw に参加
2014-02-12 23:56:40	<--	godfat (~Adium@1-161-51-210.dynamic.hinet.net) が終了 (*.net *.split)
2014-02-12 23:56:41	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (*.net *.split)
2014-02-12 23:56:41	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (*.net *.split)
2014-02-12 23:56:41	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-12 23:56:41	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が終了 (*.net *.split)
2014-02-12 23:56:41	<--	letoh (~stackvm@203.67.184.110) が終了 (*.net *.split)
2014-02-13 00:00:32	--	letoh__ のニックネームが変更され letoh になりました
2014-02-13 00:06:41	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:06:43	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 00:07:02	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:07:05	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 00:07:30	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:07:31	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 00:19:22	<--	b4283 (~b4283@36-238-130-249.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-02-13 00:34:42	<--	Yu_Lin (24ec15fb@gateway/web/freenode/ip.36.236.21.251) が終了
2014-02-13 00:41:08	<--	suhorng (~suhorng@118-166-45-235.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-13 00:51:24	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:51:26	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 00:51:37	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:51:39	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 00:51:57	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:51:59	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 00:52:23	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 00:52:24	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 01:37:29	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Quit: Leaving.)
2014-02-13 01:37:48	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 02:16:12	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 02:16:13	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 02:16:34	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 03:38:37	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) が終了 (Quit: leaving)
2014-02-13 09:48:37	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-13 10:09:11	-->	petercommand_ (~chatzilla@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-13 10:09:20	-->	mno2_ (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-13 10:13:48	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 10:14:51	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 10:15:34	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 260 seconds)
2014-02-13 10:15:39	<--	petercommand (~chatzilla@unaffiliated/petercommand) が終了 (Ping timeout: 260 seconds)
2014-02-13 10:15:40	<--	darkx (~x4r@unaffiliated/darkx) が終了 (Ping timeout: 260 seconds)
2014-02-13 10:15:51	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (Ping timeout: 260 seconds)
2014-02-13 10:15:59	-->	petercommand (~chatzilla@59-127-63-123.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 10:16:11	--	petercommand のニックネームが変更され Guest97382 になりました
2014-02-13 10:16:20	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-13 10:19:13	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (*.net *.split)
2014-02-13 10:22:30	<--	petercommand_ (~chatzilla@unaffiliated/petercommand) が終了 (*.net *.split)
2014-02-13 10:22:32	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-13 10:22:32	<--	letoh (~stackvm@203.67.184.110) が終了 (*.net *.split)
2014-02-13 10:26:07	--	mno2_ のニックネームが変更され mno2 になりました
2014-02-13 10:30:04	-->	letoh (~stackvm@203.67.184.110) が #haskell.tw に参加
2014-02-13 10:32:01	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 10:33:40	<--	lambdabot (~lambdabot@silicon.int-e.eu) が終了 (*.net *.split)
2014-02-13 10:33:40	<--	Guest97382 (~chatzilla@59-127-63-123.HINET-IP.hinet.net) が終了 (*.net *.split)
2014-02-13 10:36:19	-->	lambdabot (~lambdabot@silicon.int-e.eu) が #haskell.tw に参加
2014-02-13 10:53:22	-->	drbean (~drbean@113.196.171.151) が #haskell.tw に参加
2014-02-13 10:53:22	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-13 10:53:22	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-13 10:53:22	--	ニックネーム #haskell.tw: [a2n b4283 cataska cataska__ cibs CindyLinz cyt93cs darkx drbean hychen_ kanru lambdabot letoh logfat__________ miaout17 mno2 monochrom petercommand shik superbil_c__]
2014-02-13 10:53:22	--	チャンネル #haskell.tw: 20 ニックネーム (0 オペレータ, 0 発言, 20 通常)
2014-02-13 10:53:46	--	モード #haskell.tw [+cnt]
2014-02-13 10:53:46	--	チャンネルの作成日時 月, 11  6月 2012 11:00:00
2014-02-13 10:54:20	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-13 10:58:44	-->	mno2_ (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-13 11:04:03	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 11:04:09	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 260 seconds)
2014-02-13 11:04:09	--	mno2_ のニックネームが変更され mno2 になりました
2014-02-13 13:31:57	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 14:03:40	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) が終了 (Ping timeout: 260 seconds)
2014-02-13 14:44:47	-->	godfat (~Adium@36-226-130-239.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-13 16:13:56	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 245 seconds)
2014-02-13 16:16:21	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-13 16:17:01	<--	miaout17 (~miaout17@miaout17.net) が終了 (Remote host closed the connection)
2014-02-13 16:17:14	-->	miaout17 (~miaout17@miaout17.net) が #haskell.tw に参加
2014-02-13 16:19:46	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Ping timeout: 245 seconds)
2014-02-13 16:43:48	-->	hashcat (~kv2a@218-166-241-131.dynamic.hinet.net) が #haskell.tw に参加
2014-02-13 18:09:46	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Ping timeout: 260 seconds)
2014-02-13 18:14:57	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 18:14:59	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 18:15:16	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 18:15:17	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 18:15:51	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-13 18:15:53	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-13 18:36:42	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-13 19:21:06	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-13 19:40:29	<--	godfat (~Adium@36-226-130-239.dynamic-ip.hinet.net) が終了 (Ping timeout: 272 seconds)
2014-02-13 20:24:16	-->	town77 (~1@61.148.242.47) が #haskell.tw に参加
2014-02-13 20:35:46	-->	b4283 (~b4283@218-164-220-38.dynamic.hinet.net) が #haskell.tw に参加
2014-02-13 20:41:06	<--	town77 (~1@61.148.242.47) が終了 (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2014-02-13 21:08:42	-->	godfat (~Adium@115.80.35.63) が #haskell.tw に参加
2014-02-13 21:15:49	<--	godfat (~Adium@115.80.35.63) が終了 (Ping timeout: 248 seconds)
2014-02-13 22:59:23	-->	godfat (~Adium@1-161-49-142.dynamic.hinet.net) が #haskell.tw に参加
2014-02-13 23:17:41	-->	suhorng (~suhorng@118-166-45-235.dynamic.hinet.net) が #haskell.tw に参加
2014-02-14 00:12:11	<--	hashcat (~kv2a@218-166-241-131.dynamic.hinet.net) が終了 (Read error: Connection reset by peer)
2014-02-14 00:21:00	<--	suhorng (~suhorng@118-166-45-235.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-14 00:34:43	<--	b4283 (~b4283@218-164-220-38.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-14 01:30:23	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-14 01:30:25	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-14 01:30:34	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-14 01:30:36	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-14 01:30:54	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-14 01:30:56	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-14 01:31:38	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-14 01:31:40	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-14 01:31:52	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-14 01:31:54	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-14 01:32:10	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-14 01:32:12	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-14 08:32:31	<--	monochrom (trebla@216.138.220.146) が終了 (Ping timeout: 272 seconds)
2014-02-14 08:33:24	-->	monochrom (trebla@216.138.220.146) が #haskell.tw に参加
2014-02-14 09:12:43	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-14 10:13:48	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-14 16:04:34	CindyLinz	發現一個比 GHC compile error message 還難讀的東西...
2014-02-14 16:05:00	CindyLinz	用 GHC 寫 Haskell template, 生出來的 code 有 compile error 的時候..... *_*
2014-02-14 16:05:20	CindyLinz	不管錯在哪裡, 行號都一樣...... *___*
2014-02-14 17:06:08	-->	liuzhoou (~liuzhoou@125.215.44.36) が #haskell.tw に参加
2014-02-14 17:11:50	<--	liuzhoou (~liuzhoou@125.215.44.36) が終了 (Quit: Leaving...)
2014-02-14 17:58:18	<--	petercommand (~chatzilla@unaffiliated/petercommand) が終了 (Remote host closed the connection)
2014-02-14 18:04:52	-->	petercommand (~peter@unaffiliated/petercommand) が #haskell.tw に参加
2014-02-14 18:58:59	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-14 19:12:55	-->	nalaginrut (~nalaginru@203.192.156.9) が #haskell.tw に参加
2014-02-14 19:31:53	<--	nalaginrut (~nalaginru@203.192.156.9) が終了 (Ping timeout: 246 seconds)
2014-02-14 21:26:04	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-14 22:16:52	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Read error: Connection reset by peer)
2014-02-14 22:17:26	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-14 22:52:23	-->	suhorng (~suhorng@118-166-46-237.dynamic.hinet.net) が #haskell.tw に参加
2014-02-14 22:52:52	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) が終了 (Quit: leaving)
2014-02-14 23:13:26	<--	suhorng (~suhorng@118-166-46-237.dynamic.hinet.net) が終了 (Ping timeout: 246 seconds)
2014-02-14 23:43:10	monochrom	(廢話) 改錯不如少錯, 少錯不如無錯 XD
2014-02-14 23:52:46	CindyLinz	用 Language.Haskell.TH 裡面的東西來「寫 Haskell」, 感覺有一點像 scheme
2014-02-14 23:52:55	CindyLinz	S-exp 的感覺
2014-02-14 23:53:37	monochrom	天下語法樹一樣黑 :)
2014-02-14 23:54:42	monochrom	唔, 更加 tautological 的版本: 天下語法樹一樣樹 :)
2014-02-14 23:54:51	CindyLinz	= =..
2014-02-14 23:55:41	CindyLinz	我先在註解裡寫好成品打算長什麼樣, 然後再用這種 S-exp 去寫產生器 @@"
2014-02-14 23:58:01	monochrom	其實, 但凡設計出來(而非盲目演化出來))的程式, 本應如此. 先有目標, 才有碼.
2014-02-14 23:59:10	CindyLinz	嗯嗯嗯...
2014-02-14 23:59:36	CindyLinz	喜歡直接看 S-exp 的人真奇怪... (苦惱)
2014-02-15 00:00:28	letoh	所以你的成品是 s-exp ?
2014-02-15 00:01:00	CindyLinz	嗯, 以前沒寫過, 或說很少寫這種長相的 code.. 覺得今天一邊寫, 縮排的方式一邊在演進中 ^^|
2014-02-15 00:01:18	CindyLinz	成品是 Haskell 啊, 可是 Haskell Template 的寫法很像 S-exp..
2014-02-15 00:01:22	monochrom	這樣說吧, S-exp 不是最好的語法, 但是第二好的語法. 即是說, 很多程式語言的語法太爛, 這情形下寧願用 S-exp.
2014-02-15 00:02:24	letoh	還有什麼語法可以當作設計參考呢?
2014-02-15 00:03:52	monochrom	我是用 Dijkstra 的語法作參考的. http://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1300.html 或 http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1300.PDF
2014-02-15 00:04:13	CindyLinz	例如說.. f a b = a + b 要寫成 funD (mkName "f") [clause [varP (mkName "a"), varP (mkName "b")] (normalB (appE (appE (varE $ mkName "+") (varE $ mkName "a")) (varE $ mkName "b"))) []]
2014-02-15 00:04:47	monochrom	其實可考慮 [d|f a b = a + b|]
2014-02-15 00:05:14	CindyLinz	可是中間有一些混合的 @_@"
2014-02-15 00:05:27	monochrom	呀, 也是.
2014-02-15 00:05:46	CindyLinz	也就是 [d| .... |] 裡面有局部要用動態的字串換進去, 然後我看 $() 能放的位置有點少 @@"
2014-02-15 00:07:24	monochrom	"為了一棵語法樹, 放棄整個語義森林" XD
2014-02-15 00:08:17	godfat	語義森林！
2014-02-15 00:08:18	CindyLinz	我想寫(示意) [d| class $(mkName $ "HasField" ++ capitalize a) s a where forall f. Functor f => $(mkName a) :: (a -> f a) -> s -> f s |]
2014-02-15 00:09:41	CindyLinz	或是.. 我只有最後面 forall f. Functor f => (a -> f a) -> s -> f s 的部分放 [d| ... |], 其他都手寫
2014-02-15 00:09:49	CindyLinz	GHC 叫說 a 和 s 沒定義.. QQ
2014-02-15 00:09:55	monochrom	語義森林是一個很易迷路很多陷阱的地方. 裏面還有一棟巫婆建的語法糖果屋...
2014-02-15 00:10:43	CindyLinz	欸不對 後面那個我是用 [t| ... |]
2014-02-15 00:11:56	-->	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-15 00:11:57	-->	b4283 (~b4283@36.238.129.52) が #haskell.tw に参加
2014-02-15 00:12:04	monochrom	唔, 是不是兩個 "a" 不同?
2014-02-15 00:13:09	godfat	語法糖果屋 XDDDDDD 再來幾個就能串成故事了
2014-02-15 00:13:17	monochrom	好像, 你有兩個 $(mkName "x") 的話, 會得到兩個不同的 x
2014-02-15 00:13:27	CindyLinz	是同一個, 嗯.. 但是是 class 那邊 s a 的 a
2014-02-15 00:15:00	CindyLinz	欸用 [t| ... |] 的時候沒有 mkName 呀
2014-02-15 00:15:22	CindyLinz	是直接寫 [t|forall f. Functor f => (a -> f a) -> s -> f s|]
2014-02-15 00:15:50	CindyLinz	編這種恐怖故事是想嚇跑誰啦.... 囧
2014-02-15 00:19:09	monochrom	我喜歡嚇跑任何有志做程式員的小孩 :)
2014-02-15 00:21:06	CindyLinz	..
2014-02-15 00:22:00	monochrom	唉, 不如說, 我喜歡嚇跑所有人
2014-02-15 00:23:13	godfat	因此留下的都是勇士了？
2014-02-15 00:23:32	monochrom	你看我寫 http://www.vex.net/~trebla/haskell/sicp.xhtml 的文筆, 是一種 "你去東會死, 去西也會死"
2014-02-15 00:24:17	monochrom	而到了 http://www.vex.net/~trebla/haskell/prerequisite.xhtml 的文筆, 簡直是 "看來你也不會學懂了"
2014-02-15 00:25:44	monochrom	"中學數學不合格就不會明 haskell", 你說是何等口吻呢? XD
2014-02-15 00:26:37	monochrom	不過, 留得下的都是智勇雙全了, 也不太壞吧
2014-02-15 00:28:56	CindyLinz	要過你這關沒那麼難啊, 我神經大條一點就過了... XD
2014-02-15 00:29:40	godfat	XDDDDDD
2014-02-15 00:31:40	godfat	關於數學，我覺得問題在於數學這個詞太廣了；同樣寫程式這件事也太廣了
2014-02-15 00:34:45	monochrom	你說得對
2014-02-15 00:38:01	godfat	我曾經還滿懼怕數學過，高一時數學分數非常慘 XD
2014-02-15 00:38:02	godfat	後來發現其實數學沒那麼可怕，只是有些數學我確實很不擅長
2014-02-15 00:38:02	godfat	而我們同樣把查 API 當組件工人這件事也當作寫程式，事實上也是沒錯啦... XDD
2014-02-15 00:41:08	monochrom	程式語言也算是 API
2014-02-15 00:42:01	monochrom	如此, 無論寫甚麼程式, 怎樣寫, 都是組裝工人
2014-02-15 00:45:38	<--	b4283 (~b4283@36.238.129.52) が終了 (Ping timeout: 260 seconds)
2014-02-15 00:45:57	godfat	好玩耶，目前最高四分
2014-02-15 00:45:57	godfat	http://corpsmoderne.itch.io/flappy-space-program
2014-02-15 00:45:57	godfat	也是... XD
2014-02-15 00:51:09	monochrom	我竟然造成了一個擦著地表的穩定軌道
2014-02-15 00:52:21	godfat	小鳥呼呼地飛 XD 擦著地表的話很容易跟下一隻撞到 ~.~
2014-02-15 00:54:44	monochrom	真是 rocket science
2014-02-15 00:55:25	godfat	我沒辦法玩到更多隻了，好難
2014-02-15 01:11:31	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-15 01:38:05	CindyLinz	剛剛寫的程式, 用 Language.Haskell.TH, 在 GHC compile 的時候會去連 postgreSQL, 讀取 schema, 把所有的 table 和 view 抓出來建 data Table, 還有對應的每一個 field 的 Lens
2014-02-15 01:38:28	CindyLinz	感覺很有以前寫 dynamic language 的 fu... XD
2014-02-15 01:39:36	monochrom	真多姿多采. 我還只想過, 在 GHC compile 的時候播電影
2014-02-15 01:41:39	CindyLinz	那個距離我能作出來的應用太遙遠了... XD
2014-02-15 01:42:06	CindyLinz	當然... 如果是 GHC compile 太久, 我去一邊轉電視那是沒問題 XD
2014-02-15 01:43:43	monochrom	播電影只不過是一句 runIO (system "vlc abc.mkv") 罷 :)
2014-02-15 01:44:05	CindyLinz	覺得 Edward A. Kmett 的 Lens 真是太讚了, 它裡面的東西是用 type 定的, 所以要寫 lib 跟它相容也不用 import 它.... 用 lib 的人再自行決定要不要 import 就好
2014-02-15 01:44:17	CindyLinz	wwww
2014-02-15 01:47:23	<--	cyt93cs (~cyt93cs@140.123.101.4) が終了 (Ping timeout: 272 seconds)
2014-02-15 01:47:35	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) が #haskell.tw に参加
2014-02-15 01:58:20	CindyLinz	厚~ 現在才發現有這個 package, 這樣就直接用字串拼出 Haskell 程式碼, 丟給它生出 Abstract Syntax 就好了嘛..... ww http://hackage.haskell.org/package/haskell-src-meta
2014-02-15 01:59:09	CindyLinz	isn't 100% complete yet... 不知道剩哪些...
2014-02-15 02:15:16	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 245 seconds)
2014-02-15 02:20:41	<--	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) が終了 (Ping timeout: 245 seconds)
2014-02-15 07:50:49	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-15 09:16:23	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-15 11:01:21	-->	b4283 (~b4283@60.249.196.111) が #haskell.tw に参加
2014-02-15 11:05:07	<--	b4283 (~b4283@60.249.196.111) が終了 (Client Quit)
2014-02-15 11:25:58	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-15 11:59:09	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-15 12:40:51	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-15 13:46:13	-->	flter (~Albert@140.113.249.196) が #haskell.tw に参加
2014-02-15 14:56:34	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-15 15:02:15	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-15 16:01:58	-->	hashcat (~kv2a@218.164.109.11) が #haskell.tw に参加
2014-02-15 18:35:03	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-15 19:32:00	-->	mac__ (~mac@host-61-70-191-50.static.kbtelecom.net) が #haskell.tw に参加
2014-02-15 19:32:46	<--	mac__ (~mac@host-61-70-191-50.static.kbtelecom.net) が終了 (Client Quit)
2014-02-15 20:01:49	-->	b4283 (~b4283@218-164-212-35.dynamic.hinet.net) が #haskell.tw に参加
2014-02-15 20:40:51	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-15 21:25:53	<--	b4283 (~b4283@218-164-212-35.dynamic.hinet.net) が終了 (Ping timeout: 246 seconds)
2014-02-15 21:42:48	-->	b4283 (~b4283@218-164-216-228.dynamic.hinet.net) が #haskell.tw に参加
2014-02-15 21:58:07	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-15 22:47:33	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) が終了 (Quit: leaving)
2014-02-15 23:39:55	<--	hashcat (~kv2a@218.164.109.11) が終了 (Quit: Konversation terminated!)
2014-02-16 00:10:53	<--	b4283 (~b4283@218-164-216-228.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-16 01:29:40	-->	liuzhoou (~liuzhoou@58.38.13.67) が #haskell.tw に参加
2014-02-16 01:33:55	<--	liuzhoou (~liuzhoou@58.38.13.67) が終了 (Remote host closed the connection)
2014-02-16 01:39:48	-->	liuzhoou (~liuzhoou@58.38.13.67) が #haskell.tw に参加
2014-02-16 01:47:10	<--	liuzhoou (~liuzhoou@58.38.13.67) が終了 (Quit: Leaving...)
2014-02-16 04:05:33	-->	godfat1 (~Adium@220.135.38.235) が #haskell.tw に参加
2014-02-16 04:09:14	<--	godfat (~Adium@1-161-49-142.dynamic.hinet.net) が終了 (Ping timeout: 264 seconds)
2014-02-16 05:27:43	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-16 06:32:05	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-16 06:37:01	favonia	CindyLinz: 對話紀錄的清單...可以按照時間倒著排序嗎？
2014-02-16 06:37:23	favonia	CindyLinz: 總覺得最新的在最上面比較合理
2014-02-16 07:26:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Quit: Leaving)
2014-02-16 08:33:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-16 09:22:51	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Ping timeout: 272 seconds)
2014-02-16 09:23:09	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-16 09:23:10	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-16 09:23:30	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-16 09:23:31	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-16 09:23:56	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-16 09:23:58	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Excess Flood)
2014-02-16 10:10:30	--	#haskell.tw のトピックは "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6" です
2014-02-16 10:10:31	--	トピックは CindyLinz が 金, 27 12月 2013 16:09:31 に設定
2014-02-16 11:00:25	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-16 11:15:04	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-lmfwwhftpjpysljf) が終了 (Ping timeout: 272 seconds)
2014-02-16 11:19:15	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-edyyxtazfwxaxvjx) が #haskell.tw に参加
2014-02-16 12:08:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Ping timeout: 246 seconds)
2014-02-16 12:48:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) が #haskell.tw に参加
2014-02-16 13:33:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) が終了 (Ping timeout: 260 seconds)
2014-02-16 13:35:02	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-edyyxtazfwxaxvjx) が終了 (Ping timeout: 246 seconds)
2014-02-16 13:35:55	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-omcyezwerffrgqui) が #haskell.tw に参加
2014-02-16 14:07:20	-->	haroldwu (~haroldwu@unaffiliated/haroldwu) が #haskell.tw に参加
2014-02-16 14:47:04	mno2	http://goo.gl/A7JlEU  Lisp 大法好！
2014-02-16 14:47:39	mno2	真的變邪教了
2014-02-16 14:47:49	mno2	xD
2014-02-16 14:47:56	CindyLinz	favonia: nginx 最陽春的 autoindex 好像沒有調整順序的功能 orz # http://nginx.org/en/docs/http/ngx_http_autoindex_module.html
2014-02-16 14:48:16	CindyLinz	..............||
2014-02-16 14:48:21	CindyLinz	(來轉 XD)
2014-02-16 15:06:31	-->	hashcat_ (~hashcat_@27.52.98.153) が #haskell.tw に参加
2014-02-16 15:14:16	CindyLinz	應該只有中國說「那個」是邪教吧.. XD
2014-02-16 15:19:59	b4283	"you know what"
2014-02-16 15:21:44	CindyLinz	避開那個名詞, 這樣大陸來的朋友才看得到 log... XD
2014-02-16 15:36:13	hashcat_	轉輪子神功
2014-02-16 15:50:47	hashcat_	是那個嘛
2014-02-16 15:52:14	hashcat_	那個跟山達基高度相似
2014-02-16 19:13:06	-->	town77 (~1@118.123.141.173) が #haskell.tw に参加
2014-02-16 19:59:19	-->	suhorng (~suhorng@118-166-46-237.dynamic.hinet.net) が #haskell.tw に参加
2014-02-16 20:01:39	suhorng	想問問有沒有推薦的給CS看的範疇書 XD
2014-02-16 20:03:32	suhorng	有搜到一些包含「categories」跟「computer science」/「computing」/「computational」，不過看了目錄不知道有什麼差別@@
2014-02-16 20:05:15	mno2	最經典的不就是 category theory for computing science
2014-02-16 20:05:42	mno2	http://www.cs.toronto.edu/~sme/presentations/cat101.pdf  這算嗎？
2014-02-16 20:06:49	hashcat_	我的意見是沒有
2014-02-16 20:07:41	suhorng	mno2: 謝推薦！不知道有經典的說XD
2014-02-16 20:07:54	suhorng	投影片也可阿w
2014-02-16 20:08:38	mno2	http://www.quora.com/Category-Theory/What-is-the-best-textbook-for-Category-theory   或是參考 Edward Kmett 的答案 xD
2014-02-16 20:09:03	mno2	http://www.quora.com/Category-Theory/What-is-category-theory-23346
2014-02-16 20:10:22	mno2	yinwang 最近生活好像不錯，文章連連發
2014-02-16 20:11:21	hashcat_	範疇論在沒有一系列數學前後文的狀況下沒辦法知道意義
2014-02-16 20:12:25	suhorng	喔~好
2014-02-16 20:12:43	suhorng	當然是拿在程式的範圍下討論囉~Haskell或ML之類的
2014-02-16 20:13:16	hashcat_	至少應該舉些像是矩陣或圖論的cs熟悉的數學物件
2014-02-16 20:13:57	suhorng	嗯嗯
2014-02-16 20:14:05	hashcat_	範疇論是要抓住不同中共同的東西
2014-02-16 20:14:10	suhorng	嗯哼
2014-02-16 20:15:04	hashcat_	範疇論從頭到尾只討論一種不知有何意義可言
2014-02-16 20:15:41	-->	jiajun (~jiajun@218.64.17.175) が #haskell.tw に参加
2014-02-16 20:16:00	hashcat_	找數學的範疇論  忽略不熟的範疇
2014-02-16 20:17:18	hashcat_	從頭到尾只討論一種結構的話範疇論根本只是多加上的名字
2014-02-16 20:19:06	hashcat_	找一般的範疇論挑範例看吧
2014-02-16 20:19:14	suhorng	恩XD
2014-02-16 20:20:17	mno2	http://www.youtube.com/watch?v=jk3xBhqcjqY   下一次有人問，就給他看這個影片，說這就是 Cat Theory (誤)
2014-02-16 20:21:18	mno2	貓理論
2014-02-16 20:23:42	suhorng	貓理論www
2014-02-16 20:25:50	mno2	宇宙的萬物都可以用喵星人來表示~
2014-02-16 20:27:44	-->	suhorng1 (~suhorng@118-166-46-237.dynamic.hinet.net) が #haskell.tw に参加
2014-02-16 20:27:55	hashcat_	http://www.mathematik.uni-muenchen.de/~pareigis/Vorlesungen/04SS/Cats1.pdf
2014-02-16 20:28:02	<--	suhorng (~suhorng@118-166-46-237.dynamic.hinet.net) が終了 (Ping timeout: 246 seconds)
2014-02-16 20:28:25	hashcat_	貓群1.pdf
2014-02-16 20:32:22	hashcat_	有矩陣 集合 自動機 群範疇
2014-02-16 20:32:42	hashcat_	這些cs比較熟的
2014-02-16 20:34:30	suhorng1	喔喔 謝謝!!研究看看XD
2014-02-16 20:35:00	hashcat_	從頭到尾都在講型別的就別看拉  根本是另外取名而已
2014-02-16 20:35:26	suhorng1	www
2014-02-16 20:35:34	hashcat_	www
2014-02-16 20:41:06	-->	hashcat (~kv2a@218.164.108.130) が #haskell.tw に参加
2014-02-16 20:44:53	<--	town77 (~1@118.123.141.173) が終了 (Ping timeout: 248 seconds)
2014-02-16 20:47:46	<--	jiajun (~jiajun@218.64.17.175) が終了 (Quit: Leaving)
2014-02-16 21:25:20	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-16 21:43:37	CindyLinz	favonia: 用了個折衷的辦法, 開目錄把 2012, 2013 的記錄裝起來 ^^
2014-02-16 22:24:53	CindyLinz	覺得.. 如果把 edwardk 的 lens package 整個讀透透, 會巡一遍 category 裡面不少東西.. 好多專有名辭的感覺..ww
2014-02-16 22:25:44	suhorng1	http://ro-che.info/ccc/23
2014-02-16 22:28:09	CindyLinz	profunctor, contravariant, arrow, functor, monad, traversable, distributive, applicative, alternative, foldable, backwards, comonad, comonadapply, effective, monadfix...
2014-02-16 22:28:31	CindyLinz	XDDD
2014-02-16 22:29:26	CindyLinz	這漫畫, 如果情境是刪除 cabal 裡的 package 也說得通... XD
2014-02-16 22:51:31	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-16 23:17:05	<--	hashcat_ (~hashcat_@27.52.98.153) が終了 (Ping timeout: 246 seconds)
2014-02-16 23:22:06	<--	hashcat (~kv2a@218.164.108.130) が終了 (Quit: Konversation terminated!)
2014-02-16 23:24:25	<--	suhorng1 (~suhorng@118-166-46-237.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-16 23:41:09	-->	b4283 (~b4283@36-238-129-71.dynamic-ip.hinet.net) が #haskell.tw に参加
2014-02-17 00:46:58	<--	b4283 (~b4283@36-238-129-71.dynamic-ip.hinet.net) が終了 (Quit: 暫離)
2014-02-17 01:55:20	monochrom	"Lisp大法好" 哈哈哈哈哈. 請問出自哪編google+的帖呢?
2014-02-17 02:07:30	monochrom	出盡辦法都搜不到, 或者該帖並不公開. 那麼我來開個新的...
2014-02-17 02:37:59	letoh	好像有公開  要找一下
2014-02-17 02:45:20	letoh	monochrom: https://plus.google.com/u/0/117011125558260192546/posts/d86vRgKkkFx  不確定是不是原始出處，我最早是從這看來的
2014-02-17 02:46:09	monochrom	謝謝
2014-02-17 03:20:57	CindyLinz	嗯... 用 Language.Haskell.TH 不小心寫出 Aaa-xx 這種名稱的 data constructor.. XD
2014-02-17 03:21:02	CindyLinz	- 在中間..
2014-02-17 04:11:36	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-17 07:45:44	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-17 10:05:12	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-17 10:11:35	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-17 10:19:35	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-17 10:57:42	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Ping timeout: 260 seconds)
2014-02-17 11:15:43	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-17 12:24:02	<--	mno2 (~mno2@42.60.173.63) が終了 (Quit: mno2)
2014-02-17 13:00:27	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-17 14:54:25	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Remote host closed the connection)
2014-02-17 14:56:14	--	superbil_c__ のニックネームが変更され superbil_c になりました
2014-02-17 14:56:58	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-17 18:38:56	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 245 seconds)
2014-02-17 18:42:17	-->	mno2 (~mno2@42.60.173.63) が #haskell.tw に参加
2014-02-17 18:49:01	<--	mno2 (~mno2@42.60.173.63) が終了 (Ping timeout: 245 seconds)
2014-02-17 22:05:25	-->	suhorng (~suhorng@118-166-50-190.dynamic.hinet.net) が #haskell.tw に参加
2014-02-17 22:24:56	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Read error: Operation timed out)
2014-02-17 22:25:04	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 22:29:05	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 22:29:13	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 22:33:14	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 22:33:47	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 22:41:29	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 22:41:36	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 22:48:44	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 22:48:52	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 22:52:52	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 22:53:00	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 22:57:51	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 22:57:59	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:01:59	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:02:07	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:06:08	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:06:16	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:10:17	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:10:25	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:14:26	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:14:34	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:18:34	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:18:43	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:22:44	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:22:52	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:23:52	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が終了 (Quit: Konversation terminated!)
2014-02-17 23:27:52	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:28:01	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:32:01	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:32:09	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:36:10	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:36:18	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:38:36	<--	suhorng (~suhorng@118-166-50-190.dynamic.hinet.net) が終了 (Quit: Leaving.)
2014-02-17 23:42:37	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:42:44	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:46:45	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:46:53	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:50:54	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:51:02	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:55:03	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:55:11	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-17 23:59:12	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-17 23:59:21	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:03:21	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:03:29	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:08:29	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:08:38	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:12:38	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:12:46	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:16:46	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:16:58	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:20:59	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:21:07	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:25:07	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:25:15	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:29:16	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:29:24	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:33:25	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:33:33	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:37:34	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:37:42	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:41:43	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:41:51	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:45:52	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:46:00	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:50:00	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:50:09	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:54:10	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:54:18	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 00:54:43	-->	b4283 (~b4283@1-175-240-63.dynamic.hinet.net) が #haskell.tw に参加
2014-02-18 00:58:44	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 00:58:53	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:02:53	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:03:01	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:07:02	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:07:10	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:11:10	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:11:17	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:15:17	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:15:25	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:19:25	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:19:35	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:23:35	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:23:43	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:27:43	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:27:51	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:31:51	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:31:59	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:36:00	<--	logfat__________ (~cinch@home.mno2.org) が終了 (Remote host closed the connection)
2014-02-18 01:36:09	-->	logfat__________ (~cinch@home.mno2.org) が #haskell.tw に参加
2014-02-18 01:38:23	CindyLinz	"a monad is like a train that runs backwards in time, which is made of tiny chocolate robots"
2014-02-18 01:38:48	CindyLinz	比那個什麼 monoid, category, endomorphism 親切.. 雖然不見得有比較好懂? XD
2014-02-18 01:39:51	godfat1	chocolate robots...?
2014-02-18 01:40:04	--	godfat1 のニックネームが変更され godfat になりました
2014-02-18 01:40:26	CindyLinz	在 #haskell 看來的..
2014-02-18 01:40:47	CindyLinz	@quote robot
2014-02-18 01:40:47	lambdabot	acowley says: It [my robot] is standing right behind me, and its arm keeps drifting out to be right over where I'm sitting. I stand up and feel the blunt force trauma of the future.
2014-02-18 01:40:57	CindyLinz	咦 不同句 XD
2014-02-18 01:41:56	godfat	http://www.etsy.com/listing/95738933/robot-chocolate-candy-2-dozen
2014-02-18 01:42:31	CindyLinz	o.o
2014-02-18 01:43:18	godfat	@quote chocolate
2014-02-18 01:43:18	lambdabot	psychobot says: Source not found, so this package chocolate cake mix.
2014-02-18 01:43:41	godfat	@quote monad
2014-02-18 01:43:42	lambdabot	geheimdienst says: #haskell has the type a -> m b. you feed in some problem, and out comes a solution invariably involving monads
2014-02-18 01:50:56	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Ping timeout: 252 seconds)
2014-02-18 01:51:20	b4283	invariably
2014-02-18 01:55:19	<--	b4283 (~b4283@1-175-240-63.dynamic.hinet.net) が終了 (Quit: 暫離)
2014-02-18 02:00:33	monochrom	我是冷血程式員. 我認為親切沒價值. :)
2014-02-18 02:04:58	CindyLinz	咦, 我以為你在當教授?
2014-02-18 02:05:30	monochrom	好吧, 我是冷血助教 :)
2014-02-18 02:05:49	CindyLinz	噗噗 XD
2014-02-18 02:50:02	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Ping timeout: 264 seconds)
2014-02-18 03:04:01	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 03:04:04	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 03:04:22	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 03:04:24	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 03:04:46	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 03:04:48	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 03:05:45	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 03:05:47	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 03:52:36	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 03:52:38	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 03:52:47	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 03:52:49	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 04:33:11	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 245 seconds)
2014-02-18 04:57:32	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 06:29:59	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Ping timeout: 240 seconds)
2014-02-18 06:53:57	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 06:53:59	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 06:54:26	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 06:54:28	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 07:54:54	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 07:54:55	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Excess Flood)
2014-02-18 08:13:48	-->	hashcat_ (~hashcat_@27.245.16.89) が #haskell.tw に参加
2014-02-18 08:19:51	<--	hashcat_ (~hashcat_@27.245.16.89) が終了 (Ping timeout: 245 seconds)
2014-02-18 10:14:35	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-18 10:44:11	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-18 10:47:12	-->	hashcat_ (~hashcat_@27.245.49.169) が #haskell.tw に参加
2014-02-18 11:19:58	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が終了 (Remote host closed the connection)
2014-02-18 11:22:55	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) が #haskell.tw に参加
2014-02-18 12:05:50	-->	weie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-18 12:43:13	-->	ouie (~weie@softbank221078042071.bbtec.net) が #haskell.tw に参加
2014-02-18 12:44:29	<--	weie (~weie@softbank221078042071.bbtec.net) が終了 (Ping timeout: 240 seconds)
2014-02-19 10:46:39	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-19 10:46:39	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-02-19 10:46:39	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-02-19 10:46:39	--	Nicks #haskell.tw: [a2n b4283 cataska cataska__ cibs CindyLinz cyt93cs darkx drbean flter haroldwu hashcat_ hychen_ kanru lambdabot letoh logfat__________ miaout17 mno2 monochrom shik superbil_c]
2014-02-19 10:46:39	--	Channel #haskell.tw: 22 nicks (0 ops, 0 voices, 22 normals)
2014-02-19 10:46:39	***	Buffer Playback...
2014-02-19 10:46:39	monochrom	[00:52:36] Lisp大法好: ('真 '善 '忍)
2014-02-19 10:46:39	monochrom	[00:55:25] 或 ('真 '善 '括號) XD
2014-02-19 10:46:39	letoh	[01:01:45] XD
2014-02-19 10:46:39	letoh	[01:01:59] quote 以後就不會被 eval 了
2014-02-19 10:46:39	***	Playback Complete.
2014-02-19 10:47:00	--	Mode #haskell.tw [+cnt]
2014-02-19 10:47:00	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-02-19 10:50:14	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 10:50:23	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 10:54:24	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 10:54:32	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 10:58:32	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 10:58:41	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:02:42	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:02:50	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:06:50	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:06:59	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:11:00	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:11:00	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-19 11:11:09	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:12:39	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-19 11:20:15	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:20:24	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:24:24	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:24:32	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:28:32	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:28:40	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:34:20	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:34:29	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:38:29	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:38:38	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:42:38	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:42:46	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:46:46	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:46:56	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:50:56	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:51:04	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:55:04	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:55:13	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 11:59:13	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 11:59:22	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:03:22	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:03:30	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:07:30	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:07:39	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:11:39	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:11:47	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:15:48	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:15:56	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:19:56	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:20:05	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:24:05	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:24:13	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:28:14	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:28:21	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:32:21	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:32:31	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:38:23	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:38:31	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:42:31	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:42:39	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:42:40	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-19 12:49:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-19 12:53:02	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:53:10	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 12:57:11	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 12:57:19	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:01:19	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:01:27	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:05:28	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:05:37	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:09:37	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:09:45	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:13:45	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:13:53	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:17:53	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:18:03	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:22:03	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:22:11	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:28:34	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:28:44	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:32:26	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Ping timeout: 260 seconds)
2014-02-19 13:33:39	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-19 13:33:41	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-19 13:34:04	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-19 13:34:06	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-19 13:34:45	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-19 13:34:47	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-19 13:35:46	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-19 13:35:48	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-19 13:39:48	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:39:57	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:43:57	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:44:05	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:48:05	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:48:14	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:52:14	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:52:23	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 13:56:24	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 13:56:32	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:00:32	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:00:41	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:04:41	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:04:49	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:08:49	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:08:59	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:12:59	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:13:07	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:17:07	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:17:16	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:21:16	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:21:26	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:25:24	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-19 14:29:24	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:29:33	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:33:33	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:33:42	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:37:42	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:37:50	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:41:50	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:41:59	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:46:00	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:46:08	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:50:09	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:50:17	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:54:18	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:54:26	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 14:58:26	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 14:58:36	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:13:14	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:13:24	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:17:24	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:17:33	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:21:34	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:21:42	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:25:42	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:25:52	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:29:52	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:30:02	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:34:02	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:34:12	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:38:13	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:38:21	-->	logfat__________ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:44:15	<--	logfat__________ (~cinch@home.mno2.org) has quit (Remote host closed the connection)
2014-02-19 15:44:33	-->	logfat (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-19 15:50:42	-->	v101 (~vodka101@115.112.95.154) has joined #haskell.tw
2014-02-19 15:50:43	<--	v101 (~vodka101@115.112.95.154) has left #haskell.tw
2014-02-19 16:05:09	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-19 16:05:11	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-19 16:05:26	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-19 16:56:13	-->	hashcat (~kv2a@218-173-238-234.dynamic.hinet.net) has joined #haskell.tw
2014-02-19 18:58:50	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-19 20:18:31	-->	b4283 (~b4283@218.164.221.85) has joined #haskell.tw
2014-02-19 21:35:49	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Remote host closed the connection)
2014-02-19 21:36:17	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-19 22:31:10	-->	suhorng (~suhorng@118-166-50-190.dynamic.hinet.net) has joined #haskell.tw
2014-02-19 23:36:00	<--	suhorng (~suhorng@118-166-50-190.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-02-20 00:14:52	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-20 01:08:39	godfat	http://pfacka.binaryparadise.com/articles/guide-to-advanced-programming-in-C.html
2014-02-20 01:08:39	godfat	現在才知道這種事...
2014-02-20 01:08:40	godfat	long i = -1;
2014-02-20 01:08:40	godfat	unsigned long u = 1;
2014-02-20 01:08:40	godfat	i > u // true
2014-02-20 01:09:59	monochrom	唔, 升級到 unsigned long 嗎?
2014-02-20 01:10:06	godfat	對...
2014-02-20 01:10:25	godfat	連個 warning 都沒 XD
2014-02-20 01:16:05	monochrom	細看標準, 確有這一條. "if the operand that has unsigned integer type has rank greater or equal to the rank of the type of the other operand, then the operand with signed integer type is converted to the type of the operand with unsigned integer type". 而 unsigned long 跟 long 有另文確認同rank
2014-02-20 01:16:35	CindyLinz	weak type...
2014-02-20 01:17:14	godfat	所以或許可以說認定為同 rank 本身就錯了，我想
2014-02-20 01:18:11	<--	b4283 (~b4283@218.164.221.85) has quit (Quit: 暫離)
2014-02-20 01:18:30	godfat	或是一定要比較大才能 promopt
2014-02-20 01:18:46	monochrom	這不是 weak, 這是 implicit. 不過, 也許不必深究. 總之方便作者, 苦害讀者的, 都是萬惡.
2014-02-20 01:20:02	CindyLinz	可能定標準的人只知道 total order, 不知道 partial order, 所以任兩個整數 type 放一起, 不是 < 也不是 > 的時候就是 =..
2014-02-20 01:20:39	godfat	或是他的比較標準是 entropy? bytes 一樣 XD
2014-02-20 01:21:26	CindyLinz	那真的就 total order 了..
2014-02-20 01:22:30	CindyLinz	覺得 java 和 postgresql 乾脆沒有 unsigned type, 倒是少了這個危險
2014-02-20 01:25:15	godfat	忽然覺得這確實是個明智的選擇 XD
2014-02-20 01:26:37	CindyLinz	啊, postgres 有假的 unsigned int..
2014-02-20 01:26:51	CindyLinz	user 可以額外加 constraint, 讓它遇到 <0 的時候就 reject... XD
2014-02-20 01:27:07	CindyLinz	可用的正數部分沒有變多 XD
2014-02-20 01:46:44	godfat	畢竟沒法依賴不可靠的 c, 只好做在 application 層吧 @@
2014-02-20 01:51:47	CindyLinz	哎唷我那搞笑的啦 XD
2014-02-20 01:51:59	godfat	XDDDD
2014-02-20 01:52:18	CindyLinz	就只是負的部分不准用嘛, 是用原本的 signed type 啊
2014-02-20 01:53:11	godfat	是啊，這樣變成 negative 時我們還知道是發生 underflow 了，不像 c 又說不確定
2014-02-20 01:53:27	CindyLinz	對, 都確定了 :D
2014-02-20 01:54:13	CindyLinz	我用 mysql 的時候, 有遇過一個狀況...
2014-02-20 01:54:42	CindyLinz	我們家習慣存時間的時候是用距離 unix epoch time 的秒數
2014-02-20 01:54:53	godfat	說到這，我那天在 ruby 裡看到一個很奇怪的錯，
2014-02-20 01:54:54	godfat	說什麼 bignum 塞不下 long 裡面
2014-02-20 01:54:54	godfat	我直覺跟 32bit 機器有關，果然苦主是用 32bit 的虛擬機
2014-02-20 01:54:54	godfat	後來找到是我們用的其中一個，寫得很爛的 library,
2014-02-20 01:54:54	godfat	他把 array 拿去 rotate 一個很大的數字
2014-02-20 01:54:56	CindyLinz	遊戲嘛, 減來減去算 range 方便
2014-02-20 01:55:03	CindyLinz	咦, 你一次講好多 XD
2014-02-20 01:55:25	godfat	就打好一次送出... XD 我的 client 可以讓我方便斷行
2014-02-20 01:55:44	CindyLinz	那一個 bignum 的實作方式只能在 64bit 的機器上才會正確喔?
2014-02-20 01:56:03	monochrom	"苦主" XD
2014-02-20 01:56:26	godfat	我也常常覺得都用 unix epoch 最好了 XD
2014-02-20 01:56:26	godfat	不是，是 ruby 的 array rotate 不能 rotate 一個 bignum
2014-02-20 01:56:26	godfat	在 32bit 機器上是 bignum 的數字在 64bit 上只是一個 fixnum
2014-02-20 01:57:07	CindyLinz	這... 功能不一樣了啊 @_@"
2014-02-20 01:57:15	CindyLinz	32bit 的 bignum 比較大 XD
2014-02-20 01:58:15	CindyLinz	咦.. 其實 spec 只是要實作到 64bits 而已?
2014-02-20 01:58:26	CindyLinz	那我有一點感覺了 :p
2014-02-20 01:58:39	godfat	功能不一樣？我後來拿 bignum 去 mod array size, 再去 rotate 就好了
2014-02-20 01:58:39	godfat	完全沒必要 rotate 那麼大的數字，超過 array size 根本就循環了...
2014-02-20 01:59:09	monochrom	說的也是
2014-02-20 01:59:19	CindyLinz	喔喔, 是用來描述要 rotate 的偏移量喔?
2014-02-20 01:59:24	godfat	對
2014-02-20 01:59:45	godfat	雖然 ruby 居然會噴 bignum 塞不下 long 我也覺得算是 bug 吧...
2014-02-20 02:00:32	CindyLinz	我猜 lib author 只用 64bit 的環境測過吧? 如果自己每天遇到的機器都是 64bits, 會忘記這世界上還有 32bits XD
2014-02-20 02:00:50	CindyLinz	我覺得我差不多是這樣了 ^^|
2014-02-20 02:01:03	 *	letoh 繼續 32bit...
2014-02-20 02:01:08	CindyLinz	m(_._)m
2014-02-20 02:01:26	letoh	要測 64bit 就開 vm
2014-02-20 02:01:47	hashcat	還有8bit
2014-02-20 02:01:47	godfat	是沒錯，可是我怎麼也不會想去 rotate 一個會循環很多次的數字 = =
2014-02-20 02:01:48	godfat	又或是可能他覺得 ruby 會幫他 mod 算一下吧..
2014-02-20 02:02:13	CindyLinz	XD
2014-02-20 02:02:15	monochrom	我沒有忘記, Casio FX-702P 是用兩顆 4-bit 核去扮 8 bit
2014-02-20 02:02:19	letoh	hashcat: 8bit 有點難找  但我有 16bit
2014-02-20 02:02:22	godfat	8bit 拿來看或是聽音樂就好了 XD
2014-02-20 02:02:45	monochrom	我還保有一顆 6502 哩!
2014-02-20 02:02:55	letoh	太神了!!
2014-02-20 02:03:08	CindyLinz	啊對繼續講 mysql...  不知道誰, 把某兩個存時間的欄位 ctime dtime 用成 unsigned int
2014-02-20 02:03:15	monochrom	很久以前貪得意買下
2014-02-20 02:03:31	letoh	那有 z8 嗎?
2014-02-20 02:03:40	monochrom	沒有
2014-02-20 02:03:49	godfat	結果就 underflow 了嗎？
2014-02-20 02:03:49	CindyLinz	ctime 是遊戲開始, dtime 是結束... 然後我要統計超過一分鐘的遊戲資料, 所以就在 where 裡面打  dtime - ctime >= 60
2014-02-20 02:04:04	CindyLinz	然後整個 sql 就 runtime error 了...
2014-02-20 02:04:11	godfat	XDDDDD
2014-02-20 02:04:36	CindyLinz	有 dtime < ctime 的 case... 應該是某些遊戲沒正常結束, dtime = 0 之類的..
2014-02-20 02:04:50	CindyLinz	重點是, 它就直接 error 了.....||
2014-02-20 02:05:24	godfat	不過還真巧，昨天我正在弄時間差異相關的東西，我真是覺得 postgres 愈用愈滿意。他時間相減的 type 是 interval, 跟 time 本身是不相容的，但是 time + interval 是沒問題的。type safe 呀，我亂寫他都會幫我找出不合理的操作
2014-02-20 02:05:36	CindyLinz	以後看到這種欄位就要很小心, 移項變號寫成 dtime >= 60 + ctime.. orz
2014-02-20 02:06:01	CindyLinz	那部分是不錯 @@"
2014-02-20 02:06:17	godfat	他是不能發現 60 是 signed, 然後 promote 到 signed long 嗎？
2014-02-20 02:06:21	monochrom	其實根本不應用 0 來代表 "未知 dtime" 吧?
2014-02-20 02:06:33	CindyLinz	我們沒有用 0 來代表未知 dtime
2014-02-20 02:06:55	CindyLinz	只是沒機會寫入, 該局應該就出什麼 exception 就結束了 XD
2014-02-20 02:07:17	godfat	mysql 真是什麼奇怪的事情都會聽到...
2014-02-20 02:07:18	CindyLinz	然後... 實際上, 我們會用 0 來代表未知, 因為多 NULL 的 cost 太高....
2014-02-20 02:07:25	monochrom	好吧, 總之天下程式一樣黑
2014-02-20 02:07:54	godfat	我曾經覺得不應該有 NULL, 不過有時候有 NULL 確實方便滿多的
2014-02-20 02:08:03	monochrom	唉, 有人的地方就有 bug
2014-02-20 02:08:28	godfat	有生命的地方就有 bug
2014-02-20 02:08:36	monochrom	便宜莫貪呀!
2014-02-20 02:08:39	CindyLinz	有 bug 的地方就有生命...
2014-02-20 02:08:44	godfat	有 bug 的，我才想說... XD
2014-02-20 02:08:59	CindyLinz	那邊如果用 null, 也是 runtime error 啊 ^^|
2014-02-20 02:09:45	CindyLinz	而且 dtime >= 60 + ctime 變得超難寫...  dtime is not null and ctime is not null and dtime >= 60 + ctime
2014-02-20 02:09:47	monochrom	真是寫程式的黑暗時代, 幾時才破曉呢?
2014-02-20 02:10:07	CindyLinz	生命本身就是個 bug?
2014-02-20 02:10:14	godfat	不過我這幾天的經驗，如果欄位有 null, 跟那筆資料有關的操作都會被忽略掉，也確實這會是我要的
2014-02-20 02:10:28	CindyLinz	熵值會下降的例外奇異空間 XD
2014-02-20 02:11:31	monochrom	這是因為 sql 沒提供 Maybe Monad. 所以我才說, 黑暗時代
2014-02-20 02:12:40	CindyLinz	godfat: 通通都被吸成 null 這樣?
2014-02-20 02:14:25	godfat	CindyLinz, 老實講有點忘記狀況。好像是我裡面用了 generate_series function, 然後其中一個 argument 我給某個欄位，那個欄位有可能是 NULL.
2014-02-20 02:14:26	godfat	結果有 NULL 的那些資料，等於完全沒有跑這個 function, 直接假裝那些資料都不存在
2014-02-20 02:15:11	CindyLinz	喔是說 stored procedure 的部分... hmm
2014-02-20 02:15:18	godfat	表達能力是沒 maybe monad 好，不過直接忽略真的很方便 XD
2014-02-20 02:15:42	CindyLinz	我以前試過用 postgres pgsql 寫程式....
2014-02-20 02:16:04	godfat	sql 真的要寫起邏輯應該很痛苦吧？
2014-02-20 02:16:05	CindyLinz	寫下去發現它的函數功能有洞... QQ
2014-02-20 02:16:09	godfat	XDDDDDD
2014-02-20 02:16:31	CindyLinz	我只是想對 bytea (postgres 的 binary type) 作 xor 運算
2014-02-20 02:16:37	CindyLinz	完全沒門!
2014-02-20 02:16:50	CindyLinz	有個 bits type 有 xor 運算
2014-02-20 02:17:07	CindyLinz	而 bytea 只有接起來, 或是截取其中一段的功能
2014-02-20 02:17:23	CindyLinz	然後 bits 和 bytea 不存在互轉的功能..
2014-02-20 02:17:58	CindyLinz	最後這一個功能是裝 plperl 用 perl 實作....||
2014-02-20 02:18:03	godfat	不知道現在會不會已經有了？ XD 我昨天是寫完才發現我用到 9.3+ 的功能
2014-02-20 02:18:17	CindyLinz	那時可能 9.0..
2014-02-20 02:18:26	godfat	那也算新了... XD
2014-02-20 02:19:15	CindyLinz	可是我現在覺得想不開才用它寫程式 orz  跟 mysql 比它功能真的很多, 可是跟別的正常的程式語言還是不能比... QQ
2014-02-20 02:20:15	godfat	我是看到有一本書在講怎麼做 materialized view, 做到複雜得跟鬼一樣，不懂為什麼，才注意到原來原生的是 9.3+ 才有... 瞬間覺得那本書那章像是廢了 XD
2014-02-20 02:20:29	godfat	sq	l 還是讓他查詢就好了吧 XD
2014-02-20 02:21:11	CindyLinz	9.3+ 不能用嗎? @@"  我以為如果標 6.0- 比較悲劇 XD
2014-02-20 02:21:54	godfat	應該可以吧，可是他做了一堆事情，明明 9.3 一行就收工的 XD
2014-02-20 02:23:07	CindyLinz	喔, 所以它真的是提供了一個 9.3- 才有意義的作法 XD
2014-02-20 02:23:48	godfat	我沒細看，是這樣猜的... 他寫了一堆很複雜的 trigger...
2014-02-20 02:24:08	CindyLinz	讚 XD
2014-02-20 02:24:57	godfat	http://enterpriserails.chak.org/full-text/chapter-12-materialized-views
2014-02-20 02:25:47	godfat	本來想細讀的，但他例子太複雜了，後來就懶了，反正我做完了 @@
2014-02-20 02:26:32	CindyLinz	好像可以學點東西 @@"
2014-02-20 02:26:56	CindyLinz	只是寫這種東西在 postgres 的環境超難測試的... @@"
2014-02-20 02:27:25	godfat	應該有不少經驗與實例在裡面，所以原本才想說可以細看一下
2014-02-20 02:27:25	godfat	用 postgres 自己的測試？ XD 我上次為了做 plruby 試了一下，
2014-02-20 02:27:25	godfat	覺得還不錯
2014-02-20 02:27:55	CindyLinz	不是那意思啦 ^^|  只是自己寫的 trigger 或 function, postgres 的作法是執行到的 branch 才會 parse..
2014-02-20 02:28:36	godfat	嗯？我的意思就是測試 function 或 trigger 本身
2014-02-20 02:28:40	CindyLinz	所以很多一般 compiler 會幫忙挑錯誤的功能都等於沒有了 @@"
2014-02-20 02:28:52	godfat	https://github.com/godfat/plruby/tree/master/expected
2014-02-20 02:29:05	CindyLinz	可是這種會連環發射的 trigger, 每一層都還有 branch 的話怎麼確定有測完啊? orz
2014-02-20 02:29:49	CindyLinz	欸你這是 plruby, 不是 plpgsql 啊?
2014-02-20 02:29:53	godfat	這跟一般程式很難測到所有 branch 有差嗎？
2014-02-20 02:30:43	CindyLinz	好像是一樣, 只是一般程式我常常沒有測完所有 branch 就有信心了 ^^|
2014-02-20 02:31:31	godfat	因為我就寫個 Makefile, 然後就多了
2014-02-20 02:31:32	godfat	make installcheck
2014-02-20 02:31:32	godfat	他可以自動幫我開個 db, 我在其他地方寫 trigger/function,
2014-02-20 02:31:32	godfat	然後自動執行，自動驗證輸出，感覺是可以做測試的框架 XD
2014-02-20 02:31:36	godfat	XDDDDDD
2014-02-20 02:32:39	godfat	測試案例寫在
2014-02-20 02:32:40	godfat	https://github.com/godfat/plruby/tree/master/sql
2014-02-20 02:32:40	godfat	然後預期輸出在
2014-02-20 02:32:40	godfat	https://github.com/godfat/plruby/tree/master/expected
2014-02-20 02:32:40	godfat	我想應該可以套在任何地方？
2014-02-20 02:35:01	CindyLinz	跑一次通常會多久啊?
2014-02-20 02:35:51	CindyLinz	最近在寫 haskell 的東西, 每寫一個小段落下一次 cabal build 要等個幾秒鐘, 我漸漸開始不耐煩了 orz
2014-02-20 02:35:55	godfat	看來我測試壞了... XD
2014-02-20 02:35:55	godfat	不過那三個花的時間是：
2014-02-20 02:35:55	godfat	        0.59 real         0.05 user         0.04 sys
2014-02-20 02:36:11	CindyLinz	一秒應該還行
2014-02-20 02:36:20	CindyLinz	不對 0.59 是半秒 XD
2014-02-20 02:36:29	godfat	是說案例才三個而已，不知道多起來快不快
2014-02-20 02:37:29	CindyLinz	如果有 createdb / dropdb 為什麼這麼快啊....
2014-02-20 02:38:01	godfat	我沒細究耶，也許他用別種方式，例如 memory db?
2014-02-20 02:38:52	CindyLinz	太詐了!
2014-02-20 02:40:15	CindyLinz	一時沒找到 memory db 相關的資訊 @@"
2014-02-20 02:40:36	godfat	我正在看 http://www.postgresql.org/docs/9.3/static/extend-pgxs.html
2014-02-20 02:40:37	godfat	看看有沒有說 make installcheck 到底做啥
2014-02-20 02:41:34	godfat	他應該不會其實偷偷寫在我的某個 db 裡但是沒清乾淨吧？ XD
2014-02-20 02:41:45	CindyLinz	mysql 的 memory table 不能有 blob 和 text..
2014-02-20 02:43:35	godfat	喔，他有印資訊.. --dbname=contrib_regression
2014-02-20 02:43:35	godfat	看來是額外建沒錯
2014-02-20 02:44:06	godfat	mysql 那樣限制的理由是啥？memory 應該要最強吧？ socket 都給我存進去
2014-02-20 02:45:00	CindyLinz	mysql? mysql 的限制不需要理由的... (遠目)
2014-02-20 02:45:10	godfat	XDDDDDD
2014-02-20 02:45:23	CindyLinz	就他不想做啊.. @@"
2014-02-20 02:45:45	CindyLinz	聽說 bug 也不太想修.. @@"
2014-02-20 02:46:41	CindyLinz	On the other hand, the MySQL team will routinely degrade bugs (to "not a bug") without providing any solution, and accept the fact that there's a problem and not fix it for 5 years. # http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL
2014-02-20 02:46:54	CindyLinz	這個 wiki 是 MySQL 與 PostgreSQL 的比較
2014-02-20 02:47:42	CindyLinz	想起幾個月前有看過一隻 MySQL bug 7 歲生日的祝賀影片 XD
2014-02-20 02:48:04	CindyLinz	https://www.youtube.com/watch?v=oAiVsbXVP6k
2014-02-20 02:48:09	godfat	.....啥鬼...難怪他會很開心地賣掉然後再說別人搶他的東西
2014-02-20 02:48:39	godfat	喔喔，那影片我也看過 XD
2014-02-20 02:48:43	CindyLinz	XDDDD
2014-02-20 02:50:05	monochrom	哈哈, 竟然有慶祝 bug 生日的
2014-02-20 02:50:19	monochrom	有人的地方, 就有生日會? XD
2014-02-20 02:50:46	CindyLinz	我覺得影片後半瘋瘋地狂笑也好好笑 XD
2014-02-20 02:51:46	godfat	也許我沒看完，晚點看看 XD
2014-02-20 02:52:53	CindyLinz	記得戴耳機 XD
2014-02-20 02:53:19	monochrom	是呀, 最後很詭異地狂笑, 最好不要睡前看了 XD
2014-02-20 02:53:38	godfat	XDDDD 某種巫術嗎，不過沒說沒注意到好晚了.....
2014-02-20 02:55:16	monochrom	用大笑來遮掩內心的失望 XD
2014-02-20 02:56:26	godfat	是說這時候也許也會有人跳出來說，這麼不滿意就自己修呀... O_o
2014-02-20 02:56:44	monochrom	嘻嘻
2014-02-20 02:57:49	monochrom	真的或許有一天, 有班人忍不下去, 把心一橫 fork 了它
2014-02-20 02:58:04	CindyLinz	godfat: mysql 的話還好.... # 02:56 < godfat> 是說這時候也許也會有人跳出來說，這麼不滿意就自己修呀... O_o
2014-02-20 02:58:16	monochrom	而我呢, 早就把心一横轉投 postgresql 了!
2014-02-20 02:58:43	CindyLinz	剛剛那篇 wiki 裡面:
2014-02-20 02:58:45	CindyLinz	One criticism of the MySQL development model has been the historical reluctance of its corporate development team to accept patches from external sources. This has prompted some to say MySQL is not a "true" open source project.
2014-02-20 02:59:02	godfat	mysql fork 確實是超多的... @@
2014-02-20 02:59:03	CindyLinz	所以, 自己修他也不收這樣....
2014-02-20 02:59:40	monochrom	啊呵, 我太脱節了!
2014-02-20 03:00:03	godfat	聽說 google 的不少產品也是
2014-02-20 03:00:11	godfat	（不太收外部 patch 這件事）
2014-02-20 03:00:21	CindyLinz	jserv: 這不是啃的Git..
2014-02-20 03:00:48	godfat	紙包 git
2014-02-20 03:02:00	CindyLinz	他是說 google 丟出來 android git 弄得很亂, 沒打算讓人看得懂的樣子 @@"
2014-02-20 03:02:27	godfat	是喔？有明顯不是原本的開發紀錄嗎？
2014-02-20 03:02:34	CindyLinz	那我不知道
2014-02-20 03:02:48	CindyLinz	總知他就動手把它們整理一遍 @@"
2014-02-20 03:02:55	godfat	XDDDDDDD
2014-02-20 03:03:09	godfat	整理開發歷史這工程浩大呀
2014-02-20 03:03:10	CindyLinz	然後說: 現在總算變成啃的git了..
2014-02-20 03:03:42	godfat	不過社群應該要看哪個呀..?
2014-02-20 03:03:53	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-02-20 03:06:09	monochrom	讓我把那生日歌貼到 google+
2014-02-20 03:07:17	CindyLinz	這個 slide, 第 37 頁 http://www.slideshare.net/jserv/build-your-own-android-toolchain-from-scratch
2014-02-20 03:07:23	CindyLinz	monochrom: XD
2014-02-20 03:07:48	monochrom	成了! https://plus.google.com/102208456519922110915/posts/S99UmDb3HAp
2014-02-20 03:08:25	CindyLinz	slide 解析度好差, 看不出東西..
2014-02-20 03:09:12	CindyLinz	精簡若干 branch 之後 12GB 的 git? orz
2014-02-20 03:09:22	godfat	喔喔，我猜他是說 gcc 的歷史不見了之類的？
2014-02-20 03:10:01	CindyLinz	「只要有經驗, 就不需要讀文件, 反正也沒有這回事 :)」.... orz
2014-02-20 03:10:35	CindyLinz	我以為是在講 android @@"
2014-02-20 03:10:39	monochrom	無端出示美女合照, 果然加入宅男妒想
2014-02-20 03:11:18	CindyLinz	跳過就好 ^^|
2014-02-20 03:11:23	godfat	我是猜 android 裡面有 gcc, 然後裡面的 gcc 像是 source 匯入這樣
2014-02-20 03:11:23	godfat	不過我沒細看啦.. XD
2014-02-20 03:12:02	monochrom	每兩張 slide 就一張美女照. 天啊, 這是宅男還是炮男了?!
2014-02-20 03:12:07	godfat	不過這麼巨大的歷史，全保留也是個開發困擾
2014-02-20 03:12:07	godfat	忽然想到 bitcoin 交易紀錄？
2014-02-20 03:12:34	CindyLinz	他後來好像就比較沒再這樣放了 XD
2014-02-20 03:13:01	godfat	我不知道，只是好像什麼事情最後都變成 scale 的問題 XD
2014-02-20 03:14:40	monochrom	弊, 打錯字, "妒想" 應該是 "幻想". 可惜, 這樣就意外地創造了 "妒想" 一詞, 恐怕會流傳後世.
2014-02-20 03:16:17	godfat	XDDDD 等 haskell 流行起來大家開始考古 haskell.tw 後再來煩惱這個
2014-02-20 03:22:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2014-02-20 03:58:58	-->	hashcat__ (~kv2a@218-173-238-234.dynamic.hinet.net) has joined #haskell.tw
2014-02-20 03:59:26	<--	hashcat (~kv2a@218-173-238-234.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2014-02-20 04:39:28	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-02-20 04:59:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 05:02:06	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-20 05:09:45	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-20 05:10:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-02-20 05:48:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 06:24:52	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-02-20 07:10:28	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-20 07:32:46	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2014-02-20 07:33:57	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 248 seconds)
2014-02-20 07:56:46	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-20 08:54:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 09:14:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-02-20 09:18:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 09:25:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2014-02-20 09:34:45	<--	hashcat__ (~kv2a@218-173-238-234.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-02-20 09:34:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 09:37:39	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-20 09:41:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2014-02-20 09:48:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 10:27:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-02-20 10:40:21	-->	b4283 (~b4283@114-39-253-190.dynamic.hinet.net) has joined #haskell.tw
2014-02-20 11:05:43	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-20 11:07:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 11:40:05	-->	town77 (~1@171.90.58.127) has joined #haskell.tw
2014-02-20 12:09:54	<--	town77 (~1@171.90.58.127) has quit (Remote host closed the connection)
2014-02-20 12:47:35	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2014-02-20 13:31:10	-->	godfat (~Adium@36-225-51-66.dynamic-ip.hinet.net) has joined #haskell.tw
2014-02-20 13:38:09	<--	monochrom (trebla@216.138.220.146) has quit (Quit: NO CARRIER)
2014-02-20 13:41:47	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-02-20 13:52:50	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-20 13:57:42	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-20 16:28:15	<--	mno2 (~mno2@42.60.173.63) has quit (Ping timeout: 252 seconds)
2014-02-20 16:28:44	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-20 18:15:40	-->	hashcat (~kv2a@1-172-236-66.dynamic.hinet.net) has joined #haskell.tw
2014-02-20 18:36:00	hashcat	法國人說得英文真清楚
2014-02-20 18:36:41	hashcat	美國人的都聽得很吃力
2014-02-20 18:52:06	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-20 19:19:38	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-20 20:29:18	<--	godfat (~Adium@36-225-51-66.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-02-20 21:09:58	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-02-20 21:13:47	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-20 21:26:38	-->	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has joined #haskell.tw
2014-02-20 21:52:55	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-20 21:59:53	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2014-02-20 22:00:16	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-20 22:11:48	-->	petercom1and (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-20 22:12:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-20 22:15:37	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 367 seconds)
2014-02-20 22:15:39	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 367 seconds)
2014-02-20 22:15:50	-->	monochrm (trebla@216.138.220.146) has joined #haskell.tw
2014-02-20 22:15:52	--	monochrm is now known as monochrom
2014-02-20 22:28:44	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-20 22:29:42	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-20 22:38:08	<--	logfat (~cinch@home.mno2.org) has quit (Ping timeout: 245 seconds)
2014-02-20 22:38:10	<--	petercom1and (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2014-02-20 22:42:18	<--	b4283 (~b4283@114-39-253-190.dynamic.hinet.net) has quit (Quit: 暫離)
2014-02-20 23:22:28	-->	suhorng (~suhorng@118-166-45-130.dynamic.hinet.net) has joined #haskell.tw
2014-02-21 00:03:02	<--	suhorng (~suhorng@118-166-45-130.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-02-21 00:38:59	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-21 00:39:35	<--	hashcat (~kv2a@1-172-236-66.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-21 01:10:22	-->	peter_ (~peter@128.199.232.63) has joined #haskell.tw
2014-02-21 01:11:45	<--	peter_ (~peter@128.199.232.63) has quit (Client Quit)
2014-02-21 01:12:31	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-02-21 02:19:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-02-21 04:42:22	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 05:06:27	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 05:06:27	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-02-21 05:06:27	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-02-21 05:06:27	--	Nicks #haskell.tw: [a2n cataska cataska__ CindyLinz cyt93cs_ darkx drbean flter godfat haroldwu hashcat_ hychen_ kanru lambdabot letoh logfat_ miaout17 monochrom petercommand petercommand11 shik superbil_c weie]
2014-02-21 05:06:27	--	Channel #haskell.tw: 23 nicks (0 ops, 0 voices, 23 normals)
2014-02-21 05:06:49	--	Mode #haskell.tw [+cnt]
2014-02-21 05:06:49	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-02-21 05:40:38	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 05:53:07	-->	cataska___ (uid12717@gateway/web/irccloud.com/x-zcnyfziycpcsezto) has joined #haskell.tw
2014-02-21 05:53:59	-->	flter_ (~Albert@140.113.249.196) has joined #haskell.tw
2014-02-21 05:55:53	-->	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-02-21 06:00:22	<--	flter (~Albert@140.113.249.196) has quit (*.net *.split)
2014-02-21 06:00:24	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-xpyodokymtiptbsm) has quit (*.net *.split)
2014-02-21 06:00:27	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-02-21 06:00:38	--	cataska___ is now known as cataska__
2014-02-21 06:06:25	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 06:06:26	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 06:12:10	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 260 seconds)
2014-02-21 06:27:05	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 06:27:06	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 06:36:34	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 06:36:34	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 06:46:17	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 06:47:05	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 06:48:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 08:49:26	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 08:49:26	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-zcnyfziycpcsezto) has quit (*.net *.split)
2014-02-21 08:49:27	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-omcyezwerffrgqui) has quit (*.net *.split)
2014-02-21 08:49:27	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-yqacbfqxldditqvp) has quit (*.net *.split)
2014-02-21 08:49:27	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2014-02-21 08:49:28	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2014-02-21 08:49:28	<--	haroldwu (~haroldwu@unaffiliated/haroldwu) has quit (*.net *.split)
2014-02-21 08:49:28	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 08:49:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2014-02-21 08:49:28	<--	flter_ (~Albert@140.113.249.196) has quit (*.net *.split)
2014-02-21 08:49:29	<--	logfat_ (~cinch@home.mno2.org) has quit (*.net *.split)
2014-02-21 08:49:29	<--	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has quit (*.net *.split)
2014-02-21 08:49:29	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2014-02-21 08:49:29	<--	letoh (~stackvm@203.67.184.110) has quit (*.net *.split)
2014-02-21 08:49:30	<--	petercommand11 (~peter@128.199.232.63) has quit (*.net *.split)
2014-02-21 08:49:30	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-21 08:49:30	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-02-21 08:49:30	<--	miaout17 (~miaout17@miaout17.net) has quit (*.net *.split)
2014-02-21 08:49:30	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-02-21 08:49:30	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 08:49:31	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-02-21 08:58:16	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-21 08:58:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 08:58:16	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 08:58:16	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 08:58:16	-->	flter_ (~Albert@140.113.249.196) has joined #haskell.tw
2014-02-21 08:58:16	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-zcnyfziycpcsezto) has joined #haskell.tw
2014-02-21 08:58:16	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-02-21 08:58:16	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-02-21 08:58:16	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-yqacbfqxldditqvp) has joined #haskell.tw
2014-02-21 08:58:16	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-omcyezwerffrgqui) has joined #haskell.tw
2014-02-21 08:58:16	-->	haroldwu (~haroldwu@unaffiliated/haroldwu) has joined #haskell.tw
2014-02-21 08:58:16	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-02-21 08:58:16	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-21 08:58:16	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-02-21 08:58:16	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-21 08:58:16	-->	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has joined #haskell.tw
2014-02-21 08:58:16	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-21 08:58:16	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-21 08:58:16	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 08:58:16	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-02-21 08:58:16	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-02-21 08:58:16	-->	letoh (~stackvm@203.67.184.110) has joined #haskell.tw
2014-02-21 08:58:24	<--	mno2 (~mno2@42.60.173.63) has quit (Client Quit)
2014-02-21 09:02:02	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 09:02:02	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-zcnyfziycpcsezto) has quit (*.net *.split)
2014-02-21 09:02:03	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-omcyezwerffrgqui) has quit (*.net *.split)
2014-02-21 09:02:04	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-yqacbfqxldditqvp) has quit (*.net *.split)
2014-02-21 09:02:04	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2014-02-21 09:02:04	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2014-02-21 09:02:04	<--	haroldwu (~haroldwu@unaffiliated/haroldwu) has quit (*.net *.split)
2014-02-21 09:02:05	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 09:02:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2014-02-21 09:02:07	<--	flter_ (~Albert@140.113.249.196) has quit (*.net *.split)
2014-02-21 09:02:10	<--	logfat_ (~cinch@home.mno2.org) has quit (*.net *.split)
2014-02-21 09:02:10	<--	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has quit (*.net *.split)
2014-02-21 09:02:10	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2014-02-21 09:02:10	<--	letoh (~stackvm@203.67.184.110) has quit (*.net *.split)
2014-02-21 09:02:11	<--	petercommand11 (~peter@128.199.232.63) has quit (*.net *.split)
2014-02-21 09:02:11	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-21 09:02:11	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-02-21 09:02:12	<--	miaout17 (~miaout17@miaout17.net) has quit (*.net *.split)
2014-02-21 09:02:12	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-02-21 09:02:14	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-21 09:02:15	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-02-21 09:02:46	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 09:02:46	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 09:02:46	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 09:02:46	-->	flter_ (~Albert@140.113.249.196) has joined #haskell.tw
2014-02-21 09:02:46	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-zcnyfziycpcsezto) has joined #haskell.tw
2014-02-21 09:02:46	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-02-21 09:02:46	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-02-21 09:02:46	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-yqacbfqxldditqvp) has joined #haskell.tw
2014-02-21 09:02:46	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-omcyezwerffrgqui) has joined #haskell.tw
2014-02-21 09:02:46	-->	haroldwu (~haroldwu@unaffiliated/haroldwu) has joined #haskell.tw
2014-02-21 09:02:46	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-02-21 09:02:46	-->	logfat_ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-21 09:02:46	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-02-21 09:02:46	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-21 09:02:46	-->	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has joined #haskell.tw
2014-02-21 09:02:46	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-21 09:02:46	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-21 09:02:46	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 09:02:46	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-02-21 09:02:46	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-02-21 09:02:46	-->	letoh (~stackvm@203.67.184.110) has joined #haskell.tw
2014-02-21 09:33:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-02-21 09:53:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 10:09:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2014-02-21 10:22:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 10:39:13	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 10:52:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2014-02-21 13:47:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 13:54:13	<--	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has quit (Ping timeout: 248 seconds)
2014-02-21 15:10:32	-->	godfat (~Adium@36-225-51-66.dynamic-ip.hinet.net) has joined #haskell.tw
2014-02-21 15:43:21	-->	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 16:29:24	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-02-21 16:51:43	godfat	:source all
2014-02-21 16:51:58	godfat	@source all
2014-02-21 16:51:58	lambdabot	Unknown command, try @list
2014-02-21 16:52:43	godfat	@src all
2014-02-21 16:52:43	lambdabot	all p =  and . map p
2014-02-21 16:55:36	godfat	最近很喜歡用這種寫法，不過常常擔心碰到 false 沒有提早跳出，haskell 就不用擔心
2014-02-21 16:56:51	CindyLin1	(Y)
2014-02-21 16:57:04	--	CindyLin1 is now known as CindyLinz
2014-02-21 16:58:43	CindyLinz	hmm... 雖然說是 pure expression, 但如果 p 有可能算出 bottom, 其順序還是很重要 @@"
2014-02-21 16:58:47	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-21 16:59:28	godfat	唔，我接受就藏住那個 bottom XD
2014-02-21 17:00:03	CindyLinz	XD
2014-02-21 17:47:50	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-21 18:00:42	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-21 18:45:41	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-21 19:11:51	-->	godfat1 (~Adium@36-225-51-66.dynamic-ip.hinet.net) has joined #haskell.tw
2014-02-21 19:11:52	<--	godfat (~Adium@36-225-51-66.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2014-02-21 19:12:34	--	godfat1 is now known as godfat
2014-02-21 19:17:55	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-21 19:22:52	-->	town55 (~1@222.208.151.248) has joined #haskell.tw
2014-02-21 19:22:53	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Quit: Bye)
2014-02-21 19:23:07	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 19:23:09	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-21 19:23:26	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 19:23:27	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-21 19:23:50	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 19:23:51	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-21 19:24:21	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 19:24:22	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-21 19:45:35	<--	godfat (~Adium@36-225-51-66.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-02-21 20:07:58	<--	town55 (~1@222.208.151.248) has quit (Ping timeout: 272 seconds)
2014-02-21 20:09:28	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-02-21 20:11:20	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-21 20:14:41	-->	b4283 (~b4283@218-164-219-11.dynamic.hinet.net) has joined #haskell.tw
2014-02-21 20:36:37	-->	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has joined #haskell.tw
2014-02-21 20:47:09	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 20:47:11	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-21 20:47:25	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 20:47:28	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Excess Flood)
2014-02-21 22:25:55	-->	hashcat (~kv2a@27.245.49.169) has joined #haskell.tw
2014-02-21 22:26:06	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-21 22:43:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-02-21 22:49:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-21 22:59:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-02-22 00:06:53	<--	hashcat (~kv2a@27.245.49.169) has quit (Quit: Konversation terminated!)
2014-02-22 00:10:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-22 00:52:07	monochrom	我不寫 bottom. 又或者, 若真有 bottom, 我願意不知幾時發作
2014-02-22 00:53:01	<--	haroldwu (~haroldwu@unaffiliated/haroldwu) has quit (Quit: leaving)
2014-02-22 00:53:12	godfat	"cannot allocate memory"
2014-02-22 00:53:45	monochrom	你用盡記憶了?
2014-02-22 00:54:01	godfat	你上一句話是什麼？ (XD
2014-02-22 00:54:28	CindyLinz	00:52 < monochrom> 我不寫 bottom. 又或者, 若真有 bottom, 我願意不知幾時發作
2014-02-22 00:54:45	godfat	"cannot allocate memory"
2014-02-22 00:54:46	CindyLinz	我想是在回應下午那個 any . map p XD
2014-02-22 00:55:13	monochrom	啊, 你是說, 如果 bottom 顯為用盡記憶, 我願意不知道幾時發生嗎? 我願意.
2014-02-22 00:56:07	godfat	XD
2014-02-22 00:56:07	godfat	只是開記憶玩笑
2014-02-22 00:56:07	godfat	對，我也願意不知道幾時發生，反正我只需要知道該添購記憶體了
2014-02-22 00:57:50	monochrom	是呀, 我不擔心 p x 是 bottom
2014-02-22 01:01:45	monochrom	寫程式真難! :)
2014-02-22 01:02:22	monochrom	呀, 亂寫很容易. 應該是: 寫好程式真難!
2014-02-22 01:02:38	CindyLinz	改審美觀就好了.. (鏡)
2014-02-22 01:02:45	godfat	知道程式好不好也很難
2014-02-22 01:03:27	CindyLinz	只是如果對我重要的人搭上那台可能會有 bottom 的程式輔助的飛機上的時候.... 我就超擔心的... ww
2014-02-22 01:04:10	godfat	"cannot retrieve more fuel"
2014-02-22 01:06:05	monochrom	而我的那種"願意不知道, 反正我不會錯"更難. 我這麼成熟, 當然做到. 但怎能同樣要求學生呢? 學習之時一定會錯, 錯而又不知幾時發作, 怎樣從錯誤中學習呢?
2014-02-22 01:07:07	godfat	從摔車開始，之後再摔飛機 XD
2014-02-22 01:07:42	monochrom	或者因此, Haskell 果真比別的語言難學.
2014-02-22 01:08:23	CindyLinz	trace GHC code 就知道會幾時發生啦 XD
2014-02-22 01:08:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-02-22 01:08:48	monochrom	我們不應未學行先學車. 所以, 摔交先, 然後摔車... XD
2014-02-22 01:10:05	monochrom	之後可以摔飛機大炮手榴彈 XD
2014-02-22 01:11:18	godfat	摔手榴彈是什麼情況... XD
2014-02-22 01:12:09	monochrom	總有一天, 連手榴彈也有firmware, 有Y2K bug之類的 XD
2014-02-22 01:13:00	monochrom	"2038年1月某日, 整批手榴彈自行引爆"
2014-02-22 01:13:46	godfat	"研判這批手榴彈集體罷工" (?)
2014-02-22 01:14:00	CindyLinz	signed int32 滿了..
2014-02-22 01:14:08	monochrom	"總參謀長說, 早知用 64 bit"...
2014-02-22 01:16:07	CindyLinz	不過我記成 12 月 :Q
2014-02-22 01:16:13	monochrom	手榴彈本就不應內有電腦. 有一天有的話, 人類沒希望了
2014-02-22 01:16:48	godfat	PDA 可以充當手榴彈，不錯呀 XD
2014-02-22 01:17:07	monochrom	我以前曾笑視窗: "是不是有一天, 你連螺絲都要 device driver"?
2014-02-22 01:17:44	godfat	把電腦當螺絲就行了，就像真空管時代似的
2014-02-22 01:17:58	CindyLinz	之前看到敘利亞的反政府軍, 拿 smart phone 校正飛彈方位...
2014-02-22 01:18:00	godfat	是說也許超級電腦也是如此
2014-02-22 01:18:13	godfat	不是聽說還有 ps2 還 ps3 的？ XD
2014-02-22 01:18:47	CindyLinz	然後拿一個像大鐵盒一樣的東西當戰車, 裡面有貌似電漿電視的東西來看潛望鏡, 還有遊戲用搖桿來控制...
2014-02-22 01:19:04	monochrom	bonus: 螺絲的 device driver 也就是 screw driver 了 XD
2014-02-22 01:20:14	godfat	兩個都: XDDDDD
2014-02-22 01:20:47	monochrom	用來還真玩起 Battlefield 及 Call of Duty 了...
2014-02-22 01:20:57	monochrom	s/用/看
2014-02-22 01:23:46	<--	b4283 (~b4283@218-164-219-11.dynamic.hinet.net) has quit (Quit: 暫離)
2014-02-22 03:46:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-22 04:03:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-02-22 04:16:06	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 260 seconds)
2014-02-22 05:13:14	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-22 05:13:14	<--	godfat (~Adium@1-169-250-140.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-02-22 08:36:33	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-22 09:00:07	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-22 09:19:30	-->	caasih (caasi@202-169-165-161.aspublic.wlan.sinica.edu.tw) has joined #haskell.tw
2014-02-22 10:42:55	-->	b4283 (~b4283@1-173-100-89.dynamic.hinet.net) has joined #haskell.tw
2014-02-22 10:48:38	<--	caasih (caasi@202-169-165-161.aspublic.wlan.sinica.edu.tw) has quit (Quit: leaving)
2014-02-22 11:31:41	-->	caasih (caasi@202-169-165-161.aspublic.wlan.sinica.edu.tw) has joined #haskell.tw
2014-02-22 12:52:44	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-22 13:18:43	--	flter_ is now known as flter
2014-02-22 15:28:12	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-22 17:50:44	<--	caasih (caasi@202-169-165-161.aspublic.wlan.sinica.edu.tw) has quit (Quit: leaving)
2014-02-22 18:52:52	<--	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-22 19:23:23	-->	hashcat (~kv2a@27.245.49.169) has joined #haskell.tw
2014-02-22 19:37:32	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-zcnyfziycpcsezto) has quit (Quit: Connection closed for inactivity)
2014-02-22 19:39:38	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-tknxhldfkrxhuikw) has joined #haskell.tw
2014-02-22 19:40:37	hashcat	http://rtw.ml.cmu.edu/rtw/
2014-02-22 19:41:48	hashcat	天網
2014-02-22 20:27:29	<--	hashcat (~kv2a@27.245.49.169) has quit (Ping timeout: 265 seconds)
2014-02-22 21:10:23	-->	b4284 (~b4283@118.150.135.102) has joined #haskell.tw
2014-02-22 21:17:00	CindyLinz	ww
2014-02-22 21:21:38	hashcat_	ww
2014-02-22 21:30:13	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Ping timeout: 248 seconds)
2014-02-22 21:32:49	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-22 21:47:32	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-tknxhldfkrxhuikw) has quit (Quit: Connection closed for inactivity)
2014-02-22 21:55:09	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-omcyezwerffrgqui) has quit (Quit: Connection closed for inactivity)
2014-02-22 23:04:32	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-22 23:04:32	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-02-22 23:04:32	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-02-22 23:04:32	--	Nicks #haskell.tw: [a2n b4285 cataska cibs CindyLinz cyt93cs_ darkx drbean flter godfat hashcat_ kanru letoh logfat_ miaout17 mno2 monochrom petercommand11 shik weie]
2014-02-22 23:04:32	--	Channel #haskell.tw: 20 nicks (0 ops, 0 voices, 20 normals)
2014-02-22 23:04:54	--	Mode #haskell.tw [+cnt]
2014-02-22 23:04:54	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-02-22 23:13:25	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2014-02-22 23:13:25	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-02-22 23:13:26	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (*.net *.split)
2014-02-22 23:13:26	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-22 23:13:26	<--	logfat_ (~cinch@home.mno2.org) has quit (*.net *.split)
2014-02-22 23:13:27	<--	letoh (~stackvm@203.67.184.110) has quit (*.net *.split)
2014-02-22 23:13:27	<--	mno2 (~mno2@42.60.173.63) has quit (*.net *.split)
2014-02-22 23:13:28	<--	petercommand11 (~peter@128.199.232.63) has quit (*.net *.split)
2014-02-22 23:13:28	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-22 23:13:28	<--	miaout17 (~miaout17@miaout17.net) has quit (*.net *.split)
2014-02-22 23:13:29	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-22 23:13:30	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-02-22 23:13:32	<--	flter (~Albert@140.113.249.196) has quit (*.net *.split)
2014-02-22 23:13:33	<--	b4285 (~b4283@1-173-100-89.dynamic.hinet.net) has quit (*.net *.split)
2014-02-22 23:13:33	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-22 23:13:33	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-02-22 23:13:35	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-22 23:19:01	-->	letoh (~stackvm@203.67.184.110) has joined #haskell.tw
2014-02-22 23:28:24	<--	letoh (~stackvm@203.67.184.110) has quit (Ping timeout: 245 seconds)
2014-02-22 23:29:11	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-23 00:25:49	--	You are now known as drbean_
2014-02-23 00:26:13	-->	drbean_ (~drbean@59.125.83.253) has joined #haskell.tw
2014-02-23 00:26:13	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-02-23 00:26:13	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-02-23 00:26:13	--	Nicks #haskell.tw: [b4285 cibs cyt93cs darkx drbean_ flter godfat hashcat_ hychen_ kanru lambdabot monochrom petercom1and11 petercommand11 superbil_c weie]
2014-02-23 00:26:13	--	Channel #haskell.tw: 16 nicks (0 ops, 0 voices, 16 normals)
2014-02-23 00:26:14	-->	petercommand (~peter@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-23 00:26:33	--	Mode #haskell.tw [+cnt]
2014-02-23 00:26:33	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-02-23 00:27:41	-->	monochrm (~trebla@216.138.220.146) has joined #haskell.tw
2014-02-23 00:27:48	-->	cataska__ (uid12717@gateway/web/irccloud.com/session) has joined #haskell.tw
2014-02-23 00:31:35	monochrm	是時候祭出我的 http://www.vex.net/~trebla/humour/lmcify.html 了
2014-02-23 01:17:13	--	You are now known as drbean
2014-02-23 01:17:19	-->	drbean (~drbean@59.125.83.253) has joined #haskell.tw
2014-02-23 01:17:19	--	Mode #haskell.tw [+ns] by dickson.freenode.net
2014-02-23 01:17:19	--	Nicks #haskell.tw: [@drbean]
2014-02-23 01:17:19	--	Channel #haskell.tw: 1 nick (1 op, 0 voices, 0 normals)
2014-02-23 01:17:33	--	Mode #haskell.tw [+t] by drbean
2014-02-23 01:17:41	--	Mode #haskell.tw [+nst]
2014-02-23 01:17:41	--	Channel created on Sun, 23 Feb 2014 01:17:19
2014-02-23 01:39:35	--	Mode #haskell.tw [-o drbean] by dickson.freenode.net
2014-02-23 01:39:35	--	Notice(dickson.freenode.net) -> #haskell.tw: *** Notice -- TS for #haskell.tw changed from 1393089439 to 1339383600
2014-02-23 01:39:35	--	Mode #haskell.tw [+c-s] by dickson.freenode.net
2014-02-23 01:39:35	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-23 01:39:35	-->	cataska__ (uid12717@gateway/web/irccloud.com/session) has joined #haskell.tw
2014-02-23 01:39:35	-->	superbil_c (uid12362@gateway/web/irccloud.com/x-ddsjdrjujupmnsaz) has joined #haskell.tw
2014-02-23 01:39:35	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-02-23 01:39:35	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-23 01:39:35	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-23 01:39:35	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-23 01:39:35	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-02-23 01:39:35	--	dickson.freenode.net has changed topic for #haskell.tw to "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-02-23 01:40:48	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-23 01:40:54	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (*.net *.split)
2014-02-23 01:40:57	-->	hychen_ (uid12518@gateway/web/irccloud.com/session) has joined #haskell.tw
2014-02-23 01:53:46	<--	hychen_ (uid12518@gateway/web/irccloud.com/session) has quit (*.net *.split)
2014-02-23 01:54:00	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-23 01:54:01	<--	cataska__ (uid12717@gateway/web/irccloud.com/session) has quit (*.net *.split)
2014-02-23 01:54:02	<--	superbil_c (uid12362@gateway/web/irccloud.com/x-ddsjdrjujupmnsaz) has quit (*.net *.split)
2014-02-23 01:54:19	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-23 01:54:19	<--	darkx (~x4r@unaffiliated/darkx) has quit (*.net *.split)
2014-02-23 01:54:25	<--	flter (~Albert@140.113.249.196) has quit (*.net *.split)
2014-02-23 01:54:25	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-23 01:54:26	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-02-23 02:00:31	-->	letoh (~stackvm@203.67.184.110) has joined #haskell.tw
2014-02-23 06:15:48	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-23 06:15:48	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-02-23 06:15:48	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-02-23 06:15:48	--	Nicks #haskell.tw: [a2n cibs CindyLinz cyt93cs darkx drbean flter godfat Guest34090 hashcat_ kanru lambdabot letoh logfat__ miaout17 monochrom petercommand11 shik superbil_c]
2014-02-23 06:15:48	--	Channel #haskell.tw: 19 nicks (0 ops, 0 voices, 19 normals)
2014-02-23 06:16:10	--	Mode #haskell.tw [+cnt]
2014-02-23 06:16:10	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-02-23 06:24:58	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2014-02-23 06:24:58	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-23 06:36:50	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-02-23 07:37:37	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-23 08:18:58	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-23 09:18:17	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-23 09:45:38	<--	Guest34090 (~peter@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2014-02-23 09:45:39	-->	Guest34090 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-23 09:45:44	--	Guest34090 is now known as petercommand
2014-02-23 09:52:55	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 272 seconds)
2014-02-23 09:53:07	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-23 11:02:03	-->	b4283 (~b4283@218-164-204-135.dynamic.hinet.net) has joined #haskell.tw
2014-02-23 11:56:14	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-23 12:33:54	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-23 13:11:50	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-02-23 13:11:50	<--	b4283 (~b4283@218-164-204-135.dynamic.hinet.net) has quit (*.net *.split)
2014-02-23 13:11:51	<--	mno2 (~mno2@42.60.173.63) has quit (*.net *.split)
2014-02-23 13:11:52	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (*.net *.split)
2014-02-23 13:26:23	-->	b4283 (~b4283@218-164-204-135.dynamic.hinet.net) has joined #haskell.tw
2014-02-23 13:52:23	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-23 13:52:23	-->	hashcat_ (~hashcat_@27.245.49.169) has joined #haskell.tw
2014-02-23 15:36:55	-->	hashcat (~kv2a@27.52.11.60) has joined #haskell.tw
2014-02-23 15:38:59	<--	hashcat_ (~hashcat_@27.245.49.169) has quit (Ping timeout: 240 seconds)
2014-02-23 15:40:07	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 15:40:08	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 15:40:24	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 15:40:25	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 15:40:46	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 15:40:47	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 15:41:14	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 15:41:15	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 18:27:42	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-23 18:44:30	hashcat	flora-2 http://flora.sourceforge.net/
2014-02-23 18:44:54	hashcat	教學值得一看
2014-02-23 18:46:02	hashcat	用語言本身寫得型別系統
2014-02-23 18:48:16	CindyLinz	名字很好聽...
2014-02-23 18:58:04	hashcat	:D
2014-02-23 18:59:20	hashcat	貌似只有一家公司在用這個系統
2014-02-23 18:59:55	CindyLinz	是說.. Haskell 的前身 Miranda 也很好聽的啊.. 意思是: worthy of admiration
2014-02-23 18:59:56	hashcat	看錯是兩家
2014-02-23 19:02:38	CindyLinz	Hmm... hackage 裡面 text 用的是 UTF-16, 要注意一下 o.o
2014-02-23 19:08:02	hashcat	那系統很有意思
2014-02-23 19:08:49	hashcat	不是經典邏輯也不是prolog語意, 是有可廢止推論三值邏輯
2014-02-23 19:11:45	hashcat	讓prolog遇到矛盾可以停下來, 且支持開放世界假設
2014-02-23 19:27:22	CindyLinz	問問.. Monoid 反過來叫作什麼?
2014-02-23 19:27:45	CindyLinz	我指的是, 可以一直拆解的意思
2014-02-23 19:27:51	hashcat	Comonoid?
2014-02-23 19:28:00	hashcat	拆解啥
2014-02-23 19:28:05	CindyLinz	就這樣喔... 失望 (誤)
2014-02-23 19:28:57	CindyLinz	我準備要做一個東西.. 它把不同類型的東西串在一起作成 array.
2014-02-23 19:29:03	CindyLinz	然後我想弄一個 Builder
2014-02-23 19:29:14	CindyLinz	Builder 應該會有 Monoid 的性質
2014-02-23 19:29:26	CindyLinz	然後反方向是把東西從這個 array 拆出來用
2014-02-23 19:29:32	CindyLinz	目前想說可能叫 Breaker.. XD
2014-02-23 19:29:45	CindyLinz	然後不知道對應類比 Monoid 的東西可能叫什麼
2014-02-23 19:29:53	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Quit: Leaving.)
2014-02-23 19:31:05	hashcat	就是所有的箭頭反過來嘛
2014-02-23 19:31:25	hashcat	都加co就對了
2014-02-23 19:32:09	CindyLinz	XD
2014-02-23 19:34:44	-->	godfat (~Adium@1-161-52-36.dynamic.hinet.net) has joined #haskell.tw
2014-02-23 19:35:56	-->	hashcat_ (~kv2a@27.52.11.60) has joined #haskell.tw
2014-02-23 19:37:30	CindyLinz	嗯... comonoid 不知道能怎麼用 ^^|
2014-02-23 19:38:36	CindyLinz	隨便亂拆, 只是拆到最後一步的時候剛好拆出來的「節」數和接收端一樣多, 一個蘿蔔一個坑? (思)
2014-02-23 19:39:30	hashcat_	不是吧
2014-02-23 19:39:44	hashcat_	就是反過來組裝解封的管道
2014-02-23 19:40:58	CindyLinz	這樣感覺也是用 Monoid 的方式把解封的管道接好, 然後把它直接 apply 在目標上, 取得結果?
2014-02-23 19:41:03	hashcat_	comonad可以參考下
2014-02-23 19:41:04	hashcat_	http://hackage.haskell.org/package/comonad-4.0/docs/Control-Comonad.html
2014-02-23 19:41:24	CindyLinz	嗯, 我以前也是很好奇 comonad 有什麼應用 XD
2014-02-23 19:41:31	CindyLinz	也許現在就要遇到了 :D
2014-02-23 19:41:58	hashcat_	extract :: w a -> a 對應 return :: a -> ma
2014-02-23 19:42:18	<--	hashcat (~kv2a@27.52.11.60) has quit (*.net *.split)
2014-02-23 19:42:20	<--	b4283 (~b4283@218-164-204-135.dynamic.hinet.net) has quit (*.net *.split)
2014-02-23 19:42:29	<--	mno2 (~mno2@42.60.173.63) has quit (*.net *.split)
2014-02-23 19:43:48	CindyLinz	嗯, 覺得其實用起來比較偏像 monad / comonad.. 而不是 monoid / comonoid... 不過 monoid / comonoid 可以理解為還沒 apply 到目標物上的「規劃中」的狀態
2014-02-23 19:44:17	CindyLinz	hashcat_: 感謝 ^^
2014-02-23 19:45:06	CindyLinz	覺得好像有距離體會這句話近一點的感覺... XD # A monad is just a monoid in the category of endofunctors, what's the problem?
2014-02-23 19:45:07	hashcat_	回去看flora-2啦
2014-02-23 19:45:20	CindyLinz	在忙嘛.... QQ
2014-02-23 19:45:34	hashcat_	忙著沒事做
2014-02-23 19:45:35	CindyLinz	怕 OSDC 開天窗..||
2014-02-23 19:45:41	hashcat_	OSDC
2014-02-23 19:45:43	hashcat_	?
2014-02-23 19:45:48	--	hashcat_ is now known as hashcat
2014-02-23 19:46:10	CindyLinz	這個呀 http://osdc.4pt.tw/schedule.html
2014-02-23 19:46:34	CindyLinz	正在寫揉合 Haskell 與 Perl 的東西...
2014-02-23 19:47:28	CindyLinz	希望能降低實戰應用 Haskell 的門檻
2014-02-23 19:47:32	hashcat	我覺得prolog系好玩多了
2014-02-23 19:48:24	CindyLinz	我覺得實用的時候要人下定決心把整個專案用 Haskell 寫, 風險很大, 所以敢這樣衝的人不多
2014-02-23 19:48:42	CindyLinz	時程拖到了, 被公司釘, 又講不出什麼好理由....
2014-02-23 19:48:55	hashcat	沒關係用prolog
2014-02-23 19:49:16	CindyLinz	但如果開發的方式進可攻退可守的話, 敢試的人就會比較多了...
2014-02-23 19:49:23	hashcat	用flora-2 with java
2014-02-23 19:49:29	hashcat	with python
2014-02-23 19:49:43	hashcat	亂入prolog
2014-02-23 19:50:12	hashcat	haskell推ajhc算了
2014-02-23 19:50:52	hashcat	ghc重量級但模組系統也是不堪入目
2014-02-23 19:50:58	hashcat	這落差也太大
2014-02-23 19:51:23	hashcat	不如用輕量的, 還可以自己維護
2014-02-23 19:51:29	CindyLinz	我是選用 ghc, 我相信初學的人用 ghc, 心理上才會有「這是真的 Haskell」的感覺..
2014-02-23 19:51:54	hashcat	幻覺
2014-02-23 19:51:59	CindyLinz	不然書上寫一大堆可這樣用可那樣用, 然後實際上都看得到吃不到.. XD
2014-02-23 19:52:05	hashcat	haskell就是haskell
2014-02-23 19:52:29	hashcat	什麼鳥書用一票實驗擴展
2014-02-23 19:53:10	hashcat	haskell不就是要看看monad那些東西
2014-02-23 19:53:58	hashcat	要完整特性的話還有rust, scala在後頭
2014-02-23 19:54:36	hashcat	要是用下去, 結果一個月後特性不見啦
2014-02-23 19:55:27	CindyLinz	我不是指 feature 越多越好啦
2014-02-23 19:55:36	CindyLinz	我也是覺得 feature 越少越好
2014-02-23 19:55:55	CindyLinz	但也是不能太少啊....
2014-02-23 19:56:18	CindyLinz	主要是在 type 描述方面的一些 extension 吧...
2014-02-23 19:56:26	CindyLinz	可能比較重要的是 ghc 比較容易上手?
2014-02-23 19:56:41	CindyLinz	在各平台把 haskell platform 裝下去一鍵搞定了....
2014-02-23 19:56:49	hashcat	最近對haskell實在沒勁
2014-02-23 19:56:58	CindyLinz	初學者的學習興趣是要好好保護的啊
2014-02-23 19:57:10	CindyLinz	一上手就從 hack 開始, 就死光了.....
2014-02-23 19:58:54	hashcat	flora-2強大
2014-02-23 20:00:07	CindyLinz	想實際一點的辦法導一堆人來玩, 不然這些工具就一直都是 bug plenty.. orz
2014-02-23 20:00:44	hashcat	flora-2 no bug
2014-02-23 20:00:53	hashcat	prolog社群很厲害
2014-02-23 20:01:00	CindyLinz	像是, 利用 dependent type 寫了沒有 bug 的 idris 程式
2014-02-23 20:01:04	hashcat	明明只有一小票人, bug卻一直修
2014-02-23 20:01:16	CindyLinz	只是 idris compiler 有 bug.. ._.
2014-02-23 20:01:22	hashcat	特性也一直加, 向後兼容也沒報銷
2014-02-23 20:03:18	CindyLinz	等這一波弄完, 可能想來寫遊戲... :|
2014-02-23 20:03:19	hashcat	所以覺得很有前景XD
2014-02-23 20:03:33	CindyLinz	寫那種, 能吸引大家一起來寫的遊戲...
2014-02-23 20:03:34	-->	b4283 (~b4283@218-164-204-135.dynamic.hinet.net) has joined #haskell.tw
2014-02-23 20:04:06	CindyLinz	大家不是大部分的人, 只是... 希望能還蠻多人的這樣 ^^|
2014-02-23 20:05:54	hashcat	為啥不是大家一起來玩的遊戲
2014-02-23 20:05:56	hashcat	不然就是寫程序本身是遊戲
2014-02-23 20:05:57	hashcat	遊戲內容是要寫程序發射飛彈打爆前蘇聯
2014-02-23 20:07:16	hashcat	寫完要自己駕駛 XD
2014-02-23 20:07:37	hashcat	我想到超扯的遊戲
2014-02-23 20:08:01	hashcat	應該是比較少人會想玩
2014-02-23 20:24:21	hashcat	不知道Haskell是少了什麼
2014-02-23 20:31:10	hashcat	可能是prolog能完全仿造還能附帶有沒符合運算律XD
2014-02-23 20:31:19	hashcat	的檢查
2014-02-23 20:48:06	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-23 21:13:21	mno2	co-co-nut
2014-02-23 21:26:37	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 21:26:38	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 21:26:51	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 21:26:52	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 21:27:10	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 21:27:12	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 21:27:35	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 21:27:36	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 21:28:11	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 21:28:12	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 21:29:59	<--	hashcat (~kv2a@27.52.11.60) has quit (Ping timeout: 246 seconds)
2014-02-23 22:22:25	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 22:22:26	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 22:30:24	CindyLinz	也是要一起玩啊, 可是那是遊戲的基本嘛.. 當然是講些跟別的遊戲不一樣的特色啊 ^^|
2014-02-23 22:37:56	-->	town77 (~1@114.242.248.72) has joined #haskell.tw
2014-02-23 23:57:10	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 23:57:12	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 23:57:30	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 23:57:32	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Excess Flood)
2014-02-23 23:57:44	-->	hashcat_ (~hashcat_@27.52.11.60) has joined #haskell.tw
2014-02-23 23:58:11	-->	hashcat (~hashcat_@27.52.119.11) has joined #haskell.tw
2014-02-23 23:58:13	<--	hashcat (~hashcat_@27.52.119.11) has quit (Excess Flood)
2014-02-24 00:02:25	<--	hashcat_ (~hashcat_@27.52.11.60) has quit (Ping timeout: 252 seconds)
2014-02-24 00:11:07	<--	town77 (~1@114.242.248.72) has quit (Read error: Connection reset by peer)
2014-02-24 00:30:26	-->	hashcat_ (~hashcat_@27.52.119.11) has joined #haskell.tw
2014-02-24 01:22:10	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-24 01:54:05	monochrom	flora 我覺得最可觀的是把 conjunction 和 sequential 分清楚. 記著幾十年來 prolog 等等一向把它們混為一談, 所以亂象横生.
2014-02-24 06:27:16	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-02-24 06:41:40	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 264 seconds)
2014-02-24 06:49:05	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-24 07:28:50	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-24 07:30:01	<--	mno2 (~mno2@42.60.173.63) has quit (Client Quit)
2014-02-24 08:49:43	<--	godfat (~Adium@1-161-52-36.dynamic.hinet.net) has quit (*.net *.split)
2014-02-24 08:49:44	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-24 08:50:29	-->	godfat (~Adium@1-161-52-36.dynamic.hinet.net) has joined #haskell.tw
2014-02-24 08:50:29	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-24 09:00:45	<--	b4283 (~b4283@218-164-204-135.dynamic.hinet.net) has quit (Quit: 暫離)
2014-02-24 09:34:59	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-lvdieplufywsyjgq) has joined #haskell.tw
2014-02-24 09:44:40	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-24 10:01:52	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-24 11:03:57	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2014-02-24 11:24:15	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-24 11:29:18	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-02-24 11:40:49	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-24 11:47:32	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-lvdieplufywsyjgq) has quit (Quit: Connection closed for inactivity)
2014-02-24 12:12:55	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-24 12:31:33	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-24 13:02:25	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-vidqljowwthuvuef) has joined #haskell.tw
2014-02-24 13:47:23	CindyLinz	@pl \a b c d -> a - c * d - b
2014-02-24 13:47:23	lambdabot	flip . ((flip . ((-) .)) .) . (. (*)) . (.) . (-)
2014-02-24 13:49:54	CindyLinz	@unpl flip . ((flip . ((-) .)) .) . (. (*)) . (.) . (-)
2014-02-24 13:49:54	lambdabot	(\ o b c f -> (o - (c * f)) - b)
2014-02-24 15:54:50	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-24 15:56:24	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-24 15:59:04	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-24 16:03:27	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-24 16:03:29	<--	godfat (~Adium@1-161-52-36.dynamic.hinet.net) has quit (*.net *.split)
2014-02-24 16:03:30	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-24 17:04:11	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-24 17:05:13	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-02-24 17:18:38	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2014-02-24 17:19:13	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-24 17:51:29	<--	hashcat_ (~hashcat_@27.52.119.11) has quit (Ping timeout: 241 seconds)
2014-02-24 17:51:38	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 17:52:34	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Client Quit)
2014-02-24 17:53:59	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 17:54:01	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 17:54:13	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 17:54:15	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 18:26:31	-->	hashcat (~kv2a@1-174-41-246.dynamic.hinet.net) has joined #haskell.tw
2014-02-24 18:27:26	--	hashcat is now known as hashcat_
2014-02-24 18:28:23	--	hashcat_ is now known as hashcat
2014-02-24 19:03:23	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-vidqljowwthuvuef) has quit (Ping timeout: 378 seconds)
2014-02-24 19:04:59	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-twbolqnybevqgjti) has joined #haskell.tw
2014-02-24 19:05:09	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-twbolqnybevqgjti) has quit (Client Quit)
2014-02-24 19:10:30	-->	hashcat_ (~kv2a@1-174-41-246.dynamic.hinet.net) has joined #haskell.tw
2014-02-24 19:20:02	<--	hashcat (~kv2a@1-174-41-246.dynamic.hinet.net) has quit (Remote host closed the connection)
2014-02-24 19:20:05	hashcat_	https://plus.google.com/u/0/+AbhimanyuAryan/posts/T22JJnG3shC?cfem=1
2014-02-24 19:20:07	--	hashcat_ is now known as hashcat
2014-02-24 19:56:21	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 19:56:23	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 19:56:35	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 19:56:36	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 19:56:54	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 19:56:54	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 19:57:17	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 19:57:18	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 19:57:45	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 19:57:45	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 20:08:36	-->	suhorng (~suhorng@118-166-52-53.dynamic.hinet.net) has joined #haskell.tw
2014-02-24 20:35:52	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 20:35:52	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 20:36:05	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 20:36:08	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 20:36:37	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 20:36:40	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 20:38:18	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 20:38:19	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 20:38:32	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 20:38:32	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Remote host closed the connection)
2014-02-24 20:39:19	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 20:39:21	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:01:44	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-24 21:02:51	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-02-24 21:11:24	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:11:54	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:12:14	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:12:16	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:12:36	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:12:39	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:12:52	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:12:53	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Remote host closed the connection)
2014-02-24 21:35:36	-->	petercom1and11 (~peter@128.199.232.63) has joined #haskell.tw
2014-02-24 21:36:54	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Disconnected by services)
2014-02-24 21:40:37	<--	petercommand11 (~peter@128.199.232.63) has quit (*.net *.split)
2014-02-24 21:43:05	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:43:05	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:43:05	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:43:05	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:43:27	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:43:27	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:43:43	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:43:44	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:44:12	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 21:44:13	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 21:44:33	<--	suhorng (~suhorng@118-166-52-53.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-02-24 21:44:49	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-24 21:54:06	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-cgslnhvaqywwkklk) has joined #haskell.tw
2014-02-24 22:40:49	<--	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-24 23:15:14	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 23:15:48	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 23:17:00	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 23:17:02	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 23:17:19	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 23:17:21	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-24 23:17:38	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-24 23:17:38	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Remote host closed the connection)
2014-02-24 23:55:00	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-25 00:06:14	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Remote host closed the connection)
2014-02-25 00:06:27	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-25 00:29:32	-->	b4283 (~b4283@118.150.135.102) has joined #haskell.tw
2014-02-25 00:50:04	monochrom	source tree 如菩提樹, software 如明鏡台, 日日常測試, 莫使殘留 bug? XD
2014-02-25 00:57:53	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-25 01:00:04	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-02-25 01:00:12	<--	b4283 (~b4283@118.150.135.102) has quit (*.net *.split)
2014-02-25 01:00:21	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-25 01:00:25	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (*.net *.split)
2014-02-25 01:05:53	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-25 01:06:14	-->	cyt93cs (~cyt93cs@140.123.101.4) has joined #haskell.tw
2014-02-25 01:06:14	-->	b4283 (~b4283@118.150.135.102) has joined #haskell.tw
2014-02-25 01:06:14	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-25 01:11:05	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Write error: Broken pipe)
2014-02-25 01:35:07	<--	hashcat (~kv2a@1-174-41-246.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-25 01:38:11	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:38:13	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:38:26	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:38:27	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:38:45	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:38:46	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:39:09	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:39:10	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:44:35	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:44:37	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:44:48	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:44:49	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:45:07	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 01:45:07	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 01:52:01	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-02-25 02:02:17	<--	b4283 (~b4283@118.150.135.102) has quit (Remote host closed the connection)
2014-02-25 02:19:43	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 02:19:45	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 02:19:58	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 02:19:59	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 02:20:19	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 02:20:20	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 02:44:43	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-25 02:44:45	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Excess Flood)
2014-02-25 02:46:26	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 02:46:28	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 02:46:47	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 02:46:48	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 02:47:12	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 02:47:13	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 03:05:06	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 03:05:08	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 03:35:02	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 03:35:05	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 07:19:06	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-gsavamzierurexsm) has joined #haskell.tw
2014-02-25 09:12:22	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-02-25 09:55:49	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-25 09:57:32	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-gsavamzierurexsm) has quit (Quit: Connection closed for inactivity)
2014-02-25 11:18:52	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-25 12:11:02	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-02-25 12:27:32	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 12:27:35	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 12:27:47	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 12:27:49	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 12:28:07	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 12:28:08	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 12:39:54	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-25 12:52:58	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 12:53:02	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 12:53:14	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 12:53:16	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 12:53:34	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 12:53:36	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 13:00:28	-->	godfat (~Adium@36-225-55-192.dynamic-ip.hinet.net) has joined #haskell.tw
2014-02-25 13:52:01	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 245 seconds)
2014-02-25 13:53:01	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-02-25 14:06:14	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 264 seconds)
2014-02-25 14:13:15	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-02-25 14:24:27	-->	town77 (~1@171.90.49.65) has joined #haskell.tw
2014-02-25 14:24:44	<--	town77 (~1@171.90.49.65) has quit (Read error: Connection reset by peer)
2014-02-25 14:27:33	CindyLinz	ghci 不知道要加什麼參數才能載入有用到 FFI 的 .hs 檔
2014-02-25 14:27:50	CindyLinz	所以就先用 ghc 幫有用到 FFI 的檔案生出 .o 檔
2014-02-25 14:28:18	CindyLinz	然後再用 ghci 載入正在編輯的其他檔案..
2014-02-25 14:29:44	-->	town77 (~1@171.90.49.65) has joined #haskell.tw
2014-02-25 14:31:26	<--	town77 (~1@171.90.49.65) has quit (Remote host closed the connection)
2014-02-25 14:42:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-25 15:14:22	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-25 15:24:55	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 15:24:57	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 15:25:10	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 15:25:11	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 16:01:39	CindyLinz	hm... monad 和 comonad 是 isomorphic 的, 所以能用 monad 寫的東西都能用 comonad 寫, 能用 comonad 寫的都能用 monad 寫
2014-02-25 16:02:05	CindyLinz	差別就是有些情況下選到另一邊, 寫起來會比較迂迴一點...
2014-02-25 16:02:40	CindyLinz	不過, 我覺得考慮現實面, 因為 Haskell 對 monad 有 do-notation 可以用, comonad 沒有, 所以常常選擇上偏 monad 有優勢得多 :p
2014-02-25 16:05:35	favonia	CindyLinz: 你需要 cohaskell... 簡稱 costco 好了
2014-02-25 16:26:09	CindyLinz	ww
2014-02-25 16:27:54	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 16:27:54	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 16:27:54	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 16:27:54	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 16:27:54	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 16:27:54	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 16:27:54	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 16:27:54	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 16:28:04	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 16:28:05	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-25 19:56:38	<--	godfat (~Adium@36-225-55-192.dynamic-ip.hinet.net) has quit (Ping timeout: 264 seconds)
2014-02-25 20:50:11	-->	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has joined #haskell.tw
2014-02-25 21:03:51	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 264 seconds)
2014-02-25 21:06:35	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-02-25 21:15:21	-->	caasih (~caasiHuan@59.126.194.108) has joined #haskell.tw
2014-02-25 21:29:06	mno2	然後 CindyLinz 就變成 co-CindyLinz
2014-02-25 22:20:37	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-ooqqiokycmxhtdjk) has joined #haskell.tw
2014-02-25 22:46:19	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 244 seconds)
2014-02-25 22:52:25	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-25 22:59:18	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-25 23:29:42	monochrom	pumpkin 可不是早改了名做 copumpkin 嗎? XD
2014-02-25 23:58:38	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-26 00:10:37	-->	b4283 (~b4283@218-164-122-169.dynamic.hinet.net) has joined #haskell.tw
2014-02-26 00:27:32	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-ooqqiokycmxhtdjk) has quit (Quit: Connection closed for inactivity)
2014-02-26 00:38:30	<--	b4283 (~b4283@218-164-122-169.dynamic.hinet.net) has quit (Quit: 暫離)
2014-02-26 00:44:41	-->	b4283 (~b4283@118.150.135.102) has joined #haskell.tw
2014-02-26 01:23:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-26 01:37:19	<--	b4283 (~b4283@118.150.135.102) has quit (Remote host closed the connection)
2014-02-26 01:39:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 258 seconds)
2014-02-26 02:16:21	-->	caasih_ (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-26 02:19:31	<--	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has quit (Excess Flood)
2014-02-26 02:19:49	-->	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has joined #haskell.tw
2014-02-26 02:20:20	<--	caasih (~caasiHuan@59.126.194.108) has quit (Write error: Broken pipe)
2014-02-26 03:07:42	--	caasih_ is now known as caasih
2014-02-26 03:27:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-26 04:11:46	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2014-02-26 04:35:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-cgslnhvaqywwkklk) has quit (Quit: Connection closed for inactivity)
2014-02-26 05:36:06	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-26 06:22:48	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-26 06:31:58	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 272 seconds)
2014-02-26 08:27:45	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-26 08:33:14	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-26 08:41:56	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ulbdocfzibympdfj) has joined #haskell.tw
2014-02-26 09:21:25	<--	caasih (~caasiHuan@59-126-194-108.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-02-26 10:58:28	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-26 11:43:42	-->	town77 (~1@171.208.18.144) has joined #haskell.tw
2014-02-26 11:58:01	<--	town77 (~1@171.208.18.144) has quit (Remote host closed the connection)
2014-02-26 12:37:06	mno2	https://www.gnu.org/software/guix/
2014-02-26 12:37:34	mno2	這在 NixOS 上又疊了 Guile，蠻有趣的
2014-02-26 12:57:47	<--	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2014-02-26 13:27:38	-->	godfat (~Adium@1-160-81-141.dynamic.hinet.net) has joined #haskell.tw
2014-02-26 13:56:40	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-26 14:04:50	monochrom	怎麼 GNU 好像到處留情的. 程式界楚留香...
2014-02-26 14:07:02	-->	liuzhoou (~liuzhoou@116.226.39.95) has joined #haskell.tw
2014-02-26 14:18:05	<--	liuzhoou (~liuzhoou@116.226.39.95) has quit (Remote host closed the connection)
2014-02-26 14:18:43	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-02-26 14:24:56	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-26 14:26:13	kanru	XD
2014-02-26 14:26:59	kanru	我一直以為 guix 是 pure guile @@
2014-02-26 14:58:34	b4283	不是嗎？ http://git.savannah.gnu.org/cgit/guix.git/tree/guix
2014-02-26 14:59:28	mno2	他首頁寫了 "Guix is based on the Nix package manager."
2014-02-26 14:59:47	mno2	應該是把 Nix Expression 換成了 Guile
2014-02-26 15:04:00	b4283	猜測就是 atomic action, rollback 那一套想法而已
2014-02-26 15:04:34	b4283	查了一下 nix 是 c++ 寫的
2014-02-26 15:12:57	mno2	對，不過設計蠻有趣的~
2014-02-26 15:13:42	mno2	nix 對 hackage 上面的 package 支援還不錯
2014-02-26 15:13:49	mno2	還有 cabal2nix 的工具可以轉
2014-02-26 15:14:44	mno2	coreOS 感覺也很有趣，目前感覺是 coreOS 聲勢比較強。
2014-02-26 15:48:23	-->	town77 (~1@171.208.18.144) has joined #haskell.tw
2014-02-26 15:51:14	<--	town77 (~1@171.208.18.144) has quit (Read error: Connection reset by peer)
2014-02-26 16:35:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ulbdocfzibympdfj) has quit (Quit: Connection closed for inactivity)
2014-02-26 16:35:36	-->	anonys7777 (~1@114.242.249.141) has joined #haskell.tw
2014-02-26 16:40:58	<--	anonys7777 (~1@114.242.249.141) has quit (Ping timeout: 244 seconds)
2014-02-26 16:56:43	-->	caasih (~caasiHuan@61-223-79-100.dynamic.hinet.net) has joined #haskell.tw
2014-02-26 18:16:07	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2014-02-26 18:19:15	<--	caasih (~caasiHuan@61-223-79-100.dynamic.hinet.net) has quit (Quit: leaving)
2014-02-26 18:59:21	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-02-26 19:16:20	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 246 seconds)
2014-02-26 19:23:12	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-26 19:46:35	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ofkunyafsirselmz) has joined #haskell.tw
2014-02-26 20:34:20	<--	godfat (~Adium@1-160-81-141.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-02-26 21:18:48	-->	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has joined #haskell.tw
2014-02-26 21:27:54	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-26 22:08:51	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Quit: Bye)
2014-02-26 22:09:01	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:09:02	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-26 22:20:02	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:20:05	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-26 22:20:17	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:20:18	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Write error: Broken pipe)
2014-02-26 22:22:39	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:22:42	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-26 22:22:54	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:22:55	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-26 22:23:15	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:23:16	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-26 22:28:19	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:28:22	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Excess Flood)
2014-02-26 22:28:33	-->	hashcat_ (~hashcat_@106.65.151.175) has joined #haskell.tw
2014-02-26 22:33:22	-->	town77 (~1@114.242.249.109) has joined #haskell.tw
2014-02-26 22:45:12	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-26 22:46:54	-->	anonys7777 (~1@61.148.242.201) has joined #haskell.tw
2014-02-26 22:49:12	<--	town77 (~1@114.242.249.109) has quit (Ping timeout: 272 seconds)
2014-02-26 22:53:51	<--	anonys7777 (~1@61.148.242.201) has quit (Remote host closed the connection)
2014-02-26 22:54:00	-->	suhorng (~suhorng@118-166-50-240.dynamic.hinet.net) has joined #haskell.tw
2014-02-26 23:12:13	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-26 23:21:09	--	petercom1and11 is now known as petercommand11
2014-02-26 23:51:46	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-26 23:53:05	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Remote host closed the connection)
2014-02-26 23:58:54	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-27 00:06:29	hashcat_	這邊也宣傳下ada
2014-02-27 00:06:44	hashcat_	www.adaic.org/learn/
2014-02-27 00:07:00	letoh	突然被 ada 電波打到?
2014-02-27 00:07:27	hashcat_	www.adaic.org/ada-resources/tools-libraries/
2014-02-27 00:07:38	hashcat_	打到很久拉
2014-02-27 00:08:54	hashcat_	想混合ada跟prolog
2014-02-27 00:09:33	hashcat_	prolog語法夠簡單可以在ada中query
2014-02-27 00:17:18	monochrom	覺得你鍾情古老又多英文字的語言
2014-02-27 00:18:41	hashcat_	能讀的語言
2014-02-27 00:19:54	monochrom	你怎樣界定能讀不能讀?
2014-02-27 00:20:06	hashcat_	ada跟flora-2混合
2014-02-27 00:20:19	CindyLinz	白名單法: ada, prolog, flora 為能讀語言.. (誤)
2014-02-27 00:20:26	hashcat_	拿掉眼鏡看
2014-02-27 00:20:59	hashcat_	我分不清尖括號跟圓括號
2014-02-27 00:22:34	monochrom	拿掉眼鏡, 英文字都會分不清
2014-02-27 00:22:37	suhorng	Scheme只有圓括弧（咦）
2014-02-27 00:22:38	hashcat_	能寫成像是某種文章但又有一定規則吧
2014-02-27 00:23:21	CindyLinz	perl 是用來寫詩的... 這樣算嗎?
2014-02-27 00:23:22	monochrom	我最反對像文章
2014-02-27 00:23:34	suhorng	literal programming!
2014-02-27 00:23:50	hashcat_	perl規則亂的
2014-02-27 00:24:14	letoh	literal programming 到底有什麼好處呢? 能不能從實際面說明一下
2014-02-27 00:24:15	monochrom	其實連"能不能讀"我都認為是空廢命題
2014-02-27 00:24:46	CindyLinz	呃... 這是 SM 詩嗎......||
2014-02-27 00:24:57	CindyLinz		       1, 2 or more('to'),
2014-02-27 00:24:57	CindyLinz		tie $her, $up and bind $her, $up;
2014-02-27 00:24:57	CindyLinz		 sub for ({ each  %2; do {} };)
2014-02-27 00:25:22	hashcat_	lisp更亂拉
2014-02-27 00:26:12	hashcat_	literal不是語言本身可讀
2014-02-27 00:27:04	CindyLinz	literal programming 寫書寫 blog 很方便啊
2014-02-27 00:27:19	hashcat_	而且有點各說各話
2014-02-27 00:27:57	letoh	唔  不過一般寫程式的目的並不會是寫書或寫 blog... 這會是推不起來的原因之一嗎?
2014-02-27 00:28:23	hashcat_	有欠規整
2014-02-27 00:28:40	monochrom	不. 一般程式員不想重上作文課, 這是原因
2014-02-27 00:29:17	monochrom	喜歡作文的, 早成了記者, 作家, 律師, ...
2014-02-27 00:30:12	hashcat_	我對程序寫的像是工程師寫的文章,或羅輯推論那樣
2014-02-27 00:30:37	hashcat_	不知為啥特有興趣
2014-02-27 00:32:18	letoh	CindyLinz: 那黑名單有啥?
2014-02-27 00:33:17	letoh	bcpl 就不知道怎麼念?
2014-02-27 00:33:47	CindyLinz	letoh: 我又沒在分這個.. XD
2014-02-27 00:33:59	letoh	我以為你也有名單XD
2014-02-27 00:34:18	CindyLinz	我自己的想法是... 熟了就能讀了, 沒有靜態列表 @@"
2014-02-27 00:34:46	CindyLinz	熟了, 就會很快認出 pattern
2014-02-27 00:35:17	CindyLinz	而在團隊合作中, 需要考慮夥伴的程度, 不過那是另一回事...
2014-02-27 00:35:49	monochrom	大家都主張"能讀", 而條件是"似自然語言". 而我認為"能讀"空廢, 及應遠離自然語言.
2014-02-27 00:36:34	CindyLinz	monochrom: 看到你最近用「空廢」這個辭來形容事物.. 害我一直想到「老廢角質」..... XD
2014-02-27 00:36:35	monochrom	我主張的是"能預測". 這是科學思想所說的那種"可預測"
2014-02-27 00:36:51	letoh	跟不懂自然語言的對象交談，為什麼要用自然語言@_@
2014-02-27 00:37:00	hashcat_	自然語言也不規整阿
2014-02-27 00:37:54	monochrom	"可預測"有很多條件. 與"能讀"最有關的一個條件就是"無岐義"
2014-02-27 00:38:21	CindyLinz	letoh: 對象懂不懂自然語言, 倒是看我們有沒有要努力讓它懂嘍..
2014-02-27 00:38:35	monochrom	"無岐義"本質上就跟"自然語言"對立. 誓不兩立.
2014-02-27 00:38:38	hashcat_	20世紀初的人工語言跟工程標準文件 =P
2014-02-27 00:40:42	monochrom	好了, 跟著你們會說, "不如兩全其美, 用英文字, 但規限語法及語義". 但這不是兩全其美, 這是兩害並取.
2014-02-27 00:40:48	CindyLinz	letoh: 現在放棄的話, 它就永遠不會嘍.. (咦)
2014-02-27 00:41:14	letoh	剛剛想用現實的例子來回應  但好像怪怪的
2014-02-27 00:41:46	monochrom	雖然規限了語法語義, 但正因似英文, 人類還是當真英文讀, 讀出錯誤語義.
2014-02-27 00:42:16	monochrom	但其實又不是英文. 這是四不像
2014-02-27 00:42:45	CindyLinz	好像有個叫作「世界語」的東西...
2014-02-27 00:43:57	CindyLinz	https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E8%AF%AD
2014-02-27 00:46:24	monochrom	借用英文, 只會誤導. 你無論如何都要設計一個形式語言 formal language 了, 不如丢棄袱, 推倒重來
2014-02-27 00:47:45	hashcat_	prolog就沒一定要英文
2014-02-27 00:48:10	hashcat_	只是不用英文也不知道怎用
2014-02-27 01:01:41	<--	suhorng (~suhorng@118-166-50-240.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-02-27 01:07:55	monochrom	是日 xkcd 很實用啊! http://xkcd.com/now/
2014-02-27 01:15:02	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-27 01:20:11	-->	b4283 (~b4283@118.150.135.102) has joined #haskell.tw
2014-02-27 01:43:27	<--	petercommand11 (~peter@128.199.232.63) has quit (Ping timeout: 264 seconds)
2014-02-27 01:45:29	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-02-27 01:51:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 272 seconds)
2014-02-27 02:23:08	<--	b4283 (~b4283@118.150.135.102) has quit (Remote host closed the connection)
2014-02-27 03:25:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ofkunyafsirselmz) has quit (Quit: Connection closed for inactivity)
2014-02-27 03:25:52	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-27 03:40:02	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-27 03:47:39	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-02-27 03:59:22	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 244 seconds)
2014-02-27 04:01:26	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 272 seconds)
2014-02-27 04:10:39	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-27 04:12:15	-->	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-02-27 04:18:47	<--	petercom1and (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2014-02-27 04:18:47	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-02-27 04:41:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-27 05:26:55	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-02-27 05:34:31	<--	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Write error: Connection reset by peer)
2014-02-27 06:57:19	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-02-27 08:08:08	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-27 08:23:29	-->	logfat___ (~cinch@home.mno2.org) has joined #haskell.tw
2014-02-27 08:27:50	<--	logfat__ (~cinch@home.mno2.org) has quit (Ping timeout: 264 seconds)
2014-02-27 08:48:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-27 09:40:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-02-27 10:05:05	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-02-27 10:09:48	-->	kanru (~kanru@118.163.10.190) has joined #haskell.tw
2014-02-27 10:26:19	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-27 11:01:48	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-fttmepdwhiushtvq) has joined #haskell.tw
2014-02-27 11:52:15	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-27 11:53:41	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Client Quit)
2014-02-27 11:53:59	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-27 12:07:47	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2014-02-27 12:08:41	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-02-27 13:27:13	mno2	感覺 Wolframe language 的 runtime 好厲害
2014-02-27 13:30:50	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Remote host closed the connection)
2014-02-27 13:31:09	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-02-27 14:01:16	<--	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2014-02-27 14:40:51	<--	kanru (~kanru@118.163.10.190) has quit (Ping timeout: 265 seconds)
2014-02-27 14:51:24	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-27 14:58:26	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-02-27 14:59:54	-->	godfat (~Adium@1-160-81-141.dynamic.hinet.net) has joined #haskell.tw
2014-02-27 15:02:12	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-27 15:04:29	godfat	所以有時候我覺得用外來語來寫程式是有優勢的
2014-02-27 15:04:30	godfat	這是跟幾個跟英文比較熟的人工作後的結論
2014-02-27 15:04:30	godfat	程式裡的用字對我來說比較近似符號，但他們會受文字本身影響
2014-02-27 15:06:50	kanru	用 APL! xD
2014-02-27 15:07:13	kanru	天書
2014-02-27 15:33:06	CindyLinz	godfat: 你是說, 故意寫得讓他們看不懂? @@"
2014-02-27 15:33:20	CindyLinz	用中文, 然後他們可能甚至沒字型可以顯示? XD
2014-02-27 15:37:17	godfat	當然不是故意的呀... XD 只是命名沒有完全照英文的原意而已
2014-02-27 15:37:31	godfat	比方說單複數或是時態都是一個例子
2014-02-27 15:49:05	CindyLinz	那優勢是什麼啊? ^^|
2014-02-27 15:49:14	CindyLinz	單複數和時態真的好難... orz
2014-02-27 15:49:25	godfat	不會被英文字搞混 XD
2014-02-27 15:49:32	godfat	因為比較不會假設那個字有什麼意思
2014-02-27 15:49:44	CindyLinz	喔喔.. 因為對我們來說它不是字, 只是圖象? X
2014-02-27 15:49:45	CindyLinz	XD
2014-02-27 15:50:04	CindyLinz	明明就是看更慢..... orz
2014-02-27 15:50:37	godfat	我實在非常反對命名有單複數或時態變化，應該只當符號使用，因為這些變化都是 context dependant 的，而我們不可能根據 context 改名字卻指向同一個東西。名字就是名字...
2014-02-27 15:50:53	godfat	比較不會誤解呀 XD
2014-02-27 15:51:01	CindyLinz	(看看 RoR 的 ActiveRecord..)
2014-02-27 15:51:11	godfat	就是 rails 這大便啦... ~.~
2014-02-27 15:51:19	CindyLinz	LoL
2014-02-27 15:51:33	godfat	UsersController
2014-02-27 15:51:33	godfat	我要改 UserController 的話麻煩一堆
2014-02-27 15:51:36	CindyLinz	請問今天您7是左派還是右派.. (誤)
2014-02-27 15:51:46	godfat	不覺得每個都是 /...s 很煩嗎...
2014-02-27 15:52:06	CindyLinz	我記得它遇到 y 結尾的還會自動生成 ies....
2014-02-27 15:52:48	CindyLinz	datum/data, fungus/fungi 有沒有那麼聰明就不知道了 :Q
2014-02-27 15:54:05	godfat	今天您7是啥呀？ XD
2014-02-27 15:54:06	godfat	對啊。他有寫死的變化清單，像是 datum 和 data 就有包含
2014-02-27 15:55:53	godfat	像是 table name 跟 model name 分開這也就算了，他們不太會交互用
2014-02-27 15:55:53	godfat	時態最麻煩了啦
2014-02-27 15:55:53	godfat	exist?
2014-02-27 15:55:53	godfat	exists?
2014-02-27 15:55:53	godfat	existed?
2014-02-27 15:55:53	godfat	這根本就會不斷交互用... 然後 alias 三份有意義嗎？
2014-02-27 15:56:07	CindyLinz	7 是壓到 XD
2014-02-27 15:56:16	godfat	XD
2014-02-27 15:56:40	CindyLinz	這部分還是中文好... XD
2014-02-27 15:56:51	CindyLinz	動辭可以當名辭用, 名辭也能當動辭用 (Y)
2014-02-27 15:57:07	CindyLinz	「你今天王垠了嗎？」
2014-02-27 15:57:09	godfat	我也曾經很喜歡這樣
2014-02-27 15:57:09	godfat	users.each{ |user| user.... }
2014-02-27 15:57:09	godfat	後來發現一瞥過去時，users 跟 user 不太好分辨...
2014-02-27 15:57:09	godfat	後來我就一律
2014-02-27 15:57:09	godfat	users.each{ |u| u.... }
2014-02-27 15:57:13	godfat	XDDDDDDDDDDD
2014-02-27 15:57:16	b4283	人腦 compile
2014-02-27 15:57:21	godfat	轉品才是王道啦~~
2014-02-27 15:57:47	CindyLinz	雖然這時候 point-less 可能更好.. (逃)
2014-02-27 15:58:35	CindyLinz	「你這說話太度真是太王垠了..」 (Y)
2014-02-27 15:58:39	CindyLinz	態度.. :p
2014-02-27 15:58:45	godfat	其實是可以... users.each(&:save) 等同於
2014-02-27 15:58:46	godfat	users.each{ |u| u.save }
2014-02-27 15:58:46	godfat	但是當然複雜起來就沒辦法這樣寫了
2014-02-27 15:58:46	godfat	point-free 也會很複雜就是了
2014-02-27 15:58:54	CindyLinz	對.. XD
2014-02-27 16:00:02	CindyLinz	然後, 如果世界真的這麼美好都能分單數複數就算了
2014-02-27 16:00:16	CindyLinz	像那種 array of array 的就不知道怎麼辦了... ss 嗎.. 囧
2014-02-27 16:01:17	godfat	是啊.... 所以真的簡單的東西引入自然語言就算了，複雜的話還是省省吧 :o
2014-02-27 16:02:09	godfat	辦公司網路太慢了，不知道要怎麼工作了...
2014-02-27 16:02:23	godfat	好像 irc 聊天還可以，我 linux 動不了了
2014-02-27 16:02:52	CindyLinz	戳MIS.. XD
2014-02-27 16:03:08	CindyLinz	真是友善的環境....ww # 16:01 < godfat> 好像 irc 聊天還可以，我 linux 動不了了
2014-02-27 16:03:19	godfat	現在跟別人共享辦公室，不知道戳誰 ~.~
2014-02-27 16:03:26	godfat	XDDDD
2014-02-27 16:03:27	CindyLinz	._.
2014-02-27 16:03:43	CindyLinz	在辦公室裡裝開發用主機
2014-02-27 16:03:49	CindyLinz	平常連它就好了?
2014-02-27 16:04:33	godfat	我可能要自己準備電腦... XD 嘛，不如待在家裡環境好多了 XD
2014-02-27 16:04:47	CindyLinz	不用跟同事討論喔?
2014-02-27 16:04:57	godfat	有時候要，真可惜
2014-02-27 16:05:26	CindyLinz	XD
2014-02-27 16:15:09	b4283	大部分時間都是同事干擾我
2014-02-27 16:15:51	godfat	讓我們推廣遠端非同步協作
2014-02-27 16:22:55	CindyLinz	這要怎麼推廣啦 XD
2014-02-27 16:23:34	godfat	進行並公開一個遠端非同步的協作，咦 g0v 是不是這樣？
2014-02-27 16:24:11	godfat	就差沒有 profit 比較難說服公司
2014-02-27 16:24:14	CindyLinz	是..
2014-02-27 16:48:25	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2014-02-27 17:35:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-fttmepdwhiushtvq) has quit (Quit: Connection closed for inactivity)
2014-02-27 18:14:04	-->	godfat1 (~Adium@1-160-81-141.dynamic.hinet.net) has joined #haskell.tw
2014-02-27 18:14:05	<--	godfat (~Adium@1-160-81-141.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-02-27 18:14:09	--	godfat1 is now known as godfat
2014-02-27 18:19:28	-->	godfat1 (~Adium@1-160-81-141.dynamic.hinet.net) has joined #haskell.tw
2014-02-27 18:19:29	<--	godfat (~Adium@1-160-81-141.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-02-27 18:19:30	--	godfat1 is now known as godfat
2014-02-27 18:40:35	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-02-27 18:41:13	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-27 19:13:34	-->	jiajun (~jiajun@218.64.17.175) has joined #haskell.tw
2014-02-27 19:17:13	<--	cyt93cs (~cyt93cs@140.123.101.4) has quit (Ping timeout: 240 seconds)
2014-02-27 19:24:42	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-02-27 19:40:25	<--	godfat (~Adium@1-160-81-141.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-02-27 20:09:43	<--	jiajun (~jiajun@218.64.17.175) has quit (Quit: Leaving)
2014-02-27 20:46:06	-->	town55 (~1@139.202.130.224) has joined #haskell.tw
2014-02-27 20:49:09	-->	suhorng (~suhorng@118-166-50-240.dynamic.hinet.net) has joined #haskell.tw
2014-02-27 21:04:56	suhorng	Liskell xDDDD http://clemens.endorphin.org/ILC07-Liskell-draft.pdf
2014-02-27 21:05:32	suhorng	我的天，還是原本的syntax好，雖然我Haskell裡常用的運算子實在多到有點討厭XD
2014-02-27 21:22:00	CindyLinz	XD
2014-02-27 22:44:43	<--	town55 (~1@139.202.130.224) has quit (Remote host closed the connection)
2014-02-27 22:55:38	-->	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has joined #haskell.tw
2014-02-27 23:02:45	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-27 23:21:46	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2014-02-27 23:23:00	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-27 23:34:25	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-27 23:46:25	<--	suhorng (~suhorng@118-166-50-240.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-02-28 00:22:00	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-02-28 00:29:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-02-28 00:35:55	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-02-28 00:55:18	-->	b4283 (~b4283@218-164-117-20.dynamic.hinet.net) has joined #haskell.tw
2014-02-28 01:01:35	-->	caasih (~caasiHuan@114-46-141-123.dynamic.hinet.net) has joined #haskell.tw
2014-02-28 01:01:56	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-bhidqqiollzxnmgn) has joined #haskell.tw
2014-02-28 01:08:25	<--	caasih (~caasiHuan@114-46-141-123.dynamic.hinet.net) has quit (Quit: leaving)
2014-02-28 01:08:48	-->	caasih (~caasiHuan@114-46-141-123.dynamic.hinet.net) has joined #haskell.tw
2014-02-28 01:34:15	monochrom	Haskell 的 "data", "type", "newtype", "class", "return" 不正是苦害了不少初學 Haskell 的英文人嗎? XD
2014-02-28 01:38:02	monochrom	幾天前改學生功課(不是Haskell), 他寫"less steps". 正確應為"fewer steps". 但可見英文還真不容易.
2014-02-28 01:39:25	monochrom	我都係花了半生在腦內建構超巨型 lookup table 才應付過來!
2014-02-28 02:11:20	<--	b4283 (~b4283@218-164-117-20.dynamic.hinet.net) has quit (Quit: 暫離)
2014-02-28 03:26:15	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-28 03:41:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-02-28 03:53:33	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-28 04:57:16	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-28 04:57:17	<--	godfat (~Adium@1-160-165-110.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-02-28 05:50:58	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-02-28 05:55:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-bhidqqiollzxnmgn) has quit (Quit: Connection closed for inactivity)
2014-02-28 06:12:19	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-28 06:48:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-02-28 07:10:25	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Ping timeout: 240 seconds)
2014-02-28 08:02:28	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-28 08:36:26	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ocvfaspzyalbsjek) has joined #haskell.tw
2014-02-28 08:45:11	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Write error: Broken pipe)
2014-02-28 08:50:30	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-02-28 08:54:05	<--	mno2 (~mno2@42.60.173.63) has quit (*.net *.split)
2014-02-28 09:10:05	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-28 09:13:39	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-28 09:17:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-28 09:26:22	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-02-28 09:29:43	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 240 seconds)
2014-02-28 11:09:40	mno2	https://plus.google.com/+ErikdeCastroLopo/posts/7MGNa7VRw3d
2014-02-28 11:09:49	mno2	good bye and thanks for all the Kleisli fish,   wwwww
2014-02-28 11:10:27	mno2	梗出自 http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy
2014-02-28 11:26:07	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-02-28 11:43:32	-->	b4283 (~b4283@218-164-202-184.dynamic.hinet.net) has joined #haskell.tw
2014-02-28 12:36:19	--	petercom1and is now known as petercommand
2014-02-28 12:36:31	-->	b4284 (~b4283@218-164-202-184.dynamic.hinet.net) has joined #haskell.tw
2014-02-28 12:37:29	<--	b4283 (~b4283@218-164-202-184.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-02-28 12:42:44	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (*.net *.split)
2014-02-28 12:48:41	-->	favonia (~favonia@pool-71-126-46-50.pitbpa.east.verizon.net) has joined #haskell.tw
2014-02-28 12:55:14	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-02-28 12:56:45	<--	favonia (~favonia@pool-71-126-46-50.pitbpa.east.verizon.net) has quit (Ping timeout: 252 seconds)
2014-02-28 12:58:11	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-28 13:51:21	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-28 14:10:52	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-02-28 14:10:52	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-28 14:20:00	<--	caasih (~caasiHuan@114-46-141-123.dynamic.hinet.net) has quit (Remote host closed the connection)
2014-02-28 15:05:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ocvfaspzyalbsjek) has quit (Quit: Connection closed for inactivity)
2014-02-28 15:09:26	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-02-28 15:22:27	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ayrzimkylrsizfmi) has joined #haskell.tw
2014-02-28 15:22:34	-->	ellarwolf (~ellarwolf@91.220.202.11) has joined #haskell.tw
2014-02-28 15:32:11	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-28 15:40:53	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-02-28 19:15:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ayrzimkylrsizfmi) has quit (Quit: Connection closed for inactivity)
2014-02-28 20:30:04	-->	town77 (~1@118.123.141.206) has joined #haskell.tw
2014-02-28 20:30:53	<--	town77 (~1@118.123.141.206) has quit (Remote host closed the connection)
2014-02-28 21:59:42	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-nuqpcrjpufbmoejz) has joined #haskell.tw
2014-02-28 22:07:55	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2014-02-28 22:07:59	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 263 seconds)
2014-02-28 22:08:28	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-02-28 22:17:17	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-02-28 22:58:13	-->	suhorng (~suhorng@118-166-50-240.dynamic.hinet.net) has joined #haskell.tw
2014-02-28 23:56:54	<--	suhorng (~suhorng@118-166-50-240.dynamic.hinet.net) has left #haskell.tw
2014-03-01 00:14:56	<--	ellarwolf (~ellarwolf@91.220.202.11) has quit (Remote host closed the connection)
2014-03-01 00:27:24	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 00:32:59	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 269 seconds)
2014-03-01 00:55:19	<--	b4284 (~b4283@218-164-202-184.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-01 01:19:59	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 01:21:01	-->	ozzzzzz (~ozzzzzz@123.117.148.7) has joined #haskell.tw
2014-03-01 01:25:10	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-nuqpcrjpufbmoejz) has quit (Quit: Connection closed for inactivity)
2014-03-01 01:28:35	<--	ozzzzzz (~ozzzzzz@123.117.148.7) has quit (Quit: 离开)
2014-03-01 01:31:11	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2014-03-01 01:38:33	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-01 01:42:50	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-03-01 01:50:38	-->	weie (~weie@221.78.42.71) has joined #haskell.tw
2014-03-01 02:04:52	<--	weie (~weie@221.78.42.71) has quit (Ping timeout: 240 seconds)
2014-03-01 02:10:53	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-01 02:37:12	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 03:57:13	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-01 04:02:30	-->	favonia_ (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 05:02:02	<--	favonia_ (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-01 06:11:27	-->	favonia (~favonia@128.237.205.160) has joined #haskell.tw
2014-03-01 06:11:42	<--	favonia (~favonia@128.237.205.160) has quit (Changing host)
2014-03-01 06:11:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 06:12:55	-->	caasih (~caasiHuan@114-46-157-136.dynamic.hinet.net) has joined #haskell.tw
2014-03-01 06:46:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-01 06:47:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 07:09:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-03-01 07:25:45	<--	caasih (~caasiHuan@114-46-157-136.dynamic.hinet.net) has quit (Quit: leaving)
2014-03-01 08:17:20	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2014-03-01 08:35:02	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-01 10:18:38	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-01 10:36:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 11:44:02	-->	b4283 (~b4283@218-164-202-184.dynamic.hinet.net) has joined #haskell.tw
2014-03-01 12:28:26	<--	hashcat_ (~hashcat_@106.65.151.175) has quit (Ping timeout: 264 seconds)
2014-03-01 12:35:44	mno2	http://www.quora.com/Recruitment-Stories/What-are-the-funniest-answers-you-have-gotten-given-to-serious-questions-in-programming-interviews  這討論串好好笑
2014-03-01 12:53:45	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-01 13:32:15	-->	hashcat_ (~hashcat_@27.241.162.253) has joined #haskell.tw
2014-03-01 13:32:17	<--	hashcat_ (~hashcat_@27.241.162.253) has quit (Excess Flood)
2014-03-01 14:50:51	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-01 14:56:17	favonia	echo 92 感覺比較簡潔（誤
2014-03-01 16:07:22	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-01 16:22:09	-->	hashcat_ (~hashcat_@27.241.162.253) has joined #haskell.tw
2014-03-01 16:22:11	<--	hashcat_ (~hashcat_@27.241.162.253) has quit (Excess Flood)
2014-03-01 16:22:23	-->	hashcat_ (~hashcat_@27.241.162.253) has joined #haskell.tw
2014-03-01 16:22:25	<--	hashcat_ (~hashcat_@27.241.162.253) has quit (Excess Flood)
2014-03-01 16:22:39	-->	hashcat_ (~hashcat_@27.241.162.253) has joined #haskell.tw
2014-03-01 16:22:41	<--	hashcat_ (~hashcat_@27.241.162.253) has quit (Excess Flood)
2014-03-01 16:41:26	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-01 17:42:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-03-01 21:35:11	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ifiduudxxvzgxsjk) has joined #haskell.tw
2014-03-01 21:46:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-01 22:22:10	<--	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-01 23:37:08	<--	b4283 (~b4283@218-164-202-184.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-01 23:41:02	-->	b4283 (~b4283@218-164-115-174.dynamic.hinet.net) has joined #haskell.tw
2014-03-01 23:52:55	-->	hashcat_ (~hashcat_@27.241.162.253) has joined #haskell.tw
2014-03-01 23:52:57	<--	hashcat_ (~hashcat_@27.241.162.253) has quit (Excess Flood)
2014-03-01 23:53:09	-->	hashcat_ (~hashcat_@27.241.162.253) has joined #haskell.tw
2014-03-01 23:53:16	<--	hashcat_ (~hashcat_@27.241.162.253) has quit (Excess Flood)
2014-03-02 00:03:01	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-02 00:08:17	<--	b4283 (~b4283@218-164-115-174.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-02 00:36:52	-->	hashcat_ (~hashcat_@27.241.107.126) has joined #haskell.tw
2014-03-02 00:36:54	<--	hashcat_ (~hashcat_@27.241.107.126) has quit (Excess Flood)
2014-03-02 00:37:07	-->	hashcat_ (~hashcat_@27.241.107.126) has joined #haskell.tw
2014-03-02 00:37:08	<--	hashcat_ (~hashcat_@27.241.107.126) has quit (Excess Flood)
2014-03-02 00:38:32	-->	hashcat_ (~hashcat_@27.241.107.126) has joined #haskell.tw
2014-03-02 00:38:54	<--	hashcat_ (~hashcat_@27.241.107.126) has quit (Client Quit)
2014-03-02 00:39:03	-->	hashcat_ (~hashcat_@27.241.107.126) has joined #haskell.tw
2014-03-02 00:39:06	<--	hashcat_ (~hashcat_@27.241.107.126) has quit (Excess Flood)
2014-03-02 00:40:39	-->	hashcat_ (~hashcat_@27.241.107.126) has joined #haskell.tw
2014-03-02 01:45:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ifiduudxxvzgxsjk) has quit (Quit: Connection closed for inactivity)
2014-03-02 06:44:37	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-02 07:33:37	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-02 08:22:20	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-02 08:37:33	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-02 08:40:02	mno2	http://snapforbeginners.com/
2014-03-02 08:40:08	mno2	snap 有輸了
2014-03-02 08:40:11	mno2	書
2014-03-02 09:50:20	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-02 10:08:24	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-02 11:06:06	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-axrdukkvxkaslemz) has joined #haskell.tw
2014-03-02 11:51:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-02 12:54:38	-->	b4283 (~b4283@218-164-209-9.dynamic.hinet.net) has joined #haskell.tw
2014-03-02 13:21:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-02 13:35:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-axrdukkvxkaslemz) has quit (Quit: Connection closed for inactivity)
2014-03-02 13:38:52	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-02 13:48:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-02 13:52:38	<--	hashcat_ (~hashcat_@27.241.107.126) has quit (Remote host closed the connection)
2014-03-02 15:37:12	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-02 16:25:38	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-02 18:00:38	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2014-03-02 18:03:52	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-02 18:29:47	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-qqtliwoeyuqvdduh) has joined #haskell.tw
2014-03-02 18:42:58	-->	suhorng (~suhorng@118-166-46-193.dynamic.hinet.net) has joined #haskell.tw
2014-03-02 19:09:49	<--	suhorng (~suhorng@118-166-46-193.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-02 20:03:13	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-02 20:35:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-qqtliwoeyuqvdduh) has quit (Quit: Connection closed for inactivity)
2014-03-02 20:43:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-02 20:56:16	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-alovbyadeojbiohp) has joined #haskell.tw
2014-03-02 21:12:14	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-02 21:26:36	<--	b4283 (~b4283@218-164-209-9.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-02 21:47:46	-->	hashcat (~kv2a@106.65.76.62) has joined #haskell.tw
2014-03-02 22:19:16	<--	hashcat (~kv2a@106.65.76.62) has quit (Quit: Konversation terminated!)
2014-03-02 22:19:29	-->	hashcat (~kv2a@106.65.76.62) has joined #haskell.tw
2014-03-03 00:00:03	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-03 00:26:17	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-03 02:15:15	<--	hashcat (~kv2a@106.65.76.62) has quit (Quit: Konversation terminated!)
2014-03-03 04:22:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-03 05:03:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-03 05:26:30	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-03 06:48:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-03 07:23:13	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-03 07:24:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-03 09:02:25	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-03 09:04:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-03 10:14:35	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-03 10:57:04	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-03 11:53:53	CindyLinz	想要可以定義在函數內部使用的 data.. (Haskell)
2014-03-03 11:55:13	CindyLinz	只好用 tuple 搭配  field accessor 了..  但這樣生出 data 的時候就沒有有名字的 constructor 可以用了.. QQ
2014-03-03 12:18:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-03 12:21:19	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-03 12:31:26	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-03 12:59:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-03 13:06:52	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-03 13:12:33	-->	godfat (~Adium@36-226-130-135.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-03 14:33:45	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-03 16:02:37	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-03 16:03:33	CindyLinz	Carl Su 做的 haskell Docker 環境.. https://index.docker.io/u/bcbcarl/archhaskell/
2014-03-03 16:03:40	CindyLinz	只是我還不會用 Docker.. :Q
2014-03-03 16:40:41	-->	hashcat (~kv2a@106.65.76.62) has joined #haskell.tw
2014-03-03 16:48:42	mno2	Docker 還不錯啊
2014-03-03 16:49:12	mno2	不過最近稍微看了一下 SmartOS，真的覺得 SmartOS 還蠻先進的
2014-03-03 16:49:42	mno2	dtrace 可以直接 instrument production 而不會造成太多 overhead
2014-03-03 16:49:59	mno2	然後 Docker 提供的功能 Zone 就內建了
2014-03-03 16:50:04	mno2	檔案系統還是 ZFS
2014-03-03 16:56:29	<--	hashcat (~kv2a@106.65.76.62) has quit (Ping timeout: 240 seconds)
2014-03-03 17:21:09	CindyLinz	不知道是很快的 ZFS 還是很慢的 ZFS..
2014-03-03 17:25:25	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Ping timeout: 264 seconds)
2014-03-03 17:41:10	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-03-03 17:42:01	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Client Quit)
2014-03-03 17:47:31	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-03 17:49:06	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-03 17:55:19	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 17:55:20	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 17:55:37	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 17:55:38	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 17:56:43	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 17:56:45	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 17:59:15	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 17:59:16	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:05:20	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-03 18:06:59	<--	godfat (~Adium@36-226-130-135.dynamic-ip.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-03 18:09:53	-->	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has joined #haskell.tw
2014-03-03 18:12:37	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 18:12:37	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:12:52	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 18:12:53	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:13:12	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 18:13:13	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:13:37	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 18:13:39	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:14:02	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 18:14:03	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:14:17	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-03 18:14:23	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-03 18:25:32	-->	hashcat (~kv2a@106.65.76.62) has joined #haskell.tw
2014-03-03 18:40:14	<--	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-03 19:16:18	<--	petercommand11 (~peter@128.199.232.63) has quit (Ping timeout: 240 seconds)
2014-03-03 21:17:18	<--	hashcat (~kv2a@106.65.76.62) has quit (Ping timeout: 252 seconds)
2014-03-03 21:33:29	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 245 seconds)
2014-03-03 21:34:24	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-03-03 21:37:09	-->	godfat (~Adium@1-160-161-240.dynamic.hinet.net) has joined #haskell.tw
2014-03-03 21:38:03	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-03 21:56:38	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 264 seconds)
2014-03-03 21:57:39	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-03 23:03:28	-->	caasih (~caasiHuan@118-170-3-156.dynamic.hinet.net) has joined #haskell.tw
2014-03-03 23:04:55	<--	caasih (~caasiHuan@118-170-3-156.dynamic.hinet.net) has quit (Client Quit)
2014-03-03 23:12:17	<--	mno2 (~mno2@42.60.173.63) has quit (Ping timeout: 265 seconds)
2014-03-03 23:15:29	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-03 23:53:38	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-04 00:43:19	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-04 00:43:31	--	superbil_c is now known as superbil
2014-03-04 01:32:44	-->	b4283 (~b4283@118.150.146.233) has joined #haskell.tw
2014-03-04 02:04:29	<--	petercommand11 (~peter@128.199.232.63) has quit (Ping timeout: 252 seconds)
2014-03-04 02:11:40	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-04 02:14:41	<--	b4283 (~b4283@118.150.146.233) has quit (Remote host closed the connection)
2014-03-04 02:29:42	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-04 05:15:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-04 06:12:24	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-04 06:17:27	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-04 07:07:02	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-04 07:46:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-04 08:51:52	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-04 09:17:31	-->	b4283 (~b4283@36-238-230-155.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-04 10:21:57	<--	b4283 (~b4283@36-238-230-155.dynamic-ip.hinet.net) has quit (Ping timeout: 244 seconds)
2014-03-04 11:30:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-04 11:43:17	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-04 12:00:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-04 12:59:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-04 16:31:26	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-04 17:23:50	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-04 17:36:17	CindyLinz	如果 C 程式 call 入 haskell 函數, 然後這個 haskell 函數呼叫了一個會 longjmp 的 C 函數, 會發生什麼事 @@"
2014-03-04 17:36:44	CindyLinz	C: setjmp -> Haskell: do something -> C: longjmp
2014-03-04 17:37:23	CindyLinz	完全一樣的標題耶 XD http://www.haskell.org/pipermail/glasgow-haskell-users/2010-March/018515.html
2014-03-04 17:38:50	CindyLinz	看起來會毫無意外地悲劇....ww
2014-03-04 18:12:43	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-04 18:42:58	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-04 19:01:34	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-04 19:30:55	hychen_	CindyLinz: docker在mac有點悲劇...
2014-03-04 19:31:03	hychen_	CindyLinz: 還是要跑個VM XD
2014-03-04 19:31:35	CindyLinz	我以為 docker 是 Linux only 耶? XD
2014-03-04 19:37:24	mno2	CindyLinz: http://docs.docker.io/en/latest/installation/mac/
2014-03-04 19:37:39	-->	b4283 (~b4283@218-164-215-228.dynamic.hinet.net) has joined #haskell.tw
2014-03-04 19:37:48	mno2	其實還是疊了一層 VM 的樣子
2014-03-04 19:39:46	godfat	Docker on OS X needs VirtualBox to run.
2014-03-04 19:39:46	godfat	都在騙人 @@
2014-03-04 19:58:55	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-04 20:02:46	-->	mno2 (~mno2@42.60.173.63) has joined #haskell.tw
2014-03-04 20:04:12	CindyLinz	XDD
2014-03-04 20:04:27	CindyLinz	沒看到它是墊在 node.js 上面就很感謝了? (逃)
2014-03-04 20:05:14	godfat	...orz atom.io...
2014-03-04 20:06:46	CindyLinz	refactor haskell 程式, 真的有時候就是先改 type, 然後讓 ghc 帶路... XD
2014-03-04 20:07:09	godfat	我是常常用 test 帶路... XD
2014-03-04 20:09:00	CindyLinz	test 是啥?
2014-03-04 20:09:05	CindyLinz	喔用測的...
2014-03-04 20:09:56	godfat	test passed -- no problems
2014-03-04 20:09:56	godfat	otherwise fix tests one by one...
2014-03-04 21:32:27	mno2	atom.io 看起來像是 node.js 版的 emacs ?
2014-03-04 21:32:52	godfat	可能喔...
2014-03-04 21:33:16	mno2	還拿不到邀請碼 xD
2014-03-04 21:34:02	godfat	我的用完了 @@
2014-03-04 22:40:01	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-04 22:43:33	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-04 23:15:44	-->	suhorng (~suhorng@118-166-45-172.dynamic.hinet.net) has joined #haskell.tw
2014-03-04 23:31:44	<--	mno2 (~mno2@42.60.173.63) has quit (Quit: mno2)
2014-03-05 00:04:51	monochrom	type 與 test, 都是 specification. 我從來都讓 specification 帶路.
2014-03-05 00:09:10	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2014-03-05 00:09:45	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-05 00:15:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-alovbyadeojbiohp) has quit (Quit: Connection closed for inactivity)
2014-03-05 00:24:53	<--	suhorng (~suhorng@118-166-45-172.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-05 00:56:45	<--	b4283 (~b4283@218-164-215-228.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-05 04:00:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 244 seconds)
2014-03-05 05:51:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-05 07:02:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-05 08:00:44	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-pvcifigjnkqyidrx) has joined #haskell.tw
2014-03-05 08:10:29	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-05 10:17:40	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-05 12:24:49	<--	godfat (~Adium@1-160-161-240.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-05 12:56:11	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-05 13:00:57	-->	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 13:04:01	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-05 13:41:58	<--	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-05 14:25:58	-->	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 15:35:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-pvcifigjnkqyidrx) has quit (Quit: Connection closed for inactivity)
2014-03-05 16:11:07	<--	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has quit (*.net *.split)
2014-03-05 16:11:10	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (*.net *.split)
2014-03-05 16:34:38	-->	liuzhoou (~liuzhoou@125.215.44.36) has joined #haskell.tw
2014-03-05 16:59:59	<--	liuzhoou (~liuzhoou@125.215.44.36) has quit (Quit: Leaving...)
2014-03-05 17:00:58	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-05 17:00:58	-->	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 17:11:22	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-vwhfqhplxocupbvq) has joined #haskell.tw
2014-03-05 18:52:14	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-05 19:06:42	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-05 19:15:27	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-05 19:39:13	<--	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-05 19:56:09	-->	hychen__ (uid12518@gateway/web/irccloud.com/x-kbvwpdrboynnwirs) has joined #haskell.tw
2014-03-05 19:56:52	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-vwhfqhplxocupbvq) has quit (Ping timeout: 265 seconds)
2014-03-05 19:57:48	--	hychen__ is now known as hychen_
2014-03-05 20:11:24	-->	b4283 (~b4283@218-164-218-182.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 20:47:30	-->	godfat (~Adium@1-160-161-240.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 21:26:36	-->	mno2 (~mno2@210.186.135.97) has joined #haskell.tw
2014-03-05 21:45:59	<--	b4283 (~b4283@218-164-218-182.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-05 22:02:25	-->	suhorng (~suhorng@118-166-45-172.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 22:02:26	-->	b4283 (~b4283@114-39-252-247.dynamic.hinet.net) has joined #haskell.tw
2014-03-05 23:04:25	<--	b4283 (~b4283@114-39-252-247.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-05 23:20:56	-->	b4283 (~b4283@36-238-222-43.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-05 23:25:18	<--	b4283 (~b4283@36-238-222-43.dynamic-ip.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-05 23:37:44	-->	b4283 (~b4283@218-164-116-79.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 00:26:53	-->	godfat1 (~Adium@1-160-161-240.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 00:29:36	<--	godfat (~Adium@1-160-161-240.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-06 00:32:11	<--	b4283 (~b4283@218-164-116-79.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-06 00:35:19	<--	mno2 (~mno2@210.186.135.97) has quit (Quit: mno2)
2014-03-06 00:37:25	<--	suhorng (~suhorng@118-166-45-172.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-06 00:48:57	-->	b4283 (~b4283@1-172-85-14.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 01:14:49	<--	b4283 (~b4283@1-172-85-14.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-06 04:38:19	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-06 04:40:20	<--	godfat1 (~Adium@1-160-161-240.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2014-03-06 06:20:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-06 06:59:24	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-06 07:19:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-03-06 07:57:24	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-06 08:15:05	-->	mno2 (~mno2@210.186.135.97) has joined #haskell.tw
2014-03-06 08:18:23	<--	mno2 (~mno2@210.186.135.97) has quit (Client Quit)
2014-03-06 08:37:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-03-06 09:47:02	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-06 10:12:41	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-06 12:00:48	<--	miaout17 (~miaout17@miaout17.net) has quit (Ping timeout: 264 seconds)
2014-03-06 12:02:36	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-06 12:45:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 244 seconds)
2014-03-06 13:25:25	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-06 15:46:18	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-06 16:18:32	-->	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 17:14:19	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-06 17:15:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-kbvwpdrboynnwirs) has quit (Quit: Connection closed for inactivity)
2014-03-06 17:16:28	-->	b4283 (~b4283@60.249.196.111) has joined #haskell.tw
2014-03-06 17:17:53	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-aqudvwvzywdxamqs) has joined #haskell.tw
2014-03-06 19:01:20	<--	b4283 (~b4283@60.249.196.111) has quit (Quit: Konversation terminated!)
2014-03-06 19:22:52	<--	godfat (~Adium@114-25-220-248.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-06 20:02:05	-->	mno2 (~mno2@210.186.135.97) has joined #haskell.tw
2014-03-06 20:14:15	-->	b4283 (~b4283@218-164-218-150.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 20:33:29	-->	hashcat (~kv2a@111-254-242-159.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 20:45:11	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-aqudvwvzywdxamqs) has quit (Quit: Connection closed for inactivity)
2014-03-06 21:01:48	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-xqyljxyxmgfnwxup) has joined #haskell.tw
2014-03-06 21:48:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-06 21:49:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-06 22:14:13	<--	mno2 (~mno2@210.186.135.97) has quit (Quit: mno2)
2014-03-06 22:27:26	-->	godfat (~Adium@1-160-161-33.dynamic.hinet.net) has joined #haskell.tw
2014-03-06 22:49:16	-->	mno2 (~mno2@210.186.135.97) has joined #haskell.tw
2014-03-06 23:03:37	<--	mno2 (~mno2@210.186.135.97) has quit (Quit: mno2)
2014-03-06 23:09:15	-->	petercom1and (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-06 23:10:08	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 244 seconds)
2014-03-06 23:10:30	--	petercom1and is now known as petercommand
2014-03-06 23:44:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-06 23:46:42	CindyLinz	今天晚上 functional thursday
2014-03-06 23:47:05	CindyLinz	我有朋友早早就報了名, 也規劃好今天要去, 也的確有去~
2014-03-06 23:47:40	CindyLinz	只是, 去之前幾個小時, 他完全不知道今天的講題是什麼...
2014-03-06 23:47:58	CindyLinz	我笑他說: 你這已經是宗教熱情了..... XD
2014-03-06 23:48:40	letoh	之前有去 pyhug 時也沒在管這個，反正時間到就去XD
2014-03-07 00:38:39	<--	b4283 (~b4283@218-164-218-150.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-07 02:04:56	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-07 02:59:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-07 03:12:49	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Ping timeout: 240 seconds)
2014-03-07 03:13:30	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 03:13:32	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 03:13:50	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 03:13:51	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 03:14:42	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 03:14:43	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 03:15:41	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 03:15:42	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 03:23:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-07 03:24:11	<--	hashcat (~kv2a@111-254-242-159.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-07 03:59:15	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 03:59:16	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 03:59:31	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 06:03:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-07 06:13:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-07 06:15:42	monochrom	去會友也不錯
2014-03-07 06:20:40	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-07 06:32:29	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-07 06:40:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-07 07:01:08	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-07 07:48:26	-->	mno2 (~mno2@210.186.135.97) has joined #haskell.tw
2014-03-07 07:56:17	<--	mno2 (~mno2@210.186.135.97) has quit (Quit: mno2)
2014-03-07 08:50:39	-->	hellgate (~hellgate@91.229.76.78) has joined #haskell.tw
2014-03-07 08:52:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-03-07 09:00:38	-->	mno2 (~mno2@210.186.135.97) has joined #haskell.tw
2014-03-07 09:02:40	<--	mno2 (~mno2@210.186.135.97) has quit (Client Quit)
2014-03-07 09:16:36	<--	hellgate (~hellgate@91.229.76.78) has quit (Remote host closed the connection)
2014-03-07 10:01:54	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-07 10:03:51	-->	a2n_ (~a2n@219.85.185.194) has joined #haskell.tw
2014-03-07 10:05:27	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-07 10:06:46	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 240 seconds)
2014-03-07 10:06:47	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Ping timeout: 240 seconds)
2014-03-07 10:06:47	<--	miaout17 (~miaout17@miaout17.net) has quit (Ping timeout: 240 seconds)
2014-03-07 10:06:49	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 240 seconds)
2014-03-07 10:06:55	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-03-07 10:07:09	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 10:07:11	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 10:07:30	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 10:07:32	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 10:07:54	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 10:07:56	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 10:08:23	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 10:08:26	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Excess Flood)
2014-03-07 10:19:30	-->	longqm (~longqm@223.72.182.176) has joined #haskell.tw
2014-03-07 10:26:35	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-07 10:28:51	-->	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-07 10:35:23	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (*.net *.split)
2014-03-07 10:35:25	<--	godfat (~Adium@1-160-161-33.dynamic.hinet.net) has quit (*.net *.split)
2014-03-07 10:35:32	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-xqyljxyxmgfnwxup) has quit (*.net *.split)
2014-03-07 11:06:12	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 244 seconds)
2014-03-07 11:06:13	-->	weie (~weie@221.78.42.71) has joined #haskell.tw
2014-03-07 11:06:39	<--	miaout17_ (~miaout17@miaout17.net) has quit (Remote host closed the connection)
2014-03-07 11:06:50	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-07 11:08:49	<--	weie (~weie@221.78.42.71) has quit (Ping timeout: 244 seconds)
2014-03-07 11:24:40	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-03-07 11:24:42	<--	longqm (~longqm@223.72.182.176) has quit (*.net *.split)
2014-03-07 11:24:47	<--	petercommand11 (~peter@128.199.232.63) has quit (*.net *.split)
2014-03-07 11:27:14	-->	cataska__ (uid12717@gateway/web/irccloud.com/x-rlbfwisvtkdbyfzq) has joined #haskell.tw
2014-03-07 12:33:47	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-07 13:16:03	-->	godfat (~Adium@36-225-52-21.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-07 14:47:56	CindyLinz	Haskell 呼函數的時候如果套一下 flip 可以把最前面兩個參數的位置交換
2014-03-07 14:48:10	CindyLinz	例如說...
2014-03-07 14:48:28	CindyLinz	> flip (\a b -> (a, b))
2014-03-07 14:48:30	lambdabot	 No instance for (Data.Typeable.Internal.Typeable t0)
2014-03-07 14:48:30	lambdabot	   arising from a use of `M426580164427288460213415.show_M4265801644272884602...
2014-03-07 14:48:30	lambdabot	 The type variable `t0' is ambiguous
2014-03-07 14:48:30	lambdabot	 Possible fix: add a type signature that fixes these type variable(s)
2014-03-07 14:48:30	lambdabot	 Note: there are several potential instances:
2014-03-07 14:48:36	CindyLinz	@type flip (\a b -> (a, b))
2014-03-07 14:48:37	lambdabot	t1 -> t -> (t, t1)
2014-03-07 14:49:19	CindyLinz	如果參數1是一串比較長的 do-notation 的東西, 而參數2是很短的參數, 我很可能就會採用這樣的方式呼叫
2014-03-07 14:49:35	CindyLinz	把 do-notation 放在最後一個, 就可以在最後面寫 $ do .....
2014-03-07 14:49:38	CindyLinz	我想問..
2014-03-07 14:50:07	CindyLinz	如果原本有三個參數以上, 其中第一個是長的其他是短的, 通常是怎樣寫, 來把第一個推到最後一個?
2014-03-07 14:50:55	CindyLinz	@type flip (\a b c -> (a, b, c))
2014-03-07 14:50:56	lambdabot	t1 -> t -> t2 -> (t, t1, t2)
2014-03-07 14:52:12	CindyLinz	> flip (flip (\a b c -> (a, b, c)) 2) 3 1
2014-03-07 14:52:14	lambdabot	 (1,2,3)
2014-03-07 14:52:35	CindyLinz	是這樣寫嗎? 有沒有看起來更舒服的寫法? QQ
2014-03-07 14:52:52	CindyLinz	> flip (flip (flip (\a b c d -> (a, b, c, d)) 2) 3) 4 1
2014-03-07 14:52:53	lambdabot	 (1,2,3,4)
2014-03-07 14:53:06	godfat	@type \b c a -> (\a b c -> (a, b, c) a b c)
2014-03-07 14:53:07	lambdabot	    Couldn't match expected type `t1 -> t2 -> t3 -> t0'
2014-03-07 14:53:07	lambdabot	                with actual type `(t1, t2, t3)'
2014-03-07 14:53:07	lambdabot	    The function `(a, b, c)' is applied to three arguments,
2014-03-07 14:53:26	CindyLinz	godfat: 你是說為每一種排列寫一隻 helper 喔?
2014-03-07 14:53:37	godfat	記得之前的討論是這樣 XDDD
2014-03-07 14:53:49	CindyLinz	嗚嗚真絕望.. QQ
2014-03-07 14:53:53	monochrom	可以自定一個 xxx f b c a = f a b c
2014-03-07 14:54:08	CindyLinz	的確是 helper.. QQ
2014-03-07 14:55:26	godfat	c++ 的話... f(_3, _1, _2)(b, c, a)
2014-03-07 14:55:32	CindyLinz	或是開大絕用 template.... $(flip' 1 3) (\a b c -> (a, b, c)) = \b c a -> (a, b, c)
2014-03-07 14:56:14	CindyLinz	其實心理上還是有點抗拒 template, 如果能不用還是會盡量不去動用 @@"
2014-03-07 14:57:02	CindyLinz	這是哪一國的 C++... 囧
2014-03-07 14:57:14	godfat	這樣是 flip' 就是把 a b c 變 b c a? 這跟直接定義 flip' 有啥不同？
2014-03-07 14:57:31	godfat	c++11 之類的...
2014-03-07 14:57:38	CindyLinz	C++ 相見不相識, 笑問 compiler 何處來 XD
2014-03-07 14:57:39	monochrom	我覺得, 沒必要尋求通用解法. 你真的有這麼多參數要重組嗎?
2014-03-07 14:58:00	b4284	flip table
2014-03-07 14:58:00	CindyLinz	godfat: 可能寫錯了 XD  我指的是 flip' 1 3 就是把第一個參數移到第三個 XD
2014-03-07 14:58:46	CindyLinz	monochrom: 但如果找到了會很開心啊 XD
2014-03-07 14:59:00	CindyLinz	godfat: helper 產生器
2014-03-07 14:59:17	CindyLinz	monochrom: 現在是一直頻繁使用同一個.. 三個的
2014-03-07 14:59:50	monochrom	如果還是想尋求通用解法, 那就應先學數學裏的羣論 group theory
2014-03-07 15:00:04	CindyLinz	然後正在猶豫要疊兩次 flip, 還是就認命照原有的順序寫, 放一對距離很遠的括號 ^^|  不過現在大概會寫一個 helper 來用吧
2014-03-07 15:00:30	CindyLinz	對所以突然想說上來問問大家好了 ^^
2014-03-07 15:01:16	CindyLinz	這種換順序的 helper 應該取什麼名字好?
2014-03-07 15:01:50	CindyLinz	flip313 ? (總共3個, 把第1個, 搬到第3個)
2014-03-07 15:02:24	CindyLinz	好像不用知道總共幾個, 反正就是從前面數.. 那可以叫 flip13
2014-03-07 15:03:36	CindyLinz	嗯, flip13 這名字好像很有氣勢 XD
2014-03-07 15:04:55	godfat	CindyLinz, https://gist.github.com/godfat/9406676
2014-03-07 15:06:21	godfat	flip13 比 flip313 為啥比較有氣勢？ = =...
2014-03-07 15:06:22	godfat	是說 template 我是沒用過，所以不明白你寫的 flip' template 跟 flip' function 有啥不同 XD
2014-03-07 15:06:29	godfat	少一個 function call...?
2014-03-07 15:06:32	CindyLinz	像是惡靈13什麼的 XDrz
2014-03-07 15:06:35	monochrom	看來是時候聲稱不懂 C++ 了
2014-03-07 15:07:24	CindyLinz	原來是函數呼叫的結果再呼叫一次 :p
2014-03-07 15:07:39	CindyLinz	godfat: 把 haskell template 想成 C++ 的巨集好了 XD
2014-03-07 15:07:58	CindyLinz	但是 type safe!
2014-03-07 15:09:04	godfat	不過要省掉那個 bind 好像只有 boost phoenix?
2014-03-07 15:09:04	godfat	http://www.boost.org/doc/libs/1_55_0/libs/phoenix/doc/html/index.html
2014-03-07 15:09:04	godfat	CindyLinz, 我的意思是 runtime 上有差嗎？如果能用 function 為何不用 function..?
2014-03-07 15:09:08	CindyLinz	我想的是 flip' 1 2 = flip    flip' 1 3 = \f b c a -> f a b c     flip' 2 3 = \f a c b -> f a b c
2014-03-07 15:09:36	CindyLinz	godfat: 因為以為直接用函數寫不出來 ._.
2014-03-07 15:10:08	godfat	喔喔，可以任意 flip 的 flip
2014-03-07 15:11:17	godfat	搞不好也是可以，不過大概會很複雜..
2014-03-07 15:15:39	CindyLinz	試試看 ._.
2014-03-07 15:21:59	CindyLinz	怪怪的....
2014-03-07 15:22:15	CindyLinz	應該先寫下這個 gflip 的 type 的
2014-03-07 15:22:22	CindyLinz	然後就會覺得好像寫不出來.. @@"
2014-03-07 15:22:53	godfat	之前看過個可以吃掉任意 arg 的 function, 可能類似那樣，玩弄 type class
2014-03-07 15:22:53	CindyLinz	gflip :: Int -> Int -> (某函數) -> (某函數)
2014-03-07 15:23:10	CindyLinz	這邊這兩個某函數的 type 寫不出來 orz
2014-03-07 15:23:28	godfat	http://blogger.godfat.org/2009/12/varargs-in-haskell.html
2014-03-07 15:23:56	CindyLinz	但那個 varargs 的函數的 return type 是固定的啊
2014-03-07 15:24:38	CindyLinz	或說, 不能 depend on arg type
2014-03-07 15:25:03	godfat	不知道... XD
2014-03-07 15:26:31	CindyLinz	覺得 agda 好像可以搞這種的... 但那就不是 haskell 了, 要拒絕向惡魔祈禱, 掉進去就出不來了..XD
2014-03-07 15:26:39	godfat	XDDD
2014-03-07 15:31:44	CindyLinz	寫 flip13 的 type 和函數定義長得幾乎一模一樣, 寫兩遍好笨 XD
2014-03-07 15:52:35	-->	hashcat_ (~hashcat_@106.65.76.62) has joined #haskell.tw
2014-03-07 15:52:35	-->	ouie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-07 15:52:35	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-07 15:52:35	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-xqyljxyxmgfnwxup) has joined #haskell.tw
2014-03-07 15:52:35	-->	favonia (~favonia@pool-71-126-46-50.pitbpa.east.verizon.net) has joined #haskell.tw
2014-03-07 15:55:22	<--	superbil (uid12362@gateway/web/irccloud.com/x-ddsjdrjujupmnsaz) has quit (Ping timeout: 245 seconds)
2014-03-07 15:57:53	-->	superbil (uid12362@gateway/web/irccloud.com/x-azvjyabayetunotb) has joined #haskell.tw
2014-03-07 16:31:25	-->	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has joined #haskell.tw
2014-03-07 16:41:35	godfat	忽然在想，有語意的 diff 是不錯，不過似乎會變成寫錯的不能 commit
2014-03-07 16:41:35	godfat	嗯，可能也是好事 XD
2014-03-07 16:43:26	hashcat	啥麼語意
2014-03-07 16:43:59	hashcat	有語意的話要靠公設和命題, 這樣就成了定理證明器
2014-03-07 16:44:00	godfat	例如我用 a 語言寫程式，commit, commit, 然後看 diff, 現在大多是語法上的 diff
2014-03-07 16:44:18	godfat	更正，文字上，連語法都談不成
2014-03-07 16:44:23	hashcat	附帶語意網的git
2014-03-07 16:45:01	hashcat	Haskell的型別系統多少也是能糾正語意錯誤
2014-03-07 16:45:05	godfat	不知道範圍怎麼界定
2014-03-07 16:45:05	godfat	比方說 f = 1 + 2
2014-03-07 16:45:06	godfat	改成 f = 1 * 2
2014-03-07 16:45:06	godfat	他會知道改的語意是從 + 變 *
2014-03-07 16:45:33	hashcat	哦
2014-03-07 16:45:49	hashcat	我想到 Ada Spark 和 prolog
2014-03-07 16:46:03	godfat	有現行的？
2014-03-07 16:46:16	hashcat	用於寫程序的定理證明器
2014-03-07 16:46:41	hashcat	因為符合某個語意就代表他會有一票性質符合某個命題
2014-03-07 16:47:11	hashcat	http://en.wikipedia.org/wiki/SPARK_%28programming_language%29
2014-03-07 16:47:39	hashcat	所以你把+改成*他就會偵測到某些命題的真值被改變
2014-03-07 16:49:05	hashcat	http://en.wikipedia.org/wiki/Formal_methods
2014-03-07 16:49:20	hashcat	這種是那些語意方法的通稱
2014-03-07 16:50:21	hashcat	貌似沒有C++的工具
2014-03-07 16:50:38	hashcat	最需要的反而沒有暈
2014-03-07 16:54:06	godfat	好像不錯，晚點再看.. XD
2014-03-07 16:54:55	hashcat	結論是"語意"是用一票命題來確認的
2014-03-07 16:56:03	godfat	嗯嗯，所以沒辦法在不多做事的情況下做語意 diff 了
2014-03-07 17:02:20	hashcat	當然說得是數學的那種語意
2014-03-07 17:03:06	hashcat	要電腦看到冰淇淋三個字就能自己冒出冰淇淋的圖像也太超過啦
2014-03-07 17:05:16	-->	suhorng (~suhorng@118-166-45-3.dynamic.hinet.net) has joined #haskell.tw
2014-03-07 17:05:30	suhorng	Real World OCaml!!!! https://realworldocaml.org/v1/en/html/index.html
2014-03-07 17:05:39	suhorng	不知道之前有沒有貼過
2014-03-07 17:06:05	hashcat	用prolog的話... 語意即程序
2014-03-07 17:06:50	hashcat	所以研究prolog就是減少語法的腦力消耗, 深入語意這方面的性質
2014-03-07 17:08:09	hashcat	又是Real World
2014-03-07 17:08:18	suhorng	真實世界很棒阿XD
2014-03-07 17:08:30	hashcat	每次real world都是fake world
2014-03-07 17:09:19	hashcat	當然是要有些實用
2014-03-07 17:09:30	hashcat	實際例子才能叫real world吧
2014-03-07 17:09:57	hashcat	像是某公司的訊號分析器的ocaml源代碼之類的
2014-03-07 17:10:15	hashcat	自己想像的的real world是哪門子的real world
2014-03-07 17:10:52	hashcat	充其量只是語法介紹書
2014-03-07 17:12:07	suhorng	好吧XD 看目錄好像確實 Real World Haskell比較 real world 一點
2014-03-07 17:12:50	hashcat	讓我想到妙禪和山達基
2014-03-07 17:13:11	hashcat	解決你人生中的問題
2014-03-07 17:17:44	CindyLinz	godfat: 可以加上 draft mode, 標 draft 的 commit 可以是 compile 不能的程式
2014-03-07 17:18:20	CindyLinz	godfat: 然後 語意 diff 的功能只應用在非 draft 的 commit 之間
2014-03-07 17:19:05	CindyLinz	godfat: 我覺得語意 diff 先只要能處理縮排和多餘空白的相容, 就已經幫助很大了 ^^
2014-03-07 17:20:32	godfat	CindyLinz, hashcat, 我剛剛碰到的狀況是，我移動 function 定義的位置，然後加了一行。實際上我只想看到多一行而已，不想看到整個文件大移動這樣
2014-03-07 17:23:01	hashcat	哦那簡單多拉
2014-03-07 17:26:24	CindyLinz	godfat: 這也很實用.... 但好像比空白又難了些 :p
2014-03-07 17:26:32	hashcat	http://en.wikipedia.org/wiki/Longest_common_subsequence_problem
2014-03-07 17:27:20	hashcat	diff可以辦到吧
2014-03-07 17:27:28	CindyLinz	但我沒有想通的一個點是.... 傳統的版本控制是直接要求檔案的 byte 對 byte 要完全一樣
2014-03-07 17:27:48	CindyLinz	而用了這種比較寬容的 diff, 會把 byte 對 byte 不一樣的檔案視為一樣
2014-03-07 17:28:05	godfat	我想這也得讓 diff 程式知道什麼是 function, 最好還能跨檔案，例如 function a 都是在 module m 下，但檔案位置移動時可以知道沒有改變
2014-03-07 17:28:08	CindyLinz	那麼, 是大家 repository 裡面就各自放長得不一樣的檔案嗎?
2014-03-07 17:28:32	CindyLinz	godfat: 那你的 refactor 會不會就白做了? 就只有你自己的 local 版本有變...
2014-03-07 17:28:33	godfat	應該沒錯？
2014-03-07 17:28:49	CindyLinz	因為 diff 說, 你 refactor 完以後的程式和之前的程式是 equivalent 的...
2014-03-07 17:28:56	godfat	喔，commit 得記得 bytes diff, 但是 diff viewer 需要另一種顯示
2014-03-07 17:29:07	CindyLinz	喔喔 只是查看的時候用?
2014-03-07 17:29:11	godfat	對
2014-03-07 17:30:28	CindyLinz	可惜程式碼沒有 normal form.. XD
2014-03-07 17:30:36	CindyLinz	沒有「好的」normal form..
2014-03-07 17:31:23	godfat	所以我一向吃掉所有 trailing whitespaces, 至少是最簡單的一步 :s
2014-03-07 17:31:42	CindyLinz	godfat: 那最後一行最後面的 new-line 要不要吃掉? XD
2014-03-07 17:32:04	godfat	我是固定第一行和最後一行保留一個 LF
2014-03-07 17:32:16	CindyLinz	不過 trailing whitespace 在 markdown 裡是有意義的 @@"
2014-03-07 17:32:36	godfat	這曾經讓我感到非常困擾 >< 後來怎麼解決忘記了...
2014-03-07 17:32:42	CindyLinz	編輯這種檔案就希望 editor 會把 trailing white space 標成紅底色
2014-03-07 17:32:54	CindyLinz	一點都不想處理看不見的程式碼......ww
2014-03-07 17:32:56	godfat	我 vim 也是這樣做，也會標 tab
2014-03-07 17:32:57	<--	suhorng (~suhorng@118-166-45-3.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-07 17:33:25	CindyLinz	想到線上遊戲的技能: 射出看不見的箭 XD
2014-03-07 17:47:34	CindyLinz	refactor 中, 修到某一步, ghc 噴出來的 error 有 1004 行, 真過癮....ww
2014-03-07 18:08:34	CindyLinz	把 cabal build 改成 cabal build 2>&1 | less   不然每次翻頁好累 orz
2014-03-07 18:08:47	CindyLinz	第一個 error 最重要啊 XD
2014-03-07 18:18:22	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-07 18:43:37	<--	hashcat_ (~hashcat_@106.65.76.62) has quit (Ping timeout: 240 seconds)
2014-03-07 19:06:58	godfat	時間零不應該視為 false 居然需要這麼長篇大論論述才能接受？
2014-03-07 19:06:58	godfat	https://mail.python.org/pipermail/python-ideas/2014-March/026647.html
2014-03-07 19:08:09	<--	b4284 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-07 19:27:15	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-07 20:00:26	-->	b4283 (~b4283@218-164-123-36.dynamic.hinet.net) has joined #haskell.tw
2014-03-07 20:01:19	<--	godfat (~Adium@36-225-52-21.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-03-07 20:01:58	CindyLinz	XD
2014-03-07 20:53:39	-->	godfat (~Adium@1-160-161-33.dynamic.hinet.net) has joined #haskell.tw
2014-03-07 20:54:21	-->	godfat1 (~Adium@1-160-161-33.dynamic.hinet.net) has joined #haskell.tw
2014-03-07 20:54:21	<--	godfat (~Adium@1-160-161-33.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-07 22:02:15	<--	b4283 (~b4283@218-164-123-36.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-07 22:18:53	-->	b4283 (~b4283@218-164-217-31.dynamic.hinet.net) has joined #haskell.tw
2014-03-07 22:58:29	CindyLinz	undefined 是很棒的 XXX 註解法
2014-03-07 22:58:34	CindyLinz	還可以這樣寫:
2014-03-07 22:58:46	CindyLinz	undefined "Need implement 某東西"
2014-03-07 23:33:15	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-07 23:40:55	 *	monochrom 讀博士時就是 formal methods 範圍
2014-03-07 23:46:15	monochrom	時間本來就不應視為布爾值. 布爾值本來就不應視為時間. 刻意把它們混淆, 一開始就輸了, 之後怎樣兩相對映都是胡說八道
2014-03-07 23:47:41	monochrom	又例如, 如果把溫度視為布爾值, 那麼是不是攝氏0度及華氏0度都視為false?
2014-03-07 23:48:10	petercommand11	kelvin表示:
2014-03-07 23:52:38	monochrom	當然, 時間0不應該視為 false 需要長篇大論論述才能接受, 完全等於: 信了邪教的人需要長篇大論論述才不再信. 信了歪理很久的人, 當然需要長篇大論才重新明白顯淺道理.
2014-03-08 00:08:30	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-08 00:09:04	godfat1	是說我也是看了那串才知道 python 把空字串當 false
2014-03-08 00:09:04	--	godfat is now known as 7JTAAIB9M
2014-03-08 00:09:04	--	godfat1 is now known as godfat
2014-03-08 00:09:04	<--	godfat (~Adium@1-160-161-33.dynamic.hinet.net) has quit (Excess Flood)
2014-03-08 00:09:47	7JTAAIB9M	然後我得承認我曾誤信 c 過，我猜 XD
2014-03-08 00:09:51	--	7JTAAIB9M is now known as godfat
2014-03-08 00:10:00	godfat	7JTAAIB9M 哪裡來的...
2014-03-08 00:10:36	monochrom	隨機的臨時 nick :)
2014-03-08 00:10:56	godfat	freenode 的機制嗎？ @@
2014-03-08 00:11:30	monochrom	說來話長, 不過, 是.
2014-03-08 00:13:21	godfat	ok XD
2014-03-08 00:14:03	letoh	我覺得 python 的條件判斷規則有點怪  但其實還不錯用XD
2014-03-08 00:14:29	godfat	怎麼說？
2014-03-08 00:15:08	letoh	很多空的東西都可以當作 false
2014-03-08 00:15:14	letoh	然後還有一個 None
2014-03-08 00:15:42	letoh	我本來比較習慣只有一個 #f XD
2014-03-08 00:16:53	letoh	然後真正需要 None 的時候要用 xxx is None 來判斷
2014-03-08 00:18:15	godfat	用個 empty? 來判斷不是比較顯然 (explicit) 嗎？
2014-03-08 00:19:00	letoh	對啊  用 empty? 都比現在 python 的做法好
2014-03-08 00:19:54	godfat	ruby 這邊的作法是 nil 跟 false 是 false, 其他都是 true
2014-03-08 00:21:09	CindyLinz	perl 把 0, '', '0', undef 當 false, 其他當 true
2014-03-08 00:21:42	CindyLinz	php..... 0, '', array(), null
2014-03-08 00:21:45	letoh	'0' 當作 false 不科學XD
2014-03-08 00:22:03	godfat	但很 javascript (無誤?
2014-03-08 00:22:06	CindyLinz	perl 的哲學是沒有 type, 所以 0 和 '0' 是一樣的
2014-03-08 00:22:06	letoh	XD
2014-03-08 00:22:07	CindyLinz	no
2014-03-08 00:22:12	CindyLinz	javascript '0' 是 true
2014-03-08 00:22:17	godfat	....orz
2014-03-08 00:22:29	monochrom	我認為應該寫明你在測試甚麼.
2014-03-08 00:22:45	CindyLinz	javascript 還是有 type, 而且很明顯 @@"  a+b 可能是數字加也可能是字串相接 @@"
2014-03-08 00:23:10	CindyLinz	perl 的 '0' + '3' 還是 3... javascript 就變 '03' 了
2014-03-08 00:24:08	monochrom	然後對於 list, set 之類, 甚至跟本不應用 if-then-else, 應用 pattern matching. 例如 list: case mylist of [] -> a; x:xs -> b
2014-03-08 00:24:27	CindyLinz	perl 程式的確習慣會寫明我們在測試什麼
2014-03-08 00:24:45	CindyLinz	當數字用會用 ==, 當字串用要用 eq, 什麼都沒有的時候當 bool 用..
2014-03-08 00:25:32	monochrom	因為 mylist 不空的話, 你還會有後著, 要抽取其中一員甚麼的. 何不一次過既測試又抽取.
2014-03-08 00:25:50	monochrom	http://www.vex.net/~trebla/haskell/crossroad.xhtml
2014-03-08 00:26:53	godfat	真是看到哪裡覺得不對來這裡抱怨就對了（誤
2014-03-08 00:27:25	CindyLinz	monochrom: 因為我們要貫徹 do one thing and do it well 的原則, 所以不可以既測試又抽取.. (逃)
2014-03-08 00:27:55	CindyLinz	godfat: 被你說成取暖舔傷區了... QQ
2014-03-08 00:28:20	godfat	XDDDD
2014-03-08 00:28:23	monochrom	清醒程式員互助會 :)
2014-03-08 00:30:08	<--	b4283 (~b4283@218-164-217-31.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-08 00:31:15	CindyLinz	不過那個 time 啊.. 如果是用 unix epoch time 的話, 把 0 當 false 就沒那麼嚴重了吧.. 反正是個用不到的廢域 XD
2014-03-08 00:31:29	monochrom	我知道你在說笑. 不過, 回到認真的話, 我那篇文有解釋為甚麼在這件事上, 一件頭簡單過分拆.
2014-03-08 00:31:32	CindyLinz	但如果是 time interval 就比較恐怖了
2014-03-08 00:32:50	CindyLinz	來認真讀一下 ^^
2014-03-08 00:34:35	monochrom	unix epoch 是 1970 年嗎? 但我早過它一年出生.
2014-03-08 00:35:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-xqyljxyxmgfnwxup) has quit (Quit: Connection closed for inactivity)
2014-03-08 00:35:44	monochrom	我要學聖經裏的人物 約伯 嗎? "願我的生日受詛咒, 列入 unix time 的廢域" XD
2014-03-08 00:36:47	godfat	XDDDD 1970-01-01 00:00:00
2014-03-08 00:37:05	godfat	這刻出生的人不知有多少
2014-03-08 00:37:05	CindyLinz	啊拿來記生日的話還是不行....
2014-03-08 00:37:19	godfat	可以用負數（誤
2014-03-08 00:37:27	CindyLinz	記生日的話負的還是不行啊
2014-03-08 00:37:42	godfat	因為..?
2014-03-08 00:37:50	CindyLinz	只是我用它的時候都是用來記錄正在發生的事情, 所以不用考慮過去太久的時間
2014-03-08 00:37:57	CindyLinz	1970 以前就是負的啊
2014-03-08 00:38:26	godfat	對啊，用負的有關係嗎？ XDDD
2014-03-08 00:38:56	monochrom	或者不少程式用 unsigned
2014-03-08 00:39:08	-->	hashcat__ (~kv2a@111-254-169-7.dynamic.hinet.net) has joined #haskell.tw
2014-03-08 00:39:09	<--	hashcat__ (~kv2a@111-254-169-7.dynamic.hinet.net) has quit (Client Quit)
2014-03-08 00:39:43	CindyLinz	欸不是, 我回答的是拿來當 false 可能會出問題
2014-03-08 00:40:00	<--	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has quit (Read error: Operation timed out)
2014-03-08 00:40:23	godfat	1970-01-01 00:00 是唯一假
2014-03-08 00:41:20	monochrom	設想一下: 成人網頁:"你幾時出生?" 我:"1969年" 成人網頁:"即是2037年. 小子, 你還未夠班" XD
2014-03-08 00:42:46	godfat	XDDDD
2014-03-08 00:43:03	CindyLinz	我們家統計玩家資料, 所有生日在 1.1 的都不算...
2014-03-08 00:43:26	CindyLinz	避開了 1970.1.1 的問題, 也避開了玩家亂填時填 1.1 的機率特別高
2014-03-08 00:44:51	letoh	所以實際上填 1.1 的真的很多嗎?
2014-03-08 00:47:11	monochrom	有沒有人試過填 13 月 42 日呢? :)
2014-03-08 00:47:36	godfat	我確實常常填 1970-01-01 XDD
2014-03-08 00:49:24	letoh	可以亂填的時候，我通常都填當天日期  年份就倒推 20 年
2014-03-08 00:51:40	CindyLinz	那沒差, 因為是作統計, 均勻的亂填就沒什麼大影響
2014-03-08 00:51:51	CindyLinz	但 1.1 會吸一大堆人...
2014-03-08 00:56:10	CindyLinz	pattern matching 配上 ViewPatterns 就更好用了 ^^
2014-03-08 00:58:16	CindyLinz	雖然 GHC ViewPatterns 說明裡給的例子有些用法看起來很邪門, 我不太確定那是不是應該鼓勵的用法 @@"
2014-03-08 00:58:39	CindyLinz	example :: ((String -> Integer,Integer), String) -> Bool
2014-03-08 00:58:44	CindyLinz	example ((f,_), f -> 4) = True
2014-03-08 00:59:35	godfat	,_),
2014-03-08 00:59:48	CindyLinz	godfat: 你的斷句法更邪門...... www
2014-03-08 00:59:54	godfat	XDDD
2014-03-08 01:16:41	monochrom	是呀, ViewPatterns 可以做 f (minView -> Nothing) = a; f (minView -> Just (x, more)) = b. (minView 屬於 Data.Set)
2014-03-08 01:17:59	monochrom	用 pattern matching 就從來不存在 "好不好空集代表false" 的問題, 因為根本不需要
2014-03-08 02:12:51	CindyLinz	yet another 勸世文.. XD # http://www.vaikan.com/object-oriented-programming-is-dead/
2014-03-08 02:14:03	godfat	quote: 並不是任何東西都可以成為對象
2014-03-08 02:19:05	CindyLinz	不要 oriented 就好了 :|
2014-03-08 02:20:33	CindyLinz	為什麼能面試得到這種人啊.. 好難想像 ._. # 有一个做招聘工作的人回复道“我已经疲倦了面试那些只知道Haskell语言却不会使用C里的strlen()函数的实习生。”
2014-03-08 02:23:27	godfat	會不會是說不知道 strlen 可能不安全？
2014-03-08 02:23:33	CindyLinz	噢....
2014-03-08 02:23:49	CindyLinz	這個不會使用不知道是指什麼 XD
2014-03-08 02:24:19	CindyLinz	今天在讀 Exception 的時候突然想到一件事
2014-03-08 02:24:33	godfat	不會拿來做 buffer overflow XDD
2014-03-08 02:24:42	CindyLinz	Haskell (至少 GHC) 裡面有實作處理 asynchronous exception 的機制
2014-03-08 02:25:02	CindyLinz	而這個東西... 好像在我比較熟知的高階語言裡都沒有了?
2014-03-08 02:25:23	CindyLinz	Java 把 Thread.kill (還是 Thread.stop) 列為 deprecated
2014-03-08 02:25:59	CindyLinz	C++ 的話.. 反正 undefined 是它的天性, 所以很好實作, 但好像也沒什麼討論的意義 :/
2014-03-08 02:26:31	godfat	asynchronous exception 真的超難搞呀，之前在弄 ruby 的，搞到我暫時放棄 orz
2014-03-08 02:27:00	CindyLinz	go 是 cooperative 的所以應該沒有這種東西, perl 的 ithread... 嗯 沒有在用, 沒印象有這種東西
2014-03-08 02:27:26	godfat	go 沒有是什麼情況呀？
2014-03-08 02:27:31	godfat	我以為有 thread?
2014-03-08 02:27:47	CindyLinz	是 goroutine, 同時只有一個人在跑, 所以別人也不會醒過來 kill 它吧?
2014-03-08 02:28:08	CindyLinz	我記得它們都是用 channel 來溝通啊
2014-03-08 02:28:58	CindyLinz	Haskell 處理 async exception 的函數, type 的確是長得很噁心.. mask :: ((forall a. m a -> m a) -> m b) -> m b
2014-03-08 02:29:02	godfat	喔喔，反正全部透過 channel, 是否一起跑就不重要了
2014-03-08 02:29:54	godfat	沒用過 :s 也許應該參考一下，我之前一直弄不好，都有怪怪的情況
2014-03-08 02:30:05	CindyLinz	但好像設計得這麼噁心才能保證開了一定關, 而且不會有某個瞬間漏抓
2014-03-08 02:31:10	CindyLinz	用法是這樣 mask (\unmask -> do { 不能被打斷的工作 ; unmask ( do { 可以被打斷的工作 } ) ; 不能被打斷的工作 })
2014-03-08 02:31:51	letoh	看起來就像一堆 lock/unlock
2014-03-08 02:32:01	godfat	噢，我正是需要這樣...
2014-03-08 02:32:03	CindyLinz	有點好奇, 這會不會是 Haskell 一個很有殺傷力的 feature
2014-03-08 02:33:00	CindyLinz	letoh: 我是把它理解為 x86 組語裡面的 interrupt mask
2014-03-08 02:33:06	godfat	我是寫半天才發現 ruby 的 ensure 如果有 async exception, 可能不被執行。也就是說，如果我用了 async exception, 那程式裡根本就不會有安全的程式，也就是我完全不能 lock!
2014-03-08 02:33:58	CindyLinz	好像是 cli 和 sti?
2014-03-08 02:34:08	letoh	CindyLinz: 嗯  我覺得是一樣的，應該有不少 lock 實作裡面就是去操作 interrupt mask
2014-03-08 02:36:56	monochrom	@type callCC
2014-03-08 02:36:56	lambdabot	MonadCont m => ((a -> m b) -> m a) -> m a
2014-03-08 02:37:41	monochrom	CindyLinz: mask 用法和用意正是你所說
2014-03-08 02:38:02	CindyLinz	嗯嗯嗯
2014-03-08 02:38:48	CindyLinz	想用來殺 Java.. ._.  殺手面罩 -- kill & mask
2014-03-08 02:39:24	monochrom	這是比 lock, unlock 好一點的, 因為 mask 記得幫你開頭lock, 結尾unlock. unmask亦類同.
2014-03-08 02:39:47	CindyLinz	嗯 自動成對
2014-03-08 02:40:27	CindyLinz	而且還把 建立 清除 這兩個 critical section 都成對了
2014-03-08 02:41:13	monochrom	所以話, 高秩函數 higher-order function 多好! :)
2014-03-08 02:42:20	CindyLinz	那個 mask 的 type, 要開 RankNTypes extension 才能 compile... ._.
2014-03-08 02:43:43	monochrom	因為它的確是 higher-rank type. (rank 又跟 order 不同, 哈哈, 死未!)
2014-03-08 02:44:40	CindyLinz	開 Rank2Types 還不夠..  然後沒有 Rank3Types, 只有 RankNTypes 可以開了
2014-03-08 02:45:39	monochrom	order譯作秩(還是序呢?), level譯作階(high-level language 高階語言), 那麼rank怎樣譯才好呢? 詞窮了
2014-03-08 02:46:56	CindyLinz	不知道.. 台灣對專有名辭的英翻中常常是直接列英文 XD
2014-03-08 02:47:00	CindyLinz	不翻
2014-03-08 02:47:04	letoh	對  自動 unlock 的確是方便
2014-03-08 02:47:32	letoh	想了一下不曉得能不能用 c macro 處理掉XD
2014-03-08 02:48:40	CindyLinz	letoh: 要先定義一下 async exception 的來源... 是 signal 嗎?
2014-03-08 02:49:07	letoh	我不太確定我理解的 async exception 對不對
2014-03-08 02:49:13	monochrom	其實, 我還真有本電算學名辭英中對照辭典, 以前在溫哥華某華人書店偶遇的
2014-03-08 02:49:17	letoh	我可以當作 hardware interrupt 嗎?
2014-03-08 02:50:04	CindyLinz	letoh: 如果你說的程式是 OS, 或是在沒有 OS 的地方執行的程式, 或是 driver 的話, 那可以是
2014-03-08 02:50:24	CindyLinz	不然我們一般應用程式不會直接摸到 interrupt 吧?
2014-03-08 02:50:39	letoh	嗯嗯  因為我常常在沒有 os 的環境開發，一時只能聯想到這個XD
2014-03-08 02:51:26	letoh	當然都是封裝過的  但其實還是 interrupt，只是披著羊皮而已
2014-03-08 02:51:36	CindyLinz	嗯嗯嗯
2014-03-08 02:51:56	monochrom	啊, 它譯level做級(高級語言), order譯做階(higher-order logic 高階邏輯)
2014-03-08 02:52:15	CindyLinz	呃... 我比較習慣聽到講高階語言 @@"
2014-03-08 02:52:43	monochrom	它是大陸來的
2014-03-08 02:52:49	CindyLinz	好吧 XD
2014-03-08 02:53:09	monochrom	我也是只見過"高階語言"
2014-03-08 02:53:11	CindyLinz	最高階語言, 又稱中南海語言.. (誤)
2014-03-08 02:53:49	CindyLinz	前一陣子在翻 linux manpage, 發現 out of memory 這種 exception 可以不用處理了.....
2014-03-08 02:53:55	letoh	印象中在台灣一些 lisp 老書看過高級語言這個說法
2014-03-08 02:54:19	letoh	不過那種書通常都是被封印在圖書館，幾十年來只有一兩個人借過那種XD
2014-03-08 02:54:33	CindyLinz	它說 malloc return non-null pointer 的時候, 「不代表」你一定能使用, 它只是就先給你一個 non-null pointer
2014-03-08 02:54:56	CindyLinz	等你真的用下去的時候才會配, 萬一來不及配....
2014-03-08 02:55:08	CindyLinz	它就跑某一段處理常式, 把你的 process 殺了......ww
2014-03-08 02:55:29	monochrom	這本辭典很強的. 下至ink jet printer, 上至 isomorphic graph都有
2014-03-08 02:57:57	monochrom	是呀, linux 給你的是 lazy 記憶. 明白了 lazy 記憶, 那麼學 Haskell 就無難度啦!
2014-03-08 02:59:04	monochrom	這幾天家人外出, 只有我在家, 我也快要實施 lazy 洗碗碟了!
2014-03-08 02:59:33	letoh	缺碗的時候才開始找一個來洗
2014-03-08 02:59:55	CindyLinz	好像有點噁 orz
2014-03-08 03:01:09	letoh	依照那個 non-null 的方法，應該是缺碗時還是會先找個碗，等真的要扒飯的時候...(不敢想像下去了
2014-03-08 03:01:27	CindyLinz	letoh: 你就去廁所 core dump 吧!
2014-03-08 03:01:30	letoh	XD
2014-03-08 03:01:49	letoh	那個 non-null 的處理好噁心...
2014-03-08 03:01:58	monochrom	哈哈哈哈哈
2014-03-08 03:02:08	CindyLinz	他說這樣效率比較好... 的確是沒錯啦.. 只是.........ww
2014-03-08 03:02:52	CindyLinz	然後我電腦上 chromium 每個 tab 開起來就先要個 1.2G.. 當然都是虛的要了沒用 :Q
2014-03-08 03:13:44	CindyLinz	XDD # 面向对象编程语言的问题在于，它总是附带着所有它需要的隐含环境。你想要一个香蕉，但得到的却是一个大猩猩拿着香蕉，而其还有整个丛林。” — Joe Armstrong（Erlang语言发明人）
2014-03-08 03:14:39	letoh	他好像評過不少東西，都蠻有趣的
2014-03-08 03:15:47	CindyLinz	啊忘了貼來源.. 我正在看這篇 :p http://www.vaikan.com/object-oriented-programming-is-inherently-harmful/
2014-03-08 03:16:36	CindyLinz	也是戰神一名嗎? XD
2014-03-08 03:18:29	letoh	harmful stuff XD
2014-03-08 03:47:41	CindyLinz	為什麼 GHC api 自訂自用的 ExceptionMonad 的 mask 裡面沒有寫 forall 啊..... 囧 # http://www.haskell.org/platform/doc/2013.2.0.0/ghc-api/Exception.html#t:ExceptionMonad
2014-03-08 03:48:27	CindyLinz	然後我就不能套用自己已經實作好的 Control.Monad.Catch 的 instance 來用了 orz
2014-03-08 04:33:04	-->	petelchits (~petelchit@91.197.131.76) has joined #haskell.tw
2014-03-08 05:09:11	<--	petelchits (~petelchit@91.197.131.76) has quit (Ping timeout: 264 seconds)
2014-03-08 05:24:37	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Quit: leaving)
2014-03-08 05:24:56	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-08 07:27:39	<--	ouie (~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 244 seconds)
2014-03-08 07:46:38	-->	savelovsky (~savelovsk@62.109.22.245) has joined #haskell.tw
2014-03-08 08:01:45	-->	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has joined #haskell.tw
2014-03-08 08:11:02	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Ping timeout: 264 seconds)
2014-03-08 08:17:01	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-03-08 09:33:53	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 252 seconds)
2014-03-08 10:54:17	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-08 10:54:25	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-08 11:08:08	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-08 11:08:08	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-08 11:08:08	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-08 11:08:08	--	Nicks #haskell.tw: [a2n_ cataska cataska__ cibs CindyLinz cyt93cs darkx drbean favonia godfat hashcat hashcat_ kanru lambdabot letoh logfat___ miaout17 monochrom petercommand11 savelovsky shik superbil]
2014-03-08 11:08:08	--	Channel #haskell.tw: 22 nicks (0 ops, 0 voices, 22 normals)
2014-03-08 11:08:32	--	Mode #haskell.tw [+cnt]
2014-03-08 11:08:32	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-08 11:10:20	-->	b4283 (~b4283@218-164-200-188.dynamic.hinet.net) has joined #haskell.tw
2014-03-08 11:37:50	CindyLinz	Dijkstra 罵人的用語真的不太有水準 XD # “Object-oriented programming is an exceptionally bad idea which could only have originated in California.” — Edsger Dijkstra
2014-03-08 12:17:15	<--	savelovsky (~savelovsk@62.109.22.245) has quit (Remote host closed the connection)
2014-03-08 12:19:05	CindyLinz	這個是 Java 粉的觀點... # http://ingramchen.io/blog/2014/03/learning-deep-and-wide-not-duplicate.html
2014-03-08 12:19:47	CindyLinz	拒絕 scala 的原因有二: 其一是我的實驗失敗了，其二是 Scala 可做到的 Java 都做的到，沒有理由增加員工學習維護的成本。
2014-03-08 12:43:32	cataska__	不知道他的實驗是什麼
2014-03-08 12:44:23	cataska__	Java8 的出現的確會威脅到 Scala
2014-03-08 12:53:50	CindyLinz	還沒有看過 Java8
2014-03-08 12:58:24	CindyLinz	應該也要來了解了解 :Q
2014-03-08 12:59:54	CindyLinz	這不適合閱讀啊... QQ # http://openjdk.java.net/projects/jdk8/features
2014-03-08 13:02:16	CindyLinz	lambda 的用法: (參數列) -> 函數body
2014-03-08 14:24:16	godfat	他的文章往往讓我同意一半，也不能說反對另一半，只是就有點微妙微妙，風格不合吧... 昨天看到一堆人在轉，也是微妙微妙 XDD
2014-03-08 14:30:30	<--	monochrom (trebla@216.138.220.146) has quit (Quit: NO CARRIER)
2014-03-08 14:33:27	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-03-08 14:56:59	cataska__	godfat: 同意哪一半?
2014-03-08 15:00:12	godfat	比方說，追逐類似的 web framework. 不過淺嚐自然不在此限，熟悉 web framework 的人可能花不了多少時間就能大概知道另一個 web framework 的狀況，這樣成本也不高，也是有好處
2014-03-08 15:09:55	godfat	以小結而言... 這句同意：
2014-03-08 15:09:56	godfat	: 研究和學習別的平台怎麼做同樣的事，增廣見聞是好的。但如果你同時會 Spring、Rails、NodeJs、Django 開發 web app，那你可能浪費了無謂的時間，因為他們的成果都一樣。
2014-03-08 15:09:56	godfat	這句反對：
2014-03-08 15:09:56	godfat	: 而且在同個團隊導入重覆功能的技術，只是增加學習和維護的成本，長遠來看是扣分，而不是加分。
2014-03-08 15:10:21	godfat	當然這可能看「同個團隊」要怎麼定義就是了
2014-03-08 15:50:25	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-gapmsuzvwxeqmxox) has joined #haskell.tw
2014-03-08 16:38:27	CindyLinz	喔, 看他的 blog 就可以看到一些「能讀」的 Java 8 介紹了 :p
2014-03-08 16:51:20	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-03-08 16:56:04	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-03-08 16:57:40	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-08 17:29:09	<--	b4283 (~b4283@218-164-200-188.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-08 17:48:23	-->	b4283 (~b4283@218-164-214-156.dynamic.hinet.net) has joined #haskell.tw
2014-03-08 18:13:53	letoh	我還在想昨天那個 mask... 感覺好神奇   CindyLinz 給的例子中間插了一段可以被中斷的工作，意思是這段工作做完後會自動再 mask 回去嗎?
2014-03-08 18:40:09	CindyLinz	letoh: 對, 做完了會回到外層
2014-03-08 18:41:00	CindyLinz	總共有 3 層.. 最外層當作是呼叫 mask 前, 與 mask return 後 (這邊的前後是 syntax 上的, 實際執行順序我不太肯定..)
2014-03-08 18:41:42	CindyLinz	然後中間層, 就是我前一句講的「外層」, 是傳給 mask 的 action; 最內層是傳給中間層收到的 unmask 的 action
2014-03-08 18:42:01	CindyLinz	中間層有 mask, 最內層和最外層沒有 mask
2014-03-08 18:42:04	letoh	嗯嗯  mask; 不可中斷; unmask; 可中斷; mask; 不可中斷; unmask;  這樣?
2014-03-08 18:42:17	CindyLinz	對
2014-03-08 18:42:39	letoh	不過可以自動恢復 context 真是方便
2014-03-08 18:44:38	letoh	為我之前工作上的 code 就有這種情境，要處理完整也是挺傷腦筋
2014-03-08 18:56:25	CindyLinz	嗯嗯
2014-03-08 18:57:17	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-03-08 19:53:14	-->	frishmichael (~frishmich@188.190.127.32) has joined #haskell.tw
2014-03-08 21:20:43	miaout17	他的文章往往讓我同意一半，也不能說反對另一半++
2014-03-08 23:00:07	<--	petercommand11 (~peter@128.199.232.63) has quit (Ping timeout: 265 seconds)
2014-03-08 23:18:49	<--	b4283 (~b4283@218-164-214-156.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-08 23:24:47	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-08 23:31:58	-->	suhorng (~suhorng@118-166-45-3.dynamic.hinet.net) has joined #haskell.tw
2014-03-08 23:32:15	<--	petercommand11 (~peter@128.199.232.63) has quit (Ping timeout: 252 seconds)
2014-03-08 23:33:50	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-08 23:39:20	suhorng	結果還是買了Beginning Haskell XD
2014-03-08 23:54:06	CindyLinz	(Y)
2014-03-09 00:05:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-gapmsuzvwxeqmxox) has quit (Quit: Connection closed for inactivity)
2014-03-09 00:25:59	<--	suhorng (~suhorng@118-166-45-3.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-09 00:44:03	<--	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-09 01:24:25	<--	frishmichael (~frishmich@188.190.127.32) has quit (Read error: Connection reset by peer)
2014-03-09 02:00:14	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-qdabfrzgqfimjrer) has joined #haskell.tw
2014-03-09 05:03:10	-->	ritasap (~ritasap@91.229.76.249) has joined #haskell.tw
2014-03-09 05:15:16	<--	ritasap (~ritasap@91.229.76.249) has quit (Remote host closed the connection)
2014-03-09 08:56:05	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 265 seconds)
2014-03-09 09:59:27	-->	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has joined #haskell.tw
2014-03-09 10:05:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-qdabfrzgqfimjrer) has quit (Quit: Connection closed for inactivity)
2014-03-09 10:12:33	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-oiobixorqxafcagy) has joined #haskell.tw
2014-03-09 10:35:48	-->	jiajun (~jiajun@218.64.17.174) has joined #haskell.tw
2014-03-09 11:45:33	-->	b4283 (~b4283@218-164-204-101.dynamic.hinet.net) has joined #haskell.tw
2014-03-09 12:51:41	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-03-09 13:24:22	<--	jiajun (~jiajun@218.64.17.174) has quit (Excess Flood)
2014-03-09 13:25:37	-->	jiajun_ (~jiajun@218.64.17.174) has joined #haskell.tw
2014-03-09 13:27:48	<--	jiajun_ (~jiajun@218.64.17.174) has quit (Client Quit)
2014-03-09 15:08:56	CindyLinz	唔.. Java 8 雖然有 lambda, 但不能用 generic method.. 也就是寫不出象 public <T> T f(...) 這樣的函數
2014-03-09 15:12:01	letoh	c++ 好像也有打算弄 generic lambda
2014-03-09 15:18:42	CindyLinz	真是辛苦了....
2014-03-09 16:58:01	<--	favonia (~favonia@pool-71-126-46-50.pitbpa.east.verizon.net) has quit (Ping timeout: 240 seconds)
2014-03-09 18:44:08	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-09 19:16:37	-->	caasih (~caasiHuan@114-46-149-110.dynamic.hinet.net) has joined #haskell.tw
2014-03-09 19:19:00	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-09 20:20:35	<--	b4283 (~b4283@218-164-204-101.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-09 21:18:41	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-09 21:22:32	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-09 21:45:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-oiobixorqxafcagy) has quit (Quit: Connection closed for inactivity)
2014-03-09 22:26:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-09 23:16:57	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-09 23:26:10	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-jincqlujvhvkpcbx) has joined #haskell.tw
2014-03-09 23:49:41	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-09 23:55:58	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Ping timeout: 244 seconds)
2014-03-10 01:24:33	<--	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-10 03:35:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-jincqlujvhvkpcbx) has quit (Quit: Connection closed for inactivity)
2014-03-10 04:01:33	-->	nmarietta (~nmarietta@62.122.73.216) has joined #haskell.tw
2014-03-10 04:10:52	<--	caasih (~caasiHuan@114-46-149-110.dynamic.hinet.net) has quit (Remote host closed the connection)
2014-03-10 06:36:46	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-10 07:13:18	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-rcnheqfbijdyrijg) has joined #haskell.tw
2014-03-10 08:11:14	-->	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has joined #haskell.tw
2014-03-10 09:39:33	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-10 09:40:06	<--	mno2 (~mno2@202.63.156.211) has quit (Client Quit)
2014-03-10 10:20:47	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-10 10:58:58	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-10 11:04:19	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-10 11:16:22	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-10 11:22:44	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-10 11:33:06	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-10 11:35:03	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-10 12:56:04	-->	mno2 (~mno2@bb116-14-161-193.singnet.com.sg) has joined #haskell.tw
2014-03-10 13:20:22	<--	mno2 (~mno2@bb116-14-161-193.singnet.com.sg) has quit (Ping timeout: 265 seconds)
2014-03-10 13:52:58	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-10 14:08:29	<--	nmarietta (~nmarietta@62.122.73.216) has quit (Ping timeout: 240 seconds)
2014-03-10 14:30:20	-->	23LAANAEQ (~sergekane@188.190.127.61) has joined #haskell.tw
2014-03-10 14:45:35	-->	godfat (~Adium@36-225-51-140.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-10 15:04:15	<--	23LAANAEQ (~sergekane@188.190.127.61) has quit (Remote host closed the connection)
2014-03-10 16:10:33	-->	weie (~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-10 16:54:30	<--	weie (~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-10 16:54:49	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-10 17:59:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-10 18:01:42	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-10 18:35:30	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-10 20:21:42	-->	b4283 (~b4283@218-164-215-32.dynamic.hinet.net) has joined #haskell.tw
2014-03-10 20:23:46	-->	jiajun (~jiajun@218.64.17.174) has joined #haskell.tw
2014-03-10 20:58:42	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-10 20:58:56	<--	godfat (~Adium@36-225-51-140.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-03-10 21:33:48	-->	suhorng (~suhorng@118-166-50-145.dynamic.hinet.net) has joined #haskell.tw
2014-03-10 21:57:08	-->	godfat (~Adium@1-160-160-224.dynamic.hinet.net) has joined #haskell.tw
2014-03-10 21:58:22	<--	hashcat (~kv2a@111-254-169-7.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-10 22:10:00	<--	suhorng (~suhorng@118-166-50-145.dynamic.hinet.net) has quit (Ping timeout: 244 seconds)
2014-03-10 22:49:08	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Remote host closed the connection)
2014-03-10 22:49:09	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-03-10 22:49:09	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Ping timeout: 265 seconds)
2014-03-10 22:49:09	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Excess Flood)
2014-03-10 22:49:10	<--	jiajun (~jiajun@218.64.17.174) has quit (Ping timeout: 264 seconds)
2014-03-10 22:51:13	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-03-10 22:52:05	-->	suhorng (~suhorng@118-166-50-145.dynamic.hinet.net) has joined #haskell.tw
2014-03-10 22:53:00	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-10 22:53:04	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-10 22:53:18	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-10 22:53:19	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-10 22:53:36	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-10 22:59:28	-->	jiajun (~jiajun@218.64.17.174) has joined #haskell.tw
2014-03-10 23:10:32	<--	jiajun (~jiajun@218.64.17.174) has quit (Ping timeout: 265 seconds)
2014-03-10 23:12:18	<--	b4283 (~b4283@218-164-215-32.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-10 23:50:09	<--	suhorng (~suhorng@118-166-50-145.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-11 01:28:22	<--	miaout17 (~miaout17@miaout17.net) has quit (Ping timeout: 264 seconds)
2014-03-11 01:28:39	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-11 01:51:34	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-11 02:11:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-11 03:02:07	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-11 03:05:27	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 265 seconds)
2014-03-11 03:22:45	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-11 03:50:58	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-11 04:48:10	<--	letoh (~stackvm@203.67.184.110) has quit (Ping timeout: 264 seconds)
2014-03-11 04:49:54	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Ping timeout: 244 seconds)
2014-03-11 04:59:44	-->	letoh (~stackvm@203.67.184.8) has joined #haskell.tw
2014-03-11 05:05:32	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 05:05:33	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 05:05:51	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 05:05:52	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 05:06:16	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 05:06:17	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 05:06:45	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 05:06:46	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 05:42:00	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-11 07:17:18	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-11 07:56:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-11 10:02:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-11 10:09:21	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-11 10:14:16	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 10:14:17	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 10:14:30	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 10:14:30	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 10:14:48	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 10:14:48	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Excess Flood)
2014-03-11 10:15:00	-->	hashcat_ (~hashcat_@39.14.231.196) has joined #haskell.tw
2014-03-11 10:25:06	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-11 10:43:08	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-11 11:24:50	<--	miaout17 (~miaout17@miaout17.net) has quit (Quit: leaving)
2014-03-11 11:25:54	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-11 13:46:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-11 14:04:58	<--	hashcat_ (~hashcat_@39.14.231.196) has quit (Ping timeout: 264 seconds)
2014-03-11 15:17:59	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-11 15:22:06	-->	hashcat_ (~hashcat_@27.245.176.23) has joined #haskell.tw
2014-03-11 15:32:39	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-11 16:00:40	-->	jiajun (~jiajun@218.64.17.174) has joined #haskell.tw
2014-03-11 16:05:36	<--	jiajun (~jiajun@218.64.17.174) has quit (Quit: Leaving)
2014-03-11 16:06:02	-->	jiajun (~jiajun@218.64.17.174) has joined #haskell.tw
2014-03-11 16:07:44	<--	jiajun (~jiajun@218.64.17.174) has quit (Client Quit)
2014-03-11 16:08:48	-->	gansteed (~gansteed@218.64.17.174) has joined #haskell.tw
2014-03-11 16:37:28	-->	hashcat (~kv2a@114-47-129-51.dynamic.hinet.net) has joined #haskell.tw
2014-03-11 17:48:14	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-11 18:25:05	<--	gansteed (~gansteed@218.64.17.174) has quit (Quit: Leaving)
2014-03-11 18:30:15	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-11 18:55:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-rcnheqfbijdyrijg) has quit (Quit: Connection closed for inactivity)
2014-03-11 19:01:22	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ovjjzkkhwivacojv) has joined #haskell.tw
2014-03-11 19:06:53	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-11 19:13:54	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-11 19:27:10	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-11 19:31:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-11 20:02:31	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-11 20:05:04	-->	b4283 (~b4283@218-164-217-93.dynamic.hinet.net) has joined #haskell.tw
2014-03-11 20:09:11	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Ping timeout: 265 seconds)
2014-03-11 20:14:03	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-11 21:55:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ovjjzkkhwivacojv) has quit (Quit: Connection closed for inactivity)
2014-03-11 23:06:10	<--	hashcat (~kv2a@114-47-129-51.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-11 23:18:36	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-12 00:04:03	<--	b4283 (~b4283@218-164-217-93.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-12 00:20:52	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-12 00:28:01	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Ping timeout: 240 seconds)
2014-03-12 01:25:09	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-12 01:29:33	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Ping timeout: 264 seconds)
2014-03-12 03:16:16	-->	dystrophy (~dystrophy@194.29.185.119) has joined #haskell.tw
2014-03-12 03:24:02	<--	dystrophy (~dystrophy@194.29.185.119) has quit (Remote host closed the connection)
2014-03-12 04:43:39	-->	nunetu (~nunetu@91.233.89.44) has joined #haskell.tw
2014-03-12 04:47:27	<--	nunetu (~nunetu@91.233.89.44) has quit (Remote host closed the connection)
2014-03-12 05:22:50	-->	cataska___ (uid12717@gateway/web/irccloud.com/x-iqablfbidaxolwot) has joined #haskell.tw
2014-03-12 05:27:56	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-rlbfwisvtkdbyfzq) has quit (Ping timeout: 245 seconds)
2014-03-12 05:27:58	--	cataska___ is now known as cataska__
2014-03-12 05:37:08	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-12 05:37:29	<--	godfat (~Adium@1-160-160-224.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-12 05:39:04	<--	hashcat_ (~hashcat_@27.245.176.23) has quit (*.net *.split)
2014-03-12 05:39:09	<--	letoh (~stackvm@203.67.184.8) has quit (*.net *.split)
2014-03-12 05:39:11	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (*.net *.split)
2014-03-12 05:41:13	-->	letoh (~stackvm@203.67.184.8) has joined #haskell.tw
2014-03-12 05:41:13	-->	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-03-12 07:03:25	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-12 08:56:42	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-03-12 08:58:17	<--	cyt93cs_ (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 240 seconds)
2014-03-12 08:58:25	<--	letoh (~stackvm@203.67.184.8) has quit (Ping timeout: 240 seconds)
2014-03-12 08:58:42	-->	letoh (~stackvm@203.67.184.8) has joined #haskell.tw
2014-03-12 09:10:23	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-irmxftpozkrftkpw) has joined #haskell.tw
2014-03-12 09:11:15	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-12 09:19:27	-->	hashcat_ (~hashcat_@27.245.176.23) has joined #haskell.tw
2014-03-12 09:59:46	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-12 11:50:52	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-12 12:38:50	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-12 12:41:09	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-12 13:27:22	-->	godfat (~Adium@36-225-51-140.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-12 13:39:42	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-12 13:42:38	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-12 13:44:33	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-12 14:25:17	-->	hashcat (~kv2a@114-47-129-51.dynamic.hinet.net) has joined #haskell.tw
2014-03-12 14:53:23	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-12 15:40:23	--	a2n_ is now known as a2n
2014-03-12 15:40:31	<--	a2n (~a2n@219.85.185.194) has quit (Changing host)
2014-03-12 15:40:31	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-12 16:32:37	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-12 16:34:44	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-12 16:46:16	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-12 18:54:13	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-12 18:55:57	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-12 20:01:34	-->	b4283 (~b4283@218-164-217-228.dynamic.hinet.net) has joined #haskell.tw
2014-03-12 20:27:30	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-12 20:43:55	<--	godfat (~Adium@36-225-51-140.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-03-12 20:45:12	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-irmxftpozkrftkpw) has quit (Quit: Connection closed for inactivity)
2014-03-12 22:25:12	-->	godfat (~Adium@1-161-55-63.dynamic.hinet.net) has joined #haskell.tw
2014-03-12 22:25:39	-->	godfat1 (~Adium@1-161-55-63.dynamic.hinet.net) has joined #haskell.tw
2014-03-12 22:25:39	<--	godfat (~Adium@1-161-55-63.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-12 22:41:29	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-txbkfayptltbpfcs) has joined #haskell.tw
2014-03-12 23:37:58	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-12 23:39:09	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-12 23:43:55	<--	hashcat (~kv2a@114-47-129-51.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-12 23:51:38	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-12 23:52:29	<--	hashcat_ (~hashcat_@27.245.176.23) has quit (Ping timeout: 240 seconds)
2014-03-12 23:54:54	<--	b4283 (~b4283@218-164-217-228.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-13 01:07:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-03-13 03:02:48	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 265 seconds)
2014-03-13 03:07:29	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-03-13 03:17:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-13 05:34:59	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-13 05:38:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-13 06:06:44	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-13 06:15:22	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-13 06:41:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-13 07:55:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-13 08:36:48	<--	cataska__ (uid12717@gateway/web/irccloud.com/x-iqablfbidaxolwot) has quit (Ping timeout: 265 seconds)
2014-03-13 08:37:08	-->	cataska___ (uid12717@gateway/web/irccloud.com/x-kuquzgynoeubokgu) has joined #haskell.tw
2014-03-13 08:49:51	<--	superbil (uid12362@gateway/web/irccloud.com/x-azvjyabayetunotb) has quit (Ping timeout: 265 seconds)
2014-03-13 08:54:29	-->	superbil (uid12362@gateway/web/irccloud.com/x-wqxzgmjqugfyzbsf) has joined #haskell.tw
2014-03-13 09:10:33	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-13 09:44:18	-->	hashcat (~kv2a@118-171-71-207.dynamic.hinet.net) has joined #haskell.tw
2014-03-13 10:03:08	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-13 10:21:58	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-13 11:38:09	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-13 12:26:58	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-13 14:07:07	<--	godfat1 (~Adium@1-161-55-63.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-13 14:52:14	-->	godfat (~Adium@1-160-84-99.dynamic.hinet.net) has joined #haskell.tw
2014-03-13 17:32:40	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-13 17:54:04	<--	miaout17 (~miaout17@miaout17.net) has quit (Read error: Operation timed out)
2014-03-13 17:55:30	-->	gansteed (~gansteed@218.64.17.188) has joined #haskell.tw
2014-03-13 17:57:24	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-13 18:15:05	<--	gansteed (~gansteed@218.64.17.188) has quit (Quit: Leaving)
2014-03-13 18:26:44	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-13 18:41:10	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-13 19:38:33	<--	godfat (~Adium@1-160-84-99.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-13 20:01:47	-->	b4283 (~b4283@218-164-214-233.dynamic.hinet.net) has joined #haskell.tw
2014-03-13 20:40:28	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-13 20:51:56	-->	godfat (~Adium@1-161-55-63.dynamic.hinet.net) has joined #haskell.tw
2014-03-13 22:54:34	<--	hashcat (~kv2a@118-171-71-207.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-13 23:05:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-txbkfayptltbpfcs) has quit (Quit: Connection closed for inactivity)
2014-03-13 23:59:07	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-14 00:25:01	<--	b4283 (~b4283@218-164-214-233.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-14 00:57:49	favonia	Amazing! # http://www.jsfuck.com/
2014-03-14 01:25:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-14 01:36:17	CindyLinz	......||
2014-03-14 02:00:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-14 02:26:40	-->	somerset (~somerset@188.190.127.29) has joined #haskell.tw
2014-03-14 02:26:42	<--	somerset (~somerset@188.190.127.29) has quit (K-Lined)
2014-03-14 02:53:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-03-14 02:53:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-14 03:11:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-03-14 03:16:57	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-14 03:22:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-14 04:20:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-14 05:55:07	monochrom	jsfuck 應該是靈感來自 brainfuck
2014-03-14 06:58:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-14 07:12:31	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-14 07:49:13	<--	superbil (uid12362@gateway/web/irccloud.com/x-wqxzgmjqugfyzbsf) has quit (Ping timeout: 240 seconds)
2014-03-14 07:49:32	-->	superbil (uid12362@gateway/web/irccloud.com/x-jwlonlpdiczzfzwl) has joined #haskell.tw
2014-03-14 08:44:45	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-fvehyhiuzuyjmzho) has joined #haskell.tw
2014-03-14 08:49:38	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-fvehyhiuzuyjmzho) has quit (Ping timeout: 240 seconds)
2014-03-14 08:50:01	<--	miaout17 (~miaout17@miaout17.net) has quit (Ping timeout: 240 seconds)
2014-03-14 08:50:46	-->	miaout17 (~miaout17@198.211.100.174) has joined #haskell.tw
2014-03-14 08:51:45	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-verwmwvjiontefpt) has joined #haskell.tw
2014-03-14 08:55:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-14 09:08:14	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-14 09:08:15	<--	miaout17 (~miaout17@198.211.100.174) has quit (Ping timeout: 240 seconds)
2014-03-14 09:08:16	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-14 09:08:44	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-14 09:18:01	<--	miaout17 (~miaout17@miaout17.net) has quit (Ping timeout: 240 seconds)
2014-03-14 09:18:36	-->	miaout17 (~miaout17@198.211.100.174) has joined #haskell.tw
2014-03-14 09:27:02	-->	miaout17_ (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-14 09:30:32	<--	miaout17 (~miaout17@198.211.100.174) has quit (Ping timeout: 240 seconds)
2014-03-14 10:32:21	-->	b4283 (~b4283@36-238-132-131.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-14 13:55:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-verwmwvjiontefpt) has quit (Quit: Connection closed for inactivity)
2014-03-14 14:46:44	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-14 16:45:07	-->	hashcat (~kv2a@118-171-71-207.dynamic.hinet.net) has joined #haskell.tw
2014-03-14 16:57:38	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-14 18:40:07	<--	godfat (~Adium@1-161-55-63.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-14 19:08:06	-->	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has joined #haskell.tw
2014-03-14 19:10:14	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-14 19:35:29	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-14 21:14:34	-->	gansteed (~gansteed@218.64.17.174) has joined #haskell.tw
2014-03-14 21:22:50	<--	gansteed (~gansteed@218.64.17.174) has quit (Quit: Leaving)
2014-03-14 21:43:33	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-14 22:10:04	<--	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-14 23:08:27	-->	godfat (~Adium@1-161-55-63.dynamic.hinet.net) has joined #haskell.tw
2014-03-14 23:29:46	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-14 23:31:31	<--	b4283 (~b4283@36-238-132-131.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-03-14 23:47:54	-->	b4283 (~b4283@118.150.156.142) has joined #haskell.tw
2014-03-15 00:05:05	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-15 00:25:54	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-15 00:36:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-03-15 01:27:36	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-15 02:09:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-15 02:16:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-15 03:02:40	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-15 03:18:55	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-15 03:39:22	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-15 03:52:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-15 04:01:17	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-15 04:03:38	<--	godfat (~Adium@1-161-55-63.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-15 05:00:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-15 06:19:37	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-15 06:20:35	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-15 06:27:37	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Ping timeout: 240 seconds)
2014-03-15 06:28:23	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-15 06:28:23	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-15 06:28:43	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-15 06:28:43	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-15 06:29:08	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-15 06:29:08	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-15 06:29:37	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-15 06:29:37	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-15 07:03:01	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-15 07:44:34	<--	b4283 (~b4283@118.150.156.142) has quit (*.net *.split)
2014-03-15 07:49:01	-->	cataska____ (uid12717@gateway/web/irccloud.com/x-iojcwyzihzixbida) has joined #haskell.tw
2014-03-15 07:55:13	-->	monochrm (trebla@216.138.220.146) has joined #haskell.tw
2014-03-15 07:55:54	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-03-15 07:55:56	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-03-15 07:55:57	<--	cataska___ (uid12717@gateway/web/irccloud.com/x-kuquzgynoeubokgu) has quit (*.net *.split)
2014-03-15 07:55:57	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-03-15 07:55:57	--	monochrm is now known as monochrom
2014-03-15 07:56:37	--	cataska____ is now known as cataska___
2014-03-15 08:07:33	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-15 08:26:11	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2014-03-15 08:28:57	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-15 08:36:20	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-15 09:18:12	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-15 09:23:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-15 09:26:18	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-15 09:43:22	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-15 09:48:52	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-15 10:21:25	-->	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 11:02:46	-->	b4283 (~b4283@218-164-200-97.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 12:10:49	<--	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-15 12:21:49	<--	monochrom (trebla@216.138.220.146) has quit (Ping timeout: 265 seconds)
2014-03-15 12:30:37	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-03-15 13:15:34	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-15 13:15:34	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-15 13:15:34	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-15 13:15:34	--	Nicks #haskell.tw: [a2n b4283 cataska cataska___ cibs CindyLinz cyt93cs darkx drbean favonia flter hashcat lambdabot letoh logfat___ miaout17_ mno2 monochrom petercommand11 shik superbil weie]
2014-03-15 13:15:34	--	Channel #haskell.tw: 22 nicks (0 ops, 0 voices, 22 normals)
2014-03-15 13:15:58	--	Mode #haskell.tw [+cnt]
2014-03-15 13:15:58	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-15 13:29:55	-->	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 13:58:22	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-15 13:58:23	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-15 13:58:35	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-15 14:15:23	hashcat	http://felix-lang.org/share/src/web/tut/tutorial.fdoc
2014-03-15 14:15:59	hashcat	有ml也有haskell的語言
2014-03-15 14:16:25	hashcat	支持分佈式編程和跟C一樣快 @@
2014-03-15 14:19:21	<--	superbil (uid12362@gateway/web/irccloud.com/x-jwlonlpdiczzfzwl) has quit (Ping timeout: 255 seconds)
2014-03-15 14:21:09	<--	cataska___ (uid12717@gateway/web/irccloud.com/x-iojcwyzihzixbida) has quit (Ping timeout: 255 seconds)
2014-03-15 14:22:06	hashcat	有個輕
2014-03-15 14:22:17	hashcat	輕量web server
2014-03-15 14:23:56	hashcat	可以無痛綁 C/C++
2014-03-15 14:34:41	-->	gansteed (~gansteed@218.64.17.180) has joined #haskell.tw
2014-03-15 14:39:43	-->	superbil (uid12362@gateway/web/irccloud.com/x-vsqeongnzacycdmp) has joined #haskell.tw
2014-03-15 14:52:34	<--	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-15 14:56:50	<--	gansteed (~gansteed@218.64.17.180) has quit (Remote host closed the connection)
2014-03-15 14:59:50	-->	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 17:29:20	<--	godfat (~Adium@61-230-96-217.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-15 17:35:00	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-15 17:36:08	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-15 18:02:06	<--	hashcat (~kv2a@118-171-71-207.dynamic.hinet.net) has quit (Ping timeout: 255 seconds)
2014-03-15 18:30:58	-->	hashcat (~kv2a@1-174-46-13.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 18:45:38	-->	cataska____ (uid12717@gateway/web/irccloud.com/x-itwoukgsaqzeqmjq) has joined #haskell.tw
2014-03-15 19:51:33	-->	godfat (~Adium@1-160-161-199.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 23:07:56	<--	b4283 (~b4283@218-164-200-97.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-15 23:24:57	-->	b4283 (~b4283@1-172-85-9.dynamic.hinet.net) has joined #haskell.tw
2014-03-15 23:47:32	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-keowsesrmokgbsvz) has joined #haskell.tw
2014-03-16 00:04:41	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-16 00:11:53	<--	hashcat (~kv2a@1-174-46-13.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-16 00:20:59	<--	b4283 (~b4283@1-172-85-9.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-16 02:12:53	<--	cataska____ (uid12717@gateway/web/irccloud.com/x-itwoukgsaqzeqmjq) has quit (Ping timeout: 246 seconds)
2014-03-16 02:14:19	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-keowsesrmokgbsvz) has quit (Ping timeout: 264 seconds)
2014-03-16 02:26:23	-->	cataska____ (uid12717@gateway/web/irccloud.com/x-ueqfpolazeojjudk) has joined #haskell.tw
2014-03-16 04:07:15	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-16 05:41:32	<--	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has quit (Ping timeout: 252 seconds)
2014-03-16 05:54:35	-->	cyt93cs (~cyt93cs@linux.cs.ccu.edu.tw) has joined #haskell.tw
2014-03-16 06:23:53	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-03-16 07:22:54	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-16 08:09:48	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-16 09:46:39	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-fkghomrhgixjcjad) has joined #haskell.tw
2014-03-16 11:06:18	-->	b4283 (~b4283@218-164-204-99.dynamic.hinet.net) has joined #haskell.tw
2014-03-16 13:20:59	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-16 13:35:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-fkghomrhgixjcjad) has quit (Quit: Connection closed for inactivity)
2014-03-16 14:00:35	CindyLinz	覺得用 GHC 的 IsString 和 OverloadedStrings 可以拿來作 poorman's Template Haskell
2014-03-16 15:06:29	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-16 16:49:02	-->	hashcat (~kv2a@111-254-243-185.dynamic.hinet.net) has joined #haskell.tw
2014-03-16 17:25:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-16 18:09:22	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-16 21:30:08	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Ping timeout: 264 seconds)
2014-03-16 21:59:06	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-rxviovplfbwbwiuy) has joined #haskell.tw
2014-03-16 21:59:20	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-16 22:04:08	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-16 22:04:10	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-16 22:04:30	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-16 22:51:30	monochrom	那是一種濫用. 我們在 haskell-cafe 曾拗過類似問題. 主要問題是: parser error 怎麼辦?
2014-03-16 22:53:00	monochrom	唔, 或者是在 glasgow-haskell-users 而不是 haskell-cafe
2014-03-16 23:33:24	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Quit: mno2)
2014-03-16 23:36:00	-->	suhorng1 (~suhorng@118-166-47-125.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 00:00:35	CindyLinz	都 poorman's 了, 發生 error 當然是 error "parse error" 啊 XD
2014-03-17 00:02:04	-->	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has joined #haskell.tw
2014-03-17 00:02:08	<--	mno2 (~mno2@bb116-14-18-52.singnet.com.sg) has quit (Client Quit)
2014-03-17 00:07:46	monochrom	又好!
2014-03-17 00:17:37	<--	suhorng1 (~suhorng@118-166-47-125.dynamic.hinet.net) has quit (Quit: Leaving.)
2014-03-17 02:24:28	-->	hashcat__ (~kv2a@111-254-243-185.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 02:25:07	<--	hashcat (~kv2a@111-254-243-185.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-17 02:47:30	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 252 seconds)
2014-03-17 02:47:38	-->	darkx (~x4r@162.243.133.203) has joined #haskell.tw
2014-03-17 02:47:38	<--	darkx (~x4r@162.243.133.203) has quit (Changing host)
2014-03-17 02:47:38	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-03-17 03:42:58	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 240 seconds)
2014-03-17 03:45:01	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-03-17 03:52:49	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-17 05:49:18	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-17 06:41:56	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-17 06:42:36	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Changing host)
2014-03-17 06:42:36	-->	haroldwu (~haroldwu@unaffiliated/haroldwu) has joined #haskell.tw
2014-03-17 06:43:49	<--	hashcat__ (~kv2a@111-254-243-185.dynamic.hinet.net) has quit (*.net *.split)
2014-03-17 06:43:53	<--	godfat (~Adium@1-160-161-199.dynamic.hinet.net) has quit (*.net *.split)
2014-03-17 06:44:40	-->	hashcat__ (~kv2a@111-254-243-185.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 06:44:40	-->	godfat (~Adium@1-160-161-199.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 06:47:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-17 07:00:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-03-17 07:44:55	<--	darkx (~x4r@unaffiliated/darkx) has quit (Ping timeout: 264 seconds)
2014-03-17 08:37:06	-->	darkx (~x4r@unaffiliated/darkx) has joined #haskell.tw
2014-03-17 09:05:03	<--	b4283 (~b4283@218-164-204-99.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-17 10:21:12	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-17 10:35:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-rxviovplfbwbwiuy) has quit (Quit: Connection closed for inactivity)
2014-03-17 11:58:01	<--	godfat (~Adium@1-160-161-199.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-17 12:39:08	--	hashcat__ is now known as hashcat
2014-03-17 12:49:05	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-tznovrwuabjfhubc) has joined #haskell.tw
2014-03-17 12:49:27	-->	godfat (~Adium@36-225-49-138.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-17 15:42:34	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-17 16:23:28	-->	hashcat__ (~kv2a@111-254-243-185.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 16:28:54	<--	hashcat (~kv2a@111-254-243-185.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-17 17:02:38	-->	caasih (~caasiHuan@61-224-53-234.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 17:21:08	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-17 18:12:32	<--	superbil (uid12362@gateway/web/irccloud.com/x-vsqeongnzacycdmp) has quit (Read error: Connection reset by peer)
2014-03-17 18:13:17	-->	superbil (uid12362@gateway/web/irccloud.com/x-rkujvcspndqesgzp) has joined #haskell.tw
2014-03-17 18:16:25	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-17 18:54:59	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-17 19:13:28	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-17 19:29:14	<--	godfat (~Adium@36-225-49-138.dynamic-ip.hinet.net) has quit (Ping timeout: 246 seconds)
2014-03-17 19:59:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-17 20:15:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-tznovrwuabjfhubc) has quit (Quit: Connection closed for inactivity)
2014-03-17 20:17:43	-->	godfat (~Adium@1-160-161-199.dynamic.hinet.net) has joined #haskell.tw
2014-03-17 20:21:53	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-17 20:32:05	-->	b4283 (~b4283@36-238-254-56.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-17 20:54:02	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-17 20:54:59	<--	mno2 (~mno2@42.60.165.194) has quit (Ping timeout: 252 seconds)
2014-03-17 20:55:00	--	mno2_ is now known as mno2
2014-03-17 21:09:48	<--	caasih (~caasiHuan@61-224-53-234.dynamic.hinet.net) has quit (Quit: leaving)
2014-03-17 23:01:58	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ceechtabqohqdyjx) has joined #haskell.tw
2014-03-17 23:57:50	<--	b4283 (~b4283@36-238-254-56.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-03-18 00:18:58	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Read error: Operation timed out)
2014-03-18 00:23:42	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-03-18 01:25:38	<--	mno2 (~mno2@42.60.165.194) has quit (Quit: mno2)
2014-03-18 01:29:16	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-18 01:29:18	<--	mno2 (~mno2@42.60.165.194) has quit (Client Quit)
2014-03-18 01:44:49	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-18 01:44:59	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-18 02:35:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ceechtabqohqdyjx) has quit (Quit: Connection closed for inactivity)
2014-03-18 02:35:32	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-03-18 04:13:40	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Ping timeout: 252 seconds)
2014-03-18 04:31:04	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-18 04:31:05	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Excess Flood)
2014-03-18 04:31:25	-->	hashcat_ (~hashcat_@39.10.22.100) has joined #haskell.tw
2014-03-18 04:38:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-18 05:28:24	-->	godfat1 (~Adium@1-160-163-88.dynamic.hinet.net) has joined #haskell.tw
2014-03-18 05:31:03	<--	godfat (~Adium@1-160-161-199.dynamic.hinet.net) has quit (Ping timeout: 255 seconds)
2014-03-18 05:40:25	<--	hashcat_ (~hashcat_@39.10.22.100) has quit (Ping timeout: 240 seconds)
2014-03-18 06:20:01	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-18 07:48:29	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-18 08:38:58	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 240 seconds)
2014-03-18 08:39:25	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-03-18 08:44:45	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-18 08:46:07	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-18 08:53:55	<--	superbil (uid12362@gateway/web/irccloud.com/x-rkujvcspndqesgzp) has quit (Ping timeout: 264 seconds)
2014-03-18 08:54:29	<--	cataska____ (uid12717@gateway/web/irccloud.com/x-ueqfpolazeojjudk) has quit (Ping timeout: 246 seconds)
2014-03-18 08:54:34	-->	superbil (uid12362@gateway/web/irccloud.com/x-ektjgceapknwswvm) has joined #haskell.tw
2014-03-18 08:56:50	-->	cataska____ (uid12717@gateway/web/irccloud.com/x-fhiuspaxszntfxpj) has joined #haskell.tw
2014-03-18 08:57:57	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-bctmvzlnwlynjpkv) has joined #haskell.tw
2014-03-18 09:06:06	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-18 09:11:37	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-bctmvzlnwlynjpkv) has quit (Ping timeout: 240 seconds)
2014-03-18 09:12:27	<--	cataska____ (uid12717@gateway/web/irccloud.com/x-fhiuspaxszntfxpj) has quit (Ping timeout: 255 seconds)
2014-03-18 09:13:43	<--	superbil (uid12362@gateway/web/irccloud.com/x-ektjgceapknwswvm) has quit (Ping timeout: 264 seconds)
2014-03-18 09:14:59	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-nlocjbcvqebfpbyn) has joined #haskell.tw
2014-03-18 09:15:47	-->	cataska____ (uid12717@gateway/web/irccloud.com/x-crziawwphhebuxmo) has joined #haskell.tw
2014-03-18 09:16:23	-->	superbil (uid12362@gateway/web/irccloud.com/x-byamjekkxsdoymcr) has joined #haskell.tw
2014-03-18 09:19:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-03-18 09:47:08	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-18 09:51:01	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-18 10:27:24	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-18 10:52:38	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-03-18 11:00:45	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-18 11:28:31	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-18 12:12:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-18 12:41:44	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-18 12:48:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-18 13:30:20	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-18 14:02:58	-->	hashcat_ (~hashcat_@39.13.9.177) has joined #haskell.tw
2014-03-18 14:21:13	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-18 17:25:33	--	hashcat__ is now known as hashcat
2014-03-18 17:35:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-nlocjbcvqebfpbyn) has quit (Quit: Connection closed for inactivity)
2014-03-18 18:02:43	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-ybliyngryqgktmng) has joined #haskell.tw
2014-03-18 18:28:31	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-18 18:44:51	<--	hashcat_ (~hashcat_@39.13.9.177) has quit (Ping timeout: 255 seconds)
2014-03-18 19:03:18	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-18 19:03:29	-->	hashcat_ (~hashcat_@39.13.9.177) has joined #haskell.tw
2014-03-18 19:03:30	<--	hashcat_ (~hashcat_@39.13.9.177) has quit (Excess Flood)
2014-03-18 19:13:30	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-18 20:11:19	<--	haroldwu (~haroldwu@unaffiliated/haroldwu) has quit (Ping timeout: 264 seconds)
2014-03-18 20:11:38	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-18 20:13:29	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-18 20:14:54	-->	b4283 (~b4283@218-164-217-115.dynamic.hinet.net) has joined #haskell.tw
2014-03-18 21:06:06	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-18 21:07:06	<--	mno2 (~mno2@42.60.165.194) has quit (Client Quit)
2014-03-18 22:04:29	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-18 22:20:47	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Remote host closed the connection)
2014-03-18 23:15:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-ybliyngryqgktmng) has quit (Quit: Connection closed for inactivity)
2014-03-18 23:37:16	hashcat	felix 看起來很像 C++混Haskell
2014-03-18 23:45:25	CindyLinz	github 上面 language 分佈像彩虹一樣 XD # https://github.com/felix-lang/felix/
2014-03-18 23:45:41	CindyLinz	沒有 Haskell 的血緣 XD
2014-03-18 23:46:35	CindyLinz	那應該會比較像 ocaml 吧?
2014-03-18 23:51:25	hashcat	有有
2014-03-18 23:51:33	hashcat	兩個特色都有
2014-03-18 23:52:08	hashcat	用$符號當括號就是haskell的樣子
2014-03-18 23:53:17	hashcat	還有typeclass
2014-03-19 00:28:05	CindyLinz	但 $ 不是 haskell syntax 的一部分啊
2014-03-19 00:28:30	CindyLinz	只是大家共同的壞(?)習慣..
2014-03-19 00:32:05	hashcat	我猜$在那裡也是運算符
2014-03-19 00:34:41	hashcat	文件漏不少東西
2014-03-19 00:36:31	hashcat	http://felix-lang.org/share/src/web/ref/lang/core/fun.fdoc
2014-03-19 00:36:46	hashcat	至少在這一頁看起來很像是
2014-03-19 00:51:45	<--	b4283 (~b4283@218-164-217-115.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-19 02:59:32	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-03-19 07:11:32	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-19 07:58:44	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-rlwieawejxqyspei) has joined #haskell.tw
2014-03-19 09:05:52	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-19 09:54:41	-->	b4283 (~b4283@1-175-233-172.dynamic.hinet.net) has joined #haskell.tw
2014-03-19 11:51:16	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-19 12:35:22	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-19 12:41:31	<--	godfat1 (~Adium@1-160-163-88.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-19 13:19:28	-->	godfat (~Adium@36-225-52-160.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-19 13:21:18	<--	miaout17_ (~miaout17@miaout17.net) has quit (Ping timeout: 255 seconds)
2014-03-19 13:24:18	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-19 13:25:13	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-rlwieawejxqyspei) has quit (Quit: Connection closed for inactivity)
2014-03-19 14:17:31	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-hoxqdjyyqejjtymk) has joined #haskell.tw
2014-03-19 16:31:37	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-19 18:30:23	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-19 19:29:24	<--	godfat (~Adium@36-225-52-160.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-03-19 20:34:11	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-19 21:05:14	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-hoxqdjyyqejjtymk) has quit (Quit: Connection closed for inactivity)
2014-03-19 21:41:24	<--	mno2 (~mno2@42.60.165.194) has quit (Quit: mno2)
2014-03-19 21:54:03	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-19 22:13:27	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-19 22:14:14	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 246 seconds)
2014-03-19 22:14:57	-->	hashcat_ (~hashcat_@27.245.63.154) has joined #haskell.tw
2014-03-19 22:19:43	<--	hashcat_ (~hashcat_@27.245.63.154) has quit (Ping timeout: 264 seconds)
2014-03-19 23:10:01	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:10:02	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-19 23:10:15	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:10:16	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-19 23:10:34	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:10:35	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-19 23:10:58	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:10:59	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-19 23:11:29	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:11:30	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-19 23:34:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-19 23:35:02	-->	godfat (~Adium@1-160-163-88.dynamic.hinet.net) has joined #haskell.tw
2014-03-19 23:52:59	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-hnrweusofbleoayw) has joined #haskell.tw
2014-03-19 23:59:32	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:59:33	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-19 23:59:54	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-19 23:59:55	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-20 00:00:13	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-20 00:00:14	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Excess Flood)
2014-03-20 00:01:18	-->	hashcat_ (~hashcat_@27.52.169.89) has joined #haskell.tw
2014-03-20 00:02:56	<--	mno2 (~mno2@42.60.165.194) has quit (Quit: mno2)
2014-03-20 01:51:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-20 02:43:07	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-20 04:25:14	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-hnrweusofbleoayw) has quit (Quit: Connection closed for inactivity)
2014-03-20 05:13:51	-->	hashcat__ (~kv2a@118-171-65-75.dynamic.hinet.net) has joined #haskell.tw
2014-03-20 05:16:39	<--	hashcat (~kv2a@111-254-243-185.dynamic.hinet.net) has quit (Ping timeout: 255 seconds)
2014-03-20 06:02:13	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-gbrchrmofdgimslc) has joined #haskell.tw
2014-03-20 06:50:29	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-03-20 08:58:02	<--	b4283 (~b4283@1-175-233-172.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-20 09:01:38	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-20 09:27:31	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-20 10:12:21	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-20 15:13:39	<--	miaout17 (~miaout17@miaout17.net) has quit (Remote host closed the connection)
2014-03-20 15:14:34	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-20 15:43:01	--	hashcat__ is now known as hashcat
2014-03-20 16:51:27	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 255 seconds)
2014-03-20 16:53:48	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-20 17:21:28	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-20 18:47:43	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-20 18:52:02	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-20 19:24:22	-->	caasih (~caasiHuan@223-143-76-45.dynamic.hinet.net) has joined #haskell.tw
2014-03-20 19:26:30	<--	caasih (~caasiHuan@223-143-76-45.dynamic.hinet.net) has quit (Client Quit)
2014-03-20 19:48:27	-->	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-20 21:03:10	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-20 21:03:10	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-20 21:03:10	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-20 21:03:10	--	Channel #haskell.tw: 27 nicks (0 ops, 0 voices, 27 normals)
2014-03-20 21:03:34	--	Mode #haskell.tw [+cnt]
2014-03-20 21:03:34	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-20 21:32:29	<--	hashcat_ (~hashcat_@27.52.169.89) has quit (Ping timeout: 240 seconds)
2014-03-20 22:21:16	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-20 22:21:36	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-20 22:33:05	<--	b4283 (~b4283@218-164-218-177.dynamic.hinet.net) has quit (Quit: 暫離)
2014-03-20 23:34:28	-->	b4283 (~b4283@118.150.137.227) has joined #haskell.tw
2014-03-21 00:14:01	-->	hashcat_ (~hashcat_@27.52.174.160) has joined #haskell.tw
2014-03-21 02:00:08	<--	b4283 (~b4283@118.150.137.227) has quit (Remote host closed the connection)
2014-03-21 04:27:07	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-21 04:29:37	<--	godfat (~Adium@1-160-163-88.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-21 04:53:37	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-21 04:54:34	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-21 09:04:01	<--	kanru` (~kanru@114-32-24-38.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-21 09:14:30	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-21 09:22:24	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-21 09:32:28	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-21 10:02:29	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-21 11:18:55	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-21 12:13:44	--	godfat1 is now known as godfat
2014-03-21 12:23:23	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-21 12:31:13	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-21 12:34:47	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-21 12:50:30	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-21 13:14:00	-->	godfat (~Adium@111-251-43-239.dynamic.hinet.net) has joined #haskell.tw
2014-03-21 13:51:42	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-21 17:31:48	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-21 18:07:30	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-21 18:22:58	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-21 19:18:03	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-21 19:49:44	<--	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-21 19:50:11	<--	godfat (~Adium@111-251-43-239.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-03-21 20:22:08	-->	kanru (~kanru@114-32-24-38.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-21 20:56:12	-->	godfat (~Adium@1-169-249-42.dynamic.hinet.net) has joined #haskell.tw
2014-03-21 22:45:12	-->	b4283 (~b4283@36-238-232-3.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-21 23:30:27	<--	b4283 (~b4283@36-238-232-3.dynamic-ip.hinet.net) has quit (Quit: 暫離)
2014-03-22 00:10:24	-->	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has joined #haskell.tw
2014-03-22 01:20:26	<--	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-22 01:32:49	<--	hashcat (~kv2a@118-171-65-75.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-22 04:05:45	CindyLinz	還是會忘記平常 (非定義 class 或 instance 的時候) 的 ScopedTypeVariable 要在外層額外打上 forall 才會生效
2014-03-22 04:07:01	monochrom	而我就常忘記一旦用上 forall, 所有 type variables 都要列在 forall 之下
2014-03-22 04:07:45	monochrom	你是這麼早起, 還是這麼遲睡? 還是失眠? :)
2014-03-22 04:08:34	monochrom	還是, 日審 Perl, 夜判 Haskell? XD
2014-03-22 04:18:15	CindyLinz	還沒睡.. 白天上班, 晚上去立法院附近, 回來再趕工.. 不過差不多要睡了 @@"
2014-03-22 04:18:19	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-22 04:18:27	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-22 04:18:41	CindyLinz	心情不太好, 影響生產力... :(
2014-03-22 04:19:40	monochrom	我心情不好時也不敢改功課, 恐怕拿學生分數來出氣 XD
2014-03-22 04:20:22	CindyLinz	ww
2014-03-22 04:21:59	letoh	心情不好可以拿 bug 出氣 XD
2014-03-22 08:06:44	-->	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has joined #haskell.tw
2014-03-22 08:48:54	<--	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has quit (Remote host closed the connection)
2014-03-22 09:53:21	-->	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has joined #haskell.tw
2014-03-22 13:00:12	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-03-22 13:22:49	-->	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-22 13:54:39	<--	petercommand11 (~peter@128.199.232.63) has quit (Changing host)
2014-03-22 13:54:40	-->	petercommand11 (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-22 14:07:59	<--	kanru (~kanru@114-32-24-38.HINET-IP.hinet.net) has quit (Ping timeout: 245 seconds)
2014-03-22 14:21:53	<--	cibs (~cibs@60-251-40-253.HINET-IP.hinet.net) has quit (*.net *.split)
2014-03-22 17:06:39	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-22 17:30:34	-->	hashcat (~kv2a@1-174-43-18.dynamic.hinet.net) has joined #haskell.tw
2014-03-22 19:34:05	-->	gansteed (~gansteed@218.64.17.174) has joined #haskell.tw
2014-03-22 20:05:39	<--	gansteed (~gansteed@218.64.17.174) has quit (Quit: Leaving)
2014-03-22 20:13:08	hashcat_	www.impredicative.com/ur/
2014-03-22 20:13:35	hashcat_	很多語言都想併吞haskell
2014-03-22 20:56:16	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-22 20:56:34	hashcat_	含ml haskell又精簡
2014-03-22 22:01:16	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2014-03-22 22:01:17	<--	monochrom (trebla@216.138.220.146) has quit (*.net *.split)
2014-03-22 22:01:18	<--	letoh (~stackvm@203.67.184.8) has quit (*.net *.split)
2014-03-22 22:01:20	<--	flter (~Albert@140.113.249.196) has quit (*.net *.split)
2014-03-22 22:01:22	<--	a2n (~a2n@unaffiliated/a2n) has quit (*.net *.split)
2014-03-22 22:01:38	-->	letoh (~stackvm@203.67.184.8) has joined #haskell.tw
2014-03-22 22:01:39	-->	a2n (~a2n@219.85.185.194) has joined #haskell.tw
2014-03-22 22:01:44	<--	a2n (~a2n@219.85.185.194) has quit (Changing host)
2014-03-22 22:01:44	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-22 22:02:00	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-03-22 22:05:00	<--	hashcat (~kv2a@1-174-43-18.dynamic.hinet.net) has quit (Write error: Broken pipe)
2014-03-22 22:05:07	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-03-22 22:05:29	-->	hashcat (~kv2a@1-174-43-18.dynamic.hinet.net) has joined #haskell.tw
2014-03-22 22:06:24	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-03-22 22:24:48	monochrom	好事. 古時很多語言都想像C
2014-03-22 22:26:37	monochrom	先知們不是說過, Haskell 是將來所有語言的指標嗎? :)
2014-03-22 23:01:39	CindyLinz	只是都沒有吞到 non-strict 的部分. 那才是 Haskell 的特色啊~ (無論好壞)
2014-03-22 23:12:50	hashcat_	那是敗筆吧
2014-03-22 23:14:16	hashcat_	新語言都踢掉那特性
2014-03-22 23:15:01	hashcat_	代價高昂 結果無聊
2014-03-22 23:16:39	hashcat_	塞滿記憶體 號稱減少不必要計算 結果卻是減速
2014-03-22 23:17:09	monochrom	我認為不是. 我認為 non-strict 非常重要. 只有 non-strict 才可以做 "forever m = m >> forever m"
2014-03-22 23:17:17	hashcat_	CindyLinz 上次你也亂用過
2014-03-22 23:18:47	CindyLinz	hashcat_: 忘了, 怎樣亂用啊? XD
2014-03-22 23:19:14	CindyLinz	不過, 我覺得亂用語言特性, 產生恐怖的結果, 是天經地義啊?
2014-03-22 23:19:17	hashcat_	算了  沒有
2014-03-22 23:19:47	CindyLinz	但不能因為這樣而當成該特性不好的證據..
2014-03-22 23:20:02	CindyLinz	很厲害的刀, 通常也會有很恐怖的破壞力嘛 :p
2014-03-22 23:20:12	hashcat_	多數計算non-strict很low
2014-03-22 23:20:25	hashcat_	不該是預設
2014-03-22 23:21:02	CindyLinz	我看沒有 non-strict 的 haskell-like, 就很難像 haskell.. @_@"
2014-03-22 23:21:16	CindyLinz	畢竟 haskell syntax 不是很有特色.. ^^|
2014-03-22 23:21:56	hashcat_	haskell寫qsort還能寫成假的qsort
2014-03-22 23:22:30	CindyLinz	hashcat_: input 給的也不一樣呀~
2014-03-22 23:23:08	CindyLinz	我記得 C++ SGI STL 裡面.. qsort 也沒有做 list 能用的
2014-03-22 23:25:08	hashcat_	反正看到熟手都能亂用  只有深入了解內部實作才不會用錯的特性
2014-03-22 23:25:34	hashcat_	就覺得畫蛇添足了
2014-03-22 23:26:13	hashcat_	而且haskell號稱編譯過就是正確的程序
2014-03-22 23:27:02	hashcat_	從這來說non-strict這特性失敗阿
2014-03-22 23:27:14	monochrom	學 lazy evaluation 並不是深入了解內部實作
2014-03-22 23:27:18	CindyLinz	我是不認識這些新語言的作者.. 只是有在懷疑.... 如果他們自己本身同時是個 Haskell expert, 看到一個沒有 non-strict by default 的語言, 真的會覺得它有含入 Haskell, 或是和 Haskell 相像嗎? @_@"
2014-03-22 23:28:25	hashcat_	idris這很專家了吧
2014-03-22 23:28:35	hashcat_	strict by default
2014-03-22 23:28:52	CindyLinz	畢竟我還不是 expert, 只是玩得稍微有些日子, 我覺得我摸到的常見 library 都吃 non-strict 特性吃得很深.. 沒有 non-strict 的話這些 library 根本不能動.. @@"
2014-03-22 23:29:07	CindyLinz	像是 edwardk 的 lens..
2014-03-22 23:29:08	monochrom	我也看不出 non-strictness 怎樣減低正確性. 相反, 我看 strictness 才減低正確性. 我剛才已舉例子.
2014-03-22 23:29:39	CindyLinz	non-strict 應該是增加表達得出來的寫法吧
2014-03-22 23:30:02	CindyLinz	我以為正確性跟 type 比較有關?
2014-03-22 23:30:46	hashcat_	正確不只是輸入輸出正確
2014-03-22 23:31:26	hashcat_	還有有限的資源估計
2014-03-22 23:31:55	CindyLinz	hashcat_: 問問, 你是怎樣估計 idris 作者 haskell 很熟呀?
2014-03-22 23:32:24	hashcat_	haskell根本是idris的子集阿
2014-03-22 23:32:25	CindyLinz	嗯.. 因為, 我想從 github 看.. 結果作者叫作 idris-lang... 囧
2014-03-22 23:32:52	CindyLinz	hashcat_: 沒有 non-strict by default, fu 就不對, 不可能是子集啊 @_@"
2014-03-22 23:32:56	hashcat_	idris也有實作non-strict
2014-03-22 23:33:11	hashcat_	只是不是預設
2014-03-22 23:33:29	hashcat_	要聲明才會
2014-03-22 23:34:04	CindyLinz	這樣應該頂多語法像吧 @_@"
2014-03-22 23:34:32	CindyLinz	喔, idris-lang 有 member list.. # https://github.com/idris-lang
2014-03-22 23:35:01	hashcat_	多一兩條線聲明lazy就不像拉
2014-03-22 23:35:17	CindyLinz	idris-dev 有 51% 用 haskell 寫~ XD
2014-03-22 23:38:02	monochrom	好, non-strict 語言要用多些資源. 我有個想法, 這是因為下層的電腦 strict, 把 non-strict 程式編譯到 strict 的電腦才導致浪費. 即是說, 在另一個平行宇宙, 電腦都是 non-strict 的, 那裏的另一個 hashcat 在訴說: C 太 strict 了, 以致比 Haskell 慢...
2014-03-22 23:39:22	hashcat_	極端來說ada連有限資源下都能保證正確輸出
2014-03-22 23:39:44	CindyLinz	這是.. functional machine 或是 logic machine 的電腦模型?
2014-03-22 23:40:07	hashcat_	haskell則是有機會記憶體不夠直接死掉
2014-03-22 23:40:25	CindyLinz	hashcat_: ada 發生 bit 反轉的時候我覺得它還是會錯吧 :|
2014-03-22 23:41:23	CindyLinz	hashcat_: 記憶體不夠會死掉是因為寫的人沒估計記憶體啊.. 不過這種 GC base 的 runtime, 的確不是設計給這麼嚴苛的環境用的
2014-03-22 23:41:28	hashcat_	haskell如果光是插不夠記憶體就掛 那就算拉
2014-03-22 23:42:05	hashcat_	上限沒有簡單的方法估計
2014-03-22 23:42:44	hashcat_	ur/web連gc都拔掉了
2014-03-22 23:43:34	monochrom	我正是說, 我只能同意浪費這一點, 而即使這一點也有問題, 究竟是本質還是歷史偶然
2014-03-22 23:44:17	monochrom	我懂得計算上限. 不過你可以說方法不簡單.
2014-03-22 23:44:45	hashcat_	記憶體成本很貴  人力成本也是
2014-03-22 23:45:23	CindyLinz	「不簡單」指的是對所有可能的程式適用的計算上限的演算法不存在嗎?
2014-03-22 23:45:35	monochrom	幸運地, 在 strict 及充滿 side effects 的語言, 計算輸出的正確性也不簡單. 扯平.
2014-03-22 23:47:02	hashcat_	ur/web和idris大大減輕成本
2014-03-22 23:47:15	CindyLinz	我覺得有用到 遞迴 或是 long-term 沒有回收的記憶體 的程式, 都很難計算記憶體使用量欸
2014-03-22 23:48:07	CindyLinz	idris 更現實的問題是, 要承受它本身 bug 多的成本吧 @_@"
2014-03-22 23:49:17	hashcat_	bug可以修,但特性不是用來修的
2014-03-22 23:50:00	CindyLinz	這是沒錯
2014-03-22 23:50:08	hashcat_	額罷了
2014-03-22 23:50:12	CindyLinz	但是現在就考慮成本的比較, 太早了 @@"
2014-03-22 23:50:30	CindyLinz	因為根本不能實際比較, 只能空想 @@"
2014-03-22 23:51:56	hashcat_	反正port到小版子很困難
2014-03-22 23:52:39	hashcat_	就是不好嘖
2014-03-22 23:54:27	monochrom	記憶量難以計算, 我認為 GC 才是問題, 不論 strict 或 non-strict.
2014-03-22 23:54:39	CindyLinz	我的感覺啊~ 那些宣稱自己融入 Haskell 的特性的語言, 根本就沒有 Haskell 的重點味道, 只是在藉用 Haskell 的名聲吃豆腐吧 @@"
2014-03-22 23:54:53	hashcat_	暈
2014-03-22 23:55:03	monochrom	不, 甚至不是 GC 問題. 是分享問題.
2014-03-22 23:55:25	hashcat_	haskell只有non-strict能提嘛
2014-03-22 23:56:38	CindyLinz	hashcat_: 如果不是 non-strict 的話, static 的有 ocaml, F#, erlang(?); dynamic 的有 list, scheme.. 我不覺得 Haskell 還有什麼特色啊?
2014-03-22 23:56:40	hashcat_	額先來睡
2014-03-22 23:57:21	monochrom	假設有某 record, 讓我叫它做 x. 我們想知道幾時可以扔掉 x, 因為這關乎計算記憶量.
2014-03-22 23:57:25	CindyLinz	唔.. 不知道上面哪幾個語言裡面有 Haskell 的 class.. 可能也算是個特色 ^^|
2014-03-22 23:57:28	hashcat_	typeclass跟範疇論也很haskell阿
2014-03-22 23:57:45	hashcat_	無括號函數套用
2014-03-22 23:57:59	CindyLinz	hashcat_: 無括號函數套用的語言太多了 ^^|
2014-03-22 23:58:16	hashcat_	簡陋不堪的module
2014-03-22 23:58:18	CindyLinz	hashcat_: 你看古早的 unix shell script.. XD
2014-03-22 23:58:24	hashcat_	假qsort
2014-03-22 23:58:39	hashcat_	先睡了
2014-03-22 23:59:23	CindyLinz	你說的後面其他項目, 我現在平常在寫, 都不太遇到的 @@"
2014-03-23 00:00:28	monochrom	但是, x 被千多個其他 record 所指. (千夫所指? XD) 而這千多個其他 record 之間關係不大. 那麼, 要知道幾時可扔掉 x, 就要先計算那千多個菜鳥的動向. 這就是計算記憶量的難處, 根本與 non-strictness 無關, SML 及 javascript 一樣難.
2014-03-23 00:00:49	CindyLinz	monochrom: 我對 GC 真是又愛又恨 @_@"
2014-03-23 00:01:32	monochrom	其實也不關乎 GC. 你以為在 C++ 又容易了嗎?
2014-03-23 00:01:50	CindyLinz	在寫 C++ 的時候, 對 GC 的態度是愛.. XD
2014-03-23 00:03:10	monochrom	至少, 有 GC 時, 你不用手寫 "free(x)". 沒有 GC, 你必需選擇寫在哪裏, 而且你一定選錯.
2014-03-23 00:04:00	monochrom	因為你必定估錯那千多個菜鳥的動向.
2014-03-23 00:05:30	CindyLinz	C++ 後來加了 auto_ptr 和 smart_ptr, 還能應付很大部分使用 GC 的情況 ^^|
2014-03-23 00:05:49	CindyLinz	就.. reference count.. ^^|
2014-03-23 00:16:03	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Ping timeout: 255 seconds)
2014-03-23 00:25:11	monochrom	如果用 GC 或 reference counting, 就難以計算記憶量. 如果不用, 就難以計算輸出.
2014-03-23 00:26:09	monochrom	我覺悟了! 資源與答案不能同時確定. 測不準原理. ^_^
2014-03-23 00:29:10	CindyLinz	............||
2014-03-23 00:29:56	CindyLinz	有限資源, 就不一定有答案; 保證有答案, 資源就可能無限....ww
2014-03-23 00:30:20	CindyLinz	不是很舒服.. ~_~
2014-03-23 00:33:56	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-23 01:59:13	<--	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-23 03:34:55	CindyLinz	以為 GHC 的 tuple 只有定義到 7 項版本
2014-03-23 03:35:26	CindyLinz	剛剛試一試... 至少 305 項都還有定義到..
2014-03-23 04:15:14	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-gbrchrmofdgimslc) has quit (Quit: Connection closed for inactivity)
2014-03-23 04:51:16	monochrom	三百多, 還真是多得有點可怕 :)
2014-03-23 04:51:53	monochrom	可以開拍電影: 300-tuple, the rise of an empire XD
2014-03-23 07:36:44	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 265 seconds)
2014-03-23 08:07:38	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-oqntariahgetnymc) has joined #haskell.tw
2014-03-23 09:56:22	-->	town77 (~1@61.148.243.123) has joined #haskell.tw
2014-03-23 10:04:27	<--	town77 (~1@61.148.243.123) has quit (Remote host closed the connection)
2014-03-23 10:04:51	-->	town77 (~1@61.148.243.123) has joined #haskell.tw
2014-03-23 10:26:10	<--	town77 (~1@61.148.243.123) has quit (Ping timeout: 252 seconds)
2014-03-23 10:27:49	-->	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has joined #haskell.tw
2014-03-23 10:34:59	-->	beehive (~beehive@223.72.182.176) has joined #haskell.tw
2014-03-23 10:44:51	-->	kanru (~kanru@114-32-24-38.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-23 11:17:40	<--	beehive (~beehive@223.72.182.176) has quit (Quit: Leaving)
2014-03-23 12:55:38	<--	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-23 12:59:04	-->	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has joined #haskell.tw
2014-03-23 13:46:59	<--	godfat (~Adium@1-169-249-42.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-23 13:51:34	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-23 15:45:36	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-23 16:13:59	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Ping timeout: 240 seconds)
2014-03-23 17:02:42	-->	caasih (~caasiHuan@175.180.189.120) has joined #haskell.tw
2014-03-23 18:04:23	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-23 18:04:58	-->	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-23 18:07:59	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 265 seconds)
2014-03-23 18:58:15	<--	letoh (~stackvm@203.67.184.8) has quit (Ping timeout: 265 seconds)
2014-03-23 18:59:03	-->	letoh (~stackvm@203.67.184.8) has joined #haskell.tw
2014-03-23 19:25:13	-->	petercom1and11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-23 19:29:53	<--	miaout17 (~miaout17@miaout17.net) has quit (*.net *.split)
2014-03-23 19:29:55	<--	petercommand11 (~peter@unaffiliated/petercommand) has quit (*.net *.split)
2014-03-23 19:40:05	-->	miaout17 (~miaout17@miaout17.net) has joined #haskell.tw
2014-03-23 20:22:46	<--	caasih (~caasiHuan@175.180.189.120) has quit (Quit: leaving)
2014-03-23 23:45:14	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-oqntariahgetnymc) has quit (Quit: Connection closed for inactivity)
2014-03-24 00:49:47	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-24 01:00:57	<--	b4283 (~b4283@1-175-247-98.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-24 01:17:38	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-moxwzqkbecsbejve) has joined #haskell.tw
2014-03-24 09:26:49	<--	kanru (~kanru@114-32-24-38.HINET-IP.hinet.net) has quit (Ping timeout: 268 seconds)
2014-03-24 09:35:14	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-moxwzqkbecsbejve) has quit (Quit: Connection closed for inactivity)
2014-03-24 09:53:23	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-nmgiqhwvevmpaypd) has joined #haskell.tw
2014-03-24 10:19:40	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-24 10:30:15	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-24 10:37:25	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-24 11:27:53	-->	cataska (~cataska@118-163-69-1.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-24 12:39:09	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-24 12:44:01	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-24 13:22:27	-->	godfat (~Adium@36-226-131-243.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-24 13:27:32	-->	caasih (~caasiHuan@114-46-155-111.dynamic.hinet.net) has joined #haskell.tw
2014-03-24 13:27:49	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-24 13:40:01	<--	caasih (~caasiHuan@114-46-155-111.dynamic.hinet.net) has quit (Quit: leaving)
2014-03-24 15:19:27	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-24 15:19:27	<--	petercom1and11 (~peter@128.199.232.63) has quit (Ping timeout: 240 seconds)
2014-03-24 15:19:28	-->	petercommand11 (~peter@128.199.232.63) has joined #haskell.tw
2014-03-24 15:19:36	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-24 15:27:38	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 240 seconds)
2014-03-24 15:27:55	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-24 15:28:06	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Ping timeout: 245 seconds)
2014-03-24 15:28:18	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 240 seconds)
2014-03-24 15:29:03	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-03-24 15:30:19	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-24 15:45:47	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Remote host closed the connection)
2014-03-24 15:46:11	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-24 18:18:44	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-24 18:39:53	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-24 18:58:00	-->	miaout17_ (uid13197@gateway/web/irccloud.com/x-jfqhkvezwmjemuct) has joined #haskell.tw
2014-03-24 18:59:53	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-24 19:01:57	--	miaout17 is now known as miaout17__
2014-03-24 19:01:57	--	miaout17_ is now known as miaout17
2014-03-24 19:51:31	<--	godfat (~Adium@36-226-131-243.dynamic-ip.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-24 20:09:14	-->	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has joined #haskell.tw
2014-03-24 20:31:16	-->	godfat (~Adium@1-169-251-89.dynamic.hinet.net) has joined #haskell.tw
2014-03-24 21:14:26	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-24 21:45:30	<--	mno2 (~mno2@42.60.165.194) has quit (Quit: mno2)
2014-03-24 22:33:54	monochrom	這麼嚴重啊? 連行政院都失守了.
2014-03-24 22:36:25	hashcat_	佔領pycon訴求在pypy優先支持scipy
2014-03-24 22:37:03	monochrom	哈哈
2014-03-24 22:37:47	hashcat_	這個卡兩年了比較嚴重
2014-03-24 22:38:14	monochrom	不如也去 Oracle 總部抗議 Java 加 lambda XD
2014-03-25 00:06:47	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-25 00:22:56	<--	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-25 01:51:37	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-25 04:18:49	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-25 06:34:11	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-25 06:34:23	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-25 07:26:11	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-25 09:14:46	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-25 09:58:52	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-25 10:10:59	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-25 11:04:26	<--	hashcat_ (~hashcat_@27.52.174.160) has quit (Ping timeout: 246 seconds)
2014-03-25 11:07:24	-->	caasih (~caasiHuan@114-46-113-237.dynamic.hinet.net) has joined #haskell.tw
2014-03-25 11:09:09	-->	hashcat_ (~hashcat_@106.107.134.49) has joined #haskell.tw
2014-03-25 11:52:53	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-25 11:53:15	-->	town77 (~1@171.208.22.46) has joined #haskell.tw
2014-03-25 12:08:28	<--	town77 (~1@171.208.22.46) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2014-03-25 12:53:44	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-25 13:08:00	<--	caasih (~caasiHuan@114-46-113-237.dynamic.hinet.net) has quit (Quit: leaving)
2014-03-25 16:05:58	<--	hashcat_ (~hashcat_@106.107.134.49) has quit (Ping timeout: 265 seconds)
2014-03-25 17:52:08	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Ping timeout: 252 seconds)
2014-03-25 17:52:47	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 265 seconds)
2014-03-25 18:34:34	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-25 18:46:24	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-25 18:47:45	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-25 19:02:36	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-25 20:19:18	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-03-25 20:30:30	-->	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has joined #haskell.tw
2014-03-25 20:31:02	<--	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has quit (Remote host closed the connection)
2014-03-25 20:35:03	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-25 20:56:44	-->	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has joined #haskell.tw
2014-03-25 20:59:52	--	irc: disconnected from server
2014-03-25 21:31:11	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-25 21:31:11	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-25 21:31:11	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-25 21:31:11	--	Channel #haskell.tw: 26 nicks (0 ops, 0 voices, 26 normals)
2014-03-25 21:31:38	--	Mode #haskell.tw [+cnt]
2014-03-25 21:31:38	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-25 21:36:54	--	irc: disconnected from server
2014-03-25 21:52:03	-->	drbean (~drbean@59-125-82-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-25 21:52:03	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-25 21:52:03	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-25 21:52:03	--	Channel #haskell.tw: 26 nicks (0 ops, 0 voices, 26 normals)
2014-03-25 21:52:27	--	Mode #haskell.tw [+cnt]
2014-03-25 21:52:27	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-26 00:15:02	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-26 00:46:47	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Ping timeout: 268 seconds)
2014-03-26 00:48:43	<--	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-26 02:04:55	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:04:56	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:06:25	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:06:26	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:07:48	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:07:49	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:09:50	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:09:51	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:22:46	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:22:48	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:23:01	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:23:03	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:23:34	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:23:36	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:24:01	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:24:03	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 02:25:05	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 02:25:07	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 03:37:55	<--	hashcat (~kv2a@1-174-43-18.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-26 03:41:40	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 03:41:41	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 03:41:53	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 03:41:54	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 03:42:12	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 03:42:13	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 03:42:35	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 03:42:36	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 03:43:03	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 03:43:04	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 05:45:27	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-26 05:49:21	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Read error: Connection reset by peer)
2014-03-26 05:50:03	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-03-26 05:57:38	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-26 08:24:31	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2014-03-26 09:09:53	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-26 09:10:24	hychen_	monochrom: 被暴力鎮壓了
2014-03-26 09:10:40	hychen_	monochrom: 出動鎮暴警察打手無寸鐵的人
2014-03-26 09:10:49	hychen_	monochrom: what the fucking government
2014-03-26 09:11:10	hychen_	水車居然是最後才噴, 真是太優秀了這個政府
2014-03-26 09:12:17	hychen_	動手前還先把媒體趕走
2014-03-26 09:15:05	monochrom	咦, 最後出水車, 這招高啊!
2014-03-26 09:43:03	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-26 09:43:12	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-26 10:06:42	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-26 10:47:41	--	miaout17 is now known as miaout17-test-lo
2014-03-26 10:47:53	--	miaout17-test-lo is now known as miaout17
2014-03-26 10:48:11	--	miaout17__ is now known as test-very_long-i
2014-03-26 10:56:43	--	test-very_long-i is now known as miaout17_____
2014-03-26 12:19:08	-->	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-26 12:31:16	CindyLinz	嗯, 也有表明要自行離去的民眾(or 學生)被拉回去揍... @@"
2014-03-26 12:35:00	<--	godfat (~Adium@1-169-251-89.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-26 13:13:18	-->	godfat (~Adium@36-225-54-169.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-26 13:16:20	mno2	唉..
2014-03-26 13:59:04	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-26 14:53:07	<--	caasih (~caasiHuan@59-126-250-201.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-26 15:11:20	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 15:11:21	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 15:11:32	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 15:11:33	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 15:11:45	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 15:11:47	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 15:12:04	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 15:12:04	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 15:12:26	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 15:12:27	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 15:12:56	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 15:12:57	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-26 16:47:51	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 16:47:56	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Client Quit)
2014-03-26 17:32:04	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-26 18:36:32	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 246 seconds)
2014-03-26 18:37:35	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-03-26 18:44:43	<--	godfat (~Adium@36-225-54-169.dynamic-ip.hinet.net) has quit (Ping timeout: 268 seconds)
2014-03-26 18:50:39	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-26 19:04:01	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-26 19:10:01	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-26 19:26:59	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Quit: Changing server)
2014-03-26 20:00:11	-->	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has joined #haskell.tw
2014-03-26 20:06:30	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-26 20:26:44	-->	godfat (~Adium@1-169-251-89.dynamic.hinet.net) has joined #haskell.tw
2014-03-26 22:00:56	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-26 22:14:46	-->	ouie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-26 22:15:57	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-26 22:53:07	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-26 22:53:15	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-26 23:06:12	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-27 00:08:14	<--	b4283 (~b4283@1-175-238-131.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-27 00:28:53	-->	b4283 (~b4283@118.150.153.133) has joined #haskell.tw
2014-03-27 00:52:27	<--	mno2_ (~mno2@42.60.165.194) has quit (Quit: mno2_)
2014-03-27 01:19:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-03-27 01:29:37	<--	ouie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-27 01:31:43	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-27 01:37:52	<--	b4283 (~b4283@118.150.153.133) has quit (Remote host closed the connection)
2014-03-27 02:59:04	monochrom	那就太過份了
2014-03-27 03:01:10	monochrom	這完全是戰爭的思維哩. 無論敵軍是降是退, 都要包抄殺清, 以求一了百了. 我想起秦將白起坑趙軍.
2014-03-27 03:02:04	 *	monochrom 很懂得運用煽動性比㖮哩!
2014-03-27 03:02:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-27 03:05:15	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-nmgiqhwvevmpaypd) has quit (Quit: Connection closed for inactivity)
2014-03-27 03:56:38	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 268 seconds)
2014-03-27 04:08:21	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2014-03-27 05:26:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-27 05:36:19	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-27 05:37:50	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-27 05:39:21	<--	godfat (~Adium@1-169-251-89.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2014-03-27 06:23:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2014-03-27 08:26:32	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-27 08:33:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-03-27 09:12:58	<--	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has quit (*.net *.split)
2014-03-27 09:15:30	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Read error: Connection reset by peer)
2014-03-27 09:15:31	<--	a2n (~a2n@unaffiliated/a2n) has quit (Read error: Connection reset by peer)
2014-03-27 09:15:50	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-27 09:57:17	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-27 10:08:07	-->	cibs (~cibs@118-163-170-73.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-27 10:14:14	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-27 10:22:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-27 10:42:34	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-27 10:43:13	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Changing host)
2014-03-27 10:43:13	-->	haroldwu (~haroldwu@unaffiliated/haroldwu) has joined #haskell.tw
2014-03-27 11:21:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-27 11:52:21	--	godfat1 is now known as godfat
2014-03-27 11:52:31	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-prqwfyhqgocevsmq) has joined #haskell.tw
2014-03-27 12:05:08	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-27 12:29:08	<--	godfat (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-27 13:06:32	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-27 13:10:56	-->	godfat (~Adium@36-225-54-169.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-27 15:04:38	-->	a2n (~a2n@219.85.185.194) has joined #haskell.tw
2014-03-27 15:04:41	<--	a2n (~a2n@219.85.185.194) has quit (Changing host)
2014-03-27 15:04:42	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-27 15:39:17	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-27 15:44:24	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-27 16:17:22	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-27 16:24:13	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-27 17:22:08	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2014-03-27 17:55:08	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-27 18:54:31	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-27 19:11:18	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-27 19:39:21	<--	godfat (~Adium@36-225-54-169.dynamic-ip.hinet.net) has quit (Ping timeout: 245 seconds)
2014-03-27 20:02:11	-->	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has joined #haskell.tw
2014-03-27 20:13:06	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 245 seconds)
2014-03-27 20:13:35	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-27 20:45:22	<--	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-27 20:48:52	-->	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has joined #haskell.tw
2014-03-27 21:06:33	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-27 22:29:26	-->	godfat (~Adium@1-161-52-243.dynamic.hinet.net) has joined #haskell.tw
2014-03-27 23:36:00	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2014-03-27 23:36:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-28 00:43:24	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-03-28 01:06:07	<--	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-28 02:14:38	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 252 seconds)
2014-03-28 02:58:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-28 03:14:30	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-28 04:22:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-28 04:50:41	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-28 05:15:16	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-28 06:15:57	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-28 06:37:41	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Ping timeout: 245 seconds)
2014-03-28 06:38:15	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-28 06:38:16	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-28 06:38:34	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-28 06:38:36	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-28 06:39:00	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-28 06:39:01	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-28 06:39:29	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-28 06:39:30	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Excess Flood)
2014-03-28 08:22:13	<--	superbil (uid12362@gateway/web/irccloud.com/x-byamjekkxsdoymcr) has quit (Quit: Connection closed for inactivity)
2014-03-28 09:06:39	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-28 09:07:51	<--	mno2 (~mno2@202.63.156.211) has quit (Client Quit)
2014-03-28 09:08:22	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-28 09:12:46	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-28 09:19:38	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 240 seconds)
2014-03-28 09:40:08	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-28 10:04:33	-->	superbil (uid12362@gateway/web/irccloud.com/x-tsxixfxjzitmvgdp) has joined #haskell.tw
2014-03-28 10:05:40	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-28 10:41:08	-->	hashcat_ (~hashcat_@27.245.4.209) has joined #haskell.tw
2014-03-28 11:07:49	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-28 11:34:34	-->	drbean (~drbean@61-219-91-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-28 11:34:34	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-28 11:34:34	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-28 11:34:34	--	Channel #haskell.tw: 26 nicks (0 ops, 0 voices, 26 normals)
2014-03-28 11:34:58	--	Mode #haskell.tw [+cnt]
2014-03-28 11:34:58	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-28 11:36:37	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-28 12:04:19	<--	godfat (~Adium@1-161-52-243.dynamic.hinet.net) has quit (Ping timeout: 268 seconds)
2014-03-28 12:51:05	-->	godfat (~Adium@36-225-54-169.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-28 12:55:43	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-28 14:36:17	CindyLinz	剛剛在公司技術討論會上介紹了一點點 Haskell :p
2014-03-28 14:56:20	-->	hashcat (~kv2a@114-47-131-60.dynamic.hinet.net) has joined #haskell.tw
2014-03-28 15:29:41	miaout17	轉 http://engineering.imvu.com/2014/03/24/what-its-like-to-use-haskell/
2014-03-28 16:46:42	-->	drbean (~drbean@59-125-81-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-28 16:46:42	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-28 16:46:42	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-28 16:46:42	--	Channel #haskell.tw: 27 nicks (0 ops, 0 voices, 27 normals)
2014-03-28 16:47:04	--	Mode #haskell.tw [+cnt]
2014-03-28 16:47:04	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-28 17:11:10	-->	drbean (~drbean@61-219-91-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-28 17:11:10	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-28 17:11:10	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-28 17:11:10	--	Channel #haskell.tw: 27 nicks (0 ops, 0 voices, 27 normals)
2014-03-28 17:11:32	--	Mode #haskell.tw [+cnt]
2014-03-28 17:11:32	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-28 17:32:43	-->	drbean (~drbean@59-125-83-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-28 17:32:43	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-28 17:32:43	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-28 17:32:43	--	Channel #haskell.tw: 28 nicks (0 ops, 0 voices, 28 normals)
2014-03-28 17:32:43	--	Notice(cameron.freenode.net): [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
2014-03-28 17:33:05	--	Mode #haskell.tw [+cnt]
2014-03-28 17:33:05	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-28 17:45:46	-->	drbean (~drbean@61-219-91-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-28 17:45:46	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-28 17:45:46	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-28 17:45:46	--	Channel #haskell.tw: 28 nicks (0 ops, 0 voices, 28 normals)
2014-03-28 17:46:06	--	Mode #haskell.tw [+cnt]
2014-03-28 17:46:06	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-28 17:55:26	<--	flter (~Albert@140.113.249.196) has quit (Quit: leaving)
2014-03-28 18:49:38	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-28 19:02:14	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-28 19:53:41	-->	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has joined #haskell.tw
2014-03-28 19:59:03	<--	godfat (~Adium@36-225-54-169.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-03-28 20:01:40	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2014-03-28 20:01:57	-->	shik (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-28 20:49:21	-->	flter (~Albert@140.113.249.196) has joined #haskell.tw
2014-03-28 21:08:57	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (Ping timeout: 240 seconds)
2014-03-28 21:09:42	-->	godfat (~Adium@1-161-52-243.dynamic.hinet.net) has joined #haskell.tw
2014-03-28 21:09:54	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell.tw
2014-03-28 21:10:12	<--	godfat (~Adium@1-161-52-243.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-28 21:10:18	-->	godfat (~Adium@1-161-52-243.dynamic.hinet.net) has joined #haskell.tw
2014-03-28 21:26:29	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-28 22:18:54	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-03-28 22:21:00	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-29 00:28:12	<--	hashcat (~kv2a@114-47-131-60.dynamic.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-29 00:45:31	<--	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-29 01:18:23	-->	b4283 (~b4283@118.150.130.87) has joined #haskell.tw
2014-03-29 02:21:43	<--	b4283 (~b4283@118.150.130.87) has quit (Remote host closed the connection)
2014-03-29 02:23:50	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-29 02:28:40	<--	mno2_ (~mno2@42.60.165.194) has quit (Ping timeout: 265 seconds)
2014-03-29 02:55:24	<--	hashcat_ (~hashcat_@27.245.4.209) has quit (Ping timeout: 268 seconds)
2014-03-29 05:04:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-29 06:01:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-29 08:03:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-29 08:22:12	<--	superbil (uid12362@gateway/web/irccloud.com/x-tsxixfxjzitmvgdp) has quit (Quit: Connection closed for inactivity)
2014-03-29 08:41:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-29 09:12:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-29 10:12:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-29 11:23:32	-->	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has joined #haskell.tw
2014-03-29 11:24:28	-->	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-29 14:12:42	-->	b4284 (~b4283@218-164-210-243.dynamic.hinet.net) has joined #haskell.tw
2014-03-29 14:13:36	<--	b4283 (~b4283@1-175-62-200.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-29 14:36:53	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-29 15:02:22	<--	b4284 (~b4283@218-164-210-243.dynamic.hinet.net) has quit (Ping timeout: 252 seconds)
2014-03-29 15:11:11	<--	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-29 15:15:15	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-prqwfyhqgocevsmq) has quit (Quit: Connection closed for inactivity)
2014-03-29 15:15:40	-->	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-29 15:19:01	-->	b4284 (~b4283@125-230-252-249.dynamic.hinet.net) has joined #haskell.tw
2014-03-29 15:36:54	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-widkocockekbiyea) has joined #haskell.tw
2014-03-29 15:38:50	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-29 16:07:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-29 16:13:07	<--	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-29 16:13:51	-->	caasih (~caasiHuan@42.71.187.139) has joined #haskell.tw
2014-03-29 16:39:28	<--	caasih (~caasiHuan@42.71.187.139) has quit (Quit: leaving)
2014-03-29 18:11:34	-->	superbil (uid12362@gateway/web/irccloud.com/x-tigqssccrdvcjpdc) has joined #haskell.tw
2014-03-29 18:29:01	<--	mno2_ (~mno2@42.60.165.194) has quit (Quit: mno2_)
2014-03-29 18:30:24	-->	gko (gko@2400:8900::f03c:91ff:fe70:e605) has joined #haskell.tw
2014-03-29 19:08:34	-->	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-29 19:37:57	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-29 20:14:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-29 21:17:45	<--	caasih (~caasiHuan@220-133-29-227.HINET-IP.hinet.net) has quit (Quit: leaving)
2014-03-29 22:06:35	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-29 22:18:31	<--	petercommand11 (~peter@128.199.232.63) has quit (Remote host closed the connection)
2014-03-29 22:29:56	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-29 22:54:41	<--	mno2_ (~mno2@42.60.165.194) has quit (Quit: mno2_)
2014-03-29 23:04:08	<--	b4284 (~b4283@125-230-252-249.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-29 23:11:05	-->	b4283 (~b4283@218-164-210-243.dynamic.hinet.net) has joined #haskell.tw
2014-03-29 23:15:36	<--	b4283 (~b4283@218-164-210-243.dynamic.hinet.net) has quit (Ping timeout: 240 seconds)
2014-03-29 23:32:12	-->	b4283 (~b4283@1-175-245-6.dynamic.hinet.net) has joined #haskell.tw
2014-03-30 00:23:28	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-03-30 00:29:38	<--	b4283 (~b4283@1-175-245-6.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-30 00:33:00	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: Lost terminal)
2014-03-30 01:17:45	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-30 01:19:39	<--	haroldwu (~haroldwu@unaffiliated/haroldwu) has quit (Read error: Connection reset by peer)
2014-03-30 01:19:53	<--	a2n (~a2n@unaffiliated/a2n) has quit (Read error: Connection reset by peer)
2014-03-30 01:50:33	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-03-30 04:30:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-30 04:37:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-03-30 04:44:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-30 05:18:23	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-30 05:21:07	<--	godfat (~Adium@1-161-52-243.dynamic.hinet.net) has quit (Ping timeout: 265 seconds)
2014-03-30 07:40:24	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-30 07:54:50	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-30 08:22:20	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-03-30 08:33:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-03-30 08:51:47	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-30 08:56:09	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-30 08:56:17	<--	a2n (~a2n@unaffiliated/a2n) has quit (Client Quit)
2014-03-30 08:56:34	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-30 08:58:43	<--	a2n (~a2n@unaffiliated/a2n) has quit (Client Quit)
2014-03-30 08:58:52	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-30 09:37:23	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2014-03-30 09:45:59	-->	petercommand (~peter@unaffiliated/petercommand) has joined #haskell.tw
2014-03-30 10:02:36	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-30 10:43:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-30 10:57:49	-->	b4283 (~b4283@218-164-210-243.dynamic.hinet.net) has joined #haskell.tw
2014-03-30 11:16:52	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-30 11:17:23	<--	gko (gko@2400:8900::f03c:91ff:fe70:e605) has left #haskell.tw
2014-03-30 11:56:55	<--	a2n (~a2n@unaffiliated/a2n) has quit (Read error: Connection reset by peer)
2014-03-30 12:06:32	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2014-03-30 12:07:05	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-30 12:09:07	<--	petercommand (~peter@unaffiliated/petercommand) has quit (Quit: leaving)
2014-03-30 12:24:16	-->	petercommand (~petercomm@59-127-63-123.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-30 12:24:16	<--	petercommand (~petercomm@59-127-63-123.HINET-IP.hinet.net) has quit (Changing host)
2014-03-30 12:24:16	-->	petercommand (~petercomm@unaffiliated/petercommand) has joined #haskell.tw
2014-03-30 13:01:19	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-30 13:01:49	<--	a2n (~a2n@unaffiliated/a2n) has quit (Client Quit)
2014-03-30 13:02:07	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-30 13:05:15	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-widkocockekbiyea) has quit (Quit: Connection closed for inactivity)
2014-03-30 13:34:28	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-30 13:36:01	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-qsmdyrlxxsbabtip) has joined #haskell.tw
2014-03-30 15:20:38	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-30 19:11:22	<--	mno2_ (~mno2@42.60.165.194) has quit (Quit: mno2_)
2014-03-30 20:03:35	<--	petercommand (~petercomm@unaffiliated/petercommand) has quit (Quit: Nettalk6 - www.ntalk.de)
2014-03-30 20:42:37	-->	petercommand (~petercomm@unaffiliated/petercommand) has joined #haskell.tw
2014-03-30 20:43:50	-->	caasih (~caasiHuan@42.71.24.60) has joined #haskell.tw
2014-03-30 20:57:26	--	irc: disconnected from server
2014-03-30 21:03:18	-->	drbean (~drbean@61-219-91-253.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-30 21:03:18	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-03-30 21:03:18	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-03-30 21:03:18	--	Channel #haskell.tw: 25 nicks (0 ops, 0 voices, 25 normals)
2014-03-30 21:03:44	--	Mode #haskell.tw [+cnt]
2014-03-30 21:03:44	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-03-30 21:29:26	-->	hashcat_ (~hashcat_@39.14.23.66) has joined #haskell.tw
2014-03-30 22:28:05	-->	b4284 (~b4283@118.150.136.200) has joined #haskell.tw
2014-03-30 22:33:37	<--	b4283 (~b4283@218-164-210-243.dynamic.hinet.net) has quit (Quit: Leaving)
2014-03-30 22:57:13	<--	mno2 (~chao-hong@42.60.165.194) has quit (Ping timeout: 265 seconds)
2014-03-30 22:58:13	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-30 23:03:25	-->	mno2 (~mno2@42.60.165.194) has joined #haskell.tw
2014-03-30 23:03:34	-->	mno2_ (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-30 23:11:24	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 265 seconds)
2014-03-30 23:42:02	<--	petercommand (~petercomm@unaffiliated/petercommand) has quit (Quit: Nettalk6 - www.ntalk.de)
2014-03-30 23:53:21	<--	mno2 (~mno2@42.60.165.194) has quit (Quit: mno2)
2014-03-30 23:53:21	--	mno2_ is now known as mno2
2014-03-30 23:53:22	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-03-31 00:13:01	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-31 00:24:13	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-03-31 01:34:16	<--	b4284 (~b4283@118.150.136.200) has quit (Ping timeout: 240 seconds)
2014-03-31 04:34:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-31 04:42:08	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-31 04:48:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-31 04:55:56	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-31 07:05:46	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-31 07:13:38	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-03-31 07:23:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-31 07:40:50	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 246 seconds)
2014-03-31 08:18:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-03-31 08:51:02	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Ping timeout: 268 seconds)
2014-03-31 08:51:12	<--	a2n (~a2n@unaffiliated/a2n) has quit (Ping timeout: 255 seconds)
2014-03-31 09:09:17	-->	shik_ (~shik@icpc.csie.ntu.edu.tw) has joined #haskell.tw
2014-03-31 09:13:10	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-31 09:13:45	<--	shik (~shik@icpc.csie.ntu.edu.tw) has quit (*.net *.split)
2014-03-31 09:13:55	<--	hashcat_ (~hashcat_@39.14.23.66) has quit (*.net *.split)
2014-03-31 09:14:02	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (*.net *.split)
2014-03-31 09:14:04	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (*.net *.split)
2014-03-31 09:16:20	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-03-31 09:21:31	-->	hashcat_ (~hashcat_@39.14.23.66) has joined #haskell.tw
2014-03-31 09:21:33	<--	hashcat_ (~hashcat_@39.14.23.66) has quit (Excess Flood)
2014-03-31 09:21:51	-->	hashcat_ (~hashcat_@39.14.23.66) has joined #haskell.tw
2014-03-31 09:21:53	<--	hashcat_ (~hashcat_@39.14.23.66) has quit (Excess Flood)
2014-03-31 09:22:17	-->	hashcat_ (~hashcat_@39.14.23.66) has joined #haskell.tw
2014-03-31 09:22:18	<--	hashcat_ (~hashcat_@39.14.23.66) has quit (Excess Flood)
2014-03-31 09:22:45	-->	hashcat_ (~hashcat_@39.14.23.66) has joined #haskell.tw
2014-03-31 09:22:47	<--	hashcat_ (~hashcat_@39.14.23.66) has quit (Excess Flood)
2014-03-31 09:54:31	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2014-03-31 09:54:49	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-31 10:20:55	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-31 11:03:25	<--	shik_ (~shik@icpc.csie.ntu.edu.tw) has quit (Remote host closed the connection)
2014-03-31 11:35:39	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-31 12:09:10	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Read error: Connection reset by peer)
2014-03-31 12:10:19	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-31 12:17:57	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-03-31 12:20:01	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-31 12:45:20	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2014-03-31 13:18:34	-->	godfat (~Adium@36-226-131-181.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-31 13:41:41	-->	a2n (~a2n@unaffiliated/a2n) has joined #haskell.tw
2014-03-31 14:15:36	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 245 seconds)
2014-03-31 14:34:26	<--	godfat (~Adium@36-226-131-181.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-03-31 15:23:35	-->	godfat (~Adium@36-226-131-181.dynamic-ip.hinet.net) has joined #haskell.tw
2014-03-31 17:04:53	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 265 seconds)
2014-03-31 18:00:22	-->	petercommand (~petercomm@unaffiliated/petercommand) has joined #haskell.tw
2014-03-31 18:22:50	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-03-31 18:23:22	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-03-31 18:52:32	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-03-31 18:54:00	<--	a2n (~a2n@unaffiliated/a2n) has left #haskell.tw
2014-03-31 19:22:07	<--	godfat (~Adium@36-226-131-181.dynamic-ip.hinet.net) has quit (Ping timeout: 264 seconds)
2014-03-31 19:52:37	-->	godfat (~Adium@1-160-163-205.dynamic.hinet.net) has joined #haskell.tw
2014-03-31 20:08:47	-->	b4283 (~b4283@1-175-61-222.dynamic.hinet.net) has joined #haskell.tw
2014-03-31 20:30:39	-->	haroldwu (~haroldwu@219.85.185.194) has joined #haskell.tw
2014-03-31 20:30:48	<--	haroldwu (~haroldwu@219.85.185.194) has quit (Changing host)
2014-03-31 20:30:49	-->	haroldwu (~haroldwu@unaffiliated/haroldwu) has joined #haskell.tw
2014-03-31 21:04:52	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-03-31 22:06:55	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-03-31 22:40:13	-->	b4284 (~b4283@218-164-116-211.dynamic.hinet.net) has joined #haskell.tw
2014-03-31 22:43:29	<--	b4283 (~b4283@1-175-61-222.dynamic.hinet.net) has quit (Ping timeout: 246 seconds)
2014-03-31 23:32:00	-->	hashcat_ (~hashcat_@27.245.199.54) has joined #haskell.tw
2014-03-31 23:32:01	<--	hashcat_ (~hashcat_@27.245.199.54) has quit (Excess Flood)
2014-03-31 23:32:13	-->	hashcat_ (~hashcat_@27.245.199.54) has joined #haskell.tw
2014-03-31 23:32:14	<--	hashcat_ (~hashcat_@27.245.199.54) has quit (Excess Flood)
2014-03-31 23:32:26	-->	hashcat_ (~hashcat_@27.245.199.54) has joined #haskell.tw
2014-03-31 23:32:29	<--	hashcat_ (~hashcat_@27.245.199.54) has quit (Excess Flood)
2014-03-31 23:59:23	<--	b4284 (~b4283@218-164-116-211.dynamic.hinet.net) has quit (Quit: Leaving)
2014-04-01 00:12:41	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-04-01 01:03:21	-->	hashcat_ (~hashcat_@27.245.199.54) has joined #haskell.tw
2014-04-01 01:15:16	<--	hychen_ (uid12518@gateway/web/irccloud.com/x-qsmdyrlxxsbabtip) has quit (Quit: Connection closed for inactivity)
2014-04-01 01:51:48	<--	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has quit (Ping timeout: 255 seconds)
2014-04-01 02:03:58	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-04-01 03:00:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-01 05:58:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2014-04-01 06:05:44	-->	hychen_ (uid12518@gateway/web/irccloud.com/x-htgdkbaugqhcaplj) has joined #haskell.tw
2014-04-01 06:25:06	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-01 06:45:09	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2014-04-01 08:58:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-01 09:12:54	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-04-01 09:13:31	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2014-04-01 09:47:50	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-01 10:09:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-04-01 10:11:25	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-01 11:29:28	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-01 12:42:09	-->	kanru (~kanru@114-32-24-38.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-01 12:56:59	--	irc: disconnected from server
2014-04-01 21:16:09	-->	drbean (~drbean@113.196.171.151) has joined #haskell.tw
2014-04-01 21:16:09	--	Topic for #haskell.tw is "Haskell 台灣 - Does it run backwards? | 對話紀錄 http://goo.gl/oFPLX | G+ http://goo.gl/t48uq | 入門書 Learn You a Haskell for Great Good! [英] http://goo.gl/XdyKi [中1] http://goo.gl/d5yBQ [中2] http://goo.gl/0TEq6"
2014-04-01 21:16:09	--	Topic set by CindyLinz on Fri, 27 Dec 2013 16:09:31
2014-04-01 21:16:09	--	Channel #haskell.tw: 24 nicks (0 ops, 0 voices, 24 normals)
2014-04-01 21:16:09	***	Buffer Playback...
2014-04-01 21:16:09	--	Notice(sendak.freenode.net): [13:03:42] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
2014-04-01 21:16:09	CindyLinz	[18:50:26] 想要 monad 版的 maybe.. QQ
2014-04-01 21:16:09	CindyLinz	[18:58:08] 直接用就好了 XD
2014-04-01 21:16:09	***	Playback Complete.
2014-04-01 21:16:32	--	Mode #haskell.tw [+cnt]
2014-04-01 21:16:32	--	Channel created on Mon, 11 Jun 2012 11:00:00
2014-04-01 22:06:54	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-04-01 22:25:16	<--	hychen_home (uid12518@gateway/web/irccloud.com/x-htgdkbaugqhcaplj) has quit (Quit: Connection closed for inactivity)
2014-04-01 23:56:16	<--	b4283 (~b4283@218-164-124-145.dynamic.hinet.net) has quit (Quit: Leaving)
2014-04-02 00:19:52	-->	b4283 (~b4283@118.150.136.200) has joined #haskell.tw
2014-04-02 00:23:53	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-02 00:40:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-04-02 01:18:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-02 01:33:29	<--	b4283 (~b4283@118.150.136.200) has quit (Remote host closed the connection)
2014-04-02 01:52:52	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-04-02 04:15:43	-->	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-02 04:17:55	<--	godfat (~Adium@1-160-163-205.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2014-04-02 05:01:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 255 seconds)
2014-04-02 05:06:39	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-02 05:31:39	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2014-04-02 05:47:23	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-02 05:52:43	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2014-04-02 05:54:13	-->	flter_ (~Albert@140.113.249.196) has joined #haskell.tw
2014-04-02 05:54:42	<--	lambdabot (~lambdabot@silicon.int-e.eu) has quit (Ping timeout: 255 seconds)
2014-04-02 05:54:42	<--	flter (~Albert@140.113.249.196) has quit (Ping timeout: 255 seconds)
2014-04-02 05:56:26	-->	lambdabot (~lambdabot@silicon.int-e.eu) has joined #haskell.tw
2014-04-02 06:13:54	-->	hychen_home (uid12518@gateway/web/irccloud.com/x-wmwkegxpcipagyzf) has joined #haskell.tw
2014-04-02 06:17:55	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-02 06:31:30	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2014-04-02 08:22:17	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell.tw
2014-04-02 09:16:00	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-04-02 09:57:35	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-02 10:02:45	--	hychen_home is now known as hychen
2014-04-02 10:19:17	-->	kanru (~kanru@118-163-10-190.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-02 10:41:52	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 268 seconds)
2014-04-02 10:51:08	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-04-02 10:57:08	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-02 12:18:20	<--	mno2 (~mno2@202.63.156.211) has quit (Read error: Connection reset by peer)
2014-04-02 13:12:11	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-04-02 13:45:55	<--	godfat1 (~Adium@220-135-38-235.HINET-IP.hinet.net) has quit (Ping timeout: 240 seconds)
2014-04-02 15:28:31	-->	godfat (~Adium@36-225-52-194.dynamic-ip.hinet.net) has joined #haskell.tw
2014-04-02 16:28:54	--	hychen is now known as hychen_qingdao
2014-04-02 16:28:54	--	hychen_qingdao is now known as hychen_jinan
2014-04-02 17:09:12	-->	caasih (~caasiHuan@42-67-208-195.dynamic-ip.hinet.net) has joined #haskell.tw
2014-04-02 17:13:57	<--	caasih (~caasiHuan@42-67-208-195.dynamic-ip.hinet.net) has quit (Ping timeout: 252 seconds)
2014-04-02 17:15:27	-->	caasih (~caasiHuan@61-224-53-188.dynamic.hinet.net) has joined #haskell.tw
2014-04-02 17:33:30	--	hychen_jinan is now known as hychen_qindaodon
2014-04-02 18:42:54	<--	mno2 (~mno2@202.63.156.211) has quit (Quit: mno2)
2014-04-02 18:57:41	<--	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has quit (Quit: Konversation terminated!)
2014-04-02 19:05:38	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-04-02 19:59:34	<--	caasih (~caasiHuan@61-224-53-188.dynamic.hinet.net) has quit (Quit: leaving)
2014-04-02 20:15:43	<--	godfat (~Adium@36-225-52-194.dynamic-ip.hinet.net) has quit (Quit: Leaving.)
2014-04-02 20:25:36	-->	b4283 (~b4283@218-164-127-46.dynamic.hinet.net) has joined #haskell.tw
2014-04-02 20:58:23	-->	godfat (~Adium@1-160-161-131.dynamic.hinet.net) has joined #haskell.tw
2014-04-02 22:33:34	-->	mno2 (~chao-hong@42.60.165.194) has joined #haskell.tw
2014-04-02 23:10:07	--	hychen_qindaodon is now known as hychen-meet
2014-04-02 23:51:19	-->	mno2_ (~mno2@42.60.165.194) has joined #haskell.tw
2014-04-02 23:59:34	<--	mno2_ (~mno2@42.60.165.194) has quit (Quit: mno2_)
2014-04-03 00:28:52	<--	mno2 (~chao-hong@42.60.165.194) has quit (Quit: mno2)
2014-04-03 00:38:42	<--	b4283 (~b4283@218-164-127-46.dynamic.hinet.net) has quit (Quit: Leaving)
2014-04-03 02:15:13	<--	monochrom (trebla@216.138.220.146) has quit (Quit: NO CARRIER)
2014-04-03 02:19:32	-->	monochrom (trebla@216.138.220.146) has joined #haskell.tw
2014-04-03 04:45:36	<--	weie (~~weie@softbank221078042071.bbtec.net) has quit (Ping timeout: 245 seconds)
2014-04-03 05:56:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2014-04-03 08:05:18	-->	weie (~~weie@softbank221078042071.bbtec.net) has joined #haskell.tw
2014-04-03 09:05:56	-->	mno2 (~mno2@202.63.156.211) has joined #haskell.tw
2014-04-03 09:59:21	-->	b4283 (~b4283@60-249-196-111.HINET-IP.hinet.net) has joined #haskell.tw
2014-04-03 10:46:23	--	hychen-meet is now known as hychen
