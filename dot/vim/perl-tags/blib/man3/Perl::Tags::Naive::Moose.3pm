.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Tags::Naive::Moose 3"
.TH Perl::Tags::Naive::Moose 3 "2013-09-04" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.ie n .SS """get_parsers"""
.el .SS "\f(CWget_parsers\fP"
.IX Subsection "get_parsers"
The following parsers are defined by this module.
.ie n .IP """extends_line""" 4
.el .IP "\f(CWextends_line\fR" 4
.IX Item "extends_line"
Parse the declaration of a 'extends' Moose keyword, returning a Perl::Tags::Tag::Extends if found.
.ie n .IP """with_line""" 4
.el .IP "\f(CWwith_line\fR" 4
.IX Item "with_line"
Parse the declaration of a 'with' Moose keyword, returning a Perl::Tags::Tag::With tag if found.
.ie n .IP """has_line""" 4
.el .IP "\f(CWhas_line\fR" 4
.IX Item "has_line"
Parse the declaration of a 'has' Moose keyword, returning a Perl::Tags::Tag::Has if found.
.ie n .IP """around_line""" 4
.el .IP "\f(CWaround_line\fR" 4
.IX Item "around_line"
Parse the declaration of a 'around' Moose keyword, returning a Perl::Tags::Tag::Around tag if found.
.ie n .IP """before_line""" 4
.el .IP "\f(CWbefore_line\fR" 4
.IX Item "before_line"
Parse the declaration of a 'before' Moose keyword, returning a Perl::Tags::Tag::Before tag if found.
.ie n .IP """after_line""" 4
.el .IP "\f(CWafter_line\fR" 4
.IX Item "after_line"
Parse the declaration of a 'after' Moose keyword, returning a Perl::Tags::Tag::After tag if found.
.ie n .IP """override_line""" 4
.el .IP "\f(CWoverride_line\fR" 4
.IX Item "override_line"
Parse the declaration of a 'override' Moose keyword, returning a Perl::Tags::Tag::Override tag if found.
.ie n .IP """augment_line""" 4
.el .IP "\f(CWaugment_line\fR" 4
.IX Item "augment_line"
Parse the declaration of a 'augment' Moose keyword, returning a Perl::Tags::Tag::Augment tag if found.
.ie n .IP """class_line""" 4
.el .IP "\f(CWclass_line\fR" 4
.IX Item "class_line"
Parse the declaration of a 'class' Moose keyword, returning a Perl::Tags::Tag::Class tag if found.
.ie n .IP """method_line""" 4
.el .IP "\f(CWmethod_line\fR" 4
.IX Item "method_line"
Parse the declaration of a 'method' Moose keyword, returning a Perl::Tags::Tag::Method tag if found.
.ie n .IP """role_line""" 4
.el .IP "\f(CWrole_line\fR" 4
.IX Item "role_line"
Parse the declaration of a 'role' Moose keyword, returning a Perl::Tags::Tag::Role tag if found.
.ie n .SH """Perl::Tags::Tag::Extends"""
.el .SH "\f(CWPerl::Tags::Tag::Extends\fP"
.IX Header "Perl::Tags::Tag::Extends"
.ie n .SS """type"": Extends"
.el .SS "\f(CWtype\fP: Extends"
.IX Subsection "type: Extends"
.ie n .SH """Perl::Tags::Tag::With"""
.el .SH "\f(CWPerl::Tags::Tag::With\fP"
.IX Header "Perl::Tags::Tag::With"
.ie n .SS """type"": With"
.el .SS "\f(CWtype\fP: With"
.IX Subsection "type: With"
.ie n .SH """Perl::Tags::Tag::Has"""
.el .SH "\f(CWPerl::Tags::Tag::Has\fP"
.IX Header "Perl::Tags::Tag::Has"
.ie n .SS """type"": Has"
.el .SS "\f(CWtype\fP: Has"
.IX Subsection "type: Has"
.ie n .SH """Perl::Tags::Tag::Around"""
.el .SH "\f(CWPerl::Tags::Tag::Around\fP"
.IX Header "Perl::Tags::Tag::Around"
.ie n .SS """type"": Around"
.el .SS "\f(CWtype\fP: Around"
.IX Subsection "type: Around"
.ie n .SH """Perl::Tags::Tag::Before"""
.el .SH "\f(CWPerl::Tags::Tag::Before\fP"
.IX Header "Perl::Tags::Tag::Before"
.ie n .SS """type"": Before"
.el .SS "\f(CWtype\fP: Before"
.IX Subsection "type: Before"
.ie n .SH """Perl::Tags::Tag::After"""
.el .SH "\f(CWPerl::Tags::Tag::After\fP"
.IX Header "Perl::Tags::Tag::After"
.ie n .SS """type"": After"
.el .SS "\f(CWtype\fP: After"
.IX Subsection "type: After"
.ie n .SH """Perl::Tags::Tag::Override"""
.el .SH "\f(CWPerl::Tags::Tag::Override\fP"
.IX Header "Perl::Tags::Tag::Override"
.ie n .SS """type"": Override"
.el .SS "\f(CWtype\fP: Override"
.IX Subsection "type: Override"
.ie n .SH """Perl::Tags::Tag::Augment"""
.el .SH "\f(CWPerl::Tags::Tag::Augment\fP"
.IX Header "Perl::Tags::Tag::Augment"
.ie n .SS """type"": Augment"
.el .SS "\f(CWtype\fP: Augment"
.IX Subsection "type: Augment"
.ie n .SH """Perl::Tags::Tag::Class"""
.el .SH "\f(CWPerl::Tags::Tag::Class\fP"
.IX Header "Perl::Tags::Tag::Class"
.ie n .SS """type"": Class"
.el .SS "\f(CWtype\fP: Class"
.IX Subsection "type: Class"
.ie n .SH """Perl::Tags::Tag::Method"""
.el .SH "\f(CWPerl::Tags::Tag::Method\fP"
.IX Header "Perl::Tags::Tag::Method"
.ie n .SS """type"": Method"
.el .SS "\f(CWtype\fP: Method"
.IX Subsection "type: Method"
.ie n .SH """Perl::Tags::Tag::Role"""
.el .SH "\f(CWPerl::Tags::Tag::Role\fP"
.IX Header "Perl::Tags::Tag::Role"
.ie n .SS """type"": Role"
.el .SS "\f(CWtype\fP: Role"
.IX Subsection "type: Role"
.SH "AUTHOR and LICENSE"
.IX Header "AUTHOR and LICENSE"
.Vb 2
\&    dr bean \- drbean at sign cpan a dot org
\&    osfameron (2006) \- osfameron@gmail.com
.Ve
.PP
For support, try emailing me or grabbing me on irc #london.pm on irc.perl.org
.PP
This was originally ripped off pltags.pl, as distributed with vim
and available from <http://www.mscha.com/mscha.html?pltags#tools>
Version 2.3, 28 February 2002
Written by Michael Schaap <pltags@mscha.com>.
.PP
This is licensed under the same terms as Perl itself.  (Or as Vim if you +prefer).
